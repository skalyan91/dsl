strict digraph deps {
  node [colorscheme=set312, style=filled];

   subgraph cluster_5 {
     label = "app/Main.hs";
     "writeBSfile" [label= "writeBSfile", color=5];
     "snakeScrub" [label= "snakeScrub", color=5];
     "now8601" [label= "now8601", color=5];
     "mywritefileDMN" [label= "mywritefileDMN", color=5];
     "mywritefile2" [label= "mywritefile2", color=5];
     "mywritefile" [label= "mywritefile", color=5];
     "myTraceM" [label= "myTraceM", color=5];
     "myMkLink" [label= "myMkLink", color=5];
     "main" [label= "main", color=5];
     "commentIfError" [label= "commentIfError", color=5];
   }

   subgraph cluster_1 {
     label = "src/LS/NLP/NL4.hs";
     "composOpMonoid" [label= "composOpMonoid", color=1];
     "composOpM_" [label= "composOpM_", color=1];
     "composOpMPlus" [label= "composOpMPlus", color=1];
     "composOpM" [label= "composOpM", color=1];
     "composOpFold" [label= "composOpFold", color=1];
     "composOp" [label= "composOp", color=1];
   }

   subgraph cluster_2 {
     label = "src/LS/NLP/NL4Transformations.hs";
     "squeezeTrees" [label= "squeezeTrees", color=2];
     "referSubj" [label= "referSubj", color=2];
     "pastTense" [label= "pastTense", color=2];
     "mergeConj" [label= "mergeConj", color=2];
     "mapBSLabel" [label= "mapBSLabel", color=2];
     "isMalay" [label= "isMalay", color=2];
     "isChinese" [label= "isChinese", color=2];
     "introduceSubj" [label= "introduceSubj", color=2];
     "flipPolarity" [label= "flipPolarity", color=2];
     "bsWho2gfWho" [label= "bsWho2gfWho", color=2];
     "bsNeg2textNeg" [label= "bsNeg2textNeg", color=2];
     "bsConstraint2gfConstraint" [label= "bsConstraint2gfConstraint", color=2];
     "bsCond2gfCond" [label= "bsCond2gfCond", color=2];
     "bs2gf" [label= "bs2gf", color=2];
     "applyLabel" [label= "applyLabel", color=2];
     "aggregateBoolStruct" [label= "aggregateBoolStruct", color=2];
   }

   subgraph cluster_3 {
     label = "src/LS/NLP/NLG.hs";
     "typeError" [label= "typeError", color=3];
     "tString" [label= "tString", color=3];
     "ruleQuestions" [label= "ruleQuestions", color=3];
     "ruleQnTrees" [label= "ruleQnTrees", color=3];
     "rmBIND" [label= "rmBIND", color=3];
     "printLangs" [label= "printLangs", color=3];
     "parseWhoBS" [label= "parseWhoBS", color=3];
     "parseWho" [label= "parseWho", color=3];
     "parseUpon" [label= "parseUpon", color=3];
     "parseTimeUnit" [label= "parseTimeUnit", color=3];
     "parseTemporal" [label= "parseTemporal", color=3];
     "parseTComparison" [label= "parseTComparison", color=3];
     "parseSubj" [label= "parseSubj", color=3];
     "parsePrePost" [label= "parsePrePost", color=3];
     "parseDeontic" [label= "parseDeontic", color=3];
     "parseDate" [label= "parseDate", color=3];
     "parseConstraintBS" [label= "parseConstraintBS", color=3];
     "parseConstraint" [label= "parseConstraint", color=3];
     "parseCondBS" [label= "parseCondBS", color=3];
     "parseCond" [label= "parseCond", color=3];
     "parseAnyNoRecover" [label= "parseAnyNoRecover", color=3];
     "parseAny" [label= "parseAny", color=3];
     "parseAction" [label= "parseAction", color=3];
     "nlg\'" [label= "nlg\'", color=3];
     "nlgQuestion" [label= "nlgQuestion", color=3];
     "nlg" [label= "nlg", color=3];
     "myNLGEnv" [label= "myNLGEnv", color=3];
     "mkWhoText" [label= "mkWhoText", color=3];
     "mkUponText" [label= "mkUponText", color=3];
     "mkConstraintText" [label= "mkConstraintText", color=3];
     "mkCondText" [label= "mkCondText", color=3];
     "linBStext" [label= "linBStext", color=3];
     "langEng" [label= "langEng", color=3];
     "gfPath" [label= "gfPath", color=3];
     "getWhen" [label= "getWhen", color=3];
     "getLevel" [label= "getLevel", color=3];
     "getLang" [label= "getLang", color=3];
     "getIf" [label= "getIf", color=3];
     "getExpandedRuleNames" [label= "getExpandedRuleNames", color=3];
     "expandRulesForNLG" [label= "expandRulesForNLG", color=3];
     "expandRuleForNLG" [label= "expandRuleForNLG", color=3];
     "expandPT" [label= "expandPT", color=3];
     "debugNesting" [label= "debugNesting", color=3];
     "allLangs" [label= "allLangs", color=3];
   }

   subgraph cluster_4 {
     label = "src/LS/XPile/Purescript.hs";
     "translate2PS" [label= "translate2PS", color=4];
     "toTuple" [label= "toTuple", color=4];
     "textMT" [label= "textMT", color=4];
     "namesAndStruct" [label= "namesAndStruct", color=4];
     "namesAndQ" [label= "namesAndQ", color=4];
     "labelQs" [label= "labelQs", color=4];
     "justStatements" [label= "justStatements", color=4];
     "justQuestions" [label= "justQuestions", color=4];
     "interviewRulesRHS2topBit" [label= "interviewRulesRHS2topBit", color=4];
     "fixNot" [label= "fixNot", color=4];
     "combine" [label= "combine", color=4];
     "biggestS" [label= "biggestS", color=4];
     "biggestQ" [label= "biggestQ", color=4];
     "asPurescript" [label= "asPurescript", color=4];
   }

"aggregateBoolStruct" -> "squeezeTrees";
"allLangs" -> "gfPath";
"asPurescript" -> "asPurescript";
"asPurescript" -> "combine";
"asPurescript" -> "fixNot";
"asPurescript" -> "justQuestions";
"asPurescript" -> "namesAndQ";
"asPurescript" -> "namesAndStruct";
"asPurescript" -> "toTuple";
"biggestQ" -> "combine";
"biggestQ" -> "fixNot";
"biggestQ" -> "justQuestions";
"biggestQ" -> "namesAndQ";
"biggestQ" -> "namesAndStruct";
"biggestS" -> "combine";
"biggestS" -> "fixNot";
"biggestS" -> "justStatements";
"biggestS" -> "namesAndQ";
"biggestS" -> "namesAndStruct";
"bs2gf" -> "bs2gf";
"bs2gf" -> "bsNeg2textNeg";
"bs2gf" -> "mergeConj";
"bsCond2gfCond" -> "bs2gf";
"bsConstraint2gfConstraint" -> "bs2gf";
"bsNeg2textNeg" -> "bsNeg2textNeg";
"bsNeg2textNeg" -> "flipPolarity";
"bsWho2gfWho" -> "bs2gf";
"combine" -> "combine";
"composOp" -> "composOpM";
"composOpMPlus" -> "composOpFold";
"composOpM_" -> "composOpFold";
"composOpMonoid" -> "composOpFold";
"debugNesting" -> "isChinese";
"debugNesting" -> "isMalay";
"expandRuleForNLG" -> "expandPT";
"expandRuleForNLG" -> "expandRuleForNLG";
"expandRulesForNLG" -> "expandRuleForNLG";
"expandRulesForNLG" -> "getExpandedRuleNames";
"flipPolarity" -> "composOp";
"flipPolarity" -> "flipPolarity";
"getIf" -> "isChinese";
"getIf" -> "isMalay";
"getWhen" -> "isChinese";
"getWhen" -> "isMalay";
"interviewRulesRHS2topBit" -> "allLangs";
"interviewRulesRHS2topBit" -> "expandRulesForNLG";
"interviewRulesRHS2topBit" -> "langEng";
"interviewRulesRHS2topBit" -> "main";
"interviewRulesRHS2topBit" -> "myNLGEnv";
"interviewRulesRHS2topBit" -> "nlg";
"interviewRulesRHS2topBit" -> "printLangs";
"introduceSubj" -> "composOp";
"introduceSubj" -> "introduceSubj";
"langEng" -> "getLang";
"langEng" -> "gfPath";
"linBStext" -> "mapBSLabel";
"main" -> "allLangs";
"main" -> "commentIfError";
"main" -> "expandRulesForNLG";
"main" -> "langEng";
"main" -> "myMkLink";
"main" -> "myNLGEnv";
"main" -> "mywritefile";
"main" -> "mywritefile2";
"main" -> "mywritefileDMN";
"main" -> "nlg";
"main" -> "now8601";
"main" -> "printLangs";
"main" -> "snakeScrub";
"main" -> "translate2PS";
"mapBSLabel" -> "applyLabel";
"mapBSLabel" -> "mapBSLabel";
"mergeConj" -> "composOp";
"mergeConj" -> "mergeConj";
"mergeConj" -> "squeezeTrees";
"mkCondText" -> "aggregateBoolStruct";
"mkCondText" -> "mapBSLabel";
"mkCondText" -> "parseCondBS";
"mkConstraintText" -> "aggregateBoolStruct";
"mkConstraintText" -> "mapBSLabel";
"mkConstraintText" -> "parseConstraintBS";
"mkUponText" -> "parseUpon";
"mkWhoText" -> "aggregateBoolStruct";
"mkWhoText" -> "mapBSLabel";
"mkWhoText" -> "parseWhoBS";
"myNLGEnv" -> "gfPath";
"myNLGEnv" -> "langEng";
"myNLGEnv" -> "rmBIND";
"mywritefile" -> "myMkLink";
"mywritefile2" -> "myMkLink";
"mywritefileDMN" -> "myMkLink";
"namesAndQ" -> "expandRulesForNLG";
"namesAndQ" -> "ruleQuestions";
"nlg" -> "nlg\'";
"nlgQuestion" -> "ruleQuestions";
"nlg\'" -> "bsCond2gfCond";
"nlg\'" -> "bsConstraint2gfConstraint";
"nlg\'" -> "bsWho2gfWho";
"nlg\'" -> "debugNesting";
"nlg\'" -> "getIf";
"nlg\'" -> "getLevel";
"nlg\'" -> "getWhen";
"nlg\'" -> "introduceSubj";
"nlg\'" -> "nlg\'";
"nlg\'" -> "parseAction";
"nlg\'" -> "parseCondBS";
"nlg\'" -> "parseConstraint";
"nlg\'" -> "parseConstraintBS";
"nlg\'" -> "parseDeontic";
"nlg\'" -> "parseSubj";
"nlg\'" -> "parseTemporal";
"nlg\'" -> "parseUpon";
"nlg\'" -> "parseWhoBS";
"nlg\'" -> "pastTense";
"parseAction" -> "parseAny";
"parseAny" -> "typeError";
"parseAnyNoRecover" -> "typeError";
"parseCond" -> "parseAny";
"parseCond" -> "parseCond";
"parseCond" -> "parseDate";
"parseCond" -> "parseTComparison";
"parseCondBS" -> "mapBSLabel";
"parseCondBS" -> "parseCond";
"parseCondBS" -> "parsePrePost";
"parseConstraint" -> "flipPolarity";
"parseConstraint" -> "parseAny";
"parseConstraint" -> "parseAnyNoRecover";
"parseConstraint" -> "tString";
"parseConstraintBS" -> "mapBSLabel";
"parseConstraintBS" -> "parseConstraint";
"parseConstraintBS" -> "parsePrePost";
"parsePrePost" -> "parseAny";
"parseSubj" -> "parseAny";
"parseTemporal" -> "parseTComparison";
"parseTemporal" -> "parseTimeUnit";
"parseTimeUnit" -> "tString";
"parseUpon" -> "parseAny";
"parseWho" -> "parseAny";
"parseWhoBS" -> "mapBSLabel";
"parseWhoBS" -> "parsePrePost";
"parseWhoBS" -> "parseWho";
"pastTense" -> "composOp";
"pastTense" -> "pastTense";
"referSubj" -> "composOp";
"referSubj" -> "referSubj";
"ruleQnTrees" -> "mkCondText";
"ruleQnTrees" -> "mkConstraintText";
"ruleQnTrees" -> "mkUponText";
"ruleQnTrees" -> "mkWhoText";
"ruleQnTrees" -> "parseSubj";
"ruleQnTrees" -> "referSubj";
"ruleQuestions" -> "linBStext";
"ruleQuestions" -> "ruleQnTrees";
"translate2PS" -> "asPurescript";
"translate2PS" -> "biggestQ";
"translate2PS" -> "interviewRulesRHS2topBit";
"writeBSfile" -> "myMkLink";
}
