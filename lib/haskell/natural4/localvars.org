#+TITLE: branch notes regarding localvars

* Goals

** within a ~DECIDE~ rule, we want to approximate the affordances of haskell function definitions

Every DECIDE rule can be thought of as a function.

In the simple case, a DECIDE rule is a propositional Horn Clause which reads a global environment and returns a Boolean.

In the complex case, a DECIDE rule is a first-order Horn Clause which reads a dictionary of input arguments and returns a dictionary of output return values.

Let's unpack that.

*** Translational semantics with Prolog and Haskell

**** Form 1: Simple Case: Globals Only
Propositionally, the most naive way to write something in Prolog is in terms of facts:

#+begin_src prolog
  qualifies :- walks, (eats ; drinks).
#+end_src

The values here are Boolean truth values. In L4:

#+begin_src l4
  DECIDE qualifies
    WHEN walks
     AND eats
      OR drinks
#+end_src

The logic is readable, but the domain of discourse is rather limited -- everything feels global, and we need to have the values of ~walks~ and ~eats~ and ~drinks~ known at compile-time, so we could statically compute ~qualifies~ so what's the point of even having a program?

Let's upgrade from propositional logic to predicate logic. Now we can talk a little more intelligently, about things.

**** Form 2.A: Simple Case: As Fact Predicates

We take the first step from propositional logic toward predicate logic:

#+begin_src prolog
  qualifies(aristotle) :- walks(aristotle), ( eats(aristotle) ; drinks(aristotle) ).
#+end_src

Aristotle qualifies if he walks and eats or drinks.

#+begin_src l4
  DECIDE qualifies aristotle
    WHEN walks     aristotle
     AND eats      aristotle
      OR drinks    aristotle
#+end_src

In Prolog, instead of having unadorned facts, we now have facts
/about/ someone -- about a particular Greek person who first got
people talking this way.

#+begin_src prolog
  walks(aristotle).
  eats(aristotle).
  drinks(aristotle).
#+end_src

Note that Prolog uses lowercase for terms, and uppercase for
variables. Above, ~aristotle~ is not a variable. If it were, it would
be ~Aristotle~.

But that's a bit hard-coded, isn't it? We're stuck with talking about
a single person. Which may be enough, in the constrained environment
of a particular contract or even a particular law which deals with a
single hypothetically regarded person -- "one may".

But that doesn't buy us much beyond the first form.

More conventionally we would expect the argument to the above
predicates to be a /variable/.

**** Form 2.B: As Quantified Predicates

When written as a variable we can run the logic not just over a particular ~aristotle~ but over any variable ~Person~.

#+begin_src prolog
  qualifies(Person) :- walks(Person), ( eats(Person) ; drinks(Person) ).
#+end_src

This is universal quantification:

#+begin_quote
\forall Person. qualifies(Person) \Leftarrow walks(Person) \land ( eats(Person) \lor drinks(Person) )
#+end_quote

or more familiarly

#+begin_quote
\forall Person. walks(Person) \land ( eats(Person) \lor drinks(Person) ) \Rightarrow qualifies(Person)
#+end_quote

Now we can talk about multiple Persons. We could substitute Aristotle.
We could substitute Frege. We could substitute you or me.

In L4 we treat the universally quantified Person as an input argument by adding a ~GIVEN~, and we compact the variable:

#+begin_src l4
   GIVEN           P IS A Person
  DECIDE qualifies P
    WHEN walks     P
     AND eats      P
      OR drinks    P
#+end_src

We have not yet settled the question of whether we take license as a CNL to rearrange the terms:

#+begin_src l4
   GIVEN P IS A Person
  DECIDE P qualifies
    WHEN P walks
     AND P eats
      OR P drinks
#+end_src

I think that reads nicely. It gets us closer to our goal of isomorphism.

**** Form 3: The inputs are a dictionary

It doesn't matter if we use the letter ~P~ or ~Q~ or even ~X~ or ~Y~.

How do we quantify over multiple inputs? Maybe we want to say \forall X : Person \forall Y : Person ....

#+begin_src l4
   GIVEN X  IS A Person
          Y IS A Person
  DECIDE X  qualifies
    WHEN X  walks
     AND  Y eats
      OR  Y drinks
     AND X  marriedTo Y
#+end_src

Up to now, everything is Boolean. You might say we are dealing with Boolean attributes of a Person object. Or we are simply dealing with Boolean predicates upon a Person object.

But what if we want to deal with real values? Like, maybe the Person needs to pay $200.

**** Form 4: The outputs are a dictionary

Suppose we want a function that takes two input Booleans, ~x~ and ~y~; thinks about them; and -- if certain requirements are met -- returns two values, saying that the ~qualification~ is ~true~ and the ~price~ is ~200~.

In Prolog, you could connect all the variables in a Horn clause, and wrap the output values in a dictionary:

#+begin_src prolog
  pq( X, Y, _{price:200, qualification:true} ) :- walks(X), ( eats(Y) ; drinks(Y) ), married(X,Y).
#+end_src

In Python, you could return a dictionary:

#+begin_src python :tangle tmp/pq.py
  def qualifies(x, y):
    if x.walks() and (y.eats() or y.drinks()) and x.marriedTo(y):
      return { 'qualification': True, 'price': 200 }
#+end_src

In Javascript, you could return a dictionary:

#+begin_src typescript :tangle tmp/pq.ts
  function qualifies(x : Person, y : Person) {
    if (x.walks && (x.eats || x.drinks) && married(x,y))
        return { 'qualification': true, 'price': 200 }
  }
#+end_src

How would we say it in L4?

#+begin_src l4
       ยง   qualifies
   GIVEN X IS A Person
         Y IS A Person
  GIVETH P IS A Price
         Q IS A Qualification
  DECIDE P IS 200
         Q IS True
    WHEN X walks
     AND Y eats
      OR Y drinks
     AND X marriedTo Y
#+end_src

L4 distinguishes input parameters from output attributes using ~GIVEN~ vs ~GIVETH~.

In English:

#+begin_quote
The price shall be $200, and the qualification shall be True, in the case of any two married persons, one of whom walks and the other eats or drinks.
#+end_quote

In Haskell, a variable binding is usually typed on one line, and given a value on another.

#+begin_src haskell
  qualifies :: (Person, Person) -> Maybe (Price, Qualification)
  qualifies (x,y) | walks(x) && (eats(y) || drinks(y)) && marriedTo(x,y) = Just (200, True)
  qualifies _ = Nothing
#+end_src

Note: In the Haskell example, we have chosen to syntactically uncurry
the input arguments to match the style of the returned output, and to
offer some familiarity to programmers coming from languages where
function invocation looks like ~f(x,y)~ not Haskell's ~f x y~.

(We wrap the return in a ~Maybe~ and add a default ~Nothing~ return to preserve totality.)

*** The Interpreter knows about local variables

In the above example, the local variables are
- X
- Y
- P
- Q

Given a Hornlike clause, the Interpreter distinguishes the input from the output variables.

Some logic programming languages may disregard the distinction between input and output variables, and treat them all as local variables that are arguments to the predicate in the head of the Horn clause. Other logic languages may annotate the arguments with [[https://www.swi-prolog.org/pldoc/man?section=preddesc][input or output modes]].

**** API

~Interpreter.ruleLocals~ returns a list of the input and output arguments in a rule.

~Interpreter.ruleLocalsIn~ returns a list of the input arguments in a rule, identified by GIVEN.

~Interpreter.ruleLocalsOut~ returns a list of the output arguments in a rule, identified by GIVETH.

**** Examples

See the Typescript transpiler.

*** Translational semantics: DMN

[TODO] we repeat the above forms using DMN.

** Syntax Definition
*** typed input parameters: ~GIVEN~

a typed input dictionary, similar to Python

 #+begin_src text
    GIVEN p IS A Person
          d IS A Date
   DECIDE p Qualifies
     WHEN p walks
      AND p eats
       OR p drinks
   UNLESS d IS quiet holiday
 #+end_src

Note that the ~p~ and ~d~ bits have to line up vertically in the same column.
 
*** typed output parameters: ~GIVETH~

a typed output dictionary, similar to Python, same internal syntax as ~GIVEN~

From Form 4 above:

#+begin_src text
       ยง waddington 1
   GIVEN p IS A  Person
         d IS A  Date
  GIVETH a IS AN Action
         s IS A  Title
  DECIDE a IS sing
         s IS Happy Birthday
    WHEN p walks
     AND p eats
      OR p drinks
  UNLESS d IS quiet holiday
#+end_src

Natural language text: 
#+begin_example
For the purposes of this section,
the Action and the Title
are "sing" and "Happy Birthday" respectively
when, given a person and a date,
the person walks and eats or drinks
unless it is a quiet holiday on the given date.
#+end_example

Haskell directly:
#+begin_src haskell
  waddington_1 :: Person -> Date -> Maybe (Action, Title)
  waddington_1 p d
    | not (quietHoliday d) &&
      walks p && (eats p || drinks p) = Just (sing, "Happy Birthday")
    | otherwise = Nothing
#+end_src
 
In the above example we render the semantics directly in Haskell.

In practice, Haskell is the host language for our DSL, and we would
lift the above into a DSL environment where the interpreter would
perform evaluation -- something like this.

#+begin_src haskell
  type VarName = String
  type VarType = String
  type VarVal  = String
  type RuleName = String
  type SymbolTable = Map.Map VarName (VarType, VarVal)

  sub :: [Varname] -> Reader SymbolTable a
  sub ks = local $ filterWithKey (`elem` ks) rm

  (-:) :: RuleName -> VarName -> Reader SymbolTable Boolean
  (-:) rn vn = let withReader ... (sub [vn] $ evald rn)
               in fromMaybe ("Boolean", False) (out Map.! "RETURN") -- i got your negation as failure right here

  evald :: RuleName -> Reader SymbolTable (Maybe SymbolTable) -- in future update the return value to Maybe [RelationalPredicate]
  evald "waddington 1" =
    | (&&)
      <$> fmap not ("quiet holiday" -: "d")
      <*> ( (&&)
            <$> "walks" -: "p"
            <*> ( (||)
                  <$> "eats" -: "p"
                  <*> "drinks" -: "p" )
          ) = return $ pure (fromList [("a","sing"), ("s","Happy Birthday")])
    | otherwise = return Nothing
#+end_src


** we want to add better support for local vs global variables

Now that we have talked about function input and outputs, how does that line up with local and global variables?

*** convention: variables declared in ~GIVEN~ and ~GIVETH~ are local to the ~DECIDE~ in which they occur

*** what about upper and lower case?

|         | upper case | lower case |
|---------+------------+------------|
| Haskell | type       | function   |
| Prolog  | variable   | term       |
| L4      | ?          | ?          |


*** in a ruleset, top-level definitions are global

Consider Contract As Automaton: the L4 ruleset is a particular instance of a template. The declared and defined type definitions and instance definitions are global to that tab, but that just means they're local to that module.

*** within a rule, what do we do about unqualified variables

**** can we uniquely ~with~ them to an in-scope variable?

See Pascal's treatment of ~WITH~, which is different from Python's

https://www.freepascal.org/docs-html/ref/refsu62.html

***** we might need advanced CNL management

to allow trees that look like this

 #+begin_src text
    GIVEN p IS A Person
          d IS A Date
   DECIDE p mustSing
     WHEN p       walks
             AND  eats
              OR  drinks
   UNLESS d IS quiet holiday
 #+end_src





 

* Other things to deal with

** ~let~ in the body of the function

** ~where~ at the end of a function
