* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/megaparsing MEANS/bob-head-1/")

* Tokens
( "Bob's your uncle" ) MEANS
    ( NOT
        ( "Bob is estranged" OR ( "Bob is dead" ) )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                              :1_2:GoDeeper:
*** / pRegRule                                                                                                         :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

pRuleLabel> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                 :1_2:GoDeeper:
***** / someDeep                                                                                                     :1_2:GoDeeper:
****** / someDeep first part calls base directly                                                                    :1_2:GoDeeper:
someDeep first part calls base directly> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected (
someDeep first part calls base directly> expecting Other text

someDeep> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected (
someDeep> expecting Other text

pRegRuleSugary> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected (
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                 :1_2:GoDeeper:
***** / permutationsReg                                                                                              :1_2:GoDeeper:
****** / regulative permutation with deontic-temporal                                                               :1_2:GoDeeper:
******* / WHERE                                                                                                    :1_2:GoDeeper:
WHERE> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected (
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                               :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting HAVING

preambleParamText:[Having]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                                :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

preambleParamText:[Given]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                 :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

preambleParamText:[Upon]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                             :1_2:GoDeeper:
preambleBoolStructR [Unless]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                            :1_2:GoDeeper:
preambleBoolStructR [When,If]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                      :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting MAY, MUST, or SHANT

pDT> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected (
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                              :1_2:GoDeeper:
pActor [Every,Party,TokAll]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=0:
pActor [Every,Party,TokAll]> unexpected (
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* / pDoAction/Do                                                                                             :1_2:GoDeeper:
pDoAction/Do> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=0:
pDoAction/Do> unexpected (
pDoAction/Do> expecting DO

regulative permutation with deontic-temporal> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=0:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** / regulative permutation with deontic-action                                                                 :1_2:GoDeeper:
******* / WHERE                                                                                                    :1_2:GoDeeper:
WHERE> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected (
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                               :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting HAVING

preambleParamText:[Having]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                                :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

preambleParamText:[Given]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                 :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

preambleParamText:[Upon]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                             :1_2:GoDeeper:
preambleBoolStructR [Unless]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                            :1_2:GoDeeper:
preambleBoolStructR [When,If]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                     :1_2:GoDeeper:
pTemporal/eventually> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected (
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                   :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected (
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                        :1_2:GoDeeper:
pTemporal/vaguely> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected (
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                              :1_2:GoDeeper:
pActor [Every,Party,TokAll]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=0:
pActor [Every,Party,TokAll]> unexpected (
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* / pDA                                                                                                      :1_2:GoDeeper:
pDA> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=0:
pDA> unexpected (
pDA> expecting MAY, MUST, or SHANT

regulative permutation with deontic-action> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=0:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

permutationsReg> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=0:
permutationsReg> unexpected (
permutationsReg> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

pRegRuleNormal> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=0:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

pRegRule> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=0:
pRegRule> unexpected (
pRegRule> expecting AFTER, ALL, BEFORE, BREACH, BY, DO, EVENTUALLY, EVERY, FULFILLED, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

*** / pTypeDefinition                                                                                                  :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

pRuleLabel> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** / pHornlike/uponLimb                                                                                             :1_2:GoDeeper:
***** / preambleParamText:[Upon]                                                                                     :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

preambleParamText:[Upon]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected (
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                            :1_2:GoDeeper:
***** / preambleParamText:[Given]                                                                                    :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

preambleParamText:[Given]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected (
pHornlike/givenLimb> expecting GIVEN

pTypeDefinition> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected (
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** / pConstitutiveRule                                                                                                :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

pRuleLabel> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** / calling myindented pNameParens                                                                                 :1_2:GoDeeper:
***** / manyIndentation/leaf?                                                                                        :1_2:GoDeeper:
****** / pMultiTermAka                                                                                              :1_2:GoDeeper:
******* / pAKA                                                                                                     :1_2:GoDeeper:
******** / slAKA                                                                                                  :1_2:GoDeeper:
********* / $*|                                                                                                  :1_2:GoDeeper:
********** / slAKA base                                                                                         :1_2:GoDeeper:
*********** / slMultiTerm                                                                                      :1_2:GoDeeper:
************ / someSL                                                                                         :1_2:GoDeeper:
************* / pNumAsText                                                                                   :1_2:GoDeeper:
pNumAsText> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

pAKA> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected (
pAKA> expecting other text or number

pMultiTermAka> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected (
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                              :1_2:GoDeeper:
****** / someIndentation                                                                                            :1_2:GoDeeper:
******* / myindented: consuming GoDeeper                                                                           :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******* \ myindented: consuming GoDeeper has returned GoDeeper                                                      :1_2:Other "Bob':
******* / manyIndentation/leaf?                                                                                     :1_2:Other "Bob':
******** / pMultiTermAka                                                                                           :1_2:Other "Bob':
********* / pAKA                                                                                                  :1_2:Other "Bob':
********** / slAKA                                                                                               :1_2:Other "Bob':
*********** / $*|                                                                                               :1_2:Other "Bob':
************ / slAKA base                                                                                      :1_2:Other "Bob':
************* / slMultiTerm                                                                                   :1_2:Other "Bob':
************** / someSL                                                                                      :1_2:Other "Bob':
someSL> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
someSL> MATCH (COK): "Bob's your uncle"
someSL> VALUE: ((["Bob's your uncle"],0),[])

************** \ someSL has returned (["Bob's your uncle"],0)                                                 :2_2:UnDeeper:
slMultiTerm> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slMultiTerm> MATCH (COK): "Bob's your uncle"
slMultiTerm> VALUE: ((["Bob's your uncle"],0),[])

************* \ slMultiTerm has returned (["Bob's your uncle"],0)                                              :2_2:UnDeeper:
slAKA base> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slAKA base> MATCH (COK): "Bob's your uncle"
slAKA base> VALUE: ((["Bob's your uncle"],0),[])

************ \ slAKA base has returned (["Bob's your uncle"],0)                                                 :2_2:UnDeeper:
$*|> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
$*|> MATCH (COK): "Bob's your uncle"
$*|> VALUE: ((["Bob's your uncle"],0),[])

*********** \ $*| has returned (["Bob's your uncle"],0)                                                          :2_2:UnDeeper:
*********** / |>>/recurse                                                                                        :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********** / |>>/base                                                                                           :2_2:UnDeeper:
************ / slAKA optional akapart                                                                           :2_2:UnDeeper:
************* / |?| optional something                                                                         :2_2:UnDeeper:
************** / |>>/recurse                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************** / |>>/base                                                                                     :2_2:UnDeeper:
*************** / PAKA/akapart                                                                               :2_2:UnDeeper:
**************** / $>|                                                                                      :2_2:UnDeeper:
***************** / Aka Token                                                                              :2_2:UnDeeper:
Aka Token> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=2:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=2:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************* \ |?| optional something has returned (Nothing,0)                                                :2_2:UnDeeper:
slAKA optional akapart> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************ \ slAKA optional akapart has returned (Nothing,0)                                                  :2_2:UnDeeper:
************ > |>>/base got Nothing                                                                             :2_2:UnDeeper:
|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********** \ |>>/base has returned (Nothing,0)                                                                  :2_2:UnDeeper:
*********** / |>>/recurse                                                                                        :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********** / |>>/base                                                                                           :2_2:UnDeeper:
************ / slAKA optional typically                                                                         :2_2:UnDeeper:
************* / |?| optional something                                                                         :2_2:UnDeeper:
************** / |>>/recurse                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************** / |>>/base                                                                                     :2_2:UnDeeper:
*************** / typically                                                                                  :2_2:UnDeeper:
**************** / $>|                                                                                      :2_2:UnDeeper:
$>|> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=2:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************* \ |?| optional something has returned (Nothing,0)                                                :2_2:UnDeeper:
slAKA optional typically> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************ \ slAKA optional typically has returned (Nothing,0)                                                :2_2:UnDeeper:
************ > |>>/base got Nothing                                                                             :2_2:UnDeeper:
|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********** \ |>>/base has returned (Nothing,0)                                                                  :2_2:UnDeeper:
*********** > slAKA: proceeding after base and entityalias are retrieved ...                                     :2_2:UnDeeper:
*********** > pAKA: entityalias = Nothing                                                                        :2_2:UnDeeper:
slAKA> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slAKA> MATCH (COK): "Bob's your uncle"
slAKA> VALUE: ((["Bob's your uncle"],0),[])

********** \ slAKA has returned (["Bob's your uncle"],0)                                                          :2_2:UnDeeper:
********** / undeepers                                                                                            :2_2:UnDeeper:
*********** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                             :2_2:UnDeeper:
*********** > sameLine: success!                                                                                 :2_2:UnDeeper:
undeepers> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********** \ undeepers has returned ()                                                                            :2_2:UnDeeper:
pAKA> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
pAKA> MATCH (COK): "Bob's your uncle"
pAKA> VALUE: (["Bob's your uncle"],[])

********* \ pAKA has returned ["Bob's your uncle"]                                                                 :2_2:UnDeeper:
pMultiTermAka> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
pMultiTermAka> MATCH (COK): "Bob's your uncle"
pMultiTermAka> VALUE: (["Bob's your uncle"],[])

******** \ pMultiTermAka has returned ["Bob's your uncle"]                                                          :2_2:UnDeeper:
manyIndentation/leaf?> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
manyIndentation/leaf?> MATCH (COK): "Bob's your uncle"
manyIndentation/leaf?> VALUE: (["Bob's your uncle"],[])

******* \ manyIndentation/leaf? has returned ["Bob's your uncle"]                                                    :2_2:UnDeeper:
******* / myindented: consuming UnDeeper                                                                             :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******* \ myindented: consuming UnDeeper has returned UnDeeper                                                    :2_1:Means:
someIndentation> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someIndentation> MATCH (COK): ( "Bob's your uncle" )
someIndentation> VALUE: (["Bob's your uncle"],[])

****** \ someIndentation has returned ["Bob's your uncle"]                                                         :2_1:Means:
manyIndentation/deeper; calling someIndentation> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
manyIndentation/deeper; calling someIndentation> MATCH (COK): ( "Bob's your uncle" )
manyIndentation/deeper; calling someIndentation> VALUE: (["Bob's your uncle"],[])

***** \ manyIndentation/deeper; calling someIndentation has returned ["Bob's your uncle"]                           :2_1:Means:
calling myindented pNameParens> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
calling myindented pNameParens> MATCH (COK): ( "Bob's your uncle" )
calling myindented pNameParens> VALUE: (["Bob's your uncle"],[])

**** \ calling myindented pNameParens has returned ["Bob's your uncle"]                                              :2_1:Means:
**** / manyIndentation/leaf?                                                                                         :2_1:Means:
***** / permutationsCon: copula=[Means,Includes,Is], positive=[When,If], negative=[Unless], given=[Given]           :2_1:Means:
****** / preambleParamText:[Given]                                                                                 :2_1:Means:
******* / $>|                                                                                                     :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=3:
preambleParamText:[Given]> unexpected MEANS
preambleParamText:[Given]> expecting GIVEN

****** / preambleBoolStructR [Unless]                                                                              :2_1:Means:
preambleBoolStructR [Unless]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=3:
preambleBoolStructR [Unless]> unexpected MEANS
preambleBoolStructR [Unless]> expecting UNLESS

****** / preambleBoolStructR [When,If]                                                                             :2_1:Means:
preambleBoolStructR [When,If]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=3:
preambleBoolStructR [When,If]> unexpected MEANS
preambleBoolStructR [When,If]> expecting IF or WHEN

****** / preambleBoolStructR [Means,Includes,Is]                                                                   :2_1:Means:
******* / pBSR                                                                                                     :2_2:GoDeeper:
******** / ppp inner                                                                                              :2_2:GoDeeper:
********* / expression                                                                                           :2_2:GoDeeper:
********** / labelPrefix                                                                                        :2_2:GoDeeper:
labelPrefix> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected (
labelPrefix> expecting Other text

********** / term p                                                                                             :2_2:GoDeeper:
*********** / term p/notLabelTerm                                                                              :2_2:GoDeeper:
************ / term p/2:someIndentation expr p                                                                :2_2:GoDeeper:
************* / someIndentation                                                                              :2_2:GoDeeper:
************** / myindented: consuming GoDeeper                                                             :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************** \ myindented: consuming GoDeeper has returned GoDeeper                                        :2_2:MPNot:
************** / manyIndentation/leaf?                                                                       :2_2:MPNot:
*************** / expression                                                                                :2_2:MPNot:
**************** / labelPrefix                                                                             :2_2:MPNot:
labelPrefix> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected NOT
labelPrefix> expecting Other text

**************** / term p                                                                                   :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :2_3:Other "Bob:
******************** / manyIndentation/leaf?                                                             :2_3:Other "Bob:
********************* / expression                                                                      :2_3:Other "Bob:
********************** / labelPrefix                                                                   :2_3:Other "Bob:
labelPrefix> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
labelPrefix> MATCH (COK): "Bob is estranged"
labelPrefix> VALUE: ("Bob is estranged",[])

********************** \ labelPrefix has returned "Bob is estranged"                                   :3_3:Or:
********************** / term p                                                                        :3_3:Or:
*********************** / term p/notLabelTerm                                                         :3_3:Or:
************************ / term p/2:someIndentation expr p                                           :3_3:Or:
************************* / someIndentation                                                         :3_3:Or:
************************** / myindented: consuming GoDeeper                                        :3_3:Or:
myindented: consuming GoDeeper> IN: OR ( "Bob is dead" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "Bob is dead" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "Bob is dead" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

************************ / term p/3:plain p                                                          :3_3:Or:
************************* / pRelPred                                                                :3_3:Or:
************************** / slRelPred                                                             :3_3:Or:
*************************** / nested simpleHorn                                                   :3_3:Or:
**************************** > |^|                                                               :3_3:Or:
**************************** / $*|                                                               :3_3:Or:
***************************** / slMultiTerm                                                     :3_3:Or:
****************************** / someSL                                                        :3_3:Or:
******************************* / pNumAsText                                                  :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

nested simpleHorn> IN: OR ( "Bob is dead" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

*************************** / RPConstraint                                                        :3_3:Or:
**************************** / $*|                                                               :3_3:Or:
***************************** / slMultiTerm                                                     :3_3:Or:
****************************** / someSL                                                        :3_3:Or:
******************************* / pNumAsText                                                  :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPConstraint> IN: OR ( "Bob is dead" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

*************************** / RPBoolStructR                                                       :3_3:Or:
**************************** / $*|                                                               :3_3:Or:
***************************** / slMultiTerm                                                     :3_3:Or:
****************************** / someSL                                                        :3_3:Or:
******************************* / pNumAsText                                                  :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPBoolStructR> IN: OR ( "Bob is dead" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

*************************** / RPMT                                                                :3_3:Or:
**************************** / $*|                                                               :3_3:Or:
***************************** / slAKA                                                           :3_3:Or:
****************************** / $*|                                                           :3_3:Or:
******************************* / slAKA base                                                  :3_3:Or:
******************************** / slMultiTerm                                               :3_3:Or:
********************************* / someSL                                                  :3_3:Or:
********************************** / pNumAsText                                            :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

slAKA base> IN: OR ( "Bob is dead" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "Bob is dead" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected OR
slAKA> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPMT> IN: OR ( "Bob is dead" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected OR
RPMT> expecting other text or number

slRelPred> IN: OR ( "Bob is dead" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected OR
slRelPred> expecting other text or number

pRelPred> IN: OR ( "Bob is dead" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected OR
pRelPred> expecting other text or number

term p/3:plain p> IN: OR ( "Bob is dead" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "Bob is dead" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "Bob is dead" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
expression> MATCH (CERR): "Bob is estranged"
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

******************** / manyIndentation/deeper; calling someIndentation                                   :2_3:Other "Bob:
********************* / someIndentation                                                                 :2_3:Other "Bob:
********************** / myindented: consuming GoDeeper                                                :2_3:Other "Bob:
myindented: consuming GoDeeper> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=7:
myindented: consuming GoDeeper> unexpected "Bob is estranged"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "Bob is estranged"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=7:
manyIndentation/deeper; calling someIndentation> unexpected "Bob is estranged"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

****************** / term p/3:plain p                                                                     :2_3:GoDeeper:
******************* / pRelPred                                                                           :2_3:GoDeeper:
******************** / slRelPred                                                                        :2_3:GoDeeper:
********************* / nested simpleHorn                                                              :2_3:GoDeeper:
********************** > |^|                                                                          :2_3:GoDeeper:
********************** / $*|                                                                          :2_3:GoDeeper:
*********************** / slMultiTerm                                                                :2_3:GoDeeper:
************************ / someSL                                                                   :2_3:GoDeeper:
************************* / pNumAsText                                                             :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********************* / RPConstraint                                                                   :2_3:GoDeeper:
********************** / $*|                                                                          :2_3:GoDeeper:
*********************** / slMultiTerm                                                                :2_3:GoDeeper:
************************ / someSL                                                                   :2_3:GoDeeper:
************************* / pNumAsText                                                             :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********************* / RPBoolStructR                                                                  :2_3:GoDeeper:
********************** / $*|                                                                          :2_3:GoDeeper:
*********************** / slMultiTerm                                                                :2_3:GoDeeper:
************************ / someSL                                                                   :2_3:GoDeeper:
************************* / pNumAsText                                                             :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********************* / RPMT                                                                           :2_3:GoDeeper:
********************** / $*|                                                                          :2_3:GoDeeper:
*********************** / slAKA                                                                      :2_3:GoDeeper:
************************ / $*|                                                                      :2_3:GoDeeper:
************************* / slAKA base                                                             :2_3:GoDeeper:
************************** / slMultiTerm                                                          :2_3:GoDeeper:
*************************** / someSL                                                             :2_3:GoDeeper:
**************************** / pNumAsText                                                       :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expression> MATCH (CERR): NOT
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

************** / manyIndentation/deeper; calling someIndentation                                             :2_2:MPNot:
*************** / someIndentation                                                                           :2_2:MPNot:
**************** / myindented: consuming GoDeeper                                                          :2_2:MPNot:
myindented: consuming GoDeeper> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected NOT
myindented: consuming GoDeeper> expecting (

someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected NOT
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected NOT
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

************ / term p/3:plain p                                                                               :2_2:GoDeeper:
************* / pRelPred                                                                                     :2_2:GoDeeper:
************** / slRelPred                                                                                  :2_2:GoDeeper:
*************** / nested simpleHorn                                                                        :2_2:GoDeeper:
**************** > |^|                                                                                    :2_2:GoDeeper:
**************** / $*|                                                                                    :2_2:GoDeeper:
***************** / slMultiTerm                                                                          :2_2:GoDeeper:
****************** / someSL                                                                             :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

*************** / RPConstraint                                                                             :2_2:GoDeeper:
**************** / $*|                                                                                    :2_2:GoDeeper:
***************** / slMultiTerm                                                                          :2_2:GoDeeper:
****************** / someSL                                                                             :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

*************** / RPBoolStructR                                                                            :2_2:GoDeeper:
**************** / $*|                                                                                    :2_2:GoDeeper:
***************** / slMultiTerm                                                                          :2_2:GoDeeper:
****************** / someSL                                                                             :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

*************** / RPMT                                                                                     :2_2:GoDeeper:
**************** / $*|                                                                                    :2_2:GoDeeper:
***************** / slAKA                                                                                :2_2:GoDeeper:
****************** / $*|                                                                                :2_2:GoDeeper:
******************* / slAKA base                                                                       :2_2:GoDeeper:
******************** / slMultiTerm                                                                    :2_2:GoDeeper:
********************* / someSL                                                                       :2_2:GoDeeper:
********************** / pNumAsText                                                                 :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting expression

ppp inner> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected OR
ppp inner> expecting expression

******** / withPrePost                                                                                            :2_2:GoDeeper:
********* > |<* starting                                                                                         :2_2:GoDeeper:
********* / $*|                                                                                                  :2_2:GoDeeper:
********** / pre part                                                                                           :2_2:GoDeeper:
*********** / aboveNextLineKeyword                                                                              :2_2:MPNot:
************ / expectUnDeepers                                                                                 :2_2:MPNot:
************* / pNumAsText                                                                                    :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

*********** > /*= lookAhead failed, delegating to plain /+=                                                     :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=5:
withPrePost> unexpected NOT
withPrePost> expecting (, ), Other text, or other text or number

******** / withPreOnly                                                                                            :2_2:GoDeeper:
********* / $*|                                                                                                  :2_2:GoDeeper:
********** / pre part                                                                                           :2_2:GoDeeper:
*********** / aboveNextLineKeyword                                                                              :2_2:MPNot:
************ / expectUnDeepers                                                                                 :2_2:MPNot:
************* / pNumAsText                                                                                    :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

*********** > /*= lookAhead failed, delegating to plain /+=                                                     :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=5:
withPreOnly> unexpected NOT
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=8:
pBSR> unexpected OR
pBSR> expecting expression

preambleBoolStructR [Means,Includes,Is]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleBoolStructR [Means,Includes,Is]> MATCH (CERR): MEANS (
preambleBoolStructR [Means,Includes,Is]> ERROR:
preambleBoolStructR [Means,Includes,Is]> offset=8:
preambleBoolStructR [Means,Includes,Is]> unexpected OR
preambleBoolStructR [Means,Includes,Is]> expecting expression

permutationsCon: copula=[Means,Includes,Is], positive=[When,If], negative=[Unless], given=[Given]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
permutationsCon: copula=[Means,Includes,Is], positive=[When,If], negative=[Unless], given=[Given]> MATCH (CERR): MEANS (
permutationsCon: copula=[Means,Includes,Is], positive=[When,If], negative=[Unless], given=[Given]> ERROR:
permutationsCon: copula=[Means,Includes,Is], positive=[When,If], negative=[Unless], given=[Given]> offset=8:
permutationsCon: copula=[Means,Includes,Is], positive=[When,If], negative=[Unless], given=[Given]> unexpected OR
permutationsCon: copula=[Means,Includes,Is], positive=[When,If], negative=[Unless], given=[Given]> expecting expression

manyIndentation/leaf?> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting expression

**** / manyIndentation/deeper; calling someIndentation                                                               :2_1:Means:
***** / someIndentation                                                                                             :2_1:Means:
****** / myindented: consuming GoDeeper                                                                            :2_1:Means:
myindented: consuming GoDeeper> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected MEANS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=3:
manyIndentation/deeper; calling someIndentation> unexpected MEANS
manyIndentation/deeper; calling someIndentation> expecting (

pConstitutiveRule> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pConstitutiveRule> MATCH (CERR): ( "Bob's your uncle" )
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=8:
pConstitutiveRule> unexpected OR
pConstitutiveRule> expecting expression

*** / pScenarioRule                                                                                                    :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

pRuleLabel> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** / pExpect                                                                                                        :1_2:GoDeeper:
pExpect> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=0:
pExpect> unexpected (
pExpect> expecting EXPECT

pScenarioRule> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected (
pScenarioRule> expecting EXPECT, GIVEN, or §

*** / pHornlike                                                                                                        :1_2:GoDeeper:
**** / pSrcRef                                                                                                        :1_2:GoDeeper:
***** / pRuleLabel                                                                                                   :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

pRuleLabel> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

pSrcRef> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})) :1_2:GoDeeper:
**** / pHornlike / permute                                                                                            :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

whenCase> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                           :1_2:GoDeeper:
****** / preambleParamText:[Upon]                                                                                   :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

preambleParamText:[Upon]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected (
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

whenCase> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/givenLimb                                                                                          :1_2:GoDeeper:
****** / preambleParamText:[Given]                                                                                  :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

preambleParamText:[Given]> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected (
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

whenCase> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

optIndented> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

optIndentedTuple> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

$*|> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

relPredSamelineWhen> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:Other "Bob':
******** / manyIndentation/leaf?                                                                                   :1_2:Other "Bob':
********* / relPredNextlineWhen                                                                                   :1_2:Other "Bob':
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Other "Bob':
*********** / optIndentedTuple                                                                                  :1_2:Other "Bob':
************ / optIndented                                                                                     :1_2:Other "Bob':
************* / pRelPred                                                                                      :1_2:Other "Bob':
************** / slRelPred                                                                                   :1_2:Other "Bob':
*************** / nested simpleHorn                                                                         :1_2:Other "Bob':
**************** > |^|                                                                                     :1_2:Other "Bob':
**************** / $*|                                                                                     :1_2:Other "Bob':
***************** / slMultiTerm                                                                           :1_2:Other "Bob':
****************** / someSL                                                                              :1_2:Other "Bob':
someSL> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
someSL> MATCH (COK): "Bob's your uncle"
someSL> VALUE: ((["Bob's your uncle"],0),[])

****************** \ someSL has returned (["Bob's your uncle"],0)                                         :2_2:UnDeeper:
slMultiTerm> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slMultiTerm> MATCH (COK): "Bob's your uncle"
slMultiTerm> VALUE: ((["Bob's your uncle"],0),[])

***************** \ slMultiTerm has returned (["Bob's your uncle"],0)                                      :2_2:UnDeeper:
$*|> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
$*|> MATCH (COK): "Bob's your uncle"
$*|> VALUE: ((["Bob's your uncle"],0),[])

**************** \ $*| has returned (["Bob's your uncle"],0)                                                :2_2:UnDeeper:
**************** / |^| deeps                                                                                :2_2:UnDeeper:
|^| deeps> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

**************** \ |^| deeps has returned ([()],-1)                                                      :2_1:Means:
**************** / pBSR                                                                                   :2_2:GoDeeper:
***************** / ppp inner                                                                            :2_2:GoDeeper:
****************** / expression                                                                         :2_2:GoDeeper:
******************* / labelPrefix                                                                      :2_2:GoDeeper:
labelPrefix> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected (
labelPrefix> expecting Other text

******************* / term p                                                                           :2_2:GoDeeper:
******************** / term p/notLabelTerm                                                            :2_2:GoDeeper:
********************* / term p/2:someIndentation expr p                                              :2_2:GoDeeper:
********************** / someIndentation                                                            :2_2:GoDeeper:
*********************** / myindented: consuming GoDeeper                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented: consuming GoDeeper has returned GoDeeper                      :2_2:MPNot:
*********************** / manyIndentation/leaf?                                                     :2_2:MPNot:
************************ / expression                                                              :2_2:MPNot:
************************* / labelPrefix                                                           :2_2:MPNot:
labelPrefix> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected NOT
labelPrefix> expecting Other text

************************* / term p                                                                 :2_3:GoDeeper:
************************** / term p/notLabelTerm                                                  :2_3:GoDeeper:
*************************** / term p/2:someIndentation expr p                                    :2_3:GoDeeper:
**************************** / someIndentation                                                  :2_3:GoDeeper:
***************************** / myindented: consuming GoDeeper                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************************** \ myindented: consuming GoDeeper has returned GoDeeper            :2_3:Other "Bob:
***************************** / manyIndentation/leaf?                                           :2_3:Other "Bob:
****************************** / expression                                                    :2_3:Other "Bob:
******************************* / labelPrefix                                                 :2_3:Other "Bob:
labelPrefix> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
labelPrefix> MATCH (COK): "Bob is estranged"
labelPrefix> VALUE: ("Bob is estranged",[])

******************************* \ labelPrefix has returned "Bob is estranged"                 :3_3:Or:
******************************* / term p                                                      :3_3:Or:
******************************** / term p/notLabelTerm                                       :3_3:Or:
********************************* / term p/2:someIndentation expr p                         :3_3:Or:
********************************** / someIndentation                                       :3_3:Or:
*********************************** / myindented: consuming GoDeeper                      :3_3:Or:
myindented: consuming GoDeeper> IN: OR ( "Bob is dead" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "Bob is dead" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "Bob is dead" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

********************************* / term p/3:plain p                                        :3_3:Or:
********************************** / pRelPred                                              :3_3:Or:
*********************************** / slRelPred                                           :3_3:Or:
************************************ / nested simpleHorn                                 :3_3:Or:
************************************* > |^|                                             :3_3:Or:
************************************* / $*|                                             :3_3:Or:
************************************** / slMultiTerm                                   :3_3:Or:
*************************************** / someSL                                      :3_3:Or:
**************************************** / pNumAsText                                :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

nested simpleHorn> IN: OR ( "Bob is dead" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

************************************ / RPConstraint                                      :3_3:Or:
************************************* / $*|                                             :3_3:Or:
************************************** / slMultiTerm                                   :3_3:Or:
*************************************** / someSL                                      :3_3:Or:
**************************************** / pNumAsText                                :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPConstraint> IN: OR ( "Bob is dead" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

************************************ / RPBoolStructR                                     :3_3:Or:
************************************* / $*|                                             :3_3:Or:
************************************** / slMultiTerm                                   :3_3:Or:
*************************************** / someSL                                      :3_3:Or:
**************************************** / pNumAsText                                :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPBoolStructR> IN: OR ( "Bob is dead" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

************************************ / RPMT                                              :3_3:Or:
************************************* / $*|                                             :3_3:Or:
************************************** / slAKA                                         :3_3:Or:
*************************************** / $*|                                         :3_3:Or:
**************************************** / slAKA base                                :3_3:Or:
***************************************** / slMultiTerm                             :3_3:Or:
****************************************** / someSL                                :3_3:Or:
******************************************* / pNumAsText                          :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

slAKA base> IN: OR ( "Bob is dead" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "Bob is dead" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected OR
slAKA> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPMT> IN: OR ( "Bob is dead" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected OR
RPMT> expecting other text or number

slRelPred> IN: OR ( "Bob is dead" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected OR
slRelPred> expecting other text or number

pRelPred> IN: OR ( "Bob is dead" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected OR
pRelPred> expecting other text or number

term p/3:plain p> IN: OR ( "Bob is dead" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "Bob is dead" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "Bob is dead" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
expression> MATCH (CERR): "Bob is estranged"
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

***************************** / manyIndentation/deeper; calling someIndentation                 :2_3:Other "Bob:
****************************** / someIndentation                                               :2_3:Other "Bob:
******************************* / myindented: consuming GoDeeper                              :2_3:Other "Bob:
myindented: consuming GoDeeper> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=7:
myindented: consuming GoDeeper> unexpected "Bob is estranged"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "Bob is estranged"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=7:
manyIndentation/deeper; calling someIndentation> unexpected "Bob is estranged"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

*************************** / term p/3:plain p                                                   :2_3:GoDeeper:
**************************** / pRelPred                                                         :2_3:GoDeeper:
***************************** / slRelPred                                                      :2_3:GoDeeper:
****************************** / nested simpleHorn                                            :2_3:GoDeeper:
******************************* > |^|                                                        :2_3:GoDeeper:
******************************* / $*|                                                        :2_3:GoDeeper:
******************************** / slMultiTerm                                              :2_3:GoDeeper:
********************************* / someSL                                                 :2_3:GoDeeper:
********************************** / pNumAsText                                           :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

****************************** / RPConstraint                                                 :2_3:GoDeeper:
******************************* / $*|                                                        :2_3:GoDeeper:
******************************** / slMultiTerm                                              :2_3:GoDeeper:
********************************* / someSL                                                 :2_3:GoDeeper:
********************************** / pNumAsText                                           :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

****************************** / RPBoolStructR                                                :2_3:GoDeeper:
******************************* / $*|                                                        :2_3:GoDeeper:
******************************** / slMultiTerm                                              :2_3:GoDeeper:
********************************* / someSL                                                 :2_3:GoDeeper:
********************************** / pNumAsText                                           :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

****************************** / RPMT                                                         :2_3:GoDeeper:
******************************* / $*|                                                        :2_3:GoDeeper:
******************************** / slAKA                                                    :2_3:GoDeeper:
********************************* / $*|                                                    :2_3:GoDeeper:
********************************** / slAKA base                                           :2_3:GoDeeper:
*********************************** / slMultiTerm                                        :2_3:GoDeeper:
************************************ / someSL                                           :2_3:GoDeeper:
************************************* / pNumAsText                                     :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expression> MATCH (CERR): NOT
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

*********************** / manyIndentation/deeper; calling someIndentation                           :2_2:MPNot:
************************ / someIndentation                                                         :2_2:MPNot:
************************* / myindented: consuming GoDeeper                                        :2_2:MPNot:
myindented: consuming GoDeeper> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected NOT
myindented: consuming GoDeeper> expecting (

someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected NOT
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected NOT
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

********************* / term p/3:plain p                                                             :2_2:GoDeeper:
********************** / pRelPred                                                                   :2_2:GoDeeper:
*********************** / slRelPred                                                                :2_2:GoDeeper:
************************ / nested simpleHorn                                                      :2_2:GoDeeper:
************************* > |^|                                                                  :2_2:GoDeeper:
************************* / $*|                                                                  :2_2:GoDeeper:
************************** / slMultiTerm                                                        :2_2:GoDeeper:
*************************** / someSL                                                           :2_2:GoDeeper:
**************************** / pNumAsText                                                     :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************ / RPConstraint                                                           :2_2:GoDeeper:
************************* / $*|                                                                  :2_2:GoDeeper:
************************** / slMultiTerm                                                        :2_2:GoDeeper:
*************************** / someSL                                                           :2_2:GoDeeper:
**************************** / pNumAsText                                                     :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************ / RPBoolStructR                                                          :2_2:GoDeeper:
************************* / $*|                                                                  :2_2:GoDeeper:
************************** / slMultiTerm                                                        :2_2:GoDeeper:
*************************** / someSL                                                           :2_2:GoDeeper:
**************************** / pNumAsText                                                     :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************ / RPMT                                                                   :2_2:GoDeeper:
************************* / $*|                                                                  :2_2:GoDeeper:
************************** / slAKA                                                              :2_2:GoDeeper:
*************************** / $*|                                                              :2_2:GoDeeper:
**************************** / slAKA base                                                     :2_2:GoDeeper:
***************************** / slMultiTerm                                                  :2_2:GoDeeper:
****************************** / someSL                                                     :2_2:GoDeeper:
******************************* / pNumAsText                                               :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting expression

ppp inner> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected OR
ppp inner> expecting expression

***************** / withPrePost                                                                          :2_2:GoDeeper:
****************** > |<* starting                                                                       :2_2:GoDeeper:
****************** / $*|                                                                                :2_2:GoDeeper:
******************* / pre part                                                                         :2_2:GoDeeper:
******************** / aboveNextLineKeyword                                                            :2_2:MPNot:
********************* / expectUnDeepers                                                               :2_2:MPNot:
********************** / pNumAsText                                                                  :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                   :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=5:
withPrePost> unexpected NOT
withPrePost> expecting (, ), Other text, or other text or number

***************** / withPreOnly                                                                          :2_2:GoDeeper:
****************** / $*|                                                                                :2_2:GoDeeper:
******************* / pre part                                                                         :2_2:GoDeeper:
******************** / aboveNextLineKeyword                                                            :2_2:MPNot:
********************* / expectUnDeepers                                                               :2_2:MPNot:
********************** / pNumAsText                                                                  :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

******************** > /*= lookAhead failed, delegating to plain /+=                                   :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=5:
withPreOnly> unexpected NOT
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=8:
pBSR> unexpected OR
pBSR> expecting expression

nested simpleHorn> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
nested simpleHorn> MATCH (CERR): "Bob's your uncle" ) MEANS (
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting expression

*************** / RPConstraint                                                                              :1_2:Other "Bob':
**************** / $*|                                                                                     :1_2:Other "Bob':
***************** / slMultiTerm                                                                           :1_2:Other "Bob':
****************** / someSL                                                                              :1_2:Other "Bob':
someSL> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
someSL> MATCH (COK): "Bob's your uncle"
someSL> VALUE: ((["Bob's your uncle"],0),[])

****************** \ someSL has returned (["Bob's your uncle"],0)                                         :2_2:UnDeeper:
slMultiTerm> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slMultiTerm> MATCH (COK): "Bob's your uncle"
slMultiTerm> VALUE: ((["Bob's your uncle"],0),[])

***************** \ slMultiTerm has returned (["Bob's your uncle"],0)                                      :2_2:UnDeeper:
$*|> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
$*|> MATCH (COK): "Bob's your uncle"
$*|> VALUE: ((["Bob's your uncle"],0),[])

**************** \ $*| has returned (["Bob's your uncle"],0)                                                :2_2:UnDeeper:
**************** / |>| calling $>>                                                                          :2_2:UnDeeper:
***************** / |>>/recurse                                                                            :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** / |>>/base                                                                               :2_2:UnDeeper:
|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=2:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
RPConstraint> MATCH (CERR): "Bob's your uncle"
RPConstraint> ERROR:
RPConstraint> offset=2:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** / RPBoolStructR                                                                             :1_2:Other "Bob':
**************** / $*|                                                                                     :1_2:Other "Bob':
***************** / slMultiTerm                                                                           :1_2:Other "Bob':
****************** / someSL                                                                              :1_2:Other "Bob':
someSL> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
someSL> MATCH (COK): "Bob's your uncle"
someSL> VALUE: ((["Bob's your uncle"],0),[])

****************** \ someSL has returned (["Bob's your uncle"],0)                                         :2_2:UnDeeper:
slMultiTerm> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slMultiTerm> MATCH (COK): "Bob's your uncle"
slMultiTerm> VALUE: ((["Bob's your uncle"],0),[])

***************** \ slMultiTerm has returned (["Bob's your uncle"],0)                                      :2_2:UnDeeper:
$*|> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
$*|> MATCH (COK): "Bob's your uncle"
$*|> VALUE: ((["Bob's your uncle"],0),[])

**************** \ $*| has returned (["Bob's your uncle"],0)                                                :2_2:UnDeeper:
**************** / |>| calling $>>                                                                          :2_2:UnDeeper:
***************** / |>>/recurse                                                                            :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** / |>>/base                                                                               :2_2:UnDeeper:
|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=2:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
RPBoolStructR> MATCH (CERR): "Bob's your uncle"
RPBoolStructR> ERROR:
RPBoolStructR> offset=2:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** / RPMT                                                                                      :1_2:Other "Bob':
**************** / $*|                                                                                     :1_2:Other "Bob':
***************** / slAKA                                                                                 :1_2:Other "Bob':
****************** / $*|                                                                                 :1_2:Other "Bob':
******************* / slAKA base                                                                        :1_2:Other "Bob':
******************** / slMultiTerm                                                                     :1_2:Other "Bob':
********************* / someSL                                                                        :1_2:Other "Bob':
someSL> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
someSL> MATCH (COK): "Bob's your uncle"
someSL> VALUE: ((["Bob's your uncle"],0),[])

********************* \ someSL has returned (["Bob's your uncle"],0)                                   :2_2:UnDeeper:
slMultiTerm> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slMultiTerm> MATCH (COK): "Bob's your uncle"
slMultiTerm> VALUE: ((["Bob's your uncle"],0),[])

******************** \ slMultiTerm has returned (["Bob's your uncle"],0)                                :2_2:UnDeeper:
slAKA base> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slAKA base> MATCH (COK): "Bob's your uncle"
slAKA base> VALUE: ((["Bob's your uncle"],0),[])

******************* \ slAKA base has returned (["Bob's your uncle"],0)                                   :2_2:UnDeeper:
$*|> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
$*|> MATCH (COK): "Bob's your uncle"
$*|> VALUE: ((["Bob's your uncle"],0),[])

****************** \ $*| has returned (["Bob's your uncle"],0)                                            :2_2:UnDeeper:
****************** / |>>/recurse                                                                          :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :2_2:UnDeeper:
******************* / slAKA optional akapart                                                             :2_2:UnDeeper:
******************** / |?| optional something                                                           :2_2:UnDeeper:
********************* / |>>/recurse                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* / |>>/base                                                                       :2_2:UnDeeper:
********************** / PAKA/akapart                                                                 :2_2:UnDeeper:
*********************** / $>|                                                                        :2_2:UnDeeper:
************************ / Aka Token                                                                :2_2:UnDeeper:
Aka Token> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=2:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=2:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************** \ |?| optional something has returned (Nothing,0)                                  :2_2:UnDeeper:
slAKA optional akapart> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************* \ slAKA optional akapart has returned (Nothing,0)                                    :2_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :2_2:UnDeeper:
|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :2_2:UnDeeper:
****************** / |>>/recurse                                                                          :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :2_2:UnDeeper:
******************* / slAKA optional typically                                                           :2_2:UnDeeper:
******************** / |?| optional something                                                           :2_2:UnDeeper:
********************* / |>>/recurse                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* / |>>/base                                                                       :2_2:UnDeeper:
********************** / typically                                                                    :2_2:UnDeeper:
*********************** / $>|                                                                        :2_2:UnDeeper:
$>|> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=2:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************** \ |?| optional something has returned (Nothing,0)                                  :2_2:UnDeeper:
slAKA optional typically> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************* \ slAKA optional typically has returned (Nothing,0)                                  :2_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :2_2:UnDeeper:
|>>/base> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :2_2:UnDeeper:
****************** > slAKA: proceeding after base and entityalias are retrieved ...                       :2_2:UnDeeper:
****************** > pAKA: entityalias = Nothing                                                          :2_2:UnDeeper:
slAKA> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slAKA> MATCH (COK): "Bob's your uncle"
slAKA> VALUE: ((["Bob's your uncle"],0),[])

***************** \ slAKA has returned (["Bob's your uncle"],0)                                            :2_2:UnDeeper:
$*|> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
$*|> MATCH (COK): "Bob's your uncle"
$*|> VALUE: ((["Bob's your uncle"],0),[])

**************** \ $*| has returned (["Bob's your uncle"],0)                                                :2_2:UnDeeper:
RPMT> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
RPMT> MATCH (COK): "Bob's your uncle"
RPMT> VALUE: ((RPMT ["Bob's your uncle"],0),[])

*************** \ RPMT has returned (RPMT ["Bob's your uncle"],0)                                            :2_2:UnDeeper:
slRelPred> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
slRelPred> MATCH (COK): "Bob's your uncle"
slRelPred> VALUE: ((RPMT ["Bob's your uncle"],0),[])

************** \ slRelPred has returned (RPMT ["Bob's your uncle"],0)                                         :2_2:UnDeeper:
************** / undeepers                                                                                    :2_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :2_2:UnDeeper:
*************** > sameLine: success!                                                                         :2_2:UnDeeper:
undeepers> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :2_2:UnDeeper:
pRelPred> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
pRelPred> MATCH (COK): "Bob's your uncle"
pRelPred> VALUE: (RPMT ["Bob's your uncle"],[])

************* \ pRelPred has returned RPMT ["Bob's your uncle"]                                                :2_2:UnDeeper:
************* / someIndentation                                                                                :2_2:UnDeeper:
************** / myindented: consuming GoDeeper                                                               :2_2:UnDeeper:
myindented: consuming GoDeeper> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=2:
myindented: consuming GoDeeper> unexpected )
myindented: consuming GoDeeper> expecting (

someIndentation> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=2:
someIndentation> unexpected )
someIndentation> expecting (

optIndented> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
optIndented> MATCH (COK): "Bob's your uncle"
optIndented> VALUE: ((RPMT ["Bob's your uncle"],Nothing),[])

************ \ optIndented has returned (RPMT ["Bob's your uncle"],Nothing)                                     :2_2:UnDeeper:
optIndentedTuple> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
optIndentedTuple> MATCH (COK): "Bob's your uncle"
optIndentedTuple> VALUE: ((RPMT ["Bob's your uncle"],Nothing),[])

*********** \ optIndentedTuple has returned (RPMT ["Bob's your uncle"],Nothing)                                  :2_2:UnDeeper:
pRelPred optIndentedTuple whenCase> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
pRelPred optIndentedTuple whenCase> MATCH (COK): "Bob's your uncle"
pRelPred optIndentedTuple whenCase> VALUE: ((RPMT ["Bob's your uncle"],Nothing),[])

********** \ pRelPred optIndentedTuple whenCase has returned (RPMT ["Bob's your uncle"],Nothing)                  :2_2:UnDeeper:
relPredNextlineWhen> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
relPredNextlineWhen> MATCH (COK): "Bob's your uncle"
relPredNextlineWhen> VALUE: ((RPMT ["Bob's your uncle"],Nothing),[])

********* \ relPredNextlineWhen has returned (RPMT ["Bob's your uncle"],Nothing)                                   :2_2:UnDeeper:
manyIndentation/leaf?> IN: "Bob's your uncle" ) MEANS ( NOT ( "Bob  <…>
manyIndentation/leaf?> MATCH (COK): "Bob's your uncle"
manyIndentation/leaf?> VALUE: ((RPMT ["Bob's your uncle"],Nothing),[])

******** \ manyIndentation/leaf? has returned (RPMT ["Bob's your uncle"],Nothing)                                   :2_2:UnDeeper:
******** / myindented: consuming UnDeeper                                                                           :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) MEANS ( NOT ( "Bob is estranged" OR (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******** \ myindented: consuming UnDeeper has returned UnDeeper                                                  :2_1:Means:
someIndentation> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
someIndentation> MATCH (COK): ( "Bob's your uncle" )
someIndentation> VALUE: ((RPMT ["Bob's your uncle"],Nothing),[])

******* \ someIndentation has returned (RPMT ["Bob's your uncle"],Nothing)                                        :2_1:Means:
manyIndentation/deeper; calling someIndentation> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
manyIndentation/deeper; calling someIndentation> MATCH (COK): ( "Bob's your uncle" )
manyIndentation/deeper; calling someIndentation> VALUE: ((RPMT ["Bob's your uncle"],Nothing),[])

****** \ manyIndentation/deeper; calling someIndentation has returned (RPMT ["Bob's your uncle"],Nothing)          :2_1:Means:
pHornlike/someStructure> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pHornlike/someStructure> MATCH (COK): ( "Bob's your uncle" )
pHornlike/someStructure> VALUE: ((Nothing,["Bob's your uncle"],[HC2 {hHead = RPMT ["Bob's your uncle"], hBody = Nothing}]),[])

***** \ pHornlike/someStructure has returned (Nothing,["Bob's your uncle"],[HC2 {hHead = RPMT ["Bob's your uncle"], hBody = Nothing}]) :2_1:Means:
***** / whenCase                                                                                                    :2_1:Means:
****** / whenMeansIf                                                                                               :2_1:Means:
whenMeansIf> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenMeansIf> MATCH (COK): MEANS
whenMeansIf> VALUE: (Means,[])

****** \ whenMeansIf has returned Means                                                                             :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected (
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:MPNot:
************* / manyIndentation/leaf?                                                                         :2_2:MPNot:
************** / expression                                                                                  :2_2:MPNot:
*************** / labelPrefix                                                                               :2_2:MPNot:
labelPrefix> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected NOT
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "Bob:
******************* / manyIndentation/leaf?                                                               :2_3:Other "Bob:
******************** / expression                                                                        :2_3:Other "Bob:
********************* / labelPrefix                                                                     :2_3:Other "Bob:
labelPrefix> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
labelPrefix> MATCH (COK): "Bob is estranged"
labelPrefix> VALUE: ("Bob is estranged",[])

********************* \ labelPrefix has returned "Bob is estranged"                                     :3_3:Or:
********************* / term p                                                                          :3_3:Or:
********************** / term p/notLabelTerm                                                           :3_3:Or:
*********************** / term p/2:someIndentation expr p                                             :3_3:Or:
************************ / someIndentation                                                           :3_3:Or:
************************* / myindented: consuming GoDeeper                                          :3_3:Or:
myindented: consuming GoDeeper> IN: OR ( "Bob is dead" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "Bob is dead" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "Bob is dead" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

*********************** / term p/3:plain p                                                            :3_3:Or:
************************ / pRelPred                                                                  :3_3:Or:
************************* / slRelPred                                                               :3_3:Or:
************************** / nested simpleHorn                                                     :3_3:Or:
*************************** > |^|                                                                 :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

nested simpleHorn> IN: OR ( "Bob is dead" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPConstraint> IN: OR ( "Bob is dead" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPBoolStructR> IN: OR ( "Bob is dead" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slAKA                                                             :3_3:Or:
***************************** / $*|                                                             :3_3:Or:
****************************** / slAKA base                                                    :3_3:Or:
******************************* / slMultiTerm                                                 :3_3:Or:
******************************** / someSL                                                    :3_3:Or:
********************************* / pNumAsText                                              :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

slAKA base> IN: OR ( "Bob is dead" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "Bob is dead" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected OR
slAKA> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPMT> IN: OR ( "Bob is dead" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected OR
RPMT> expecting other text or number

slRelPred> IN: OR ( "Bob is dead" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected OR
slRelPred> expecting other text or number

pRelPred> IN: OR ( "Bob is dead" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected OR
pRelPred> expecting other text or number

term p/3:plain p> IN: OR ( "Bob is dead" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "Bob is dead" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "Bob is dead" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
expression> MATCH (CERR): "Bob is estranged"
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Other "Bob:
******************** / someIndentation                                                                   :2_3:Other "Bob:
********************* / myindented: consuming GoDeeper                                                  :2_3:Other "Bob:
myindented: consuming GoDeeper> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=7:
myindented: consuming GoDeeper> unexpected "Bob is estranged"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "Bob is estranged"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=7:
manyIndentation/deeper; calling someIndentation> unexpected "Bob is estranged"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expression> MATCH (CERR): NOT
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:MPNot:
************** / someIndentation                                                                             :2_2:MPNot:
*************** / myindented: consuming GoDeeper                                                            :2_2:MPNot:
myindented: consuming GoDeeper> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected NOT
myindented: consuming GoDeeper> expecting (

someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected NOT
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected NOT
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting expression

ppp inner> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected OR
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=5:
withPrePost> unexpected NOT
withPrePost> expecting (, ), Other text, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=5:
withPreOnly> unexpected NOT
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=8:
pBSR> unexpected OR
pBSR> expecting expression

****** / Otherwise                                                                                                 :2_1:Means:
Otherwise> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=3:
Otherwise> unexpected MEANS
Otherwise> expecting OTHERWISE

whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=8:
whenCase> unexpected OR
whenCase> expecting expression

pHornlike / permute> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pHornlike / permute> MATCH (COK): ( "Bob's your uncle" )
pHornlike / permute> VALUE: (((Nothing,["Bob's your uncle"],[HC2 {hHead = RPMT ["Bob's your uncle"], hBody = Nothing}]),Nothing,Nothing,Nothing),[])

**** \ pHornlike / permute has returned ((Nothing,["Bob's your uncle"],[HC2 {hHead = RPMT ["Bob's your uncle"], hBody = Nothing}]),Nothing,Nothing,Nothing) :2_1:Means:
pHornlike> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pHornlike> MATCH (COK): ( "Bob's your uncle" )
pHornlike> VALUE: (Hornlike {name = ["Bob's your uncle"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["Bob's your uncle"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing}), defaults = [], symtab = []},[])

*** \ pHornlike has returned Hornlike {name = ["Bob's your uncle"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["Bob's your uncle"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing}), defaults = [], symtab = []} :2_1:Means:
pRule> IN: ( "Bob's your uncle" ) MEANS ( NOT ( "Bo <…>
pRule> MATCH (COK): ( "Bob's your uncle" )
pRule> VALUE: (Hornlike {name = ["Bob's your uncle"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["Bob's your uncle"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing}), defaults = [], symtab = []},[])

** \ pRule has returned Hornlike {name = ["Bob's your uncle"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["Bob's your uncle"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing}), defaults = [], symtab = []} :2_1:Means:
** / pRule                                                                                                             :2_1:Means:
*** / pRegRule                                                                                                        :2_1:Means:
**** / pRuleLabel                                                                                                    :2_1:Means:
***** / $>|                                                                                                         :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting §

pRuleLabel> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=3:
pRuleLabel> unexpected MEANS
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :2_1:Means:
***** / someDeep                                                                                                    :2_1:Means:
****** / someDeep first part calls base directly                                                                   :2_1:Means:
someDeep first part calls base directly> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=3:
someDeep first part calls base directly> unexpected MEANS
someDeep first part calls base directly> expecting Other text

someDeep> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=3:
someDeep> unexpected MEANS
someDeep> expecting Other text

pRegRuleSugary> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=3:
pRegRuleSugary> unexpected MEANS
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:Means:
***** / permutationsReg                                                                                             :2_1:Means:
****** / regulative permutation with deontic-temporal                                                              :2_1:Means:
******* / WHERE                                                                                                   :2_1:Means:
WHERE> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=3:
WHERE> unexpected MEANS
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Means:
******** / $>|                                                                                                   :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting HAVING

preambleParamText:[Having]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=3:
preambleParamText:[Having]> unexpected MEANS
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Means:
******** / $>|                                                                                                   :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=3:
preambleParamText:[Given]> unexpected MEANS
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:Means:
******** / $>|                                                                                                   :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting UPON

preambleParamText:[Upon]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=3:
preambleParamText:[Upon]> unexpected MEANS
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:Means:
preambleBoolStructR [Unless]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=3:
preambleBoolStructR [Unless]> unexpected MEANS
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:Means:
preambleBoolStructR [When,If]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=3:
preambleBoolStructR [When,If]> unexpected MEANS
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :2_1:Means:
******** / $>|                                                                                                   :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting MAY, MUST, or SHANT

pDT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=3:
pDT> unexpected MEANS
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Means:
pActor [Every,Party,TokAll]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=3:
pActor [Every,Party,TokAll]> unexpected MEANS
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* / pDoAction/Do                                                                                            :2_1:Means:
pDoAction/Do> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=3:
pDoAction/Do> unexpected MEANS
pDoAction/Do> expecting DO

regulative permutation with deontic-temporal> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=3:
regulative permutation with deontic-temporal> unexpected MEANS
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** / regulative permutation with deontic-action                                                                :2_1:Means:
******* / WHERE                                                                                                   :2_1:Means:
WHERE> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=3:
WHERE> unexpected MEANS
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Means:
******** / $>|                                                                                                   :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting HAVING

preambleParamText:[Having]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=3:
preambleParamText:[Having]> unexpected MEANS
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Means:
******** / $>|                                                                                                   :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=3:
preambleParamText:[Given]> unexpected MEANS
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:Means:
******** / $>|                                                                                                   :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting UPON

preambleParamText:[Upon]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=3:
preambleParamText:[Upon]> unexpected MEANS
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:Means:
preambleBoolStructR [Unless]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=3:
preambleBoolStructR [Unless]> unexpected MEANS
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:Means:
preambleBoolStructR [When,If]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=3:
preambleBoolStructR [When,If]> unexpected MEANS
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :2_1:Means:
pTemporal/eventually> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=3:
pTemporal/eventually> unexpected MEANS
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :2_1:Means:
******** / $>|                                                                                                   :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=3:
pTemporal/specifically> unexpected MEANS
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :2_1:Means:
pTemporal/vaguely> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=3:
pTemporal/vaguely> unexpected MEANS
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Means:
pActor [Every,Party,TokAll]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=3:
pActor [Every,Party,TokAll]> unexpected MEANS
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* / pDA                                                                                                     :2_1:Means:
pDA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=3:
pDA> unexpected MEANS
pDA> expecting MAY, MUST, or SHANT

regulative permutation with deontic-action> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=3:
regulative permutation with deontic-action> unexpected MEANS
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

permutationsReg> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=3:
permutationsReg> unexpected MEANS
permutationsReg> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

pRegRuleNormal> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=3:
pRegRuleNormal> unexpected MEANS
pRegRuleNormal> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

pRegRule> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=3:
pRegRule> unexpected MEANS
pRegRule> expecting AFTER, ALL, BEFORE, BREACH, BY, DO, EVENTUALLY, EVERY, FULFILLED, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

*** / pTypeDefinition                                                                                                 :2_1:Means:
**** / pRuleLabel                                                                                                    :2_1:Means:
***** / $>|                                                                                                         :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting §

pRuleLabel> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=3:
pRuleLabel> unexpected MEANS
pRuleLabel> expecting §

**** / pHornlike/uponLimb                                                                                            :2_1:Means:
***** / preambleParamText:[Upon]                                                                                    :2_1:Means:
****** / $>|                                                                                                       :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting UPON

preambleParamText:[Upon]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=3:
preambleParamText:[Upon]> unexpected MEANS
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=3:
pHornlike/uponLimb> unexpected MEANS
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :2_1:Means:
***** / preambleParamText:[Given]                                                                                   :2_1:Means:
****** / $>|                                                                                                       :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=3:
preambleParamText:[Given]> unexpected MEANS
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=3:
pHornlike/givenLimb> unexpected MEANS
pHornlike/givenLimb> expecting GIVEN

pTypeDefinition> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=3:
pTypeDefinition> unexpected MEANS
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** / pConstitutiveRule                                                                                               :2_1:Means:
**** / pRuleLabel                                                                                                    :2_1:Means:
***** / $>|                                                                                                         :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting §

pRuleLabel> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=3:
pRuleLabel> unexpected MEANS
pRuleLabel> expecting §

**** / calling myindented pNameParens                                                                                :2_1:Means:
***** / manyIndentation/leaf?                                                                                       :2_1:Means:
****** / pMultiTermAka                                                                                             :2_1:Means:
******* / pAKA                                                                                                    :2_1:Means:
******** / slAKA                                                                                                 :2_1:Means:
********* / $*|                                                                                                 :2_1:Means:
********** / slAKA base                                                                                        :2_1:Means:
*********** / slMultiTerm                                                                                     :2_1:Means:
************ / someSL                                                                                        :2_1:Means:
************* / pNumAsText                                                                                  :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

pAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=3:
pAKA> unexpected MEANS
pAKA> expecting other text or number

pMultiTermAka> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=3:
pMultiTermAka> unexpected MEANS
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=3:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Means:
****** / someIndentation                                                                                           :2_1:Means:
******* / myindented: consuming GoDeeper                                                                          :2_1:Means:
myindented: consuming GoDeeper> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected MEANS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=3:
manyIndentation/deeper; calling someIndentation> unexpected MEANS
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=3:
calling myindented pNameParens> unexpected MEANS
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=3:
pConstitutiveRule> unexpected MEANS
pConstitutiveRule> expecting (, other text or number, or §

*** / pScenarioRule                                                                                                   :2_1:Means:
**** / pRuleLabel                                                                                                    :2_1:Means:
***** / $>|                                                                                                         :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting §

pRuleLabel> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=3:
pRuleLabel> unexpected MEANS
pRuleLabel> expecting §

**** / pExpect                                                                                                       :2_1:Means:
pExpect> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=3:
pExpect> unexpected MEANS
pExpect> expecting EXPECT

pScenarioRule> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=3:
pScenarioRule> unexpected MEANS
pScenarioRule> expecting EXPECT, GIVEN, or §

*** / pHornlike                                                                                                       :2_1:Means:
**** / pSrcRef                                                                                                       :2_1:Means:
***** / pRuleLabel                                                                                                  :2_1:Means:
****** / $>|                                                                                                       :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting §

pRuleLabel> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=3:
pRuleLabel> unexpected MEANS
pRuleLabel> expecting §

pSrcRef> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Means:
**** / pHornlike / permute                                                                                           :2_1:Means:
***** / whenCase                                                                                                    :2_1:Means:
****** / whenMeansIf                                                                                               :2_1:Means:
whenMeansIf> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenMeansIf> MATCH (COK): MEANS
whenMeansIf> VALUE: (Means,[])

****** \ whenMeansIf has returned Means                                                                             :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected (
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:MPNot:
************* / manyIndentation/leaf?                                                                         :2_2:MPNot:
************** / expression                                                                                  :2_2:MPNot:
*************** / labelPrefix                                                                               :2_2:MPNot:
labelPrefix> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected NOT
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "Bob:
******************* / manyIndentation/leaf?                                                               :2_3:Other "Bob:
******************** / expression                                                                        :2_3:Other "Bob:
********************* / labelPrefix                                                                     :2_3:Other "Bob:
labelPrefix> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
labelPrefix> MATCH (COK): "Bob is estranged"
labelPrefix> VALUE: ("Bob is estranged",[])

********************* \ labelPrefix has returned "Bob is estranged"                                     :3_3:Or:
********************* / term p                                                                          :3_3:Or:
********************** / term p/notLabelTerm                                                           :3_3:Or:
*********************** / term p/2:someIndentation expr p                                             :3_3:Or:
************************ / someIndentation                                                           :3_3:Or:
************************* / myindented: consuming GoDeeper                                          :3_3:Or:
myindented: consuming GoDeeper> IN: OR ( "Bob is dead" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "Bob is dead" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "Bob is dead" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

*********************** / term p/3:plain p                                                            :3_3:Or:
************************ / pRelPred                                                                  :3_3:Or:
************************* / slRelPred                                                               :3_3:Or:
************************** / nested simpleHorn                                                     :3_3:Or:
*************************** > |^|                                                                 :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

nested simpleHorn> IN: OR ( "Bob is dead" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPConstraint> IN: OR ( "Bob is dead" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPBoolStructR> IN: OR ( "Bob is dead" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slAKA                                                             :3_3:Or:
***************************** / $*|                                                             :3_3:Or:
****************************** / slAKA base                                                    :3_3:Or:
******************************* / slMultiTerm                                                 :3_3:Or:
******************************** / someSL                                                    :3_3:Or:
********************************* / pNumAsText                                              :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

slAKA base> IN: OR ( "Bob is dead" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "Bob is dead" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected OR
slAKA> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPMT> IN: OR ( "Bob is dead" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected OR
RPMT> expecting other text or number

slRelPred> IN: OR ( "Bob is dead" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected OR
slRelPred> expecting other text or number

pRelPred> IN: OR ( "Bob is dead" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected OR
pRelPred> expecting other text or number

term p/3:plain p> IN: OR ( "Bob is dead" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "Bob is dead" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "Bob is dead" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
expression> MATCH (CERR): "Bob is estranged"
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Other "Bob:
******************** / someIndentation                                                                   :2_3:Other "Bob:
********************* / myindented: consuming GoDeeper                                                  :2_3:Other "Bob:
myindented: consuming GoDeeper> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=7:
myindented: consuming GoDeeper> unexpected "Bob is estranged"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "Bob is estranged"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=7:
manyIndentation/deeper; calling someIndentation> unexpected "Bob is estranged"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expression> MATCH (CERR): NOT
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:MPNot:
************** / someIndentation                                                                             :2_2:MPNot:
*************** / myindented: consuming GoDeeper                                                            :2_2:MPNot:
myindented: consuming GoDeeper> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected NOT
myindented: consuming GoDeeper> expecting (

someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected NOT
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected NOT
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting expression

ppp inner> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected OR
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=5:
withPrePost> unexpected NOT
withPrePost> expecting (, ), Other text, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=5:
withPreOnly> unexpected NOT
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=8:
pBSR> unexpected OR
pBSR> expecting expression

****** / Otherwise                                                                                                 :2_1:Means:
Otherwise> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=3:
Otherwise> unexpected MEANS
Otherwise> expecting OTHERWISE

whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=8:
whenCase> unexpected OR
whenCase> expecting expression

***** / pHornlike/uponLimb                                                                                          :2_1:Means:
****** / preambleParamText:[Upon]                                                                                  :2_1:Means:
******* / $>|                                                                                                     :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting UPON

preambleParamText:[Upon]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=3:
preambleParamText:[Upon]> unexpected MEANS
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=3:
pHornlike/uponLimb> unexpected MEANS
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :2_1:Means:
****** / whenMeansIf                                                                                               :2_1:Means:
whenMeansIf> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenMeansIf> MATCH (COK): MEANS
whenMeansIf> VALUE: (Means,[])

****** \ whenMeansIf has returned Means                                                                             :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected (
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:MPNot:
************* / manyIndentation/leaf?                                                                         :2_2:MPNot:
************** / expression                                                                                  :2_2:MPNot:
*************** / labelPrefix                                                                               :2_2:MPNot:
labelPrefix> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected NOT
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "Bob:
******************* / manyIndentation/leaf?                                                               :2_3:Other "Bob:
******************** / expression                                                                        :2_3:Other "Bob:
********************* / labelPrefix                                                                     :2_3:Other "Bob:
labelPrefix> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
labelPrefix> MATCH (COK): "Bob is estranged"
labelPrefix> VALUE: ("Bob is estranged",[])

********************* \ labelPrefix has returned "Bob is estranged"                                     :3_3:Or:
********************* / term p                                                                          :3_3:Or:
********************** / term p/notLabelTerm                                                           :3_3:Or:
*********************** / term p/2:someIndentation expr p                                             :3_3:Or:
************************ / someIndentation                                                           :3_3:Or:
************************* / myindented: consuming GoDeeper                                          :3_3:Or:
myindented: consuming GoDeeper> IN: OR ( "Bob is dead" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "Bob is dead" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "Bob is dead" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

*********************** / term p/3:plain p                                                            :3_3:Or:
************************ / pRelPred                                                                  :3_3:Or:
************************* / slRelPred                                                               :3_3:Or:
************************** / nested simpleHorn                                                     :3_3:Or:
*************************** > |^|                                                                 :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

nested simpleHorn> IN: OR ( "Bob is dead" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPConstraint> IN: OR ( "Bob is dead" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPBoolStructR> IN: OR ( "Bob is dead" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slAKA                                                             :3_3:Or:
***************************** / $*|                                                             :3_3:Or:
****************************** / slAKA base                                                    :3_3:Or:
******************************* / slMultiTerm                                                 :3_3:Or:
******************************** / someSL                                                    :3_3:Or:
********************************* / pNumAsText                                              :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

slAKA base> IN: OR ( "Bob is dead" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "Bob is dead" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected OR
slAKA> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPMT> IN: OR ( "Bob is dead" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected OR
RPMT> expecting other text or number

slRelPred> IN: OR ( "Bob is dead" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected OR
slRelPred> expecting other text or number

pRelPred> IN: OR ( "Bob is dead" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected OR
pRelPred> expecting other text or number

term p/3:plain p> IN: OR ( "Bob is dead" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "Bob is dead" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "Bob is dead" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
expression> MATCH (CERR): "Bob is estranged"
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Other "Bob:
******************** / someIndentation                                                                   :2_3:Other "Bob:
********************* / myindented: consuming GoDeeper                                                  :2_3:Other "Bob:
myindented: consuming GoDeeper> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=7:
myindented: consuming GoDeeper> unexpected "Bob is estranged"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "Bob is estranged"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=7:
manyIndentation/deeper; calling someIndentation> unexpected "Bob is estranged"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expression> MATCH (CERR): NOT
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:MPNot:
************** / someIndentation                                                                             :2_2:MPNot:
*************** / myindented: consuming GoDeeper                                                            :2_2:MPNot:
myindented: consuming GoDeeper> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected NOT
myindented: consuming GoDeeper> expecting (

someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected NOT
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected NOT
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting expression

ppp inner> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected OR
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=5:
withPrePost> unexpected NOT
withPrePost> expecting (, ), Other text, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=5:
withPreOnly> unexpected NOT
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=8:
pBSR> unexpected OR
pBSR> expecting expression

****** / Otherwise                                                                                                 :2_1:Means:
Otherwise> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=3:
Otherwise> unexpected MEANS
Otherwise> expecting OTHERWISE

whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=8:
whenCase> unexpected OR
whenCase> expecting expression

***** / pHornlike/givenLimb                                                                                         :2_1:Means:
****** / preambleParamText:[Given]                                                                                 :2_1:Means:
******* / $>|                                                                                                     :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=3:
preambleParamText:[Given]> unexpected MEANS
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=3:
pHornlike/givenLimb> unexpected MEANS
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :2_1:Means:
****** / whenMeansIf                                                                                               :2_1:Means:
whenMeansIf> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenMeansIf> MATCH (COK): MEANS
whenMeansIf> VALUE: (Means,[])

****** \ whenMeansIf has returned Means                                                                             :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected (
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:MPNot:
************* / manyIndentation/leaf?                                                                         :2_2:MPNot:
************** / expression                                                                                  :2_2:MPNot:
*************** / labelPrefix                                                                               :2_2:MPNot:
labelPrefix> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected NOT
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "Bob:
******************* / manyIndentation/leaf?                                                               :2_3:Other "Bob:
******************** / expression                                                                        :2_3:Other "Bob:
********************* / labelPrefix                                                                     :2_3:Other "Bob:
labelPrefix> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
labelPrefix> MATCH (COK): "Bob is estranged"
labelPrefix> VALUE: ("Bob is estranged",[])

********************* \ labelPrefix has returned "Bob is estranged"                                     :3_3:Or:
********************* / term p                                                                          :3_3:Or:
********************** / term p/notLabelTerm                                                           :3_3:Or:
*********************** / term p/2:someIndentation expr p                                             :3_3:Or:
************************ / someIndentation                                                           :3_3:Or:
************************* / myindented: consuming GoDeeper                                          :3_3:Or:
myindented: consuming GoDeeper> IN: OR ( "Bob is dead" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "Bob is dead" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "Bob is dead" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

*********************** / term p/3:plain p                                                            :3_3:Or:
************************ / pRelPred                                                                  :3_3:Or:
************************* / slRelPred                                                               :3_3:Or:
************************** / nested simpleHorn                                                     :3_3:Or:
*************************** > |^|                                                                 :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

nested simpleHorn> IN: OR ( "Bob is dead" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPConstraint> IN: OR ( "Bob is dead" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPBoolStructR> IN: OR ( "Bob is dead" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slAKA                                                             :3_3:Or:
***************************** / $*|                                                             :3_3:Or:
****************************** / slAKA base                                                    :3_3:Or:
******************************* / slMultiTerm                                                 :3_3:Or:
******************************** / someSL                                                    :3_3:Or:
********************************* / pNumAsText                                              :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

slAKA base> IN: OR ( "Bob is dead" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "Bob is dead" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected OR
slAKA> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPMT> IN: OR ( "Bob is dead" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected OR
RPMT> expecting other text or number

slRelPred> IN: OR ( "Bob is dead" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected OR
slRelPred> expecting other text or number

pRelPred> IN: OR ( "Bob is dead" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected OR
pRelPred> expecting other text or number

term p/3:plain p> IN: OR ( "Bob is dead" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "Bob is dead" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "Bob is dead" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
expression> MATCH (CERR): "Bob is estranged"
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Other "Bob:
******************** / someIndentation                                                                   :2_3:Other "Bob:
********************* / myindented: consuming GoDeeper                                                  :2_3:Other "Bob:
myindented: consuming GoDeeper> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=7:
myindented: consuming GoDeeper> unexpected "Bob is estranged"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "Bob is estranged"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=7:
manyIndentation/deeper; calling someIndentation> unexpected "Bob is estranged"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expression> MATCH (CERR): NOT
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:MPNot:
************** / someIndentation                                                                             :2_2:MPNot:
*************** / myindented: consuming GoDeeper                                                            :2_2:MPNot:
myindented: consuming GoDeeper> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected NOT
myindented: consuming GoDeeper> expecting (

someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected NOT
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected NOT
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting expression

ppp inner> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected OR
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=5:
withPrePost> unexpected NOT
withPrePost> expecting (, ), Other text, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=5:
withPreOnly> unexpected NOT
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=8:
pBSR> unexpected OR
pBSR> expecting expression

****** / Otherwise                                                                                                 :2_1:Means:
Otherwise> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=3:
Otherwise> unexpected MEANS
Otherwise> expecting OTHERWISE

whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=8:
whenCase> unexpected OR
whenCase> expecting expression

***** / pHornlike/ambitious                                                                                         :2_1:Means:
****** / $>|                                                                                                       :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=3:
pHornlike/ambitious> unexpected MEANS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Means:
****** / manyIndentation/leaf?                                                                                     :2_1:Means:
******* / relPredNextlineWhen                                                                                     :2_1:Means:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Means:
********* / optIndentedTuple                                                                                    :2_1:Means:
********** / optIndented                                                                                       :2_1:Means:
*********** / pRelPred                                                                                        :2_1:Means:
************ / slRelPred                                                                                     :2_1:Means:
************* / nested simpleHorn                                                                           :2_1:Means:
************** > |^|                                                                                       :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slAKA                                                                                   :2_1:Means:
**************** / $*|                                                                                   :2_1:Means:
***************** / slAKA base                                                                          :2_1:Means:
****************** / slMultiTerm                                                                       :2_1:Means:
******************* / someSL                                                                          :2_1:Means:
******************** / pNumAsText                                                                    :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

pRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=3:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

optIndented> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=3:
optIndented> unexpected MEANS
optIndented> expecting other text or number

optIndentedTuple> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=3:
optIndentedTuple> unexpected MEANS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=3:
pRelPred optIndentedTuple whenCase> unexpected MEANS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=3:
relPredNextlineWhen> unexpected MEANS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Means:
******** / $*|                                                                                                   :2_1:Means:
********* / slRelPred                                                                                           :2_1:Means:
********** / nested simpleHorn                                                                                 :2_1:Means:
*********** > |^|                                                                                             :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slAKA                                                                                         :2_1:Means:
************* / $*|                                                                                         :2_1:Means:
************** / slAKA base                                                                                :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

relPredSamelineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=3:
relPredSamelineWhen> unexpected MEANS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=3:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Means:
******* / someIndentation                                                                                         :2_1:Means:
******** / myindented: consuming GoDeeper                                                                        :2_1:Means:
myindented: consuming GoDeeper> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected MEANS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=3:
manyIndentation/deeper; calling someIndentation> unexpected MEANS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=3:
pHornlike/someStructure> unexpected MEANS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:Means:
****** / $>|                                                                                                       :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=3:
pHornlike/ambitious> unexpected MEANS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Means:
****** / manyIndentation/leaf?                                                                                     :2_1:Means:
******* / relPredNextlineWhen                                                                                     :2_1:Means:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Means:
********* / optIndentedTuple                                                                                    :2_1:Means:
********** / optIndented                                                                                       :2_1:Means:
*********** / pRelPred                                                                                        :2_1:Means:
************ / slRelPred                                                                                     :2_1:Means:
************* / nested simpleHorn                                                                           :2_1:Means:
************** > |^|                                                                                       :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slAKA                                                                                   :2_1:Means:
**************** / $*|                                                                                   :2_1:Means:
***************** / slAKA base                                                                          :2_1:Means:
****************** / slMultiTerm                                                                       :2_1:Means:
******************* / someSL                                                                          :2_1:Means:
******************** / pNumAsText                                                                    :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

pRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=3:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

optIndented> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=3:
optIndented> unexpected MEANS
optIndented> expecting other text or number

optIndentedTuple> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=3:
optIndentedTuple> unexpected MEANS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=3:
pRelPred optIndentedTuple whenCase> unexpected MEANS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=3:
relPredNextlineWhen> unexpected MEANS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Means:
******** / $*|                                                                                                   :2_1:Means:
********* / slRelPred                                                                                           :2_1:Means:
********** / nested simpleHorn                                                                                 :2_1:Means:
*********** > |^|                                                                                             :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slAKA                                                                                         :2_1:Means:
************* / $*|                                                                                         :2_1:Means:
************** / slAKA base                                                                                :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

relPredSamelineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=3:
relPredSamelineWhen> unexpected MEANS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=3:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Means:
******* / someIndentation                                                                                         :2_1:Means:
******** / myindented: consuming GoDeeper                                                                        :2_1:Means:
myindented: consuming GoDeeper> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected MEANS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=3:
manyIndentation/deeper; calling someIndentation> unexpected MEANS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=3:
pHornlike/someStructure> unexpected MEANS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/givenLimb                                                                                         :2_1:Means:
****** / preambleParamText:[Given]                                                                                 :2_1:Means:
******* / $>|                                                                                                     :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=3:
preambleParamText:[Given]> unexpected MEANS
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=3:
pHornlike/givenLimb> unexpected MEANS
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :2_1:Means:
****** / whenMeansIf                                                                                               :2_1:Means:
whenMeansIf> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenMeansIf> MATCH (COK): MEANS
whenMeansIf> VALUE: (Means,[])

****** \ whenMeansIf has returned Means                                                                             :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected (
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:MPNot:
************* / manyIndentation/leaf?                                                                         :2_2:MPNot:
************** / expression                                                                                  :2_2:MPNot:
*************** / labelPrefix                                                                               :2_2:MPNot:
labelPrefix> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected NOT
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "Bob:
******************* / manyIndentation/leaf?                                                               :2_3:Other "Bob:
******************** / expression                                                                        :2_3:Other "Bob:
********************* / labelPrefix                                                                     :2_3:Other "Bob:
labelPrefix> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
labelPrefix> MATCH (COK): "Bob is estranged"
labelPrefix> VALUE: ("Bob is estranged",[])

********************* \ labelPrefix has returned "Bob is estranged"                                     :3_3:Or:
********************* / term p                                                                          :3_3:Or:
********************** / term p/notLabelTerm                                                           :3_3:Or:
*********************** / term p/2:someIndentation expr p                                             :3_3:Or:
************************ / someIndentation                                                           :3_3:Or:
************************* / myindented: consuming GoDeeper                                          :3_3:Or:
myindented: consuming GoDeeper> IN: OR ( "Bob is dead" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "Bob is dead" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "Bob is dead" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

*********************** / term p/3:plain p                                                            :3_3:Or:
************************ / pRelPred                                                                  :3_3:Or:
************************* / slRelPred                                                               :3_3:Or:
************************** / nested simpleHorn                                                     :3_3:Or:
*************************** > |^|                                                                 :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

nested simpleHorn> IN: OR ( "Bob is dead" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPConstraint> IN: OR ( "Bob is dead" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPBoolStructR> IN: OR ( "Bob is dead" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slAKA                                                             :3_3:Or:
***************************** / $*|                                                             :3_3:Or:
****************************** / slAKA base                                                    :3_3:Or:
******************************* / slMultiTerm                                                 :3_3:Or:
******************************** / someSL                                                    :3_3:Or:
********************************* / pNumAsText                                              :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

slAKA base> IN: OR ( "Bob is dead" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "Bob is dead" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected OR
slAKA> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPMT> IN: OR ( "Bob is dead" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected OR
RPMT> expecting other text or number

slRelPred> IN: OR ( "Bob is dead" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected OR
slRelPred> expecting other text or number

pRelPred> IN: OR ( "Bob is dead" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected OR
pRelPred> expecting other text or number

term p/3:plain p> IN: OR ( "Bob is dead" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "Bob is dead" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "Bob is dead" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
expression> MATCH (CERR): "Bob is estranged"
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Other "Bob:
******************** / someIndentation                                                                   :2_3:Other "Bob:
********************* / myindented: consuming GoDeeper                                                  :2_3:Other "Bob:
myindented: consuming GoDeeper> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=7:
myindented: consuming GoDeeper> unexpected "Bob is estranged"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "Bob is estranged"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=7:
manyIndentation/deeper; calling someIndentation> unexpected "Bob is estranged"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expression> MATCH (CERR): NOT
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:MPNot:
************** / someIndentation                                                                             :2_2:MPNot:
*************** / myindented: consuming GoDeeper                                                            :2_2:MPNot:
myindented: consuming GoDeeper> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected NOT
myindented: consuming GoDeeper> expecting (

someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected NOT
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected NOT
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting expression

ppp inner> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected OR
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=5:
withPrePost> unexpected NOT
withPrePost> expecting (, ), Other text, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=5:
withPreOnly> unexpected NOT
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=8:
pBSR> unexpected OR
pBSR> expecting expression

****** / Otherwise                                                                                                 :2_1:Means:
Otherwise> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=3:
Otherwise> unexpected MEANS
Otherwise> expecting OTHERWISE

whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=8:
whenCase> unexpected OR
whenCase> expecting expression

***** / pHornlike/uponLimb                                                                                          :2_1:Means:
****** / preambleParamText:[Upon]                                                                                  :2_1:Means:
******* / $>|                                                                                                     :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting UPON

preambleParamText:[Upon]> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=3:
preambleParamText:[Upon]> unexpected MEANS
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=3:
pHornlike/uponLimb> unexpected MEANS
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :2_1:Means:
****** / whenMeansIf                                                                                               :2_1:Means:
whenMeansIf> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenMeansIf> MATCH (COK): MEANS
whenMeansIf> VALUE: (Means,[])

****** \ whenMeansIf has returned Means                                                                             :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected (
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:MPNot:
************* / manyIndentation/leaf?                                                                         :2_2:MPNot:
************** / expression                                                                                  :2_2:MPNot:
*************** / labelPrefix                                                                               :2_2:MPNot:
labelPrefix> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected NOT
labelPrefix> expecting Other text

*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Other "Bob:
******************* / manyIndentation/leaf?                                                               :2_3:Other "Bob:
******************** / expression                                                                        :2_3:Other "Bob:
********************* / labelPrefix                                                                     :2_3:Other "Bob:
labelPrefix> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
labelPrefix> MATCH (COK): "Bob is estranged"
labelPrefix> VALUE: ("Bob is estranged",[])

********************* \ labelPrefix has returned "Bob is estranged"                                     :3_3:Or:
********************* / term p                                                                          :3_3:Or:
********************** / term p/notLabelTerm                                                           :3_3:Or:
*********************** / term p/2:someIndentation expr p                                             :3_3:Or:
************************ / someIndentation                                                           :3_3:Or:
************************* / myindented: consuming GoDeeper                                          :3_3:Or:
myindented: consuming GoDeeper> IN: OR ( "Bob is dead" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "Bob is dead" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "Bob is dead" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

*********************** / term p/3:plain p                                                            :3_3:Or:
************************ / pRelPred                                                                  :3_3:Or:
************************* / slRelPred                                                               :3_3:Or:
************************** / nested simpleHorn                                                     :3_3:Or:
*************************** > |^|                                                                 :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

nested simpleHorn> IN: OR ( "Bob is dead" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPConstraint> IN: OR ( "Bob is dead" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slMultiTerm                                                       :3_3:Or:
***************************** / someSL                                                          :3_3:Or:
****************************** / pNumAsText                                                    :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPBoolStructR> IN: OR ( "Bob is dead" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :3_3:Or:
*************************** / $*|                                                                 :3_3:Or:
**************************** / slAKA                                                             :3_3:Or:
***************************** / $*|                                                             :3_3:Or:
****************************** / slAKA base                                                    :3_3:Or:
******************************* / slMultiTerm                                                 :3_3:Or:
******************************** / someSL                                                    :3_3:Or:
********************************* / pNumAsText                                              :3_3:Or:
pNumAsText> IN: OR ( "Bob is dead" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "Bob is dead" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected OR
someSL> expecting other text or number

slMultiTerm> IN: OR ( "Bob is dead" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

slAKA base> IN: OR ( "Bob is dead" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "Bob is dead" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected OR
slAKA> expecting other text or number

$*|> IN: OR ( "Bob is dead" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected OR
$*|> expecting other text or number

RPMT> IN: OR ( "Bob is dead" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected OR
RPMT> expecting other text or number

slRelPred> IN: OR ( "Bob is dead" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected OR
slRelPred> expecting other text or number

pRelPred> IN: OR ( "Bob is dead" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected OR
pRelPred> expecting other text or number

term p/3:plain p> IN: OR ( "Bob is dead" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "Bob is dead" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "Bob is dead" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
expression> MATCH (CERR): "Bob is estranged"
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Other "Bob:
******************** / someIndentation                                                                   :2_3:Other "Bob:
********************* / myindented: consuming GoDeeper                                                  :2_3:Other "Bob:
myindented: consuming GoDeeper> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=7:
myindented: consuming GoDeeper> unexpected "Bob is estranged"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "Bob is estranged"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "Bob is estranged" OR ( "Bob is dead" )  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=7:
manyIndentation/deeper; calling someIndentation> unexpected "Bob is estranged"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=6:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=6:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=6:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "Bob is estranged" OR ( "Bob is dead"  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expression> MATCH (CERR): NOT
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:MPNot:
************** / someIndentation                                                                             :2_2:MPNot:
*************** / myindented: consuming GoDeeper                                                            :2_2:MPNot:
myindented: consuming GoDeeper> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected NOT
myindented: consuming GoDeeper> expecting (

someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected NOT
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected NOT
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected OR
expression> expecting expression

ppp inner> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected OR
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=5:
withPrePost> unexpected NOT
withPrePost> expecting (, ), Other text, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:MPNot:
*********** / expectUnDeepers                                                                                   :2_2:MPNot:
************ / pNumAsText                                                                                      :2_2:MPNot:
pNumAsText> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected NOT
pNumAsText> expecting number

expectUnDeepers> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=5:
expectUnDeepers> unexpected NOT
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: NOT ( "Bob is estranged" OR ( "Bob is de <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected NOT
aboveNextLineKeyword> expecting (, ), or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:MPNot:
pre part> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=5:
pre part> unexpected NOT
pre part> expecting (, ), Other text, or other text or number

$*|> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=5:
$*|> unexpected NOT
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=5:
withPreOnly> unexpected NOT
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: ( NOT ( "Bob is estranged" OR ( "Bob is  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=8:
pBSR> unexpected OR
pBSR> expecting expression

****** / Otherwise                                                                                                 :2_1:Means:
Otherwise> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=3:
Otherwise> unexpected MEANS
Otherwise> expecting OTHERWISE

whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=8:
whenCase> unexpected OR
whenCase> expecting expression

***** / pHornlike/ambitious                                                                                         :2_1:Means:
****** / $>|                                                                                                       :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=3:
pHornlike/ambitious> unexpected MEANS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Means:
****** / manyIndentation/leaf?                                                                                     :2_1:Means:
******* / relPredNextlineWhen                                                                                     :2_1:Means:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Means:
********* / optIndentedTuple                                                                                    :2_1:Means:
********** / optIndented                                                                                       :2_1:Means:
*********** / pRelPred                                                                                        :2_1:Means:
************ / slRelPred                                                                                     :2_1:Means:
************* / nested simpleHorn                                                                           :2_1:Means:
************** > |^|                                                                                       :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slAKA                                                                                   :2_1:Means:
**************** / $*|                                                                                   :2_1:Means:
***************** / slAKA base                                                                          :2_1:Means:
****************** / slMultiTerm                                                                       :2_1:Means:
******************* / someSL                                                                          :2_1:Means:
******************** / pNumAsText                                                                    :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

pRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=3:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

optIndented> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=3:
optIndented> unexpected MEANS
optIndented> expecting other text or number

optIndentedTuple> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=3:
optIndentedTuple> unexpected MEANS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=3:
pRelPred optIndentedTuple whenCase> unexpected MEANS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=3:
relPredNextlineWhen> unexpected MEANS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Means:
******** / $*|                                                                                                   :2_1:Means:
********* / slRelPred                                                                                           :2_1:Means:
********** / nested simpleHorn                                                                                 :2_1:Means:
*********** > |^|                                                                                             :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slAKA                                                                                         :2_1:Means:
************* / $*|                                                                                         :2_1:Means:
************** / slAKA base                                                                                :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

relPredSamelineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=3:
relPredSamelineWhen> unexpected MEANS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=3:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Means:
******* / someIndentation                                                                                         :2_1:Means:
******** / myindented: consuming GoDeeper                                                                        :2_1:Means:
myindented: consuming GoDeeper> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected MEANS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=3:
manyIndentation/deeper; calling someIndentation> unexpected MEANS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=3:
pHornlike/someStructure> unexpected MEANS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:Means:
****** / $>|                                                                                                       :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=3:
pHornlike/ambitious> unexpected MEANS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Means:
****** / manyIndentation/leaf?                                                                                     :2_1:Means:
******* / relPredNextlineWhen                                                                                     :2_1:Means:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Means:
********* / optIndentedTuple                                                                                    :2_1:Means:
********** / optIndented                                                                                       :2_1:Means:
*********** / pRelPred                                                                                        :2_1:Means:
************ / slRelPred                                                                                     :2_1:Means:
************* / nested simpleHorn                                                                           :2_1:Means:
************** > |^|                                                                                       :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slAKA                                                                                   :2_1:Means:
**************** / $*|                                                                                   :2_1:Means:
***************** / slAKA base                                                                          :2_1:Means:
****************** / slMultiTerm                                                                       :2_1:Means:
******************* / someSL                                                                          :2_1:Means:
******************** / pNumAsText                                                                    :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

pRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=3:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

optIndented> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=3:
optIndented> unexpected MEANS
optIndented> expecting other text or number

optIndentedTuple> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=3:
optIndentedTuple> unexpected MEANS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=3:
pRelPred optIndentedTuple whenCase> unexpected MEANS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=3:
relPredNextlineWhen> unexpected MEANS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Means:
******** / $*|                                                                                                   :2_1:Means:
********* / slRelPred                                                                                           :2_1:Means:
********** / nested simpleHorn                                                                                 :2_1:Means:
*********** > |^|                                                                                             :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slAKA                                                                                         :2_1:Means:
************* / $*|                                                                                         :2_1:Means:
************** / slAKA base                                                                                :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

relPredSamelineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=3:
relPredSamelineWhen> unexpected MEANS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=3:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Means:
******* / someIndentation                                                                                         :2_1:Means:
******** / myindented: consuming GoDeeper                                                                        :2_1:Means:
myindented: consuming GoDeeper> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected MEANS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=3:
manyIndentation/deeper; calling someIndentation> unexpected MEANS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=3:
pHornlike/someStructure> unexpected MEANS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:Means:
****** / $>|                                                                                                       :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=3:
pHornlike/ambitious> unexpected MEANS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Means:
****** / manyIndentation/leaf?                                                                                     :2_1:Means:
******* / relPredNextlineWhen                                                                                     :2_1:Means:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Means:
********* / optIndentedTuple                                                                                    :2_1:Means:
********** / optIndented                                                                                       :2_1:Means:
*********** / pRelPred                                                                                        :2_1:Means:
************ / slRelPred                                                                                     :2_1:Means:
************* / nested simpleHorn                                                                           :2_1:Means:
************** > |^|                                                                                       :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Means:
************** / $*|                                                                                       :2_1:Means:
*************** / slAKA                                                                                   :2_1:Means:
**************** / $*|                                                                                   :2_1:Means:
***************** / slAKA base                                                                          :2_1:Means:
****************** / slMultiTerm                                                                       :2_1:Means:
******************* / someSL                                                                          :2_1:Means:
******************** / pNumAsText                                                                    :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

pRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=3:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

optIndented> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=3:
optIndented> unexpected MEANS
optIndented> expecting other text or number

optIndentedTuple> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=3:
optIndentedTuple> unexpected MEANS
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=3:
pRelPred optIndentedTuple whenCase> unexpected MEANS
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=3:
relPredNextlineWhen> unexpected MEANS
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Means:
******** / $*|                                                                                                   :2_1:Means:
********* / slRelPred                                                                                           :2_1:Means:
********** / nested simpleHorn                                                                                 :2_1:Means:
*********** > |^|                                                                                             :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slMultiTerm                                                                                   :2_1:Means:
************* / someSL                                                                                      :2_1:Means:
************** / pNumAsText                                                                                :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Means:
*********** / $*|                                                                                             :2_1:Means:
************ / slAKA                                                                                         :2_1:Means:
************* / $*|                                                                                         :2_1:Means:
************** / slAKA base                                                                                :2_1:Means:
*************** / slMultiTerm                                                                             :2_1:Means:
**************** / someSL                                                                                :2_1:Means:
***************** / pNumAsText                                                                          :2_1:Means:
pNumAsText> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

$*|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected MEANS
$*|> expecting other text or number

relPredSamelineWhen> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=3:
relPredSamelineWhen> unexpected MEANS
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=3:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Means:
******* / someIndentation                                                                                         :2_1:Means:
******** / myindented: consuming GoDeeper                                                                        :2_1:Means:
myindented: consuming GoDeeper> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected MEANS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=3:
manyIndentation/deeper; calling someIndentation> unexpected MEANS
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=3:
pHornlike/someStructure> unexpected MEANS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

pHornlike / permute> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=8:
pHornlike / permute> unexpected OR
pHornlike / permute> expecting GIVEN, UPON, or expression

pHornlike> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=8:
pHornlike> unexpected OR
pHornlike> expecting GIVEN, UPON, expression, or §

*** / pRuleLabel                                                                                                      :2_1:Means:
**** / $>|                                                                                                           :2_1:Means:
$>|> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected MEANS
$>|> expecting §

pRuleLabel> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=3:
pRuleLabel> unexpected MEANS
pRuleLabel> expecting §

*** / pRule: unwrapping indentation and recursing                                                                     :2_1:Means:
**** / myindented: consuming GoDeeper                                                                                :2_1:Means:
myindented: consuming GoDeeper> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

pRule: unwrapping indentation and recursing> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=3:
pRule: unwrapping indentation and recursing> unexpected MEANS
pRule: unwrapping indentation and recursing> expecting (

pRule> IN: MEANS ( NOT ( "Bob is estranged" OR ( "B <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=8:
pRule> unexpected OR
pRule> expecting DECIDE ... IS ... Horn rule or EOL


megaparsing MEANS
  bob-head-1 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) megaparsing MEANS bob-head-1
       expected: [[Hornlike {name = ["Bob's your uncle"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["Bob's your uncle"] RPis (Not (Any Nothing [Leaf (RPMT ["Bob is estranged"]),Leaf (RPMT ["Bob is dead"])])), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       2:1:
       unexpected MEANS
       expecting end of input
                        Bob's your uncle                                  
       ✳ MEANS          NOT              Bob is estranged                 
                                         OR               Bob is dead     
       

  To rerun use: --match "/megaparsing MEANS/bob-head-1/"

Randomized with seed 1416002333

Finished in 0.0630 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

