* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4-0.1.0.0: unregistering (local file changes: src/LS/Parser.hs)
natural4> configure (lib + exe + test)
Configuring natural4-0.1.0.0...
natural4> build (lib + exe + test)
Preprocessing library for natural4-0.1.0.0..
Building library for natural4-0.1.0.0..
[16 of 23] Compiling LS.Parser
[17 of 23] Compiling LS.ParamText [LS.Parser changed]

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/ParamText.hs:7:1: warning: [-Wunused-imports]
    The qualified import of ‘Data.Text.Lazy’ is redundant
      except perhaps to import instances from ‘Data.Text.Lazy’
    To import instances alone, use: import Data.Text.Lazy()
  |
7 | import qualified Data.Text.Lazy as Text
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[18 of 23] Compiling LS.RelationalPredicates [LS.ParamText changed]

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/RelationalPredicates.hs:9:1: warning: [-Wunused-imports]
    The import of ‘Debug.Trace’ is redundant
      except perhaps to import instances from ‘Debug.Trace’
    To import instances alone, use: import Debug.Trace()
  |
9 | import Debug.Trace
  | ^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/RelationalPredicates.hs:10:1: warning: [-Wunused-imports]
    The qualified import of ‘Data.Text.Lazy’ is redundant
      except perhaps to import instances from ‘Data.Text.Lazy’
    To import instances alone, use: import Data.Text.Lazy()
   |
10 | import qualified Data.Text.Lazy as Text
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/RelationalPredicates.hs:13:1: warning: [-Wunused-imports]
    The import of ‘:|, NonEmpty’
    from module ‘Data.List.NonEmpty’ is redundant
   |
13 | import Data.List.NonEmpty ( NonEmpty((:|)), nonEmpty, toList )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/RelationalPredicates.hs:14:1: warning: [-Wunused-imports]
    The import of ‘fromJust, maybeToList’
    from module ‘Data.Maybe’ is redundant
   |
14 | import Data.Maybe (fromMaybe, fromJust, maybeToList, catMaybes)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/RelationalPredicates.hs:208:8: warning: [-Wunused-matches]
    Defined but not used: ‘iswhen’
    |
208 |       (iswhen, object)   <- (,) $>| choice [ pToken When,   pToken Is     ] |>< pNameParens
    |        ^^^^^^
[19 of 23] Compiling LS.Lib [LS.ParamText changed]
[20 of 23] Compiling LS [LS.Lib changed]
[21 of 23] Compiling LS.XPile.Prolog [LS changed]

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:12:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature:
      prologExamples :: [Clause]
   |
12 | prologExamples =
   | ^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:57:13: warning: [-Wunused-matches]
    Defined but not used: ‘st’
   |
57 | rule2clause st _ = [ mkComment "clause Not Handled" ]
   |             ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:68:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature:
      showtype :: TypeSig -> EntityType
   |
68 | showtype (SimpleType TOne      tt) = tt
   | ^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:73:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature:
      inEnums :: NonEmpty (NonEmpty Text.Text) -> Text.Text
   |
73 | inEnums pt = "enums(" <> Text.unwords [ h | (h :| _) <- NE.toList pt ] <> ")"          
   | ^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:79:16: warning: [-Wunused-matches]
    Defined but not used: ‘st’
   |
79 | describeParent st tname parent =
   |                ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:91:10: warning: [-Wunused-matches]
    Defined but not used: ‘st’
   |
91 | clpEnums st tname ens =
   |          ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:101:18: warning: [-Wunused-matches]
    Defined but not used: ‘st’
    |
101 | hornlike2clauses st fname hc2s =
    |                  ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:101:21: warning: [-Wunused-matches]
    Defined but not used: ‘fname’
    |
101 | hornlike2clauses st fname hc2s =
    |                     ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:105:9: warning: [-Wname-shadowing]
    This binding for ‘rhs’ shadows the existing binding
      imported from ‘Language.Prolog’ at src/LS/XPile/Prolog.hs:6:1-22
      (and originally defined in ‘prolog-0.3.2:Syntax’)
    |
105 |         rhs   = mbsr2rhs $ hBody hc2
    |         ^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:106:5: warning: [-Wname-shadowing]
    This binding for ‘lhs’ shadows the existing binding
      imported from ‘Language.Prolog’ at src/LS/XPile/Prolog.hs:6:1-22
      (and originally defined in ‘prolog-0.3.2:Syntax’)
    |
106 |   , lhs <- lhses
    |     ^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:107:9: warning: [-Wname-shadowing]
    This binding for ‘clause’ shadows the existing binding
      imported from ‘Language.Prolog’ at src/LS/XPile/Prolog.hs:6:1-22
      (and originally defined in ‘prolog-0.3.2:Parser’)
    |
107 |   , let clause = Clause lhs rhs
    |         ^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:127:1: warning: [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In an equation for ‘rp2goal’:
        Patterns not matched:
            RPMT []
            RPParamText _
    |
127 | rp2goal (RPMT [x])           = pure $ vart x
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:129:24: warning: [-Wname-shadowing]
    This binding for ‘lhs’ shadows the existing binding
      imported from ‘Language.Prolog’ at src/LS/XPile/Prolog.hs:6:1-22
      (and originally defined in ‘prolog-0.3.2:Syntax’)
    |
129 | rp2goal (RPBoolStructR lhs rel bsr) = Struct (Text.unpack $ Text.unwords lhs) <$> [bsr2struct bsr]
    |                        ^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:129:28: warning: [-Wunused-matches]
    Defined but not used: ‘rel’
    |
129 | rp2goal (RPBoolStructR lhs rel bsr) = Struct (Text.unpack $ Text.unwords lhs) <$> [bsr2struct bsr]
    |                            ^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:133:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature: rel2f :: RPRel -> String
    |
133 | rel2f = Text.unpack . rel2txt
    | ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/Prolog.hs:136:9: warning: [-Wunused-matches]
    Defined but not used: ‘rs’
    |
136 | analyze rs = Map.fromList [("enumPrimaryKey", "1")] -- sorry, gonna have to read and show this all the time, slightly lame
    |         ^^
[22 of 23] Compiling LS.XPile.SVG [LS changed]

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:13:1: warning: [-Wunused-imports]
    The import of ‘Data.GraphViz.Attributes’ is redundant
      except perhaps to import instances from ‘Data.GraphViz.Attributes’
    To import instances alone, use: import Data.GraphViz.Attributes()
   |
13 | import Data.GraphViz.Attributes
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:15:1: warning: [-Wunused-imports]
    The import of ‘Data.Graph.Inductive.PatriciaTree’ is redundant
      except perhaps to import instances from ‘Data.Graph.Inductive.PatriciaTree’
    To import instances alone, use: import Data.Graph.Inductive.PatriciaTree()
   |
15 | import Data.Graph.Inductive.PatriciaTree
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:17:1: warning: [-Wunused-imports]
    The import of ‘Debug.Trace’ is redundant
      except perhaps to import instances from ‘Debug.Trace’
    To import instances alone, use: import Debug.Trace()
   |
17 | import           Debug.Trace
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:18:1: warning: [-Wunused-imports]
    The import of ‘Text.Pretty.Simple’ is redundant
      except perhaps to import instances from ‘Text.Pretty.Simple’
    To import instances alone, use: import Text.Pretty.Simple()
   |
18 | import           Text.Pretty.Simple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:23:1: warning: [-Wunused-imports]
    The qualified import of ‘Data.Map’ is redundant
      except perhaps to import instances from ‘Data.Map’
    To import instances alone, use: import Data.Map()
   |
23 | import qualified Data.Map           as Map
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:25:1: warning: [-Wunused-imports]
    The import of ‘HeadPort’
    from module ‘Data.GraphViz.Attributes.Complete’ is redundant
   |
25 | import Data.GraphViz.Attributes.Complete (Attribute(TailPort,HeadPort, Comment, Style)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:28:1: warning: [-Wunused-imports]
    The import of ‘evalState’
    from module ‘Control.Monad.State.Strict’ is redundant
   |
28 | import Control.Monad.State.Strict (State, MonadState (get, put), evalState, runState, gets)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:33:1: warning: [-Wunused-imports]
    The import of ‘isPrefixOf, isSuffixOf, sortOn’
    from module ‘Data.List’ is redundant
   |
33 | import Data.List (isPrefixOf, sortOn, isSuffixOf, nub)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:34:1: warning: [-Wunused-imports]
    The import of ‘GHC.Base’ is redundant
      except perhaps to import instances from ‘GHC.Base’
    To import instances alone, use: import GHC.Base()
   |
34 | import GHC.Base (join)
   | ^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:76:9: warning: [-Wunused-matches]
    Defined but not used: ‘rules’
   |
76 | reorder rules og = runGM og $ do
   |         ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:125:17: warning: [-Wunused-matches]
    Defined but not used: ‘rules’
    |
125 | condElimination rules og = runGM og $ do
    |                 ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:140:11: warning: [-Wunused-matches]
    Defined but not used: ‘rs’
    |
140 | splitJoin rs og sj sgs entry = runGM og $ do
    |           ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:140:17: warning: [-Wunused-matches]
    Defined but not used: ‘sj’
    |
140 | splitJoin rs og sj sgs entry = runGM og $ do
    |                 ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:194:7: warning: [-Wunused-local-binds]
    Defined but not used: ‘rls’
    |
194 |       rls = {- trace "rls = " $ traceShowId $ -} fmap rl2text . rLabelR <$> rules
    |       ^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:213:7: warning: [-Wunused-local-binds]
    Defined but not used: ‘headNodes’
    |
213 |       headNodes = [ headNode
    |       ^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:214:22: warning: [-Wunused-matches]
    Defined but not used: ‘orign’
    |
214 |                   | (orign, outgraph) <- aliasRules
    |                      ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:217:7: warning: [-Wunused-local-binds]
    Defined but not used: ‘tailNodes’
    |
217 |       tailNodes = [ tailNode
    |       ^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:218:22: warning: [-Wunused-matches]
    Defined but not used: ‘orign’
    |
218 |                   | (orign, outgraph) <- aliasRules
    |                      ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:246:12: warning: [-Wunused-matches]
    Defined but not used: ‘rules’
    |
246 | expandRule rules r@Regulative{..} = [r]
    |            ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:246:31: warning: [-Wunused-record-wildcards]
    No variables bound in the record wildcard match are used
      Possible fix: omit the ‘..’
    |
246 | expandRule rules r@Regulative{..} = [r]
    |                               ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:363:7: warning: [-Wunused-matches]
    Defined but not used: ‘rs’
    |
363 | r2fgl rs defRL RegFulfilled   = pure Nothing
    |       ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:363:10: warning: [-Wunused-matches]
    Defined but not used: ‘defRL’
    |
363 | r2fgl rs defRL RegFulfilled   = pure Nothing
    |          ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:364:7: warning: [-Wunused-matches]
    Defined but not used: ‘rs’
    |
364 | r2fgl rs defRL RegBreach      = pure Nothing
    |       ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:364:10: warning: [-Wunused-matches]
    Defined but not used: ‘defRL’
    |
364 | r2fgl rs defRL RegBreach      = pure Nothing
    |          ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:370:7: warning: [-Wunused-matches]
    Defined but not used: ‘rs’
    |
370 | r2fgl rs defRL (RuleAlias rn) = do
    |       ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:370:10: warning: [-Wunused-matches]
    Defined but not used: ‘defRL’
    |
370 | r2fgl rs defRL (RuleAlias rn) = do
    |          ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:377:16: warning: [-Wunused-matches]
    Defined but not used: ‘r’
    |
377 | r2fgl rs defRL r@Regulative{..} = do
    |                ^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:466:7: warning: [-Wunused-matches]
    Defined but not used: ‘rs’
    |
466 | r2fgl rs defRL r = pure Nothing
    |       ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:466:10: warning: [-Wunused-matches]
    Defined but not used: ‘defRL’
    |
466 | r2fgl rs defRL r = pure Nothing
    |          ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:466:16: warning: [-Wunused-matches]
    Defined but not used: ‘r’
    |
466 | r2fgl rs defRL r = pure Nothing
    |                ^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:470:12: warning: [-Wunused-matches]
    Defined but not used: ‘nl’
    |
470 | c2n (_, n, nl, _) = n
    |            ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:494:1: warning: [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In an equation for ‘subj2nl’:
        Patterns not matched:
            NLen (All _ _)
            NLen (Any _ _)
            NLen (Not _)
    |
494 | subj2nl NLen (AA.Leaf pt) = pt2text pt
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:498:1: warning: [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In an equation for ‘deonticTemporal’:
        Patterns not matched:
            Constitutive _ _ _ _ _ _ _ _ _ _
            Hornlike _ _ _ _ _ _ _ _ _ _
            TypeDecl _ _ _ _ _ _ _ _ _ _ _
            Scenario _ _ _ _ _ _ _
            ...
    |
498 | deonticTemporal r@(Regulative{..}) =
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/SVG.hs:498:17: warning: [-Wunused-matches]
    Defined but not used: ‘r’
    |
498 | deonticTemporal r@(Regulative{..}) =
    |                 ^
[23 of 23] Compiling LS.XPile.VueJSON [LS changed]

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/VueJSON.hs:7:1: warning: [-Wunused-imports]
    The import of ‘AnyAll.Types’ is redundant
      except perhaps to import instances from ‘AnyAll.Types’
    To import instances alone, use: import AnyAll.Types()
  |
7 | import AnyAll.Types
  | ^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/VueJSON.hs:9:1: warning: [-Wunused-imports]
    The import of ‘Options.Generic’ is redundant
      except perhaps to import instances from ‘Options.Generic’
    To import instances alone, use: import Options.Generic()
  |
9 | import Options.Generic
  | ^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/VueJSON.hs:10:1: warning: [-Wunused-imports]
    The import of ‘catMaybes’ from module ‘Data.Maybe’ is redundant
   |
10 | import Data.Maybe (maybeToList, catMaybes)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/VueJSON.hs:20:36: warning: [-Wunused-record-wildcards]
    No variables bound in the record wildcard match are used
      Possible fix: omit the ‘..’
   |
20 |                   | r@DefTypically{..} <- rs ]
   |                                    ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/VueJSON.hs:32:13: warning: [-Wunused-matches]
    Defined but not used: ‘rc’
   |
32 | rulegrounds rc globalrules r = [ ]
   |             ^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/VueJSON.hs:32:16: warning: [-Wunused-matches]
    Defined but not used: ‘globalrules’
   |
32 | rulegrounds rc globalrules r = [ ]
   |                ^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/src/LS/XPile/VueJSON.hs:32:28: warning: [-Wunused-matches]
    Defined but not used: ‘r’
   |
32 | rulegrounds rc globalrules r = [ ]
   |                            ^
ld: warning: directory not found for option '-L/nix/store/38qxlxj2q5295bcm7s4dndksap4zhdr6-cabal-install-3.6.2.0/lib'
ld: warning: directory not found for option '-L/nix/store/f4mfk1xilg4mapm18z9amwa9nw7h9n7q-gcc-wrapper-10.3.0/lib'
ld: warning: directory not found for option '-L/nix/store/38qxlxj2q5295bcm7s4dndksap4zhdr6-cabal-install-3.6.2.0/lib'
ld: warning: directory not found for option '-L/nix/store/f4mfk1xilg4mapm18z9amwa9nw7h9n7q-gcc-wrapper-10.3.0/lib'
Preprocessing executable 'natural4-exe' for natural4-0.1.0.0..
Building executable 'natural4-exe' for natural4-0.1.0.0..
[1 of 2] Compiling Main [LS changed]
Linking .stack-work/dist/x86_64-osx-nix/Cabal-3.2.1.0/build/natural4-exe/natural4-exe ...
ld: warning: directory not found for option '-L/nix/store/38qxlxj2q5295bcm7s4dndksap4zhdr6-cabal-install-3.6.2.0/lib'
ld: warning: directory not found for option '-L/nix/store/f4mfk1xilg4mapm18z9amwa9nw7h9n7q-gcc-wrapper-10.3.0/lib'
ld: warning: directory not found for option '-L/nix/store/38qxlxj2q5295bcm7s4dndksap4zhdr6-cabal-install-3.6.2.0/lib'
ld: warning: directory not found for option '-L/nix/store/f4mfk1xilg4mapm18z9amwa9nw7h9n7q-gcc-wrapper-10.3.0/lib'
Preprocessing test suite 'natural4-test' for natural4-0.1.0.0..
Building test suite 'natural4-test' for natural4-0.1.0.0..
[3 of 3] Compiling Main [LS.Lib changed]

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:21:1: warning: [-Wunused-imports]
    The import of ‘LS.XPile.Prolog’ is redundant
      except perhaps to import instances from ‘LS.XPile.Prolog’
    To import instances alone, use: import LS.XPile.Prolog()
   |
21 | import LS.XPile.Prolog
   | ^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:22:1: warning: [-Wunused-imports]
    The import of ‘LS.XPile.Petri’ is redundant
      except perhaps to import instances from ‘LS.XPile.Petri’
    To import instances alone, use: import LS.XPile.Petri()
   |
22 | import LS.XPile.Petri
   | ^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:23:1: warning: [-Wunused-imports]
    The import of ‘LS.XPile.SVG’ is redundant
      except perhaps to import instances from ‘LS.XPile.SVG’
    To import instances alone, use: import LS.XPile.SVG()
   |
23 | import LS.XPile.SVG
   | ^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:28:1: warning: [-Wunused-imports]
    The import of ‘fromList’
    from module ‘Data.List.NonEmpty’ is redundant
   |
28 | import Data.List.NonEmpty (NonEmpty ((:|)), fromList)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:33:1: warning: [-Wunused-imports]
    The import of ‘replicateM’ from module ‘Control.Monad’ is redundant
   |
33 | import Control.Monad (when, replicateM, guard)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:34:1: warning: [-Wunused-imports]
    The import of ‘Data.Either’ is redundant
      except perhaps to import instances from ‘Data.Either’
    To import instances alone, use: import Data.Either()
   |
34 | import Data.Either (fromRight)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:35:1: warning: [-Wunused-imports]
    The import of ‘Data.Char’ is redundant
      except perhaps to import instances from ‘Data.Char’
    To import instances alone, use: import Data.Char()
   |
35 | import Data.Char
   | ^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:36:1: warning: [-Wunused-imports]
    The import of ‘LS.ParamText’ is redundant
      except perhaps to import instances from ‘LS.ParamText’
    To import instances alone, use: import LS.ParamText()
   |
36 | import LS.ParamText
   | ^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:39:1: warning: [-Wunused-imports]
    The import of ‘LS.Types’ is redundant
      except perhaps to import instances from ‘LS.Types’
    To import instances alone, use: import LS.Types()
   |
39 | import LS.Types (MyToken(Distinct, GoDeeper, UnDeeper, TypeSeparator, RuleMarker))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:121:19: warning: [-Wunused-matches]
    Defined but not used: ‘desc’
    |
121 | filetest testfile desc parseFunc expected =
    |                   ^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:127:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature:
      filetest2 :: Applicative f =>
                   String -> p1 -> (String -> MyStream -> f b) -> p2 -> SpecWith ()
    |
127 | filetest2 testfile desc parseFunc expected =
    | ^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:127:20: warning: [-Wunused-matches]
    Defined but not used: ‘desc’
    |
127 | filetest2 testfile desc parseFunc expected =
    |                    ^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:127:35: warning: [-Wunused-matches]
    Defined but not used: ‘expected’
    |
127 | filetest2 testfile desc parseFunc expected =
    |                                   ^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:130:7: warning: [-Wunused-local-binds]
    Defined but not used: ‘parsed’
    |
130 |   let parsed = parseFunc testfile `traverse` exampleStreams testcsv
    |       ^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:141:1: warning: [-Worphans]
    Orphan instance: instance Arbitrary T.Text
    To avoid this
        move the instance declaration to the module of the class or of the type, or
        wrap the type with a newtype and declare the instance on the new type.
    |
141 | instance Arbitrary T.Text where
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:145:1: warning: [-Worphans]
    Orphan instance: instance Arbitrary MyToken
    To avoid this
        move the instance declaration to the module of the class or of the type, or
        wrap the type with a newtype and declare the instance on the new type.
    |
145 | instance Arbitrary MyToken where
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:155:18: warning: [-Wname-shadowing]
    This binding for ‘token’ shadows the existing binding
      imported from ‘Text.Megaparsec’ at test/Spec.hs:7:1-22
      (and originally defined in ‘megaparsec-9.0.1:Text.Megaparsec.Class’)
    |
155 | prop_rendertoken token = 
    |                  ^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:190:7: warning: [-Wunused-local-binds]
    Defined but not used: ‘parseWith1’
    |
190 |   let parseWith1 f x y s =                          dumpStream s  >> f <$> runMyParser combine runConfigDebug x y s
    |       ^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:192:7: warning: [-Wunused-local-binds]
    Defined but not used: ‘parseR1’
    |
192 |   let parseR1      x y s =                          dumpStream s  >> runMyParser combine runConfigDebug x y s
    |       ^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:194:7: warning: [-Wunused-local-binds]
    Defined but not used: ‘parseOther1’
    |
194 |   let parseOther1  x y s =                          dumpStream s  >> runMyParser id      runConfigDebug x y s
    |       ^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:281:11: warning: [-Wunused-local-binds]
    Defined but not used: ‘imbibeRule2’
    |
281 |       let imbibeRule2 srcrow srccol = [
    |           ^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:281:23: warning: [-Wname-shadowing]
    This binding for ‘srcrow’ shadows the existing binding
      imported from ‘LS.Types’ at test/Spec.hs:15:1-15
    |
281 |       let imbibeRule2 srcrow srccol = [
    |                       ^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:281:30: warning: [-Wname-shadowing]
    This binding for ‘srccol’ shadows the existing binding
      imported from ‘LS.Types’ at test/Spec.hs:15:1-15
    |
281 |       let imbibeRule2 srcrow srccol = [
    |                              ^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:413:11: warning: [-Wunused-local-binds]
    Defined but not used: ‘if_king_wishes_singer_2’
    |
413 |       let if_king_wishes_singer_2 = if_king_wishes ++
    |           ^^^^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:639:11: warning: [-Wunused-local-binds]
    Defined but not used: ‘simpleHorn10’
    |
639 |       let simpleHorn10 = [ defaultHorn
    |           ^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:784:11: warning: [-Wunused-local-binds]
    Defined but not used: ‘whoStructR_4’
    |
784 |           whoStructR_4 = defaultReg
    |           ^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:1160:11: warning: [-Wname-shadowing]
    This binding for ‘aboveNextLineKeyword’ shadows the existing binding
      imported from ‘LS.Parser’ at test/Spec.hs:9:1-16
     |
1160 |           aboveNextLineKeyword = debugName "aboveNextLineKeyword" $ do
     |           ^^^^^^^^^^^^^^^^^^^^

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:1161:24: warning: [-Wtype-defaults]
    • Defaulting the following constraints to type ‘Integer’
        (Show b0)
          arising from a use of ‘$*|’ at test/Spec.hs:(1161,24)-(1162,44)
        (Num b0) arising from the literal ‘0’ at test/Spec.hs:1162:43
    • In the first argument of ‘(->|)’, namely
        ‘(,,) $*| return ((), 0)’
      In the first argument of ‘(|*|)’, namely
        ‘(,,) $*| return ((), 0) ->| 1’
      In the first argument of ‘(|<|)’, namely
        ‘(,,) $*| return ((), 0) ->| 1 |*| slMultiTerm’
     |
1161 |             (_,x,y) <- (,,)
     |                        ^^^^...

/Users/anka/cclaw/dsl/lib/haskell/natural4/test/Spec.hs:1292:17: warning: [-Wunused-local-binds]
    Defined but not used: ‘getLHS’
     |
1292 |             let getLHS ((x,_),z) = (x,z)
     |                 ^^^^^^
Linking .stack-work/dist/x86_64-osx-nix/Cabal-3.2.1.0/build/natural4-test/natural4-test ...
ld: warning: directory not found for option '-L/nix/store/38qxlxj2q5295bcm7s4dndksap4zhdr6-cabal-install-3.6.2.0/lib'
ld: warning: directory not found for option '-L/nix/store/f4mfk1xilg4mapm18z9amwa9nw7h9n7q-gcc-wrapper-10.3.0/lib'
ld: warning: directory not found for option '-L/nix/store/38qxlxj2q5295bcm7s4dndksap4zhdr6-cabal-install-3.6.2.0/lib'
ld: warning: directory not found for option '-L/nix/store/f4mfk1xilg4mapm18z9amwa9nw7h9n7q-gcc-wrapper-10.3.0/lib'
natural4> copy/register
Installing library in /Users/anka/cclaw/dsl/lib/haskell/natural4/.stack-work/install/x86_64-osx-nix/e8dc3af450df9e4bcdbd2c5ff893fe135fd850cefa3211beac43272cbebd0617/8.10.7/lib/x86_64-osx-ghc-8.10.7/natural4-0.1.0.0-HeSArCETS3W6vdhgYMnLf6
Installing executable natural4-exe in /Users/anka/cclaw/dsl/lib/haskell/natural4/.stack-work/install/x86_64-osx-nix/e8dc3af450df9e4bcdbd2c5ff893fe135fd850cefa3211beac43272cbebd0617/8.10.7/bin
Registering library for natural4-0.1.0.0..
natural4> test (suite: natural4-test, args: --match /PDPA/boolstructp-3/)

* Tokens
[Every,GoDeeper,Other "person",UnDeeper,Who,GoDeeper,GoDeeper,Other "is",GoDeeper,Other "immortal",GoDeeper,Typically,GoDeeper,Other "false",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Or,GoDeeper,Other "has",GoDeeper,Other "health insurance",UnDeeper,UnDeeper,UnDeeper,May,GoDeeper,Other "sharpen knives",UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / term p                                                                                   :2_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :2_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :2_3:Other "is":
******************** / manyIndentation/leaf?                                                             :2_3:Other "is":
********************* / term p                                                                          :2_3:Other "is":
********************** / term p/1a:label directly above                                                :2_3:Other "is":
*********************** / $*|                                                                         :2_3:Other "is":
************************ / someSL                                                                    :2_3:Other "is":
************************* / pNumAsText                                                                  :2_5:Typically:
************************ \ someSL has returned (["is","immortal"],1)                                    :2_5:GoDeeper:
************************ / pNumAsText                                                                   :2_5:GoDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :2_3:Other "is":
*********************** / someSL                                                                      :2_3:Other "is":
************************ / pNumAsText                                                                    :2_5:Typically:
*********************** \ someSL has returned (["is","immortal"],1)                                      :2_5:GoDeeper:
*********************** / undeepers                                                                      :2_5:GoDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :2_5:GoDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "is":
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "is":
************************ / someIndentation                                                           :2_3:Other "is":
************************* / myindented: consuming GoDeeper                                          :2_3:Other "is":
*********************** / term p/3:plain p                                                            :2_3:Other "is":
************************ / pRelPred                                                                  :2_3:Other "is":
************************* / slRelPred                                                               :2_3:Other "is":
************************** / nested simpleHorn                                                     :2_3:Other "is":
*************************** > |^|                                                                 :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |^| deeps                                                              :2_5:GoDeeper:
*************************** \ |^| deeps has returned ([()],1)                                         :2_5:Typically:
************************** / RPConstraint                                                          :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPMT                                                                  :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slAKA                                                             :2_3:Other "is":
***************************** / $*|                                                             :2_3:Other "is":
****************************** / slAKA base                                                    :2_3:Other "is":
******************************* / slMultiTerm                                                 :2_3:Other "is":
******************************** / someSL                                                    :2_3:Other "is":
********************************* / pNumAsText                                                  :2_5:Typically:
******************************** \ someSL has returned (["is","immortal"],1)                    :2_5:GoDeeper:
******************************* \ slMultiTerm has returned (["is","immortal"],1)                 :2_5:GoDeeper:
****************************** \ slAKA base has returned (["is","immortal"],1)                    :2_5:GoDeeper:
***************************** \ $*| has returned (["is","immortal"],1)                             :2_5:GoDeeper:
***************************** / |>>/recurse                                                        :2_5:GoDeeper:
****************************** / |>>/recurse                                                       :2_5:Typically:
****************************** / |>>/base                                                          :2_5:Typically:
******************************* / slAKA optional akapart                                          :2_5:Typically:
******************************** / |?| optional something                                        :2_5:Typically:
********************************* / |>>/recurse                                                 :2_5:Typically:
********************************* / |>>/base                                                    :2_5:Typically:
********************************** / PAKA/akapart                                              :2_5:Typically:
*********************************** / $>|                                                     :2_5:Typically:
************************************ / Aka Token                                             :2_5:Typically:
******************************** \ |?| optional something has returned (Nothing,0)               :2_5:Typically:
******************************* \ slAKA optional akapart has returned (Nothing,0)                 :2_5:Typically:
******************************* > |>>/base got Nothing                                            :2_5:Typically:
****************************** \ |>>/base has returned (Nothing,0)                                 :2_5:Typically:
***************************** \ |>>/recurse has returned (Nothing,1)                                :2_5:Typically:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
****************************** / slAKA optional typically                                          :2_5:Typically:
******************************* / |?| optional something                                          :2_5:Typically:
******************************** / |>>/recurse                                                   :2_5:Typically:
******************************** / |>>/base                                                      :2_5:Typically:
********************************* / typically                                                   :2_5:Typically:
********************************** / $>|                                                       :2_5:Typically:
********************************** \ $>| has returned Typically                                 :2_6:GoDeeper:
********************************** / |>>/recurse                                                :2_6:GoDeeper:
*********************************** / |>>/recurse                                               :2_6:Other "fals:
*********************************** / |>>/base                                                  :2_6:Other "fals:
************************************ / slMultiTerm                                             :2_6:Other "fals:
************************************* / someSL                                                :2_6:Other "fals:
************************************* \ someSL has returned (["false"],0)                :3_3:UnDeeper:
************************************ \ slMultiTerm has returned (["false"],0)             :3_3:UnDeeper:
************************************ > |>>/base got ["false"]                             :3_3:UnDeeper:
*********************************** \ |>>/base has returned (["false"],0)                  :3_3:UnDeeper:
********************************** \ |>>/recurse has returned (["false"],1)                 :3_3:UnDeeper:
********************************* \ typically has returned (["false"],1)                     :3_3:UnDeeper:
********************************* > |>>/base got ["false"]                                   :3_3:UnDeeper:
******************************** \ |>>/base has returned (["false"],1)                        :3_3:UnDeeper:
******************************* \ |?| optional something has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** \ slAKA optional typically has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** > |>>/base got Just ["false"]                                    :3_3:UnDeeper:
***************************** \ |>>/base has returned (Just ["false"],1)                         :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
**************************** \ slAKA has returned (["is","immortal"],3)                           :3_3:UnDeeper:
*************************** \ $*| has returned (["is","immortal"],3)                               :3_3:UnDeeper:
************************** \ RPMT has returned (RPMT ["is","immortal"],3)                           :3_3:UnDeeper:
************************* \ slRelPred has returned (RPMT ["is","immortal"],3)                        :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                           :3_6:UnDeeper:
************************* \ undeepers has returned ()                                                      :3_6:UnDeeper:
************************ \ pRelPred has returned RPMT ["is","immortal"]                                     :3_6:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])                      :3_6:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                     :3_6:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["is","immortal"])                                    :3_6:UnDeeper:
********************* / binary(Or)                                                                             :3_6:UnDeeper:
********************* / binary(And)                                                                            :3_6:UnDeeper:
********************* / binary(SetLess)                                                                        :3_6:UnDeeper:
********************* / binary(SetPlus)                                                                        :3_6:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                       :3_6:UnDeeper:
******************** / myindented: consuming UnDeeper                                                           :3_6:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                            :3_2:Or:
******************* \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])        :3_2:Or:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
**************** \ term p has returned MyLeaf (RPMT ["is","immortal"])                                     :3_2:Or:
**************** / binary(Or)                                                                              :3_2:Or:
**************** \ binary(Or) has returned Or                                                               :3_3:GoDeeper:
**************** / term p                                                                                   :3_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :3_3:GoDeeper:
****************** / $*|                                                                                  :3_3:GoDeeper:
******************* / someSL                                                                             :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :3_3:GoDeeper:
****************** / someSL                                                                               :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :3_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :3_3:GoDeeper:
******************* / someIndentation                                                                    :3_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :3_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :3_3:Other "has":
******************** / manyIndentation/leaf?                                                             :3_3:Other "has":
********************* / term p                                                                          :3_3:Other "has":
********************** / term p/1a:label directly above                                                :3_3:Other "has":
*********************** / $*|                                                                         :3_3:Other "has":
************************ / someSL                                                                    :3_3:Other "has":
************************ \ someSL has returned (["has","health insurance"],1)                       :4_2:UnDeeper:
************************ / pNumAsText                                                               :4_2:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :3_3:Other "has":
*********************** / someSL                                                                      :3_3:Other "has":
*********************** \ someSL has returned (["has","health insurance"],1)                         :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                         :4_3:UnDeeper:
*********************** \ undeepers has returned ()                                                    :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "has":
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "has":
************************ / someIndentation                                                           :3_3:Other "has":
************************* / myindented: consuming GoDeeper                                          :3_3:Other "has":
*********************** / term p/3:plain p                                                            :3_3:Other "has":
************************ / pRelPred                                                                  :3_3:Other "has":
************************* / slRelPred                                                               :3_3:Other "has":
************************** / nested simpleHorn                                                     :3_3:Other "has":
*************************** > |^|                                                                 :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |^| deeps                                                          :4_2:UnDeeper:
*************************** \ |^| deeps has returned ([(),(),()],-3)                          :4_1:May:
************************** / RPConstraint                                                          :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slAKA                                                             :3_3:Other "has":
***************************** / $*|                                                             :3_3:Other "has":
****************************** / slAKA base                                                    :3_3:Other "has":
******************************* / slMultiTerm                                                 :3_3:Other "has":
******************************** / someSL                                                    :3_3:Other "has":
******************************** \ someSL has returned (["has","health insurance"],1)       :4_2:UnDeeper:
******************************* \ slMultiTerm has returned (["has","health insurance"],1)    :4_2:UnDeeper:
****************************** \ slAKA base has returned (["has","health insurance"],1)       :4_2:UnDeeper:
***************************** \ $*| has returned (["has","health insurance"],1)                :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / PAKA/akapart                                           :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
*********************************** / Aka Token                                          :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / typically                                              :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                    :4_2:UnDeeper:
**************************** \ slAKA has returned (["has","health insurance"],1)                :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
************************** \ RPMT has returned (RPMT ["has","health insurance"],1)                :4_2:UnDeeper:
************************* \ slRelPred has returned (RPMT ["has","health insurance"],1)             :4_2:UnDeeper:
************************* / undeepers                                                              :4_2:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
************************ \ pRelPred has returned RPMT ["has","health insurance"]                      :4_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"])       :4_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])      :4_3:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])        :4_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :4_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"])    :4_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["has","health insurance"])                                 :4_4:UnDeeper:
**************** / binary(Or)                                                                                   :4_4:UnDeeper:
**************** / binary(And)                                                                                  :4_4:UnDeeper:
**************** / binary(SetLess)                                                                              :4_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :4_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :4_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:May:
************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************* \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** \ term p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** / binary(Or)                                                                                      :4_1:May:
*********** / binary(And)                                                                                     :4_1:May:
*********** / binary(SetLess)                                                                                 :4_1:May:
*********** / binary(SetPlus)                                                                                 :4_1:May:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
******** \ undeepers has returned ()                                                                           :EOF:
******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
******* / pDoAction/Do                                                                                          :EOF:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / term p                                                                                   :2_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :2_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :2_3:Other "is":
******************** / manyIndentation/leaf?                                                             :2_3:Other "is":
********************* / term p                                                                          :2_3:Other "is":
********************** / term p/1a:label directly above                                                :2_3:Other "is":
*********************** / $*|                                                                         :2_3:Other "is":
************************ / someSL                                                                    :2_3:Other "is":
************************* / pNumAsText                                                                  :2_5:Typically:
************************ \ someSL has returned (["is","immortal"],1)                                    :2_5:GoDeeper:
************************ / pNumAsText                                                                   :2_5:GoDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :2_3:Other "is":
*********************** / someSL                                                                      :2_3:Other "is":
************************ / pNumAsText                                                                    :2_5:Typically:
*********************** \ someSL has returned (["is","immortal"],1)                                      :2_5:GoDeeper:
*********************** / undeepers                                                                      :2_5:GoDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :2_5:GoDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "is":
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "is":
************************ / someIndentation                                                           :2_3:Other "is":
************************* / myindented: consuming GoDeeper                                          :2_3:Other "is":
*********************** / term p/3:plain p                                                            :2_3:Other "is":
************************ / pRelPred                                                                  :2_3:Other "is":
************************* / slRelPred                                                               :2_3:Other "is":
************************** / nested simpleHorn                                                     :2_3:Other "is":
*************************** > |^|                                                                 :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |^| deeps                                                              :2_5:GoDeeper:
*************************** \ |^| deeps has returned ([()],1)                                         :2_5:Typically:
************************** / RPConstraint                                                          :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPMT                                                                  :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slAKA                                                             :2_3:Other "is":
***************************** / $*|                                                             :2_3:Other "is":
****************************** / slAKA base                                                    :2_3:Other "is":
******************************* / slMultiTerm                                                 :2_3:Other "is":
******************************** / someSL                                                    :2_3:Other "is":
********************************* / pNumAsText                                                  :2_5:Typically:
******************************** \ someSL has returned (["is","immortal"],1)                    :2_5:GoDeeper:
******************************* \ slMultiTerm has returned (["is","immortal"],1)                 :2_5:GoDeeper:
****************************** \ slAKA base has returned (["is","immortal"],1)                    :2_5:GoDeeper:
***************************** \ $*| has returned (["is","immortal"],1)                             :2_5:GoDeeper:
***************************** / |>>/recurse                                                        :2_5:GoDeeper:
****************************** / |>>/recurse                                                       :2_5:Typically:
****************************** / |>>/base                                                          :2_5:Typically:
******************************* / slAKA optional akapart                                          :2_5:Typically:
******************************** / |?| optional something                                        :2_5:Typically:
********************************* / |>>/recurse                                                 :2_5:Typically:
********************************* / |>>/base                                                    :2_5:Typically:
********************************** / PAKA/akapart                                              :2_5:Typically:
*********************************** / $>|                                                     :2_5:Typically:
************************************ / Aka Token                                             :2_5:Typically:
******************************** \ |?| optional something has returned (Nothing,0)               :2_5:Typically:
******************************* \ slAKA optional akapart has returned (Nothing,0)                 :2_5:Typically:
******************************* > |>>/base got Nothing                                            :2_5:Typically:
****************************** \ |>>/base has returned (Nothing,0)                                 :2_5:Typically:
***************************** \ |>>/recurse has returned (Nothing,1)                                :2_5:Typically:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
****************************** / slAKA optional typically                                          :2_5:Typically:
******************************* / |?| optional something                                          :2_5:Typically:
******************************** / |>>/recurse                                                   :2_5:Typically:
******************************** / |>>/base                                                      :2_5:Typically:
********************************* / typically                                                   :2_5:Typically:
********************************** / $>|                                                       :2_5:Typically:
********************************** \ $>| has returned Typically                                 :2_6:GoDeeper:
********************************** / |>>/recurse                                                :2_6:GoDeeper:
*********************************** / |>>/recurse                                               :2_6:Other "fals:
*********************************** / |>>/base                                                  :2_6:Other "fals:
************************************ / slMultiTerm                                             :2_6:Other "fals:
************************************* / someSL                                                :2_6:Other "fals:
************************************* \ someSL has returned (["false"],0)                :3_3:UnDeeper:
************************************ \ slMultiTerm has returned (["false"],0)             :3_3:UnDeeper:
************************************ > |>>/base got ["false"]                             :3_3:UnDeeper:
*********************************** \ |>>/base has returned (["false"],0)                  :3_3:UnDeeper:
********************************** \ |>>/recurse has returned (["false"],1)                 :3_3:UnDeeper:
********************************* \ typically has returned (["false"],1)                     :3_3:UnDeeper:
********************************* > |>>/base got ["false"]                                   :3_3:UnDeeper:
******************************** \ |>>/base has returned (["false"],1)                        :3_3:UnDeeper:
******************************* \ |?| optional something has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** \ slAKA optional typically has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** > |>>/base got Just ["false"]                                    :3_3:UnDeeper:
***************************** \ |>>/base has returned (Just ["false"],1)                         :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
**************************** \ slAKA has returned (["is","immortal"],3)                           :3_3:UnDeeper:
*************************** \ $*| has returned (["is","immortal"],3)                               :3_3:UnDeeper:
************************** \ RPMT has returned (RPMT ["is","immortal"],3)                           :3_3:UnDeeper:
************************* \ slRelPred has returned (RPMT ["is","immortal"],3)                        :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                           :3_6:UnDeeper:
************************* \ undeepers has returned ()                                                      :3_6:UnDeeper:
************************ \ pRelPred has returned RPMT ["is","immortal"]                                     :3_6:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])                      :3_6:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                     :3_6:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["is","immortal"])                                    :3_6:UnDeeper:
********************* / binary(Or)                                                                             :3_6:UnDeeper:
********************* / binary(And)                                                                            :3_6:UnDeeper:
********************* / binary(SetLess)                                                                        :3_6:UnDeeper:
********************* / binary(SetPlus)                                                                        :3_6:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                       :3_6:UnDeeper:
******************** / myindented: consuming UnDeeper                                                           :3_6:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                            :3_2:Or:
******************* \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])        :3_2:Or:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
**************** \ term p has returned MyLeaf (RPMT ["is","immortal"])                                     :3_2:Or:
**************** / binary(Or)                                                                              :3_2:Or:
**************** \ binary(Or) has returned Or                                                               :3_3:GoDeeper:
**************** / term p                                                                                   :3_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :3_3:GoDeeper:
****************** / $*|                                                                                  :3_3:GoDeeper:
******************* / someSL                                                                             :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :3_3:GoDeeper:
****************** / someSL                                                                               :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :3_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :3_3:GoDeeper:
******************* / someIndentation                                                                    :3_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :3_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :3_3:Other "has":
******************** / manyIndentation/leaf?                                                             :3_3:Other "has":
********************* / term p                                                                          :3_3:Other "has":
********************** / term p/1a:label directly above                                                :3_3:Other "has":
*********************** / $*|                                                                         :3_3:Other "has":
************************ / someSL                                                                    :3_3:Other "has":
************************ \ someSL has returned (["has","health insurance"],1)                       :4_2:UnDeeper:
************************ / pNumAsText                                                               :4_2:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :3_3:Other "has":
*********************** / someSL                                                                      :3_3:Other "has":
*********************** \ someSL has returned (["has","health insurance"],1)                         :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                         :4_3:UnDeeper:
*********************** \ undeepers has returned ()                                                    :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "has":
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "has":
************************ / someIndentation                                                           :3_3:Other "has":
************************* / myindented: consuming GoDeeper                                          :3_3:Other "has":
*********************** / term p/3:plain p                                                            :3_3:Other "has":
************************ / pRelPred                                                                  :3_3:Other "has":
************************* / slRelPred                                                               :3_3:Other "has":
************************** / nested simpleHorn                                                     :3_3:Other "has":
*************************** > |^|                                                                 :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |^| deeps                                                          :4_2:UnDeeper:
*************************** \ |^| deeps has returned ([(),(),()],-3)                          :4_1:May:
************************** / RPConstraint                                                          :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slAKA                                                             :3_3:Other "has":
***************************** / $*|                                                             :3_3:Other "has":
****************************** / slAKA base                                                    :3_3:Other "has":
******************************* / slMultiTerm                                                 :3_3:Other "has":
******************************** / someSL                                                    :3_3:Other "has":
******************************** \ someSL has returned (["has","health insurance"],1)       :4_2:UnDeeper:
******************************* \ slMultiTerm has returned (["has","health insurance"],1)    :4_2:UnDeeper:
****************************** \ slAKA base has returned (["has","health insurance"],1)       :4_2:UnDeeper:
***************************** \ $*| has returned (["has","health insurance"],1)                :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / PAKA/akapart                                           :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
*********************************** / Aka Token                                          :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / typically                                              :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                    :4_2:UnDeeper:
**************************** \ slAKA has returned (["has","health insurance"],1)                :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
************************** \ RPMT has returned (RPMT ["has","health insurance"],1)                :4_2:UnDeeper:
************************* \ slRelPred has returned (RPMT ["has","health insurance"],1)             :4_2:UnDeeper:
************************* / undeepers                                                              :4_2:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
************************ \ pRelPred has returned RPMT ["has","health insurance"]                      :4_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"])       :4_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])      :4_3:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])        :4_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :4_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"])    :4_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["has","health insurance"])                                 :4_4:UnDeeper:
**************** / binary(Or)                                                                                   :4_4:UnDeeper:
**************** / binary(And)                                                                                  :4_4:UnDeeper:
**************** / binary(SetLess)                                                                              :4_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :4_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :4_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:May:
************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************* \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** \ term p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** / binary(Or)                                                                                      :4_1:May:
*********** / binary(And)                                                                                     :4_1:May:
*********** / binary(SetLess)                                                                                 :4_1:May:
*********** / binary(SetPlus)                                                                                 :4_1:May:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
******* / pTemporal/eventually                                                                                    :4_1:May:
******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / pTemporal/vaguely                                                                                       :4_1:May:
******* / pDA                                                                                                     :4_1:May:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / term p                                                                                           :4_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :4_2:GoDeeper:
************* / $*|                                                                                          :4_2:GoDeeper:
************** / someSL                                                                                     :4_2:GoDeeper:
*************** / pNumAsText                                                                               :4_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :4_2:GoDeeper:
************* / someSL                                                                                       :4_2:GoDeeper:
************** / pNumAsText                                                                                 :4_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :4_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :4_2:GoDeeper:
************** / someIndentation                                                                            :4_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :4_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :4_2:Other "shar:
*************** / manyIndentation/leaf?                                                                     :4_2:Other "shar:
**************** / term p                                                                                  :4_2:Other "shar:
***************** / term p/1a:label directly above                                                        :4_2:Other "shar:
****************** / $*|                                                                                 :4_2:Other "shar:
******************* / someSL                                                                            :4_2:Other "shar:
******************* \ someSL has returned (["sharpen knives"],0)                                         :1_2:UnDeeper:
******************* / pNumAsText                                                                         :1_2:UnDeeper:
***************** / term p/b:label to the left of line below, with EOL                                    :4_2:Other "shar:
****************** / someSL                                                                              :4_2:Other "shar:
****************** \ someSL has returned (["sharpen knives"],0)                                           :1_2:UnDeeper:
****************** / undeepers                                                                            :1_2:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :1_2:UnDeeper:
******************* > sameLine: success!                                                                 :1_2:UnDeeper:
****************** \ undeepers has returned ()                                                            :1_2:UnDeeper:
****************** / matching EOL                                                                         :1_2:UnDeeper:
***************** / term p/notLabelTerm                                                                   :4_2:Other "shar:
****************** / term p/2:someIndentation expr p                                                     :4_2:Other "shar:
******************* / someIndentation                                                                   :4_2:Other "shar:
******************** / myindented: consuming GoDeeper                                                  :4_2:Other "shar:
****************** / term p/3:plain p                                                                    :4_2:Other "shar:
******************* / pParamText                                                                        :4_2:Other "shar:
******************** / pParamText(flat) first line: pKeyValues                                         :4_2:Other "shar:
********************* / pKeyValuesAka                                                                 :4_2:Other "shar:
********************** / slAKA                                                                       :4_2:Other "shar:
*********************** / $*|                                                                       :4_2:Other "shar:
************************ / slAKA base                                                              :4_2:Other "shar:
************************* / slKeyValues                                                           :4_2:Other "shar:
************************** / $*|                                                                 :4_2:Other "shar:
*************************** / someSL                                                            :4_2:Other "shar:
*************************** \ someSL has returned (["sharpen knives"],0)                         :1_2:UnDeeper:
************************** \ $*| has returned (["sharpen knives"],0)                              :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / slTypeSig                                                      :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :1_2:UnDeeper:
************************** \ |>>/base has returned (Nothing,0)                                    :1_2:UnDeeper:
************************* \ slKeyValues has returned (("sharpen knives" :| [],Nothing),0)          :1_2:UnDeeper:
************************ \ slAKA base has returned (("sharpen knives" :| [],Nothing),0)             :1_2:UnDeeper:
*********************** \ $*| has returned (("sharpen knives" :| [],Nothing),0)                      :1_2:UnDeeper:
*********************** / |>>/recurse                                                                :1_2:UnDeeper:
*********************** / |>>/base                                                                   :1_2:UnDeeper:
************************ / slAKA optional akapart                                                   :1_2:UnDeeper:
************************* / |?| optional something                                                 :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / PAKA/akapart                                                       :1_2:UnDeeper:
**************************** / $>|                                                              :1_2:UnDeeper:
***************************** / Aka Token                                                      :1_2:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                        :1_2:UnDeeper:
************************ \ slAKA optional akapart has returned (Nothing,0)                          :1_2:UnDeeper:
************************ > |>>/base got Nothing                                                     :1_2:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                          :1_2:UnDeeper:
*********************** / |>>/recurse                                                                :1_2:UnDeeper:
*********************** / |>>/base                                                                   :1_2:UnDeeper:
************************ / slAKA optional typically                                                 :1_2:UnDeeper:
************************* / |?| optional something                                                 :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / typically                                                          :1_2:UnDeeper:
**************************** / $>|                                                              :1_2:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                        :1_2:UnDeeper:
************************ \ slAKA optional typically has returned (Nothing,0)                        :1_2:UnDeeper:
************************ > |>>/base got Nothing                                                     :1_2:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                          :1_2:UnDeeper:
*********************** > slAKA: proceeding after base and entityalias are retrieved ...             :1_2:UnDeeper:
*********************** > pAKA: entityalias = Nothing                                                :1_2:UnDeeper:
********************** \ slAKA has returned (("sharpen knives" :| [],Nothing),0)                      :1_2:UnDeeper:
********************** / undeepers                                                                    :1_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :1_2:UnDeeper:
*********************** > sameLine: success!                                                         :1_2:UnDeeper:
********************** \ undeepers has returned ()                                                    :1_2:UnDeeper:
********************* \ pKeyValuesAka has returned ("sharpen knives" :| [],Nothing)                    :1_2:UnDeeper:
******************** \ pParamText(flat) first line: pKeyValues has returned ("sharpen knives" :| [],Nothing) :1_2:UnDeeper:
******************** / pParamText(flat) subsequent lines: sameMany pKeyValues                           :1_2:UnDeeper:
********************* / manyIndentation/leaf?                                                          :1_2:UnDeeper:
********************** / sameMany                                                                     :1_2:UnDeeper:
*********************** / pKeyValuesAka                                                              :1_2:UnDeeper:
************************ / slAKA                                                                    :1_2:UnDeeper:
************************* / $*|                                                                    :1_2:UnDeeper:
************************** / slAKA base                                                           :1_2:UnDeeper:
*************************** / slKeyValues                                                        :1_2:UnDeeper:
**************************** / $*|                                                              :1_2:UnDeeper:
***************************** / someSL                                                         :1_2:UnDeeper:
****************************** / pNumAsText                                                   :1_2:UnDeeper:
********************** \ sameMany has returned []                                                     :1_2:UnDeeper:
********************* \ manyIndentation/leaf? has returned []                                          :1_2:UnDeeper:
******************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []           :1_2:UnDeeper:
******************* \ pParamText has returned ("sharpen knives" :| [],Nothing) :| []                     :1_2:UnDeeper:
****************** \ term p/3:plain p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])        :1_2:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])       :1_2:UnDeeper:
**************** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                      :1_2:UnDeeper:
**************** / binary(Or)                                                                               :1_2:UnDeeper:
**************** / binary(And)                                                                              :1_2:UnDeeper:
**************** / binary(SetLess)                                                                          :1_2:UnDeeper:
**************** / binary(SetPlus)                                                                          :1_2:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])         :1_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :1_2:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :EOF:
************** \ someIndentation has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])            :EOF:
************* \ term p/2:someIndentation expr p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| []) :EOF:
************ \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])            :EOF:
*********** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                           :EOF:
*********** / binary(Or)                                                                                    :EOF:
*********** / binary(And)                                                                                   :EOF:
*********** / binary(SetLess)                                                                               :EOF:
*********** / binary(SetPlus)                                                                               :EOF:
********** \ expr pParamText has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                    :EOF:
********* \ dBoolStructP calling exprP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
******** \ pAction calling dBoolStructP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
******* \ pDA has returned (DMay,Leaf (("sharpen knives" :| [],Nothing) :| []))                                 :EOF:
******* / WHERE                                                                                                 :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
******* / pTemporal/eventually                                                                                  :EOF:
******* / pTemporal/specifically                                                                                :EOF:
******** / $>|                                                                                                 :EOF:
******* / pTemporal/vaguely                                                                                     :EOF:
****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** / pHenceLest-Hence                                                                                          :EOF:
***** / pHenceLest-Lest                                                                                           :EOF:
****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
****   pRegRuleNormal: the positive preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: the negative preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
*** \ pRegRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
** \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
** / pRule                                                                                                           :EOF:
[Every,GoDeeper,Other "person",UnDeeper,Who,GoDeeper,GoDeeper,Other "is",GoDeeper,Other "immortal",GoDeeper,Typically,GoDeeper,Other "false",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Or,GoDeeper,Other "has",GoDeeper,Other "health insurance",UnDeeper,UnDeeper,UnDeeper,May,GoDeeper,Other "sharpen knives",UnDeeper]
** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / term p                                                                                   :2_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :2_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :2_3:Other "is":
******************** / manyIndentation/leaf?                                                             :2_3:Other "is":
********************* / term p                                                                          :2_3:Other "is":
********************** / term p/1a:label directly above                                                :2_3:Other "is":
*********************** / $*|                                                                         :2_3:Other "is":
************************ / someSL                                                                    :2_3:Other "is":
************************* / pNumAsText                                                                  :2_5:Typically:
************************ \ someSL has returned (["is","immortal"],1)                                    :2_5:GoDeeper:
************************ / pNumAsText                                                                   :2_5:GoDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :2_3:Other "is":
*********************** / someSL                                                                      :2_3:Other "is":
************************ / pNumAsText                                                                    :2_5:Typically:
*********************** \ someSL has returned (["is","immortal"],1)                                      :2_5:GoDeeper:
*********************** / undeepers                                                                      :2_5:GoDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :2_5:GoDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "is":
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "is":
************************ / someIndentation                                                           :2_3:Other "is":
************************* / myindented: consuming GoDeeper                                          :2_3:Other "is":
*********************** / term p/3:plain p                                                            :2_3:Other "is":
************************ / pRelPred                                                                  :2_3:Other "is":
************************* / slRelPred                                                               :2_3:Other "is":
************************** / nested simpleHorn                                                     :2_3:Other "is":
*************************** > |^|                                                                 :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |^| deeps                                                              :2_5:GoDeeper:
*************************** \ |^| deeps has returned ([()],1)                                         :2_5:Typically:
************************** / RPConstraint                                                          :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPMT                                                                  :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slAKA                                                             :2_3:Other "is":
***************************** / $*|                                                             :2_3:Other "is":
****************************** / slAKA base                                                    :2_3:Other "is":
******************************* / slMultiTerm                                                 :2_3:Other "is":
******************************** / someSL                                                    :2_3:Other "is":
********************************* / pNumAsText                                                  :2_5:Typically:
******************************** \ someSL has returned (["is","immortal"],1)                    :2_5:GoDeeper:
******************************* \ slMultiTerm has returned (["is","immortal"],1)                 :2_5:GoDeeper:
****************************** \ slAKA base has returned (["is","immortal"],1)                    :2_5:GoDeeper:
***************************** \ $*| has returned (["is","immortal"],1)                             :2_5:GoDeeper:
***************************** / |>>/recurse                                                        :2_5:GoDeeper:
****************************** / |>>/recurse                                                       :2_5:Typically:
****************************** / |>>/base                                                          :2_5:Typically:
******************************* / slAKA optional akapart                                          :2_5:Typically:
******************************** / |?| optional something                                        :2_5:Typically:
********************************* / |>>/recurse                                                 :2_5:Typically:
********************************* / |>>/base                                                    :2_5:Typically:
********************************** / PAKA/akapart                                              :2_5:Typically:
*********************************** / $>|                                                     :2_5:Typically:
************************************ / Aka Token                                             :2_5:Typically:
******************************** \ |?| optional something has returned (Nothing,0)               :2_5:Typically:
******************************* \ slAKA optional akapart has returned (Nothing,0)                 :2_5:Typically:
******************************* > |>>/base got Nothing                                            :2_5:Typically:
****************************** \ |>>/base has returned (Nothing,0)                                 :2_5:Typically:
***************************** \ |>>/recurse has returned (Nothing,1)                                :2_5:Typically:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
****************************** / slAKA optional typically                                          :2_5:Typically:
******************************* / |?| optional something                                          :2_5:Typically:
******************************** / |>>/recurse                                                   :2_5:Typically:
******************************** / |>>/base                                                      :2_5:Typically:
********************************* / typically                                                   :2_5:Typically:
********************************** / $>|                                                       :2_5:Typically:
********************************** \ $>| has returned Typically                                 :2_6:GoDeeper:
********************************** / |>>/recurse                                                :2_6:GoDeeper:
*********************************** / |>>/recurse                                               :2_6:Other "fals:
*********************************** / |>>/base                                                  :2_6:Other "fals:
************************************ / slMultiTerm                                             :2_6:Other "fals:
************************************* / someSL                                                :2_6:Other "fals:
************************************* \ someSL has returned (["false"],0)                :3_3:UnDeeper:
************************************ \ slMultiTerm has returned (["false"],0)             :3_3:UnDeeper:
************************************ > |>>/base got ["false"]                             :3_3:UnDeeper:
*********************************** \ |>>/base has returned (["false"],0)                  :3_3:UnDeeper:
********************************** \ |>>/recurse has returned (["false"],1)                 :3_3:UnDeeper:
********************************* \ typically has returned (["false"],1)                     :3_3:UnDeeper:
********************************* > |>>/base got ["false"]                                   :3_3:UnDeeper:
******************************** \ |>>/base has returned (["false"],1)                        :3_3:UnDeeper:
******************************* \ |?| optional something has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** \ slAKA optional typically has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** > |>>/base got Just ["false"]                                    :3_3:UnDeeper:
***************************** \ |>>/base has returned (Just ["false"],1)                         :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
**************************** \ slAKA has returned (["is","immortal"],3)                           :3_3:UnDeeper:
*************************** \ $*| has returned (["is","immortal"],3)                               :3_3:UnDeeper:
************************** \ RPMT has returned (RPMT ["is","immortal"],3)                           :3_3:UnDeeper:
************************* \ slRelPred has returned (RPMT ["is","immortal"],3)                        :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                           :3_6:UnDeeper:
************************* \ undeepers has returned ()                                                      :3_6:UnDeeper:
************************ \ pRelPred has returned RPMT ["is","immortal"]                                     :3_6:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])                      :3_6:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                     :3_6:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["is","immortal"])                                    :3_6:UnDeeper:
********************* / binary(Or)                                                                             :3_6:UnDeeper:
********************* / binary(And)                                                                            :3_6:UnDeeper:
********************* / binary(SetLess)                                                                        :3_6:UnDeeper:
********************* / binary(SetPlus)                                                                        :3_6:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                       :3_6:UnDeeper:
******************** / myindented: consuming UnDeeper                                                           :3_6:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                            :3_2:Or:
******************* \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])        :3_2:Or:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
**************** \ term p has returned MyLeaf (RPMT ["is","immortal"])                                     :3_2:Or:
**************** / binary(Or)                                                                              :3_2:Or:
**************** \ binary(Or) has returned Or                                                               :3_3:GoDeeper:
**************** / term p                                                                                   :3_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :3_3:GoDeeper:
****************** / $*|                                                                                  :3_3:GoDeeper:
******************* / someSL                                                                             :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :3_3:GoDeeper:
****************** / someSL                                                                               :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :3_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :3_3:GoDeeper:
******************* / someIndentation                                                                    :3_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :3_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :3_3:Other "has":
******************** / manyIndentation/leaf?                                                             :3_3:Other "has":
********************* / term p                                                                          :3_3:Other "has":
********************** / term p/1a:label directly above                                                :3_3:Other "has":
*********************** / $*|                                                                         :3_3:Other "has":
************************ / someSL                                                                    :3_3:Other "has":
************************ \ someSL has returned (["has","health insurance"],1)                       :4_2:UnDeeper:
************************ / pNumAsText                                                               :4_2:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :3_3:Other "has":
*********************** / someSL                                                                      :3_3:Other "has":
*********************** \ someSL has returned (["has","health insurance"],1)                         :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                         :4_3:UnDeeper:
*********************** \ undeepers has returned ()                                                    :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "has":
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "has":
************************ / someIndentation                                                           :3_3:Other "has":
************************* / myindented: consuming GoDeeper                                          :3_3:Other "has":
*********************** / term p/3:plain p                                                            :3_3:Other "has":
************************ / pRelPred                                                                  :3_3:Other "has":
************************* / slRelPred                                                               :3_3:Other "has":
************************** / nested simpleHorn                                                     :3_3:Other "has":
*************************** > |^|                                                                 :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |^| deeps                                                          :4_2:UnDeeper:
*************************** \ |^| deeps has returned ([(),(),()],-3)                          :4_1:May:
************************** / RPConstraint                                                          :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slAKA                                                             :3_3:Other "has":
***************************** / $*|                                                             :3_3:Other "has":
****************************** / slAKA base                                                    :3_3:Other "has":
******************************* / slMultiTerm                                                 :3_3:Other "has":
******************************** / someSL                                                    :3_3:Other "has":
******************************** \ someSL has returned (["has","health insurance"],1)       :4_2:UnDeeper:
******************************* \ slMultiTerm has returned (["has","health insurance"],1)    :4_2:UnDeeper:
****************************** \ slAKA base has returned (["has","health insurance"],1)       :4_2:UnDeeper:
***************************** \ $*| has returned (["has","health insurance"],1)                :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / PAKA/akapart                                           :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
*********************************** / Aka Token                                          :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / typically                                              :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                    :4_2:UnDeeper:
**************************** \ slAKA has returned (["has","health insurance"],1)                :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
************************** \ RPMT has returned (RPMT ["has","health insurance"],1)                :4_2:UnDeeper:
************************* \ slRelPred has returned (RPMT ["has","health insurance"],1)             :4_2:UnDeeper:
************************* / undeepers                                                              :4_2:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
************************ \ pRelPred has returned RPMT ["has","health insurance"]                      :4_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"])       :4_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])      :4_3:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])        :4_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :4_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"])    :4_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["has","health insurance"])                                 :4_4:UnDeeper:
**************** / binary(Or)                                                                                   :4_4:UnDeeper:
**************** / binary(And)                                                                                  :4_4:UnDeeper:
**************** / binary(SetLess)                                                                              :4_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :4_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :4_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:May:
************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************* \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** \ term p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** / binary(Or)                                                                                      :4_1:May:
*********** / binary(And)                                                                                     :4_1:May:
*********** / binary(SetLess)                                                                                 :4_1:May:
*********** / binary(SetPlus)                                                                                 :4_1:May:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
******** \ undeepers has returned ()                                                                           :EOF:
******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
******* / pDoAction/Do                                                                                          :EOF:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / term p                                                                                   :2_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :2_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :2_3:Other "is":
******************** / manyIndentation/leaf?                                                             :2_3:Other "is":
********************* / term p                                                                          :2_3:Other "is":
********************** / term p/1a:label directly above                                                :2_3:Other "is":
*********************** / $*|                                                                         :2_3:Other "is":
************************ / someSL                                                                    :2_3:Other "is":
************************* / pNumAsText                                                                  :2_5:Typically:
************************ \ someSL has returned (["is","immortal"],1)                                    :2_5:GoDeeper:
************************ / pNumAsText                                                                   :2_5:GoDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :2_3:Other "is":
*********************** / someSL                                                                      :2_3:Other "is":
************************ / pNumAsText                                                                    :2_5:Typically:
*********************** \ someSL has returned (["is","immortal"],1)                                      :2_5:GoDeeper:
*********************** / undeepers                                                                      :2_5:GoDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :2_5:GoDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "is":
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "is":
************************ / someIndentation                                                           :2_3:Other "is":
************************* / myindented: consuming GoDeeper                                          :2_3:Other "is":
*********************** / term p/3:plain p                                                            :2_3:Other "is":
************************ / pRelPred                                                                  :2_3:Other "is":
************************* / slRelPred                                                               :2_3:Other "is":
************************** / nested simpleHorn                                                     :2_3:Other "is":
*************************** > |^|                                                                 :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |^| deeps                                                              :2_5:GoDeeper:
*************************** \ |^| deeps has returned ([()],1)                                         :2_5:Typically:
************************** / RPConstraint                                                          :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPMT                                                                  :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slAKA                                                             :2_3:Other "is":
***************************** / $*|                                                             :2_3:Other "is":
****************************** / slAKA base                                                    :2_3:Other "is":
******************************* / slMultiTerm                                                 :2_3:Other "is":
******************************** / someSL                                                    :2_3:Other "is":
********************************* / pNumAsText                                                  :2_5:Typically:
******************************** \ someSL has returned (["is","immortal"],1)                    :2_5:GoDeeper:
******************************* \ slMultiTerm has returned (["is","immortal"],1)                 :2_5:GoDeeper:
****************************** \ slAKA base has returned (["is","immortal"],1)                    :2_5:GoDeeper:
***************************** \ $*| has returned (["is","immortal"],1)                             :2_5:GoDeeper:
***************************** / |>>/recurse                                                        :2_5:GoDeeper:
****************************** / |>>/recurse                                                       :2_5:Typically:
****************************** / |>>/base                                                          :2_5:Typically:
******************************* / slAKA optional akapart                                          :2_5:Typically:
******************************** / |?| optional something                                        :2_5:Typically:
********************************* / |>>/recurse                                                 :2_5:Typically:
********************************* / |>>/base                                                    :2_5:Typically:
********************************** / PAKA/akapart                                              :2_5:Typically:
*********************************** / $>|                                                     :2_5:Typically:
************************************ / Aka Token                                             :2_5:Typically:
******************************** \ |?| optional something has returned (Nothing,0)               :2_5:Typically:
******************************* \ slAKA optional akapart has returned (Nothing,0)                 :2_5:Typically:
******************************* > |>>/base got Nothing                                            :2_5:Typically:
****************************** \ |>>/base has returned (Nothing,0)                                 :2_5:Typically:
***************************** \ |>>/recurse has returned (Nothing,1)                                :2_5:Typically:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
****************************** / slAKA optional typically                                          :2_5:Typically:
******************************* / |?| optional something                                          :2_5:Typically:
******************************** / |>>/recurse                                                   :2_5:Typically:
******************************** / |>>/base                                                      :2_5:Typically:
********************************* / typically                                                   :2_5:Typically:
********************************** / $>|                                                       :2_5:Typically:
********************************** \ $>| has returned Typically                                 :2_6:GoDeeper:
********************************** / |>>/recurse                                                :2_6:GoDeeper:
*********************************** / |>>/recurse                                               :2_6:Other "fals:
*********************************** / |>>/base                                                  :2_6:Other "fals:
************************************ / slMultiTerm                                             :2_6:Other "fals:
************************************* / someSL                                                :2_6:Other "fals:
************************************* \ someSL has returned (["false"],0)                :3_3:UnDeeper:
************************************ \ slMultiTerm has returned (["false"],0)             :3_3:UnDeeper:
************************************ > |>>/base got ["false"]                             :3_3:UnDeeper:
*********************************** \ |>>/base has returned (["false"],0)                  :3_3:UnDeeper:
********************************** \ |>>/recurse has returned (["false"],1)                 :3_3:UnDeeper:
********************************* \ typically has returned (["false"],1)                     :3_3:UnDeeper:
********************************* > |>>/base got ["false"]                                   :3_3:UnDeeper:
******************************** \ |>>/base has returned (["false"],1)                        :3_3:UnDeeper:
******************************* \ |?| optional something has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** \ slAKA optional typically has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** > |>>/base got Just ["false"]                                    :3_3:UnDeeper:
***************************** \ |>>/base has returned (Just ["false"],1)                         :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
**************************** \ slAKA has returned (["is","immortal"],3)                           :3_3:UnDeeper:
*************************** \ $*| has returned (["is","immortal"],3)                               :3_3:UnDeeper:
************************** \ RPMT has returned (RPMT ["is","immortal"],3)                           :3_3:UnDeeper:
************************* \ slRelPred has returned (RPMT ["is","immortal"],3)                        :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                           :3_6:UnDeeper:
************************* \ undeepers has returned ()                                                      :3_6:UnDeeper:
************************ \ pRelPred has returned RPMT ["is","immortal"]                                     :3_6:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])                      :3_6:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                     :3_6:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["is","immortal"])                                    :3_6:UnDeeper:
********************* / binary(Or)                                                                             :3_6:UnDeeper:
********************* / binary(And)                                                                            :3_6:UnDeeper:
********************* / binary(SetLess)                                                                        :3_6:UnDeeper:
********************* / binary(SetPlus)                                                                        :3_6:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                       :3_6:UnDeeper:
******************** / myindented: consuming UnDeeper                                                           :3_6:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                            :3_2:Or:
******************* \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])        :3_2:Or:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
**************** \ term p has returned MyLeaf (RPMT ["is","immortal"])                                     :3_2:Or:
**************** / binary(Or)                                                                              :3_2:Or:
**************** \ binary(Or) has returned Or                                                               :3_3:GoDeeper:
**************** / term p                                                                                   :3_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :3_3:GoDeeper:
****************** / $*|                                                                                  :3_3:GoDeeper:
******************* / someSL                                                                             :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :3_3:GoDeeper:
****************** / someSL                                                                               :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :3_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :3_3:GoDeeper:
******************* / someIndentation                                                                    :3_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :3_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :3_3:Other "has":
******************** / manyIndentation/leaf?                                                             :3_3:Other "has":
********************* / term p                                                                          :3_3:Other "has":
********************** / term p/1a:label directly above                                                :3_3:Other "has":
*********************** / $*|                                                                         :3_3:Other "has":
************************ / someSL                                                                    :3_3:Other "has":
************************ \ someSL has returned (["has","health insurance"],1)                       :4_2:UnDeeper:
************************ / pNumAsText                                                               :4_2:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :3_3:Other "has":
*********************** / someSL                                                                      :3_3:Other "has":
*********************** \ someSL has returned (["has","health insurance"],1)                         :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                         :4_3:UnDeeper:
*********************** \ undeepers has returned ()                                                    :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "has":
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "has":
************************ / someIndentation                                                           :3_3:Other "has":
************************* / myindented: consuming GoDeeper                                          :3_3:Other "has":
*********************** / term p/3:plain p                                                            :3_3:Other "has":
************************ / pRelPred                                                                  :3_3:Other "has":
************************* / slRelPred                                                               :3_3:Other "has":
************************** / nested simpleHorn                                                     :3_3:Other "has":
*************************** > |^|                                                                 :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |^| deeps                                                          :4_2:UnDeeper:
*************************** \ |^| deeps has returned ([(),(),()],-3)                          :4_1:May:
************************** / RPConstraint                                                          :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slAKA                                                             :3_3:Other "has":
***************************** / $*|                                                             :3_3:Other "has":
****************************** / slAKA base                                                    :3_3:Other "has":
******************************* / slMultiTerm                                                 :3_3:Other "has":
******************************** / someSL                                                    :3_3:Other "has":
******************************** \ someSL has returned (["has","health insurance"],1)       :4_2:UnDeeper:
******************************* \ slMultiTerm has returned (["has","health insurance"],1)    :4_2:UnDeeper:
****************************** \ slAKA base has returned (["has","health insurance"],1)       :4_2:UnDeeper:
***************************** \ $*| has returned (["has","health insurance"],1)                :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / PAKA/akapart                                           :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
*********************************** / Aka Token                                          :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / typically                                              :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                    :4_2:UnDeeper:
**************************** \ slAKA has returned (["has","health insurance"],1)                :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
************************** \ RPMT has returned (RPMT ["has","health insurance"],1)                :4_2:UnDeeper:
************************* \ slRelPred has returned (RPMT ["has","health insurance"],1)             :4_2:UnDeeper:
************************* / undeepers                                                              :4_2:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
************************ \ pRelPred has returned RPMT ["has","health insurance"]                      :4_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"])       :4_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])      :4_3:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])        :4_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :4_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"])    :4_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["has","health insurance"])                                 :4_4:UnDeeper:
**************** / binary(Or)                                                                                   :4_4:UnDeeper:
**************** / binary(And)                                                                                  :4_4:UnDeeper:
**************** / binary(SetLess)                                                                              :4_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :4_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :4_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:May:
************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************* \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** \ term p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** / binary(Or)                                                                                      :4_1:May:
*********** / binary(And)                                                                                     :4_1:May:
*********** / binary(SetLess)                                                                                 :4_1:May:
*********** / binary(SetPlus)                                                                                 :4_1:May:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
******* / pTemporal/eventually                                                                                    :4_1:May:
******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / pTemporal/vaguely                                                                                       :4_1:May:
******* / pDA                                                                                                     :4_1:May:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / term p                                                                                           :4_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :4_2:GoDeeper:
************* / $*|                                                                                          :4_2:GoDeeper:
************** / someSL                                                                                     :4_2:GoDeeper:
*************** / pNumAsText                                                                               :4_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :4_2:GoDeeper:
************* / someSL                                                                                       :4_2:GoDeeper:
************** / pNumAsText                                                                                 :4_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :4_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :4_2:GoDeeper:
************** / someIndentation                                                                            :4_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :4_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :4_2:Other "shar:
*************** / manyIndentation/leaf?                                                                     :4_2:Other "shar:
**************** / term p                                                                                  :4_2:Other "shar:
***************** / term p/1a:label directly above                                                        :4_2:Other "shar:
****************** / $*|                                                                                 :4_2:Other "shar:
******************* / someSL                                                                            :4_2:Other "shar:
******************* \ someSL has returned (["sharpen knives"],0)                                         :1_2:UnDeeper:
******************* / pNumAsText                                                                         :1_2:UnDeeper:
***************** / term p/b:label to the left of line below, with EOL                                    :4_2:Other "shar:
****************** / someSL                                                                              :4_2:Other "shar:
****************** \ someSL has returned (["sharpen knives"],0)                                           :1_2:UnDeeper:
****************** / undeepers                                                                            :1_2:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :1_2:UnDeeper:
******************* > sameLine: success!                                                                 :1_2:UnDeeper:
****************** \ undeepers has returned ()                                                            :1_2:UnDeeper:
****************** / matching EOL                                                                         :1_2:UnDeeper:
***************** / term p/notLabelTerm                                                                   :4_2:Other "shar:
****************** / term p/2:someIndentation expr p                                                     :4_2:Other "shar:
******************* / someIndentation                                                                   :4_2:Other "shar:
******************** / myindented: consuming GoDeeper                                                  :4_2:Other "shar:
****************** / term p/3:plain p                                                                    :4_2:Other "shar:
******************* / pParamText                                                                        :4_2:Other "shar:
******************** / pParamText(flat) first line: pKeyValues                                         :4_2:Other "shar:
********************* / pKeyValuesAka                                                                 :4_2:Other "shar:
********************** / slAKA                                                                       :4_2:Other "shar:
*********************** / $*|                                                                       :4_2:Other "shar:
************************ / slAKA base                                                              :4_2:Other "shar:
************************* / slKeyValues                                                           :4_2:Other "shar:
************************** / $*|                                                                 :4_2:Other "shar:
*************************** / someSL                                                            :4_2:Other "shar:
*************************** \ someSL has returned (["sharpen knives"],0)                         :1_2:UnDeeper:
************************** \ $*| has returned (["sharpen knives"],0)                              :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / slTypeSig                                                      :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :1_2:UnDeeper:
************************** \ |>>/base has returned (Nothing,0)                                    :1_2:UnDeeper:
************************* \ slKeyValues has returned (("sharpen knives" :| [],Nothing),0)          :1_2:UnDeeper:
************************ \ slAKA base has returned (("sharpen knives" :| [],Nothing),0)             :1_2:UnDeeper:
*********************** \ $*| has returned (("sharpen knives" :| [],Nothing),0)                      :1_2:UnDeeper:
*********************** / |>>/recurse                                                                :1_2:UnDeeper:
*********************** / |>>/base                                                                   :1_2:UnDeeper:
************************ / slAKA optional akapart                                                   :1_2:UnDeeper:
************************* / |?| optional something                                                 :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / PAKA/akapart                                                       :1_2:UnDeeper:
**************************** / $>|                                                              :1_2:UnDeeper:
***************************** / Aka Token                                                      :1_2:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                        :1_2:UnDeeper:
************************ \ slAKA optional akapart has returned (Nothing,0)                          :1_2:UnDeeper:
************************ > |>>/base got Nothing                                                     :1_2:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                          :1_2:UnDeeper:
*********************** / |>>/recurse                                                                :1_2:UnDeeper:
*********************** / |>>/base                                                                   :1_2:UnDeeper:
************************ / slAKA optional typically                                                 :1_2:UnDeeper:
************************* / |?| optional something                                                 :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / typically                                                          :1_2:UnDeeper:
**************************** / $>|                                                              :1_2:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                        :1_2:UnDeeper:
************************ \ slAKA optional typically has returned (Nothing,0)                        :1_2:UnDeeper:
************************ > |>>/base got Nothing                                                     :1_2:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                          :1_2:UnDeeper:
*********************** > slAKA: proceeding after base and entityalias are retrieved ...             :1_2:UnDeeper:
*********************** > pAKA: entityalias = Nothing                                                :1_2:UnDeeper:
********************** \ slAKA has returned (("sharpen knives" :| [],Nothing),0)                      :1_2:UnDeeper:
********************** / undeepers                                                                    :1_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :1_2:UnDeeper:
*********************** > sameLine: success!                                                         :1_2:UnDeeper:
********************** \ undeepers has returned ()                                                    :1_2:UnDeeper:
********************* \ pKeyValuesAka has returned ("sharpen knives" :| [],Nothing)                    :1_2:UnDeeper:
******************** \ pParamText(flat) first line: pKeyValues has returned ("sharpen knives" :| [],Nothing) :1_2:UnDeeper:
******************** / pParamText(flat) subsequent lines: sameMany pKeyValues                           :1_2:UnDeeper:
********************* / manyIndentation/leaf?                                                          :1_2:UnDeeper:
********************** / sameMany                                                                     :1_2:UnDeeper:
*********************** / pKeyValuesAka                                                              :1_2:UnDeeper:
************************ / slAKA                                                                    :1_2:UnDeeper:
************************* / $*|                                                                    :1_2:UnDeeper:
************************** / slAKA base                                                           :1_2:UnDeeper:
*************************** / slKeyValues                                                        :1_2:UnDeeper:
**************************** / $*|                                                              :1_2:UnDeeper:
***************************** / someSL                                                         :1_2:UnDeeper:
****************************** / pNumAsText                                                   :1_2:UnDeeper:
********************** \ sameMany has returned []                                                     :1_2:UnDeeper:
********************* \ manyIndentation/leaf? has returned []                                          :1_2:UnDeeper:
******************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []           :1_2:UnDeeper:
******************* \ pParamText has returned ("sharpen knives" :| [],Nothing) :| []                     :1_2:UnDeeper:
****************** \ term p/3:plain p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])        :1_2:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])       :1_2:UnDeeper:
**************** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                      :1_2:UnDeeper:
**************** / binary(Or)                                                                               :1_2:UnDeeper:
**************** / binary(And)                                                                              :1_2:UnDeeper:
**************** / binary(SetLess)                                                                          :1_2:UnDeeper:
**************** / binary(SetPlus)                                                                          :1_2:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])         :1_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :1_2:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :EOF:
************** \ someIndentation has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])            :EOF:
************* \ term p/2:someIndentation expr p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| []) :EOF:
************ \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])            :EOF:
*********** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                           :EOF:
*********** / binary(Or)                                                                                    :EOF:
*********** / binary(And)                                                                                   :EOF:
*********** / binary(SetLess)                                                                               :EOF:
*********** / binary(SetPlus)                                                                               :EOF:
********** \ expr pParamText has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                    :EOF:
********* \ dBoolStructP calling exprP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
******** \ pAction calling dBoolStructP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
******* \ pDA has returned (DMay,Leaf (("sharpen knives" :| [],Nothing) :| []))                                 :EOF:
******* / WHERE                                                                                                 :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
******* / pTemporal/eventually                                                                                  :EOF:
******* / pTemporal/specifically                                                                                :EOF:
******** / $>|                                                                                                 :EOF:
******* / pTemporal/vaguely                                                                                     :EOF:
****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** / pHenceLest-Hence                                                                                          :EOF:
***** / pHenceLest-Lest                                                                                           :EOF:
****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
****   pRegRuleNormal: the positive preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: the negative preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
*** \ pRegRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
** \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
** / pRule                                                                                                           :EOF:
[Every,GoDeeper,Other "person",UnDeeper,Who,GoDeeper,GoDeeper,Other "is",GoDeeper,Other "immortal",GoDeeper,Typically,GoDeeper,Other "false",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Or,GoDeeper,Other "has",GoDeeper,Other "health insurance",UnDeeper,UnDeeper,UnDeeper,May,GoDeeper,Other "sharpen knives",UnDeeper]
** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / term p                                                                                   :2_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :2_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :2_3:Other "is":
******************** / manyIndentation/leaf?                                                             :2_3:Other "is":
********************* / term p                                                                          :2_3:Other "is":
********************** / term p/1a:label directly above                                                :2_3:Other "is":
*********************** / $*|                                                                         :2_3:Other "is":
************************ / someSL                                                                    :2_3:Other "is":
************************* / pNumAsText                                                                  :2_5:Typically:
************************ \ someSL has returned (["is","immortal"],1)                                    :2_5:GoDeeper:
************************ / pNumAsText                                                                   :2_5:GoDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :2_3:Other "is":
*********************** / someSL                                                                      :2_3:Other "is":
************************ / pNumAsText                                                                    :2_5:Typically:
*********************** \ someSL has returned (["is","immortal"],1)                                      :2_5:GoDeeper:
*********************** / undeepers                                                                      :2_5:GoDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :2_5:GoDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "is":
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "is":
************************ / someIndentation                                                           :2_3:Other "is":
************************* / myindented: consuming GoDeeper                                          :2_3:Other "is":
*********************** / term p/3:plain p                                                            :2_3:Other "is":
************************ / pRelPred                                                                  :2_3:Other "is":
************************* / slRelPred                                                               :2_3:Other "is":
************************** / nested simpleHorn                                                     :2_3:Other "is":
*************************** > |^|                                                                 :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |^| deeps                                                              :2_5:GoDeeper:
*************************** \ |^| deeps has returned ([()],1)                                         :2_5:Typically:
************************** / RPConstraint                                                          :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPMT                                                                  :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slAKA                                                             :2_3:Other "is":
***************************** / $*|                                                             :2_3:Other "is":
****************************** / slAKA base                                                    :2_3:Other "is":
******************************* / slMultiTerm                                                 :2_3:Other "is":
******************************** / someSL                                                    :2_3:Other "is":
********************************* / pNumAsText                                                  :2_5:Typically:
******************************** \ someSL has returned (["is","immortal"],1)                    :2_5:GoDeeper:
******************************* \ slMultiTerm has returned (["is","immortal"],1)                 :2_5:GoDeeper:
****************************** \ slAKA base has returned (["is","immortal"],1)                    :2_5:GoDeeper:
***************************** \ $*| has returned (["is","immortal"],1)                             :2_5:GoDeeper:
***************************** / |>>/recurse                                                        :2_5:GoDeeper:
****************************** / |>>/recurse                                                       :2_5:Typically:
****************************** / |>>/base                                                          :2_5:Typically:
******************************* / slAKA optional akapart                                          :2_5:Typically:
******************************** / |?| optional something                                        :2_5:Typically:
********************************* / |>>/recurse                                                 :2_5:Typically:
********************************* / |>>/base                                                    :2_5:Typically:
********************************** / PAKA/akapart                                              :2_5:Typically:
*********************************** / $>|                                                     :2_5:Typically:
************************************ / Aka Token                                             :2_5:Typically:
******************************** \ |?| optional something has returned (Nothing,0)               :2_5:Typically:
******************************* \ slAKA optional akapart has returned (Nothing,0)                 :2_5:Typically:
******************************* > |>>/base got Nothing                                            :2_5:Typically:
****************************** \ |>>/base has returned (Nothing,0)                                 :2_5:Typically:
***************************** \ |>>/recurse has returned (Nothing,1)                                :2_5:Typically:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
****************************** / slAKA optional typically                                          :2_5:Typically:
******************************* / |?| optional something                                          :2_5:Typically:
******************************** / |>>/recurse                                                   :2_5:Typically:
******************************** / |>>/base                                                      :2_5:Typically:
********************************* / typically                                                   :2_5:Typically:
********************************** / $>|                                                       :2_5:Typically:
********************************** \ $>| has returned Typically                                 :2_6:GoDeeper:
********************************** / |>>/recurse                                                :2_6:GoDeeper:
*********************************** / |>>/recurse                                               :2_6:Other "fals:
*********************************** / |>>/base                                                  :2_6:Other "fals:
************************************ / slMultiTerm                                             :2_6:Other "fals:
************************************* / someSL                                                :2_6:Other "fals:
************************************* \ someSL has returned (["false"],0)                :3_3:UnDeeper:
************************************ \ slMultiTerm has returned (["false"],0)             :3_3:UnDeeper:
************************************ > |>>/base got ["false"]                             :3_3:UnDeeper:
*********************************** \ |>>/base has returned (["false"],0)                  :3_3:UnDeeper:
********************************** \ |>>/recurse has returned (["false"],1)                 :3_3:UnDeeper:
********************************* \ typically has returned (["false"],1)                     :3_3:UnDeeper:
********************************* > |>>/base got ["false"]                                   :3_3:UnDeeper:
******************************** \ |>>/base has returned (["false"],1)                        :3_3:UnDeeper:
******************************* \ |?| optional something has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** \ slAKA optional typically has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** > |>>/base got Just ["false"]                                    :3_3:UnDeeper:
***************************** \ |>>/base has returned (Just ["false"],1)                         :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
**************************** \ slAKA has returned (["is","immortal"],3)                           :3_3:UnDeeper:
*************************** \ $*| has returned (["is","immortal"],3)                               :3_3:UnDeeper:
************************** \ RPMT has returned (RPMT ["is","immortal"],3)                           :3_3:UnDeeper:
************************* \ slRelPred has returned (RPMT ["is","immortal"],3)                        :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                           :3_6:UnDeeper:
************************* \ undeepers has returned ()                                                      :3_6:UnDeeper:
************************ \ pRelPred has returned RPMT ["is","immortal"]                                     :3_6:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])                      :3_6:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                     :3_6:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["is","immortal"])                                    :3_6:UnDeeper:
********************* / binary(Or)                                                                             :3_6:UnDeeper:
********************* / binary(And)                                                                            :3_6:UnDeeper:
********************* / binary(SetLess)                                                                        :3_6:UnDeeper:
********************* / binary(SetPlus)                                                                        :3_6:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                       :3_6:UnDeeper:
******************** / myindented: consuming UnDeeper                                                           :3_6:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                            :3_2:Or:
******************* \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])        :3_2:Or:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
**************** \ term p has returned MyLeaf (RPMT ["is","immortal"])                                     :3_2:Or:
**************** / binary(Or)                                                                              :3_2:Or:
**************** \ binary(Or) has returned Or                                                               :3_3:GoDeeper:
**************** / term p                                                                                   :3_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :3_3:GoDeeper:
****************** / $*|                                                                                  :3_3:GoDeeper:
******************* / someSL                                                                             :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :3_3:GoDeeper:
****************** / someSL                                                                               :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :3_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :3_3:GoDeeper:
******************* / someIndentation                                                                    :3_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :3_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :3_3:Other "has":
******************** / manyIndentation/leaf?                                                             :3_3:Other "has":
********************* / term p                                                                          :3_3:Other "has":
********************** / term p/1a:label directly above                                                :3_3:Other "has":
*********************** / $*|                                                                         :3_3:Other "has":
************************ / someSL                                                                    :3_3:Other "has":
************************ \ someSL has returned (["has","health insurance"],1)                       :4_2:UnDeeper:
************************ / pNumAsText                                                               :4_2:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :3_3:Other "has":
*********************** / someSL                                                                      :3_3:Other "has":
*********************** \ someSL has returned (["has","health insurance"],1)                         :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                         :4_3:UnDeeper:
*********************** \ undeepers has returned ()                                                    :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "has":
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "has":
************************ / someIndentation                                                           :3_3:Other "has":
************************* / myindented: consuming GoDeeper                                          :3_3:Other "has":
*********************** / term p/3:plain p                                                            :3_3:Other "has":
************************ / pRelPred                                                                  :3_3:Other "has":
************************* / slRelPred                                                               :3_3:Other "has":
************************** / nested simpleHorn                                                     :3_3:Other "has":
*************************** > |^|                                                                 :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |^| deeps                                                          :4_2:UnDeeper:
*************************** \ |^| deeps has returned ([(),(),()],-3)                          :4_1:May:
************************** / RPConstraint                                                          :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slAKA                                                             :3_3:Other "has":
***************************** / $*|                                                             :3_3:Other "has":
****************************** / slAKA base                                                    :3_3:Other "has":
******************************* / slMultiTerm                                                 :3_3:Other "has":
******************************** / someSL                                                    :3_3:Other "has":
******************************** \ someSL has returned (["has","health insurance"],1)       :4_2:UnDeeper:
******************************* \ slMultiTerm has returned (["has","health insurance"],1)    :4_2:UnDeeper:
****************************** \ slAKA base has returned (["has","health insurance"],1)       :4_2:UnDeeper:
***************************** \ $*| has returned (["has","health insurance"],1)                :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / PAKA/akapart                                           :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
*********************************** / Aka Token                                          :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / typically                                              :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                    :4_2:UnDeeper:
**************************** \ slAKA has returned (["has","health insurance"],1)                :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
************************** \ RPMT has returned (RPMT ["has","health insurance"],1)                :4_2:UnDeeper:
************************* \ slRelPred has returned (RPMT ["has","health insurance"],1)             :4_2:UnDeeper:
************************* / undeepers                                                              :4_2:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
************************ \ pRelPred has returned RPMT ["has","health insurance"]                      :4_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"])       :4_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])      :4_3:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])        :4_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :4_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"])    :4_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["has","health insurance"])                                 :4_4:UnDeeper:
**************** / binary(Or)                                                                                   :4_4:UnDeeper:
**************** / binary(And)                                                                                  :4_4:UnDeeper:
**************** / binary(SetLess)                                                                              :4_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :4_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :4_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:May:
************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************* \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** \ term p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** / binary(Or)                                                                                      :4_1:May:
*********** / binary(And)                                                                                     :4_1:May:
*********** / binary(SetLess)                                                                                 :4_1:May:
*********** / binary(SetPlus)                                                                                 :4_1:May:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
******** \ undeepers has returned ()                                                                           :EOF:
******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
******* / pDoAction/Do                                                                                          :EOF:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / term p                                                                                   :2_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :2_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :2_3:Other "is":
******************** / manyIndentation/leaf?                                                             :2_3:Other "is":
********************* / term p                                                                          :2_3:Other "is":
********************** / term p/1a:label directly above                                                :2_3:Other "is":
*********************** / $*|                                                                         :2_3:Other "is":
************************ / someSL                                                                    :2_3:Other "is":
************************* / pNumAsText                                                                  :2_5:Typically:
************************ \ someSL has returned (["is","immortal"],1)                                    :2_5:GoDeeper:
************************ / pNumAsText                                                                   :2_5:GoDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :2_3:Other "is":
*********************** / someSL                                                                      :2_3:Other "is":
************************ / pNumAsText                                                                    :2_5:Typically:
*********************** \ someSL has returned (["is","immortal"],1)                                      :2_5:GoDeeper:
*********************** / undeepers                                                                      :2_5:GoDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :2_5:GoDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "is":
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "is":
************************ / someIndentation                                                           :2_3:Other "is":
************************* / myindented: consuming GoDeeper                                          :2_3:Other "is":
*********************** / term p/3:plain p                                                            :2_3:Other "is":
************************ / pRelPred                                                                  :2_3:Other "is":
************************* / slRelPred                                                               :2_3:Other "is":
************************** / nested simpleHorn                                                     :2_3:Other "is":
*************************** > |^|                                                                 :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |^| deeps                                                              :2_5:GoDeeper:
*************************** \ |^| deeps has returned ([()],1)                                         :2_5:Typically:
************************** / RPConstraint                                                          :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPMT                                                                  :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slAKA                                                             :2_3:Other "is":
***************************** / $*|                                                             :2_3:Other "is":
****************************** / slAKA base                                                    :2_3:Other "is":
******************************* / slMultiTerm                                                 :2_3:Other "is":
******************************** / someSL                                                    :2_3:Other "is":
********************************* / pNumAsText                                                  :2_5:Typically:
******************************** \ someSL has returned (["is","immortal"],1)                    :2_5:GoDeeper:
******************************* \ slMultiTerm has returned (["is","immortal"],1)                 :2_5:GoDeeper:
****************************** \ slAKA base has returned (["is","immortal"],1)                    :2_5:GoDeeper:
***************************** \ $*| has returned (["is","immortal"],1)                             :2_5:GoDeeper:
***************************** / |>>/recurse                                                        :2_5:GoDeeper:
****************************** / |>>/recurse                                                       :2_5:Typically:
****************************** / |>>/base                                                          :2_5:Typically:
******************************* / slAKA optional akapart                                          :2_5:Typically:
******************************** / |?| optional something                                        :2_5:Typically:
********************************* / |>>/recurse                                                 :2_5:Typically:
********************************* / |>>/base                                                    :2_5:Typically:
********************************** / PAKA/akapart                                              :2_5:Typically:
*********************************** / $>|                                                     :2_5:Typically:
************************************ / Aka Token                                             :2_5:Typically:
******************************** \ |?| optional something has returned (Nothing,0)               :2_5:Typically:
******************************* \ slAKA optional akapart has returned (Nothing,0)                 :2_5:Typically:
******************************* > |>>/base got Nothing                                            :2_5:Typically:
****************************** \ |>>/base has returned (Nothing,0)                                 :2_5:Typically:
***************************** \ |>>/recurse has returned (Nothing,1)                                :2_5:Typically:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
****************************** / slAKA optional typically                                          :2_5:Typically:
******************************* / |?| optional something                                          :2_5:Typically:
******************************** / |>>/recurse                                                   :2_5:Typically:
******************************** / |>>/base                                                      :2_5:Typically:
********************************* / typically                                                   :2_5:Typically:
********************************** / $>|                                                       :2_5:Typically:
********************************** \ $>| has returned Typically                                 :2_6:GoDeeper:
********************************** / |>>/recurse                                                :2_6:GoDeeper:
*********************************** / |>>/recurse                                               :2_6:Other "fals:
*********************************** / |>>/base                                                  :2_6:Other "fals:
************************************ / slMultiTerm                                             :2_6:Other "fals:
************************************* / someSL                                                :2_6:Other "fals:
************************************* \ someSL has returned (["false"],0)                :3_3:UnDeeper:
************************************ \ slMultiTerm has returned (["false"],0)             :3_3:UnDeeper:
************************************ > |>>/base got ["false"]                             :3_3:UnDeeper:
*********************************** \ |>>/base has returned (["false"],0)                  :3_3:UnDeeper:
********************************** \ |>>/recurse has returned (["false"],1)                 :3_3:UnDeeper:
********************************* \ typically has returned (["false"],1)                     :3_3:UnDeeper:
********************************* > |>>/base got ["false"]                                   :3_3:UnDeeper:
******************************** \ |>>/base has returned (["false"],1)                        :3_3:UnDeeper:
******************************* \ |?| optional something has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** \ slAKA optional typically has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** > |>>/base got Just ["false"]                                    :3_3:UnDeeper:
***************************** \ |>>/base has returned (Just ["false"],1)                         :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
**************************** \ slAKA has returned (["is","immortal"],3)                           :3_3:UnDeeper:
*************************** \ $*| has returned (["is","immortal"],3)                               :3_3:UnDeeper:
************************** \ RPMT has returned (RPMT ["is","immortal"],3)                           :3_3:UnDeeper:
************************* \ slRelPred has returned (RPMT ["is","immortal"],3)                        :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                           :3_6:UnDeeper:
************************* \ undeepers has returned ()                                                      :3_6:UnDeeper:
************************ \ pRelPred has returned RPMT ["is","immortal"]                                     :3_6:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])                      :3_6:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                     :3_6:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["is","immortal"])                                    :3_6:UnDeeper:
********************* / binary(Or)                                                                             :3_6:UnDeeper:
********************* / binary(And)                                                                            :3_6:UnDeeper:
********************* / binary(SetLess)                                                                        :3_6:UnDeeper:
********************* / binary(SetPlus)                                                                        :3_6:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                       :3_6:UnDeeper:
******************** / myindented: consuming UnDeeper                                                           :3_6:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                            :3_2:Or:
******************* \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])        :3_2:Or:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
**************** \ term p has returned MyLeaf (RPMT ["is","immortal"])                                     :3_2:Or:
**************** / binary(Or)                                                                              :3_2:Or:
**************** \ binary(Or) has returned Or                                                               :3_3:GoDeeper:
**************** / term p                                                                                   :3_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :3_3:GoDeeper:
****************** / $*|                                                                                  :3_3:GoDeeper:
******************* / someSL                                                                             :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :3_3:GoDeeper:
****************** / someSL                                                                               :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :3_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :3_3:GoDeeper:
******************* / someIndentation                                                                    :3_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :3_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :3_3:Other "has":
******************** / manyIndentation/leaf?                                                             :3_3:Other "has":
********************* / term p                                                                          :3_3:Other "has":
********************** / term p/1a:label directly above                                                :3_3:Other "has":
*********************** / $*|                                                                         :3_3:Other "has":
************************ / someSL                                                                    :3_3:Other "has":
************************ \ someSL has returned (["has","health insurance"],1)                       :4_2:UnDeeper:
************************ / pNumAsText                                                               :4_2:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :3_3:Other "has":
*********************** / someSL                                                                      :3_3:Other "has":
*********************** \ someSL has returned (["has","health insurance"],1)                         :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                         :4_3:UnDeeper:
*********************** \ undeepers has returned ()                                                    :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "has":
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "has":
************************ / someIndentation                                                           :3_3:Other "has":
************************* / myindented: consuming GoDeeper                                          :3_3:Other "has":
*********************** / term p/3:plain p                                                            :3_3:Other "has":
************************ / pRelPred                                                                  :3_3:Other "has":
************************* / slRelPred                                                               :3_3:Other "has":
************************** / nested simpleHorn                                                     :3_3:Other "has":
*************************** > |^|                                                                 :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |^| deeps                                                          :4_2:UnDeeper:
*************************** \ |^| deeps has returned ([(),(),()],-3)                          :4_1:May:
************************** / RPConstraint                                                          :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slAKA                                                             :3_3:Other "has":
***************************** / $*|                                                             :3_3:Other "has":
****************************** / slAKA base                                                    :3_3:Other "has":
******************************* / slMultiTerm                                                 :3_3:Other "has":
******************************** / someSL                                                    :3_3:Other "has":
******************************** \ someSL has returned (["has","health insurance"],1)       :4_2:UnDeeper:
******************************* \ slMultiTerm has returned (["has","health insurance"],1)    :4_2:UnDeeper:
****************************** \ slAKA base has returned (["has","health insurance"],1)       :4_2:UnDeeper:
***************************** \ $*| has returned (["has","health insurance"],1)                :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / PAKA/akapart                                           :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
*********************************** / Aka Token                                          :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / typically                                              :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                    :4_2:UnDeeper:
**************************** \ slAKA has returned (["has","health insurance"],1)                :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
************************** \ RPMT has returned (RPMT ["has","health insurance"],1)                :4_2:UnDeeper:
************************* \ slRelPred has returned (RPMT ["has","health insurance"],1)             :4_2:UnDeeper:
************************* / undeepers                                                              :4_2:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
************************ \ pRelPred has returned RPMT ["has","health insurance"]                      :4_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"])       :4_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])      :4_3:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])        :4_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :4_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"])    :4_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["has","health insurance"])                                 :4_4:UnDeeper:
**************** / binary(Or)                                                                                   :4_4:UnDeeper:
**************** / binary(And)                                                                                  :4_4:UnDeeper:
**************** / binary(SetLess)                                                                              :4_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :4_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :4_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:May:
************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************* \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** \ term p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** / binary(Or)                                                                                      :4_1:May:
*********** / binary(And)                                                                                     :4_1:May:
*********** / binary(SetLess)                                                                                 :4_1:May:
*********** / binary(SetPlus)                                                                                 :4_1:May:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
******* / pTemporal/eventually                                                                                    :4_1:May:
******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / pTemporal/vaguely                                                                                       :4_1:May:
******* / pDA                                                                                                     :4_1:May:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / term p                                                                                           :4_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :4_2:GoDeeper:
************* / $*|                                                                                          :4_2:GoDeeper:
************** / someSL                                                                                     :4_2:GoDeeper:
*************** / pNumAsText                                                                               :4_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :4_2:GoDeeper:
************* / someSL                                                                                       :4_2:GoDeeper:
************** / pNumAsText                                                                                 :4_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :4_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :4_2:GoDeeper:
************** / someIndentation                                                                            :4_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :4_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :4_2:Other "shar:
*************** / manyIndentation/leaf?                                                                     :4_2:Other "shar:
**************** / term p                                                                                  :4_2:Other "shar:
***************** / term p/1a:label directly above                                                        :4_2:Other "shar:
****************** / $*|                                                                                 :4_2:Other "shar:
******************* / someSL                                                                            :4_2:Other "shar:
******************* \ someSL has returned (["sharpen knives"],0)                                         :1_2:UnDeeper:
******************* / pNumAsText                                                                         :1_2:UnDeeper:
***************** / term p/b:label to the left of line below, with EOL                                    :4_2:Other "shar:
****************** / someSL                                                                              :4_2:Other "shar:
****************** \ someSL has returned (["sharpen knives"],0)                                           :1_2:UnDeeper:
****************** / undeepers                                                                            :1_2:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :1_2:UnDeeper:
******************* > sameLine: success!                                                                 :1_2:UnDeeper:
****************** \ undeepers has returned ()                                                            :1_2:UnDeeper:
****************** / matching EOL                                                                         :1_2:UnDeeper:
***************** / term p/notLabelTerm                                                                   :4_2:Other "shar:
****************** / term p/2:someIndentation expr p                                                     :4_2:Other "shar:
******************* / someIndentation                                                                   :4_2:Other "shar:
******************** / myindented: consuming GoDeeper                                                  :4_2:Other "shar:
****************** / term p/3:plain p                                                                    :4_2:Other "shar:
******************* / pParamText                                                                        :4_2:Other "shar:
******************** / pParamText(flat) first line: pKeyValues                                         :4_2:Other "shar:
********************* / pKeyValuesAka                                                                 :4_2:Other "shar:
********************** / slAKA                                                                       :4_2:Other "shar:
*********************** / $*|                                                                       :4_2:Other "shar:
************************ / slAKA base                                                              :4_2:Other "shar:
************************* / slKeyValues                                                           :4_2:Other "shar:
************************** / $*|                                                                 :4_2:Other "shar:
*************************** / someSL                                                            :4_2:Other "shar:
*************************** \ someSL has returned (["sharpen knives"],0)                         :1_2:UnDeeper:
************************** \ $*| has returned (["sharpen knives"],0)                              :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / slTypeSig                                                      :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :1_2:UnDeeper:
************************** \ |>>/base has returned (Nothing,0)                                    :1_2:UnDeeper:
************************* \ slKeyValues has returned (("sharpen knives" :| [],Nothing),0)          :1_2:UnDeeper:
************************ \ slAKA base has returned (("sharpen knives" :| [],Nothing),0)             :1_2:UnDeeper:
*********************** \ $*| has returned (("sharpen knives" :| [],Nothing),0)                      :1_2:UnDeeper:
*********************** / |>>/recurse                                                                :1_2:UnDeeper:
*********************** / |>>/base                                                                   :1_2:UnDeeper:
************************ / slAKA optional akapart                                                   :1_2:UnDeeper:
************************* / |?| optional something                                                 :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / PAKA/akapart                                                       :1_2:UnDeeper:
**************************** / $>|                                                              :1_2:UnDeeper:
***************************** / Aka Token                                                      :1_2:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                        :1_2:UnDeeper:
************************ \ slAKA optional akapart has returned (Nothing,0)                          :1_2:UnDeeper:
************************ > |>>/base got Nothing                                                     :1_2:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                          :1_2:UnDeeper:
*********************** / |>>/recurse                                                                :1_2:UnDeeper:
*********************** / |>>/base                                                                   :1_2:UnDeeper:
************************ / slAKA optional typically                                                 :1_2:UnDeeper:
************************* / |?| optional something                                                 :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / typically                                                          :1_2:UnDeeper:
**************************** / $>|                                                              :1_2:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                        :1_2:UnDeeper:
************************ \ slAKA optional typically has returned (Nothing,0)                        :1_2:UnDeeper:
************************ > |>>/base got Nothing                                                     :1_2:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                          :1_2:UnDeeper:
*********************** > slAKA: proceeding after base and entityalias are retrieved ...             :1_2:UnDeeper:
*********************** > pAKA: entityalias = Nothing                                                :1_2:UnDeeper:
********************** \ slAKA has returned (("sharpen knives" :| [],Nothing),0)                      :1_2:UnDeeper:
********************** / undeepers                                                                    :1_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :1_2:UnDeeper:
*********************** > sameLine: success!                                                         :1_2:UnDeeper:
********************** \ undeepers has returned ()                                                    :1_2:UnDeeper:
********************* \ pKeyValuesAka has returned ("sharpen knives" :| [],Nothing)                    :1_2:UnDeeper:
******************** \ pParamText(flat) first line: pKeyValues has returned ("sharpen knives" :| [],Nothing) :1_2:UnDeeper:
******************** / pParamText(flat) subsequent lines: sameMany pKeyValues                           :1_2:UnDeeper:
********************* / manyIndentation/leaf?                                                          :1_2:UnDeeper:
********************** / sameMany                                                                     :1_2:UnDeeper:
*********************** / pKeyValuesAka                                                              :1_2:UnDeeper:
************************ / slAKA                                                                    :1_2:UnDeeper:
************************* / $*|                                                                    :1_2:UnDeeper:
************************** / slAKA base                                                           :1_2:UnDeeper:
*************************** / slKeyValues                                                        :1_2:UnDeeper:
**************************** / $*|                                                              :1_2:UnDeeper:
***************************** / someSL                                                         :1_2:UnDeeper:
****************************** / pNumAsText                                                   :1_2:UnDeeper:
********************** \ sameMany has returned []                                                     :1_2:UnDeeper:
********************* \ manyIndentation/leaf? has returned []                                          :1_2:UnDeeper:
******************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []           :1_2:UnDeeper:
******************* \ pParamText has returned ("sharpen knives" :| [],Nothing) :| []                     :1_2:UnDeeper:
****************** \ term p/3:plain p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])        :1_2:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])       :1_2:UnDeeper:
**************** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                      :1_2:UnDeeper:
**************** / binary(Or)                                                                               :1_2:UnDeeper:
**************** / binary(And)                                                                              :1_2:UnDeeper:
**************** / binary(SetLess)                                                                          :1_2:UnDeeper:
**************** / binary(SetPlus)                                                                          :1_2:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])         :1_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :1_2:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :EOF:
************** \ someIndentation has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])            :EOF:
************* \ term p/2:someIndentation expr p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| []) :EOF:
************ \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])            :EOF:
*********** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                           :EOF:
*********** / binary(Or)                                                                                    :EOF:
*********** / binary(And)                                                                                   :EOF:
*********** / binary(SetLess)                                                                               :EOF:
*********** / binary(SetPlus)                                                                               :EOF:
********** \ expr pParamText has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                    :EOF:
********* \ dBoolStructP calling exprP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
******** \ pAction calling dBoolStructP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
******* \ pDA has returned (DMay,Leaf (("sharpen knives" :| [],Nothing) :| []))                                 :EOF:
******* / WHERE                                                                                                 :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
******* / pTemporal/eventually                                                                                  :EOF:
******* / pTemporal/specifically                                                                                :EOF:
******** / $>|                                                                                                 :EOF:
******* / pTemporal/vaguely                                                                                     :EOF:
****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** / pHenceLest-Hence                                                                                          :EOF:
***** / pHenceLest-Lest                                                                                           :EOF:
****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
****   pRegRuleNormal: the positive preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: the negative preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
*** \ pRegRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
** \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
** / pRule                                                                                                           :EOF:
[Every,GoDeeper,Other "person",UnDeeper,Who,GoDeeper,GoDeeper,Other "is",GoDeeper,Other "immortal",GoDeeper,Typically,GoDeeper,Other "false",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Or,GoDeeper,Other "has",GoDeeper,Other "health insurance",UnDeeper,UnDeeper,UnDeeper,May,GoDeeper,Other "sharpen knives",UnDeeper]
** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / term p                                                                                   :2_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :2_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :2_3:Other "is":
******************** / manyIndentation/leaf?                                                             :2_3:Other "is":
********************* / term p                                                                          :2_3:Other "is":
********************** / term p/1a:label directly above                                                :2_3:Other "is":
*********************** / $*|                                                                         :2_3:Other "is":
************************ / someSL                                                                    :2_3:Other "is":
************************* / pNumAsText                                                                  :2_5:Typically:
************************ \ someSL has returned (["is","immortal"],1)                                    :2_5:GoDeeper:
************************ / pNumAsText                                                                   :2_5:GoDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :2_3:Other "is":
*********************** / someSL                                                                      :2_3:Other "is":
************************ / pNumAsText                                                                    :2_5:Typically:
*********************** \ someSL has returned (["is","immortal"],1)                                      :2_5:GoDeeper:
*********************** / undeepers                                                                      :2_5:GoDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :2_5:GoDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "is":
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "is":
************************ / someIndentation                                                           :2_3:Other "is":
************************* / myindented: consuming GoDeeper                                          :2_3:Other "is":
*********************** / term p/3:plain p                                                            :2_3:Other "is":
************************ / pRelPred                                                                  :2_3:Other "is":
************************* / slRelPred                                                               :2_3:Other "is":
************************** / nested simpleHorn                                                     :2_3:Other "is":
*************************** > |^|                                                                 :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |^| deeps                                                              :2_5:GoDeeper:
*************************** \ |^| deeps has returned ([()],1)                                         :2_5:Typically:
************************** / RPConstraint                                                          :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPMT                                                                  :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slAKA                                                             :2_3:Other "is":
***************************** / $*|                                                             :2_3:Other "is":
****************************** / slAKA base                                                    :2_3:Other "is":
******************************* / slMultiTerm                                                 :2_3:Other "is":
******************************** / someSL                                                    :2_3:Other "is":
********************************* / pNumAsText                                                  :2_5:Typically:
******************************** \ someSL has returned (["is","immortal"],1)                    :2_5:GoDeeper:
******************************* \ slMultiTerm has returned (["is","immortal"],1)                 :2_5:GoDeeper:
****************************** \ slAKA base has returned (["is","immortal"],1)                    :2_5:GoDeeper:
***************************** \ $*| has returned (["is","immortal"],1)                             :2_5:GoDeeper:
***************************** / |>>/recurse                                                        :2_5:GoDeeper:
****************************** / |>>/recurse                                                       :2_5:Typically:
****************************** / |>>/base                                                          :2_5:Typically:
******************************* / slAKA optional akapart                                          :2_5:Typically:
******************************** / |?| optional something                                        :2_5:Typically:
********************************* / |>>/recurse                                                 :2_5:Typically:
********************************* / |>>/base                                                    :2_5:Typically:
********************************** / PAKA/akapart                                              :2_5:Typically:
*********************************** / $>|                                                     :2_5:Typically:
************************************ / Aka Token                                             :2_5:Typically:
******************************** \ |?| optional something has returned (Nothing,0)               :2_5:Typically:
******************************* \ slAKA optional akapart has returned (Nothing,0)                 :2_5:Typically:
******************************* > |>>/base got Nothing                                            :2_5:Typically:
****************************** \ |>>/base has returned (Nothing,0)                                 :2_5:Typically:
***************************** \ |>>/recurse has returned (Nothing,1)                                :2_5:Typically:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
****************************** / slAKA optional typically                                          :2_5:Typically:
******************************* / |?| optional something                                          :2_5:Typically:
******************************** / |>>/recurse                                                   :2_5:Typically:
******************************** / |>>/base                                                      :2_5:Typically:
********************************* / typically                                                   :2_5:Typically:
********************************** / $>|                                                       :2_5:Typically:
********************************** \ $>| has returned Typically                                 :2_6:GoDeeper:
********************************** / |>>/recurse                                                :2_6:GoDeeper:
*********************************** / |>>/recurse                                               :2_6:Other "fals:
*********************************** / |>>/base                                                  :2_6:Other "fals:
************************************ / slMultiTerm                                             :2_6:Other "fals:
************************************* / someSL                                                :2_6:Other "fals:
************************************* \ someSL has returned (["false"],0)                :3_3:UnDeeper:
************************************ \ slMultiTerm has returned (["false"],0)             :3_3:UnDeeper:
************************************ > |>>/base got ["false"]                             :3_3:UnDeeper:
*********************************** \ |>>/base has returned (["false"],0)                  :3_3:UnDeeper:
********************************** \ |>>/recurse has returned (["false"],1)                 :3_3:UnDeeper:
********************************* \ typically has returned (["false"],1)                     :3_3:UnDeeper:
********************************* > |>>/base got ["false"]                                   :3_3:UnDeeper:
******************************** \ |>>/base has returned (["false"],1)                        :3_3:UnDeeper:
******************************* \ |?| optional something has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** \ slAKA optional typically has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** > |>>/base got Just ["false"]                                    :3_3:UnDeeper:
***************************** \ |>>/base has returned (Just ["false"],1)                         :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
**************************** \ slAKA has returned (["is","immortal"],3)                           :3_3:UnDeeper:
*************************** \ $*| has returned (["is","immortal"],3)                               :3_3:UnDeeper:
************************** \ RPMT has returned (RPMT ["is","immortal"],3)                           :3_3:UnDeeper:
************************* \ slRelPred has returned (RPMT ["is","immortal"],3)                        :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                           :3_6:UnDeeper:
************************* \ undeepers has returned ()                                                      :3_6:UnDeeper:
************************ \ pRelPred has returned RPMT ["is","immortal"]                                     :3_6:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])                      :3_6:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                     :3_6:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["is","immortal"])                                    :3_6:UnDeeper:
********************* / binary(Or)                                                                             :3_6:UnDeeper:
********************* / binary(And)                                                                            :3_6:UnDeeper:
********************* / binary(SetLess)                                                                        :3_6:UnDeeper:
********************* / binary(SetPlus)                                                                        :3_6:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                       :3_6:UnDeeper:
******************** / myindented: consuming UnDeeper                                                           :3_6:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                            :3_2:Or:
******************* \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])        :3_2:Or:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
**************** \ term p has returned MyLeaf (RPMT ["is","immortal"])                                     :3_2:Or:
**************** / binary(Or)                                                                              :3_2:Or:
**************** \ binary(Or) has returned Or                                                               :3_3:GoDeeper:
**************** / term p                                                                                   :3_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :3_3:GoDeeper:
****************** / $*|                                                                                  :3_3:GoDeeper:
******************* / someSL                                                                             :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :3_3:GoDeeper:
****************** / someSL                                                                               :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :3_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :3_3:GoDeeper:
******************* / someIndentation                                                                    :3_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :3_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :3_3:Other "has":
******************** / manyIndentation/leaf?                                                             :3_3:Other "has":
********************* / term p                                                                          :3_3:Other "has":
********************** / term p/1a:label directly above                                                :3_3:Other "has":
*********************** / $*|                                                                         :3_3:Other "has":
************************ / someSL                                                                    :3_3:Other "has":
************************ \ someSL has returned (["has","health insurance"],1)                       :4_2:UnDeeper:
************************ / pNumAsText                                                               :4_2:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :3_3:Other "has":
*********************** / someSL                                                                      :3_3:Other "has":
*********************** \ someSL has returned (["has","health insurance"],1)                         :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                         :4_3:UnDeeper:
*********************** \ undeepers has returned ()                                                    :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "has":
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "has":
************************ / someIndentation                                                           :3_3:Other "has":
************************* / myindented: consuming GoDeeper                                          :3_3:Other "has":
*********************** / term p/3:plain p                                                            :3_3:Other "has":
************************ / pRelPred                                                                  :3_3:Other "has":
************************* / slRelPred                                                               :3_3:Other "has":
************************** / nested simpleHorn                                                     :3_3:Other "has":
*************************** > |^|                                                                 :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |^| deeps                                                          :4_2:UnDeeper:
*************************** \ |^| deeps has returned ([(),(),()],-3)                          :4_1:May:
************************** / RPConstraint                                                          :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slAKA                                                             :3_3:Other "has":
***************************** / $*|                                                             :3_3:Other "has":
****************************** / slAKA base                                                    :3_3:Other "has":
******************************* / slMultiTerm                                                 :3_3:Other "has":
******************************** / someSL                                                    :3_3:Other "has":
******************************** \ someSL has returned (["has","health insurance"],1)       :4_2:UnDeeper:
******************************* \ slMultiTerm has returned (["has","health insurance"],1)    :4_2:UnDeeper:
****************************** \ slAKA base has returned (["has","health insurance"],1)       :4_2:UnDeeper:
***************************** \ $*| has returned (["has","health insurance"],1)                :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / PAKA/akapart                                           :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
*********************************** / Aka Token                                          :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / typically                                              :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                    :4_2:UnDeeper:
**************************** \ slAKA has returned (["has","health insurance"],1)                :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
************************** \ RPMT has returned (RPMT ["has","health insurance"],1)                :4_2:UnDeeper:
************************* \ slRelPred has returned (RPMT ["has","health insurance"],1)             :4_2:UnDeeper:
************************* / undeepers                                                              :4_2:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
************************ \ pRelPred has returned RPMT ["has","health insurance"]                      :4_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"])       :4_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])      :4_3:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])        :4_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :4_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"])    :4_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["has","health insurance"])                                 :4_4:UnDeeper:
**************** / binary(Or)                                                                                   :4_4:UnDeeper:
**************** / binary(And)                                                                                  :4_4:UnDeeper:
**************** / binary(SetLess)                                                                              :4_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :4_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :4_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:May:
************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************* \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** \ term p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** / binary(Or)                                                                                      :4_1:May:
*********** / binary(And)                                                                                     :4_1:May:
*********** / binary(SetLess)                                                                                 :4_1:May:
*********** / binary(SetPlus)                                                                                 :4_1:May:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
******** \ undeepers has returned ()                                                                           :EOF:
******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
******* / pDoAction/Do                                                                                          :EOF:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :2_2:GoDeeper:
************* / someSL                                                                                       :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / term p                                                                                   :2_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :2_3:GoDeeper:
****************** / someSL                                                                               :2_3:GoDeeper:
******************* / pNumAsText                                                                         :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :2_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :2_3:Other "is":
******************** / manyIndentation/leaf?                                                             :2_3:Other "is":
********************* / term p                                                                          :2_3:Other "is":
********************** / term p/1a:label directly above                                                :2_3:Other "is":
*********************** / $*|                                                                         :2_3:Other "is":
************************ / someSL                                                                    :2_3:Other "is":
************************* / pNumAsText                                                                  :2_5:Typically:
************************ \ someSL has returned (["is","immortal"],1)                                    :2_5:GoDeeper:
************************ / pNumAsText                                                                   :2_5:GoDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :2_3:Other "is":
*********************** / someSL                                                                      :2_3:Other "is":
************************ / pNumAsText                                                                    :2_5:Typically:
*********************** \ someSL has returned (["is","immortal"],1)                                      :2_5:GoDeeper:
*********************** / undeepers                                                                      :2_5:GoDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers       :2_5:GoDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "is":
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "is":
************************ / someIndentation                                                           :2_3:Other "is":
************************* / myindented: consuming GoDeeper                                          :2_3:Other "is":
*********************** / term p/3:plain p                                                            :2_3:Other "is":
************************ / pRelPred                                                                  :2_3:Other "is":
************************* / slRelPred                                                               :2_3:Other "is":
************************** / nested simpleHorn                                                     :2_3:Other "is":
*************************** > |^|                                                                 :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |^| deeps                                                              :2_5:GoDeeper:
*************************** \ |^| deeps has returned ([()],1)                                         :2_5:Typically:
************************** / RPConstraint                                                          :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slMultiTerm                                                       :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
**************************** \ slMultiTerm has returned (["is","immortal"],1)                       :2_5:GoDeeper:
*************************** \ $*| has returned (["is","immortal"],1)                                 :2_5:GoDeeper:
*************************** / |>| calling $>>                                                        :2_5:GoDeeper:
**************************** / |>>/recurse                                                          :2_5:GoDeeper:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
**************************** / |>>/base                                                             :2_5:GoDeeper:
************************** / RPMT                                                                  :2_3:Other "is":
*************************** / $*|                                                                 :2_3:Other "is":
**************************** / slAKA                                                             :2_3:Other "is":
***************************** / $*|                                                             :2_3:Other "is":
****************************** / slAKA base                                                    :2_3:Other "is":
******************************* / slMultiTerm                                                 :2_3:Other "is":
******************************** / someSL                                                    :2_3:Other "is":
********************************* / pNumAsText                                                  :2_5:Typically:
******************************** \ someSL has returned (["is","immortal"],1)                    :2_5:GoDeeper:
******************************* \ slMultiTerm has returned (["is","immortal"],1)                 :2_5:GoDeeper:
****************************** \ slAKA base has returned (["is","immortal"],1)                    :2_5:GoDeeper:
***************************** \ $*| has returned (["is","immortal"],1)                             :2_5:GoDeeper:
***************************** / |>>/recurse                                                        :2_5:GoDeeper:
****************************** / |>>/recurse                                                       :2_5:Typically:
****************************** / |>>/base                                                          :2_5:Typically:
******************************* / slAKA optional akapart                                          :2_5:Typically:
******************************** / |?| optional something                                        :2_5:Typically:
********************************* / |>>/recurse                                                 :2_5:Typically:
********************************* / |>>/base                                                    :2_5:Typically:
********************************** / PAKA/akapart                                              :2_5:Typically:
*********************************** / $>|                                                     :2_5:Typically:
************************************ / Aka Token                                             :2_5:Typically:
******************************** \ |?| optional something has returned (Nothing,0)               :2_5:Typically:
******************************* \ slAKA optional akapart has returned (Nothing,0)                 :2_5:Typically:
******************************* > |>>/base got Nothing                                            :2_5:Typically:
****************************** \ |>>/base has returned (Nothing,0)                                 :2_5:Typically:
***************************** \ |>>/recurse has returned (Nothing,1)                                :2_5:Typically:
***************************** / |>>/recurse                                                         :2_5:Typically:
***************************** / |>>/base                                                            :2_5:Typically:
****************************** / slAKA optional typically                                          :2_5:Typically:
******************************* / |?| optional something                                          :2_5:Typically:
******************************** / |>>/recurse                                                   :2_5:Typically:
******************************** / |>>/base                                                      :2_5:Typically:
********************************* / typically                                                   :2_5:Typically:
********************************** / $>|                                                       :2_5:Typically:
********************************** \ $>| has returned Typically                                 :2_6:GoDeeper:
********************************** / |>>/recurse                                                :2_6:GoDeeper:
*********************************** / |>>/recurse                                               :2_6:Other "fals:
*********************************** / |>>/base                                                  :2_6:Other "fals:
************************************ / slMultiTerm                                             :2_6:Other "fals:
************************************* / someSL                                                :2_6:Other "fals:
************************************* \ someSL has returned (["false"],0)                :3_3:UnDeeper:
************************************ \ slMultiTerm has returned (["false"],0)             :3_3:UnDeeper:
************************************ > |>>/base got ["false"]                             :3_3:UnDeeper:
*********************************** \ |>>/base has returned (["false"],0)                  :3_3:UnDeeper:
********************************** \ |>>/recurse has returned (["false"],1)                 :3_3:UnDeeper:
********************************* \ typically has returned (["false"],1)                     :3_3:UnDeeper:
********************************* > |>>/base got ["false"]                                   :3_3:UnDeeper:
******************************** \ |>>/base has returned (["false"],1)                        :3_3:UnDeeper:
******************************* \ |?| optional something has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** \ slAKA optional typically has returned (Just ["false"],1)       :3_3:UnDeeper:
****************************** > |>>/base got Just ["false"]                                    :3_3:UnDeeper:
***************************** \ |>>/base has returned (Just ["false"],1)                         :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
**************************** \ slAKA has returned (["is","immortal"],3)                           :3_3:UnDeeper:
*************************** \ $*| has returned (["is","immortal"],3)                               :3_3:UnDeeper:
************************** \ RPMT has returned (RPMT ["is","immortal"],3)                           :3_3:UnDeeper:
************************* \ slRelPred has returned (RPMT ["is","immortal"],3)                        :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                           :3_6:UnDeeper:
************************* \ undeepers has returned ()                                                      :3_6:UnDeeper:
************************ \ pRelPred has returned RPMT ["is","immortal"]                                     :3_6:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])                      :3_6:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                     :3_6:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["is","immortal"])                                    :3_6:UnDeeper:
********************* / binary(Or)                                                                             :3_6:UnDeeper:
********************* / binary(And)                                                                            :3_6:UnDeeper:
********************* / binary(SetLess)                                                                        :3_6:UnDeeper:
********************* / binary(SetPlus)                                                                        :3_6:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                       :3_6:UnDeeper:
******************** / myindented: consuming UnDeeper                                                           :3_6:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                            :3_2:Or:
******************* \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])        :3_2:Or:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                      :3_2:Or:
**************** \ term p has returned MyLeaf (RPMT ["is","immortal"])                                     :3_2:Or:
**************** / binary(Or)                                                                              :3_2:Or:
**************** \ binary(Or) has returned Or                                                               :3_3:GoDeeper:
**************** / term p                                                                                   :3_3:GoDeeper:
***************** / term p/1a:label directly above                                                         :3_3:GoDeeper:
****************** / $*|                                                                                  :3_3:GoDeeper:
******************* / someSL                                                                             :3_3:GoDeeper:
******************** / pNumAsText                                                                       :3_3:GoDeeper:
***************** / term p/b:label to the left of line below, with EOL                                     :3_3:GoDeeper:
****************** / someSL                                                                               :3_3:GoDeeper:
******************* / pNumAsText                                                                         :3_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :3_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :3_3:GoDeeper:
******************* / someIndentation                                                                    :3_3:GoDeeper:
******************** / myindented: consuming GoDeeper                                                   :3_3:GoDeeper:
******************** \ myindented: consuming GoDeeper has returned GoDeeper                              :3_3:Other "has":
******************** / manyIndentation/leaf?                                                             :3_3:Other "has":
********************* / term p                                                                          :3_3:Other "has":
********************** / term p/1a:label directly above                                                :3_3:Other "has":
*********************** / $*|                                                                         :3_3:Other "has":
************************ / someSL                                                                    :3_3:Other "has":
************************ \ someSL has returned (["has","health insurance"],1)                       :4_2:UnDeeper:
************************ / pNumAsText                                                               :4_2:UnDeeper:
********************** / term p/b:label to the left of line below, with EOL                            :3_3:Other "has":
*********************** / someSL                                                                      :3_3:Other "has":
*********************** \ someSL has returned (["has","health insurance"],1)                         :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                         :4_3:UnDeeper:
*********************** \ undeepers has returned ()                                                    :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "has":
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "has":
************************ / someIndentation                                                           :3_3:Other "has":
************************* / myindented: consuming GoDeeper                                          :3_3:Other "has":
*********************** / term p/3:plain p                                                            :3_3:Other "has":
************************ / pRelPred                                                                  :3_3:Other "has":
************************* / slRelPred                                                               :3_3:Other "has":
************************** / nested simpleHorn                                                     :3_3:Other "has":
*************************** > |^|                                                                 :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |^| deeps                                                          :4_2:UnDeeper:
*************************** \ |^| deeps has returned ([(),(),()],-3)                          :4_1:May:
************************** / RPConstraint                                                          :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slMultiTerm                                                       :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
**************************** \ slMultiTerm has returned (["has","health insurance"],1)          :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
*************************** / |>| calling $>>                                                    :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
**************************** / |>>/base                                                         :4_2:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "has":
*************************** / $*|                                                                 :3_3:Other "has":
**************************** / slAKA                                                             :3_3:Other "has":
***************************** / $*|                                                             :3_3:Other "has":
****************************** / slAKA base                                                    :3_3:Other "has":
******************************* / slMultiTerm                                                 :3_3:Other "has":
******************************** / someSL                                                    :3_3:Other "has":
******************************** \ someSL has returned (["has","health insurance"],1)       :4_2:UnDeeper:
******************************* \ slMultiTerm has returned (["has","health insurance"],1)    :4_2:UnDeeper:
****************************** \ slAKA base has returned (["has","health insurance"],1)       :4_2:UnDeeper:
***************************** \ $*| has returned (["has","health insurance"],1)                :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional akapart                                       :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / PAKA/akapart                                           :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
*********************************** / Aka Token                                          :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional akapart has returned (Nothing,0)              :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** / |>>/recurse                                                    :4_2:UnDeeper:
***************************** / |>>/base                                                       :4_2:UnDeeper:
****************************** / slAKA optional typically                                     :4_2:UnDeeper:
******************************* / |?| optional something                                     :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
********************************* / typically                                              :4_2:UnDeeper:
********************************** / $>|                                                  :4_2:UnDeeper:
******************************* \ |?| optional something has returned (Nothing,0)            :4_2:UnDeeper:
****************************** \ slAKA optional typically has returned (Nothing,0)            :4_2:UnDeeper:
****************************** > |>>/base got Nothing                                         :4_2:UnDeeper:
***************************** \ |>>/base has returned (Nothing,0)                              :4_2:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                    :4_2:UnDeeper:
**************************** \ slAKA has returned (["has","health insurance"],1)                :4_2:UnDeeper:
*************************** \ $*| has returned (["has","health insurance"],1)                    :4_2:UnDeeper:
************************** \ RPMT has returned (RPMT ["has","health insurance"],1)                :4_2:UnDeeper:
************************* \ slRelPred has returned (RPMT ["has","health insurance"],1)             :4_2:UnDeeper:
************************* / undeepers                                                              :4_2:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
************************ \ pRelPred has returned RPMT ["has","health insurance"]                      :4_3:UnDeeper:
*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"])       :4_3:UnDeeper:
********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])      :4_3:UnDeeper:
********************* \ term p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])        :4_3:UnDeeper:
******************** / myindented: consuming UnDeeper                                                     :4_3:UnDeeper:
******************** \ myindented: consuming UnDeeper has returned UnDeeper                                 :4_4:UnDeeper:
******************* \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"])    :4_4:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])                  :4_4:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["has","health insurance"])                                 :4_4:UnDeeper:
**************** / binary(Or)                                                                                   :4_4:UnDeeper:
**************** / binary(And)                                                                                  :4_4:UnDeeper:
**************** / binary(SetLess)                                                                              :4_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :4_4:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                 :4_4:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :4_1:May:
************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************* \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** \ term p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
*********** / binary(Or)                                                                                      :4_1:May:
*********** / binary(And)                                                                                     :4_1:May:
*********** / binary(SetLess)                                                                                 :4_1:May:
*********** / binary(SetPlus)                                                                                 :4_1:May:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
******* / pTemporal/eventually                                                                                    :4_1:May:
******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
******* / pTemporal/vaguely                                                                                       :4_1:May:
******* / pDA                                                                                                     :4_1:May:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / term p                                                                                           :4_2:GoDeeper:
************ / term p/1a:label directly above                                                                 :4_2:GoDeeper:
************* / $*|                                                                                          :4_2:GoDeeper:
************** / someSL                                                                                     :4_2:GoDeeper:
*************** / pNumAsText                                                                               :4_2:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                             :4_2:GoDeeper:
************* / someSL                                                                                       :4_2:GoDeeper:
************** / pNumAsText                                                                                 :4_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :4_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :4_2:GoDeeper:
************** / someIndentation                                                                            :4_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :4_2:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :4_2:Other "shar:
*************** / manyIndentation/leaf?                                                                     :4_2:Other "shar:
**************** / term p                                                                                  :4_2:Other "shar:
***************** / term p/1a:label directly above                                                        :4_2:Other "shar:
****************** / $*|                                                                                 :4_2:Other "shar:
******************* / someSL                                                                            :4_2:Other "shar:
******************* \ someSL has returned (["sharpen knives"],0)                                         :1_2:UnDeeper:
******************* / pNumAsText                                                                         :1_2:UnDeeper:
***************** / term p/b:label to the left of line below, with EOL                                    :4_2:Other "shar:
****************** / someSL                                                                              :4_2:Other "shar:
****************** \ someSL has returned (["sharpen knives"],0)                                           :1_2:UnDeeper:
****************** / undeepers                                                                            :1_2:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :1_2:UnDeeper:
******************* > sameLine: success!                                                                 :1_2:UnDeeper:
****************** \ undeepers has returned ()                                                            :1_2:UnDeeper:
****************** / matching EOL                                                                         :1_2:UnDeeper:
***************** / term p/notLabelTerm                                                                   :4_2:Other "shar:
****************** / term p/2:someIndentation expr p                                                     :4_2:Other "shar:
******************* / someIndentation                                                                   :4_2:Other "shar:
******************** / myindented: consuming GoDeeper                                                  :4_2:Other "shar:
****************** / term p/3:plain p                                                                    :4_2:Other "shar:
******************* / pParamText                                                                        :4_2:Other "shar:
******************** / pParamText(flat) first line: pKeyValues                                         :4_2:Other "shar:
********************* / pKeyValuesAka                                                                 :4_2:Other "shar:
********************** / slAKA                                                                       :4_2:Other "shar:
*********************** / $*|                                                                       :4_2:Other "shar:
************************ / slAKA base                                                              :4_2:Other "shar:
************************* / slKeyValues                                                           :4_2:Other "shar:
************************** / $*|                                                                 :4_2:Other "shar:
*************************** / someSL                                                            :4_2:Other "shar:
*************************** \ someSL has returned (["sharpen knives"],0)                         :1_2:UnDeeper:
************************** \ $*| has returned (["sharpen knives"],0)                              :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / slTypeSig                                                      :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :1_2:UnDeeper:
************************** \ |>>/base has returned (Nothing,0)                                    :1_2:UnDeeper:
************************* \ slKeyValues has returned (("sharpen knives" :| [],Nothing),0)          :1_2:UnDeeper:
************************ \ slAKA base has returned (("sharpen knives" :| [],Nothing),0)             :1_2:UnDeeper:
*********************** \ $*| has returned (("sharpen knives" :| [],Nothing),0)                      :1_2:UnDeeper:
*********************** / |>>/recurse                                                                :1_2:UnDeeper:
*********************** / |>>/base                                                                   :1_2:UnDeeper:
************************ / slAKA optional akapart                                                   :1_2:UnDeeper:
************************* / |?| optional something                                                 :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / PAKA/akapart                                                       :1_2:UnDeeper:
**************************** / $>|                                                              :1_2:UnDeeper:
***************************** / Aka Token                                                      :1_2:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                        :1_2:UnDeeper:
************************ \ slAKA optional akapart has returned (Nothing,0)                          :1_2:UnDeeper:
************************ > |>>/base got Nothing                                                     :1_2:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                          :1_2:UnDeeper:
*********************** / |>>/recurse                                                                :1_2:UnDeeper:
*********************** / |>>/base                                                                   :1_2:UnDeeper:
************************ / slAKA optional typically                                                 :1_2:UnDeeper:
************************* / |?| optional something                                                 :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
*************************** / typically                                                          :1_2:UnDeeper:
**************************** / $>|                                                              :1_2:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                        :1_2:UnDeeper:
************************ \ slAKA optional typically has returned (Nothing,0)                        :1_2:UnDeeper:
************************ > |>>/base got Nothing                                                     :1_2:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                          :1_2:UnDeeper:
*********************** > slAKA: proceeding after base and entityalias are retrieved ...             :1_2:UnDeeper:
*********************** > pAKA: entityalias = Nothing                                                :1_2:UnDeeper:
********************** \ slAKA has returned (("sharpen knives" :| [],Nothing),0)                      :1_2:UnDeeper:
********************** / undeepers                                                                    :1_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :1_2:UnDeeper:
*********************** > sameLine: success!                                                         :1_2:UnDeeper:
********************** \ undeepers has returned ()                                                    :1_2:UnDeeper:
********************* \ pKeyValuesAka has returned ("sharpen knives" :| [],Nothing)                    :1_2:UnDeeper:
******************** \ pParamText(flat) first line: pKeyValues has returned ("sharpen knives" :| [],Nothing) :1_2:UnDeeper:
******************** / pParamText(flat) subsequent lines: sameMany pKeyValues                           :1_2:UnDeeper:
********************* / manyIndentation/leaf?                                                          :1_2:UnDeeper:
********************** / sameMany                                                                     :1_2:UnDeeper:
*********************** / pKeyValuesAka                                                              :1_2:UnDeeper:
************************ / slAKA                                                                    :1_2:UnDeeper:
************************* / $*|                                                                    :1_2:UnDeeper:
************************** / slAKA base                                                           :1_2:UnDeeper:
*************************** / slKeyValues                                                        :1_2:UnDeeper:
**************************** / $*|                                                              :1_2:UnDeeper:
***************************** / someSL                                                         :1_2:UnDeeper:
****************************** / pNumAsText                                                   :1_2:UnDeeper:
********************** \ sameMany has returned []                                                     :1_2:UnDeeper:
********************* \ manyIndentation/leaf? has returned []                                          :1_2:UnDeeper:
******************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []           :1_2:UnDeeper:
******************* \ pParamText has returned ("sharpen knives" :| [],Nothing) :| []                     :1_2:UnDeeper:
****************** \ term p/3:plain p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])        :1_2:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])       :1_2:UnDeeper:
**************** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                      :1_2:UnDeeper:
**************** / binary(Or)                                                                               :1_2:UnDeeper:
**************** / binary(And)                                                                              :1_2:UnDeeper:
**************** / binary(SetLess)                                                                          :1_2:UnDeeper:
**************** / binary(SetPlus)                                                                          :1_2:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])         :1_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :1_2:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :EOF:
************** \ someIndentation has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])            :EOF:
************* \ term p/2:someIndentation expr p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| []) :EOF:
************ \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])            :EOF:
*********** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                           :EOF:
*********** / binary(Or)                                                                                    :EOF:
*********** / binary(And)                                                                                   :EOF:
*********** / binary(SetLess)                                                                               :EOF:
*********** / binary(SetPlus)                                                                               :EOF:
********** \ expr pParamText has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                    :EOF:
********* \ dBoolStructP calling exprP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
******** \ pAction calling dBoolStructP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
******* \ pDA has returned (DMay,Leaf (("sharpen knives" :| [],Nothing) :| []))                                 :EOF:
******* / WHERE                                                                                                 :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
******* / pTemporal/eventually                                                                                  :EOF:
******* / pTemporal/specifically                                                                                :EOF:
******** / $>|                                                                                                 :EOF:
******* / pTemporal/vaguely                                                                                     :EOF:
****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** / pHenceLest-Hence                                                                                          :EOF:
***** / pHenceLest-Lest                                                                                           :EOF:
****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
****   pRegRuleNormal: the positive preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: the negative preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
*** \ pRegRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
** \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
** / pRule                                                                                                           :EOF:
* final
:PROPERTIES:
:VISIBILITY: all
:END:


PDPA
  boolstructp-3
  boolstructp-3
  boolstructp-3
  boolstructp-3

Finished in 0.0469 seconds
4 examples, 0 failures

natural4> Test suite natural4-test passed
Completed 2 action(s).
