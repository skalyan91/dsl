* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/boolstructp-3/)

* Tokens
EVERY ( "person" ) WHO
    (
        ( "is"
            ( "immortal"
                ( TYPICALLY ( "false" ) )
            )
        ) OR
        ( "has" ( "health insurance" ) )
    ) MAY ( "sharpen knives" )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

someDeep> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

pRegRuleSugary> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / labelPrefix                                                                          :2_3:GoDeeper:
labelPrefix> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "is":
********************** / manyIndentation/leaf?                                                         :2_3:Other "is":
*********************** / expression                                                                  :2_3:Other "is":
************************ / labelPrefix                                                               :2_3:Other "is":
labelPrefix> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

************************ \ labelPrefix has returned "is"                                              :2_4:GoDeeper:
************************ / term p                                                                     :2_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :2_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :2_4:GoDeeper:
*************************** / someIndentation                                                      :2_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :2_4:Other "immo:
**************************** / manyIndentation/leaf?                                               :2_4:Other "immo:
***************************** / expression                                                        :2_4:Other "immo:
****************************** / labelPrefix                                                     :2_4:Other "immo:
labelPrefix> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected (

****************************** / term p                                                          :2_4:Other "immo:
******************************* / term p/notLabelTerm                                           :2_4:Other "immo:
******************************** / term p/2:someIndentation expr p                             :2_4:Other "immo:
********************************* / someIndentation                                           :2_4:Other "immo:
********************************** / myindented: consuming GoDeeper                          :2_4:Other "immo:
myindented: consuming GoDeeper> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "immortal"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "immortal"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "immortal"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :2_4:Other "immo:
********************************* / pRelPred                                                  :2_4:Other "immo:
********************************** / slRelPred                                               :2_4:Other "immo:
*********************************** / nested simpleHorn                                     :2_4:Other "immo:
************************************ > |^|                                                 :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |^| deeps                                            :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************************************ \ |^| deeps has returned ([()],1)                       :2_5:Typically:
nested simpleHorn> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
nested simpleHorn> MATCH (CERR): "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

*********************************** / RPConstraint                                          :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPConstraint> MATCH (CERR): "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPBoolStructR> MATCH (CERR): "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slAKA                                             :2_4:Other "immo:
************************************** / $*|                                             :2_4:Other "immo:
*************************************** / slAKA base                                    :2_4:Other "immo:
**************************************** / slMultiTerm                                 :2_4:Other "immo:
***************************************** / someSL                                    :2_4:Other "immo:
****************************************** / pNumAsText                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

***************************************** \ someSL has returned (["immortal"],0)       :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

**************************************** \ slMultiTerm has returned (["immortal"],0)    :2_5:GoDeeper:
slAKA base> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA base> MATCH (COK): "immortal"
slAKA base> VALUE: ((["immortal"],0),[])

*************************************** \ slAKA base has returned (["immortal"],0)       :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************** \ $*| has returned (["immortal"],0)                :2_5:GoDeeper:
************************************** / |>>/recurse                                      :2_5:GoDeeper:
*************************************** / |>>/recurse                                     :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*************************************** / |>>/base                                        :2_5:Typically:
**************************************** / slAKA optional akapart                        :2_5:Typically:
***************************************** / |?| optional something                      :2_5:Typically:
****************************************** / |>>/recurse                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

****************************************** / |>>/base                                  :2_5:Typically:
******************************************* / PAKA/akapart                            :2_5:Typically:
******************************************** / $>|                                   :2_5:Typically:
********************************************* / Aka Token                           :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :2_5:Typically:
**************************************** > |>>/base got Nothing                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)               :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************************************** \ |>>/recurse has returned (Nothing,1)              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
*************************************** / slAKA optional typically                        :2_5:Typically:
**************************************** / |?| optional something                        :2_5:Typically:
***************************************** / |>>/recurse                                 :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

***************************************** / |>>/base                                    :2_5:Typically:
****************************************** / typically                                 :2_5:Typically:
******************************************* / $>|                                     :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

******************************************* \ $>| has returned Typically               :2_6:GoDeeper:
******************************************* / |>>/recurse                              :2_6:GoDeeper:
******************************************** / |>>/recurse                             :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

******************************************** / |>>/base                                :2_6:Other "fals:
********************************************* / slMultiTerm                           :2_6:Other "fals:
********************************************** / someSL                              :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

********************************************** \ someSL has returned (["false"],0) :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

********************************************* \ slMultiTerm has returned (["false"],0) :3_3:UnDeeper:
********************************************* > |>>/base got ["false"]           :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

******************************************** \ |>>/base has returned (["false"],0) :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

******************************************* \ |>>/recurse has returned (["false"],1) :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

****************************************** \ typically has returned (["false"],1)   :3_3:UnDeeper:
****************************************** > |>>/base got ["false"]                 :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

***************************************** \ |>>/base has returned (["false"],1)      :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

**************************************** \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*************************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*************************************** > |>>/base got Just ["false"]                  :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

************************************** \ |>>/base has returned (Just ["false"],1)       :3_3:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
************************************** > pAKA: entityalias = Nothing                    :3_3:UnDeeper:
slAKA> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************* \ slAKA has returned (["immortal"],2)              :3_3:UnDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************ \ $*| has returned (["immortal"],2)                  :3_3:UnDeeper:
RPMT> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPMT> MATCH (COK): "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************************** \ RPMT has returned (RPMT ["immortal"],2)              :3_3:UnDeeper:
slRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************** \ slRelPred has returned (RPMT ["immortal"],2)           :3_3:UnDeeper:
********************************** / undeepers                                              :3_3:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers :3_3:UnDeeper:
*********************************** > sameLine: success!                                       :3_5:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :3_5:UnDeeper:
pRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
pRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
pRelPred> VALUE: (RPMT ["immortal"],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ pRelPred has returned RPMT ["immortal"]                      :3_5:UnDeeper:
term p/3:plain p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/3:plain p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["immortal"])       :3_5:UnDeeper:
term p/notLabelTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/notLabelTerm> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])      :3_5:UnDeeper:
term p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ term p has returned MyLeaf (RPMT ["immortal"])                     :3_5:UnDeeper:
****************************** / binary(Or)                                                         :3_5:UnDeeper:
binary(Or)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                        :3_5:UnDeeper:
binary(And)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                    :3_5:UnDeeper:
binary(SetLess)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                    :3_5:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
expression> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
expression> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ expression has returned MyLeaf (RPMT ["immortal"])                   :3_5:UnDeeper:
manyIndentation/leaf?> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["immortal"])          :3_5:UnDeeper:
**************************** / myindented: consuming UnDeeper                                         :3_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                     :3_6:UnDeeper:
someIndentation> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
someIndentation> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ someIndentation has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p/2:someIndentation expr p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["immortal"])      :3_6:UnDeeper:
term p/notLabelTerm> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ term p has returned MyLeaf (RPMT ["immortal"])                                   :3_6:UnDeeper:
************************ / binary(Or)                                                                       :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                      :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                                  :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                                  :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ expression has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))       :3_6:UnDeeper:
********************** / myindented: consuming UnDeeper                                                       :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ someIndentation has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"])) :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ term p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                     :3_2:Or:
****************** / binary(Or)                                                                          :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

****************** \ binary(Or) has returned Or                                                           :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "has":
********************** / manyIndentation/leaf?                                                         :3_3:Other "has":
*********************** / expression                                                                  :3_3:Other "has":
************************ / labelPrefix                                                               :3_3:Other "has":
labelPrefix> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
labelPrefix> MATCH (COK): "has"
labelPrefix> VALUE: ("has",[])

************************ \ labelPrefix has returned "has"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "heal:
**************************** / manyIndentation/leaf?                                               :3_4:Other "heal:
***************************** / expression                                                        :3_4:Other "heal:
****************************** / labelPrefix                                                     :3_4:Other "heal:
labelPrefix> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "heal:
******************************* / term p/notLabelTerm                                           :3_4:Other "heal:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "heal:
********************************* / someIndentation                                           :3_4:Other "heal:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "heal:
myindented: consuming GoDeeper> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected "health insurance"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected "health insurance"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected "health insurance"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "heal:
********************************* / pRelPred                                                  :3_4:Other "heal:
********************************** / slRelPred                                               :3_4:Other "heal:
*********************************** / nested simpleHorn                                     :3_4:Other "heal:
************************************ > |^|                                                 :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:May:
nested simpleHorn> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
nested simpleHorn> MATCH (CERR): "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPConstraint> MATCH (CERR): "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPBoolStructR> MATCH (CERR): "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slAKA                                             :3_4:Other "heal:
************************************** / $*|                                             :3_4:Other "heal:
*************************************** / slAKA base                                    :3_4:Other "heal:
**************************************** / slMultiTerm                                 :3_4:Other "heal:
***************************************** / someSL                                    :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

***************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

**************************************** \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
slAKA base> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA base> MATCH (COK): "health insurance"
slAKA base> VALUE: ((["health insurance"],0),[])

*************************************** \ slAKA base has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************** \ $*| has returned (["health insurance"],0)    :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA> MATCH (COK): "health insurance"
slAKA> VALUE: ((["health insurance"],0),[])

************************************* \ slAKA has returned (["health insurance"],0)    :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
RPMT> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPMT> MATCH (COK): "health insurance"
RPMT> VALUE: ((RPMT ["health insurance"],0),[])

*********************************** \ RPMT has returned (RPMT ["health insurance"],0)    :4_2:UnDeeper:
slRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slRelPred> MATCH (COK): "health insurance"
slRelPred> VALUE: ((RPMT ["health insurance"],0),[])

********************************** \ slRelPred has returned (RPMT ["health insurance"],0) :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
pRelPred> MATCH (COK): "health insurance"
pRelPred> VALUE: (RPMT ["health insurance"],[])

********************************* \ pRelPred has returned RPMT ["health insurance"]        :4_2:UnDeeper:
term p/3:plain p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/3:plain p> MATCH (COK): "health insurance"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/notLabelTerm> MATCH (COK): "health insurance"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p> MATCH (COK): "health insurance"
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["health insurance"])       :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
expression> MATCH (COK): "health insurance"
expression> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["health insurance"])     :4_2:UnDeeper:
manyIndentation/leaf?> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
manyIndentation/leaf?> MATCH (COK): "health insurance"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
someIndentation> MATCH (COK): ( "health insurance" )
someIndentation> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/2:someIndentation expr p> MATCH (COK): ( "health insurance" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/notLabelTerm> MATCH (COK): ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p> MATCH (COK): ( "health insurance" )
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************ \ term p has returned MyLeaf (RPMT ["health insurance"])                     :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

*********************** \ expression has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************* \ someIndentation has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p> MATCH (COK): ( "has" ( "health insurance" ) )
term p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

****************** \ term p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))                 :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ term p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
|>>/recurse> IN: "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected "sharpen knives"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
pTemporal/eventually> IN: "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected "sharpen knives"
pTemporal/eventually> expecting EVENTUALLY

*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
$>|> IN: "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected "sharpen knives"
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected "sharpen knives"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
pTemporal/vaguely> IN: "sharpen knives" )
pTemporal/vaguely> MATCH (COK): "sharpen knives"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "sharpen knives"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
|>>/base> IN: "sharpen knives" )
|>>/base> MATCH (COK): "sharpen knives"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
|>>/recurse> IN: ( "sharpen knives" )
|>>/recurse> MATCH (COK): ( "sharpen knives"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
|>| calling $>>> IN: ( "sharpen knives" )
|>| calling $>>> MATCH (COK): ( "sharpen knives"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
undeepers> IN: )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                           :EOF:
pDT> IN: MAY ( "sharpen knives" )
pDT> MATCH (COK): MAY ( "sharpen knives" )
pDT> VALUE: ((DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives")),[])

******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDoAction/Do                                                                                          :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=30:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=30:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / labelPrefix                                                                          :2_3:GoDeeper:
labelPrefix> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "is":
********************** / manyIndentation/leaf?                                                         :2_3:Other "is":
*********************** / expression                                                                  :2_3:Other "is":
************************ / labelPrefix                                                               :2_3:Other "is":
labelPrefix> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

************************ \ labelPrefix has returned "is"                                              :2_4:GoDeeper:
************************ / term p                                                                     :2_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :2_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :2_4:GoDeeper:
*************************** / someIndentation                                                      :2_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :2_4:Other "immo:
**************************** / manyIndentation/leaf?                                               :2_4:Other "immo:
***************************** / expression                                                        :2_4:Other "immo:
****************************** / labelPrefix                                                     :2_4:Other "immo:
labelPrefix> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected (

****************************** / term p                                                          :2_4:Other "immo:
******************************* / term p/notLabelTerm                                           :2_4:Other "immo:
******************************** / term p/2:someIndentation expr p                             :2_4:Other "immo:
********************************* / someIndentation                                           :2_4:Other "immo:
********************************** / myindented: consuming GoDeeper                          :2_4:Other "immo:
myindented: consuming GoDeeper> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "immortal"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "immortal"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "immortal"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :2_4:Other "immo:
********************************* / pRelPred                                                  :2_4:Other "immo:
********************************** / slRelPred                                               :2_4:Other "immo:
*********************************** / nested simpleHorn                                     :2_4:Other "immo:
************************************ > |^|                                                 :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |^| deeps                                            :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************************************ \ |^| deeps has returned ([()],1)                       :2_5:Typically:
nested simpleHorn> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
nested simpleHorn> MATCH (CERR): "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

*********************************** / RPConstraint                                          :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPConstraint> MATCH (CERR): "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPBoolStructR> MATCH (CERR): "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slAKA                                             :2_4:Other "immo:
************************************** / $*|                                             :2_4:Other "immo:
*************************************** / slAKA base                                    :2_4:Other "immo:
**************************************** / slMultiTerm                                 :2_4:Other "immo:
***************************************** / someSL                                    :2_4:Other "immo:
****************************************** / pNumAsText                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

***************************************** \ someSL has returned (["immortal"],0)       :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

**************************************** \ slMultiTerm has returned (["immortal"],0)    :2_5:GoDeeper:
slAKA base> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA base> MATCH (COK): "immortal"
slAKA base> VALUE: ((["immortal"],0),[])

*************************************** \ slAKA base has returned (["immortal"],0)       :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************** \ $*| has returned (["immortal"],0)                :2_5:GoDeeper:
************************************** / |>>/recurse                                      :2_5:GoDeeper:
*************************************** / |>>/recurse                                     :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*************************************** / |>>/base                                        :2_5:Typically:
**************************************** / slAKA optional akapart                        :2_5:Typically:
***************************************** / |?| optional something                      :2_5:Typically:
****************************************** / |>>/recurse                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

****************************************** / |>>/base                                  :2_5:Typically:
******************************************* / PAKA/akapart                            :2_5:Typically:
******************************************** / $>|                                   :2_5:Typically:
********************************************* / Aka Token                           :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :2_5:Typically:
**************************************** > |>>/base got Nothing                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)               :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************************************** \ |>>/recurse has returned (Nothing,1)              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
*************************************** / slAKA optional typically                        :2_5:Typically:
**************************************** / |?| optional something                        :2_5:Typically:
***************************************** / |>>/recurse                                 :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

***************************************** / |>>/base                                    :2_5:Typically:
****************************************** / typically                                 :2_5:Typically:
******************************************* / $>|                                     :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

******************************************* \ $>| has returned Typically               :2_6:GoDeeper:
******************************************* / |>>/recurse                              :2_6:GoDeeper:
******************************************** / |>>/recurse                             :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

******************************************** / |>>/base                                :2_6:Other "fals:
********************************************* / slMultiTerm                           :2_6:Other "fals:
********************************************** / someSL                              :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

********************************************** \ someSL has returned (["false"],0) :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

********************************************* \ slMultiTerm has returned (["false"],0) :3_3:UnDeeper:
********************************************* > |>>/base got ["false"]           :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

******************************************** \ |>>/base has returned (["false"],0) :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

******************************************* \ |>>/recurse has returned (["false"],1) :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

****************************************** \ typically has returned (["false"],1)   :3_3:UnDeeper:
****************************************** > |>>/base got ["false"]                 :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

***************************************** \ |>>/base has returned (["false"],1)      :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

**************************************** \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*************************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*************************************** > |>>/base got Just ["false"]                  :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

************************************** \ |>>/base has returned (Just ["false"],1)       :3_3:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
************************************** > pAKA: entityalias = Nothing                    :3_3:UnDeeper:
slAKA> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************* \ slAKA has returned (["immortal"],2)              :3_3:UnDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************ \ $*| has returned (["immortal"],2)                  :3_3:UnDeeper:
RPMT> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPMT> MATCH (COK): "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************************** \ RPMT has returned (RPMT ["immortal"],2)              :3_3:UnDeeper:
slRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************** \ slRelPred has returned (RPMT ["immortal"],2)           :3_3:UnDeeper:
********************************** / undeepers                                              :3_3:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers :3_3:UnDeeper:
*********************************** > sameLine: success!                                       :3_5:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :3_5:UnDeeper:
pRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
pRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
pRelPred> VALUE: (RPMT ["immortal"],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ pRelPred has returned RPMT ["immortal"]                      :3_5:UnDeeper:
term p/3:plain p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/3:plain p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["immortal"])       :3_5:UnDeeper:
term p/notLabelTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/notLabelTerm> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])      :3_5:UnDeeper:
term p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ term p has returned MyLeaf (RPMT ["immortal"])                     :3_5:UnDeeper:
****************************** / binary(Or)                                                         :3_5:UnDeeper:
binary(Or)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                        :3_5:UnDeeper:
binary(And)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                    :3_5:UnDeeper:
binary(SetLess)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                    :3_5:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
expression> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
expression> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ expression has returned MyLeaf (RPMT ["immortal"])                   :3_5:UnDeeper:
manyIndentation/leaf?> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["immortal"])          :3_5:UnDeeper:
**************************** / myindented: consuming UnDeeper                                         :3_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                     :3_6:UnDeeper:
someIndentation> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
someIndentation> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ someIndentation has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p/2:someIndentation expr p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["immortal"])      :3_6:UnDeeper:
term p/notLabelTerm> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ term p has returned MyLeaf (RPMT ["immortal"])                                   :3_6:UnDeeper:
************************ / binary(Or)                                                                       :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                      :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                                  :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                                  :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ expression has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))       :3_6:UnDeeper:
********************** / myindented: consuming UnDeeper                                                       :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ someIndentation has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"])) :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ term p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                     :3_2:Or:
****************** / binary(Or)                                                                          :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

****************** \ binary(Or) has returned Or                                                           :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "has":
********************** / manyIndentation/leaf?                                                         :3_3:Other "has":
*********************** / expression                                                                  :3_3:Other "has":
************************ / labelPrefix                                                               :3_3:Other "has":
labelPrefix> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
labelPrefix> MATCH (COK): "has"
labelPrefix> VALUE: ("has",[])

************************ \ labelPrefix has returned "has"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "heal:
**************************** / manyIndentation/leaf?                                               :3_4:Other "heal:
***************************** / expression                                                        :3_4:Other "heal:
****************************** / labelPrefix                                                     :3_4:Other "heal:
labelPrefix> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "heal:
******************************* / term p/notLabelTerm                                           :3_4:Other "heal:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "heal:
********************************* / someIndentation                                           :3_4:Other "heal:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "heal:
myindented: consuming GoDeeper> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected "health insurance"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected "health insurance"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected "health insurance"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "heal:
********************************* / pRelPred                                                  :3_4:Other "heal:
********************************** / slRelPred                                               :3_4:Other "heal:
*********************************** / nested simpleHorn                                     :3_4:Other "heal:
************************************ > |^|                                                 :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:May:
nested simpleHorn> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
nested simpleHorn> MATCH (CERR): "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPConstraint> MATCH (CERR): "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPBoolStructR> MATCH (CERR): "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slAKA                                             :3_4:Other "heal:
************************************** / $*|                                             :3_4:Other "heal:
*************************************** / slAKA base                                    :3_4:Other "heal:
**************************************** / slMultiTerm                                 :3_4:Other "heal:
***************************************** / someSL                                    :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

***************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

**************************************** \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
slAKA base> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA base> MATCH (COK): "health insurance"
slAKA base> VALUE: ((["health insurance"],0),[])

*************************************** \ slAKA base has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************** \ $*| has returned (["health insurance"],0)    :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA> MATCH (COK): "health insurance"
slAKA> VALUE: ((["health insurance"],0),[])

************************************* \ slAKA has returned (["health insurance"],0)    :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
RPMT> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPMT> MATCH (COK): "health insurance"
RPMT> VALUE: ((RPMT ["health insurance"],0),[])

*********************************** \ RPMT has returned (RPMT ["health insurance"],0)    :4_2:UnDeeper:
slRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slRelPred> MATCH (COK): "health insurance"
slRelPred> VALUE: ((RPMT ["health insurance"],0),[])

********************************** \ slRelPred has returned (RPMT ["health insurance"],0) :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
pRelPred> MATCH (COK): "health insurance"
pRelPred> VALUE: (RPMT ["health insurance"],[])

********************************* \ pRelPred has returned RPMT ["health insurance"]        :4_2:UnDeeper:
term p/3:plain p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/3:plain p> MATCH (COK): "health insurance"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/notLabelTerm> MATCH (COK): "health insurance"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p> MATCH (COK): "health insurance"
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["health insurance"])       :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
expression> MATCH (COK): "health insurance"
expression> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["health insurance"])     :4_2:UnDeeper:
manyIndentation/leaf?> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
manyIndentation/leaf?> MATCH (COK): "health insurance"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
someIndentation> MATCH (COK): ( "health insurance" )
someIndentation> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/2:someIndentation expr p> MATCH (COK): ( "health insurance" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/notLabelTerm> MATCH (COK): ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p> MATCH (COK): ( "health insurance" )
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************ \ term p has returned MyLeaf (RPMT ["health insurance"])                     :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

*********************** \ expression has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************* \ someIndentation has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p> MATCH (COK): ( "has" ( "health insurance" ) )
term p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

****************** \ term p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))                 :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ term p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :4_1:May:
pTemporal/eventually> IN: MAY ( "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MAY ( "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=26:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :4_1:May:
pTemporal/vaguely> IN: MAY ( "sharpen knives" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=26:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :4_1:May:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / expression                                                                                       :4_2:GoDeeper:
************ / labelPrefix                                                                                    :4_2:GoDeeper:
labelPrefix> IN: ( "sharpen knives" )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :4_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :4_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :4_2:GoDeeper:
*************** / someIndentation                                                                          :4_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "sharpen knives" )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :4_2:Other "shar:
**************** / manyIndentation/leaf?                                                                   :4_2:Other "shar:
***************** / expression                                                                            :4_2:Other "shar:
****************** / labelPrefix                                                                         :4_2:Other "shar:
labelPrefix> IN: "sharpen knives" )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected )

****************** / term p                                                                              :4_2:Other "shar:
******************* / term p/notLabelTerm                                                               :4_2:Other "shar:
******************** / term p/2:someIndentation expr p                                                 :4_2:Other "shar:
********************* / someIndentation                                                               :4_2:Other "shar:
********************** / myindented: consuming GoDeeper                                              :4_2:Other "shar:
myindented: consuming GoDeeper> IN: "sharpen knives" )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=28:
myindented: consuming GoDeeper> unexpected "sharpen knives"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected "sharpen knives"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected "sharpen knives"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :4_2:Other "shar:
********************* / pParamText                                                                    :4_2:Other "shar:
********************** / pParamText(flat) first line: pKeyValues                                     :4_2:Other "shar:
*********************** / pKeyValuesAka                                                             :4_2:Other "shar:
************************ / slAKA                                                                   :4_2:Other "shar:
************************* / $*|                                                                   :4_2:Other "shar:
************************** / slAKA base                                                          :4_2:Other "shar:
*************************** / slKeyValues                                                       :4_2:Other "shar:
**************************** / $*|                                                             :4_2:Other "shar:
***************************** / someSL                                                        :4_2:Other "shar:
someSL> IN: "sharpen knives" )
someSL> MATCH (COK): "sharpen knives"
someSL> VALUE: ((["sharpen knives"],0),[])

***************************** \ someSL has returned (["sharpen knives"],0)                     :1_2:UnDeeper:
$*|> IN: "sharpen knives" )
$*|> MATCH (COK): "sharpen knives"
$*|> VALUE: ((["sharpen knives"],0),[])

**************************** \ $*| has returned (["sharpen knives"],0)                          :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / |?| optional something                                         :1_2:UnDeeper:
****************************** / |>>/recurse                                                  :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :1_2:UnDeeper:
******************************* / slTypeSig                                                  :1_2:UnDeeper:
******************************** / $>|                                                      :1_2:UnDeeper:
$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: )
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=29:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :1_2:UnDeeper:
***************************** > |>>/base got Nothing                                           :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                :1_2:UnDeeper:
slKeyValues> IN: "sharpen knives" )
slKeyValues> MATCH (COK): "sharpen knives"
slKeyValues> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

*************************** \ slKeyValues has returned (("sharpen knives" :| [],Nothing),0)      :1_2:UnDeeper:
slAKA base> IN: "sharpen knives" )
slAKA base> MATCH (COK): "sharpen knives"
slAKA base> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************** \ slAKA base has returned (("sharpen knives" :| [],Nothing),0)         :1_2:UnDeeper:
$*|> IN: "sharpen knives" )
$*|> MATCH (COK): "sharpen knives"
$*|> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************* \ $*| has returned (("sharpen knives" :| [],Nothing),0)                  :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional akapart                                               :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / PAKA/akapart                                                   :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
******************************* / Aka Token                                                  :1_2:UnDeeper:
Aka Token> IN: )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=29:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=29:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
slAKA optional akapart> IN: )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :1_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional typically                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / typically                                                      :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=29:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
slAKA optional typically> IN: )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :1_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :1_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :1_2:UnDeeper:
slAKA> IN: "sharpen knives" )
slAKA> MATCH (COK): "sharpen knives"
slAKA> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************ \ slAKA has returned (("sharpen knives" :| [],Nothing),0)                  :1_2:UnDeeper:
************************ / undeepers                                                                :1_2:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************* > sameLine: success!                                                     :1_2:UnDeeper:
undeepers> IN: )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                :1_2:UnDeeper:
pKeyValuesAka> IN: "sharpen knives" )
pKeyValuesAka> MATCH (COK): "sharpen knives"
pKeyValuesAka> VALUE: (("sharpen knives" :| [],Nothing),[])

*********************** \ pKeyValuesAka has returned ("sharpen knives" :| [],Nothing)                :1_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "sharpen knives" )
pParamText(flat) first line: pKeyValues> MATCH (COK): "sharpen knives"
pParamText(flat) first line: pKeyValues> VALUE: (("sharpen knives" :| [],Nothing),[])

********************** \ pParamText(flat) first line: pKeyValues has returned ("sharpen knives" :| [],Nothing) :1_2:UnDeeper:
********************** / pParamText(flat) subsequent lines: sameMany pKeyValues                       :1_2:UnDeeper:
*********************** / manyIndentation/leaf?                                                      :1_2:UnDeeper:
************************ / sameMany                                                                 :1_2:UnDeeper:
************************* / pKeyValuesAka                                                          :1_2:UnDeeper:
************************** / slAKA                                                                :1_2:UnDeeper:
*************************** / $*|                                                                :1_2:UnDeeper:
**************************** / slAKA base                                                       :1_2:UnDeeper:
***************************** / slKeyValues                                                    :1_2:UnDeeper:
****************************** / $*|                                                          :1_2:UnDeeper:
******************************* / someSL                                                     :1_2:UnDeeper:
******************************** / pNumAsText                                               :1_2:UnDeeper:
pNumAsText> IN: )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=29:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=29:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=29:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=29:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: )
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************ \ sameMany has returned []                                                 :1_2:UnDeeper:
manyIndentation/leaf?> IN: )
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************** \ manyIndentation/leaf? has returned []                                      :1_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: )
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []       :1_2:UnDeeper:
pParamText> IN: "sharpen knives" )
pParamText> MATCH (COK): "sharpen knives"
pParamText> VALUE: (("sharpen knives" :| [],Nothing) :| [],[])

********************* \ pParamText has returned ("sharpen knives" :| [],Nothing) :| []                 :1_2:UnDeeper:
term p/3:plain p> IN: "sharpen knives" )
term p/3:plain p> MATCH (COK): "sharpen knives"
term p/3:plain p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

******************** \ term p/3:plain p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])    :1_2:UnDeeper:
term p/notLabelTerm> IN: "sharpen knives" )
term p/notLabelTerm> MATCH (COK): "sharpen knives"
term p/notLabelTerm> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])   :1_2:UnDeeper:
term p> IN: "sharpen knives" )
term p> MATCH (COK): "sharpen knives"
term p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                  :1_2:UnDeeper:
****************** / binary(Or)                                                                           :1_2:UnDeeper:
binary(Or)> IN: )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=29:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :1_2:UnDeeper:
binary(And)> IN: )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=29:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :1_2:UnDeeper:
binary(SetLess)> IN: )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=29:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :1_2:UnDeeper:
binary(SetPlus)> IN: )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=29:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "sharpen knives" )
expression> MATCH (COK): "sharpen knives"
expression> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

***************** \ expression has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                :1_2:UnDeeper:
manyIndentation/leaf?> IN: "sharpen knives" )
manyIndentation/leaf?> MATCH (COK): "sharpen knives"
manyIndentation/leaf?> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])       :1_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                :EOF:
someIndentation> IN: ( "sharpen knives" )
someIndentation> MATCH (COK): ( "sharpen knives" )
someIndentation> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

*************** \ someIndentation has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])          :EOF:
term p/2:someIndentation expr p> IN: ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (COK): ( "sharpen knives" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| []) :EOF:
term p/notLabelTerm> IN: ( "sharpen knives" )
term p/notLabelTerm> MATCH (COK): ( "sharpen knives" )
term p/notLabelTerm> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************* \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])          :EOF:
term p> IN: ( "sharpen knives" )
term p> MATCH (COK): ( "sharpen knives" )
term p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************ \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                         :EOF:
************ / binary(Or)                                                                                  :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected end of input
binary(Or)> expecting OR

************ / binary(And)                                                                                 :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected end of input
binary(And)> expecting AND

************ / binary(SetLess)                                                                             :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                             :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting PLUS

expression> IN: ( "sharpen knives" )
expression> MATCH (COK): ( "sharpen knives" )
expression> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

*********** \ expression has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                       :EOF:
expr pParamText> IN: ( "sharpen knives" )
expr pParamText> MATCH (COK): ( "sharpen knives" )
expr pParamText> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

********** \ expr pParamText has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                    :EOF:
dBoolStructP calling exprP> IN: ( "sharpen knives" )
dBoolStructP calling exprP> MATCH (COK): ( "sharpen knives" )
dBoolStructP calling exprP> VALUE: (Leaf (("sharpen knives" :| [],Nothing) :| []),[])

********* \ dBoolStructP calling exprP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
pAction calling dBoolStructP> IN: ( "sharpen knives" )
pAction calling dBoolStructP> MATCH (COK): ( "sharpen knives" )
pAction calling dBoolStructP> VALUE: (Leaf (("sharpen knives" :| [],Nothing) :| []),[])

******** \ pAction calling dBoolStructP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
pDA> IN: MAY ( "sharpen knives" )
pDA> MATCH (COK): MAY ( "sharpen knives" )
pDA> VALUE: ((DMay,Leaf (("sharpen knives" :| [],Nothing) :| [])),[])

******* \ pDA has returned (DMay,Leaf (("sharpen knives" :| [],Nothing) :| []))                                 :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                  :EOF:
pTemporal/eventually> IN: <EMPTY>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=30:
pTemporal/eventually> unexpected end of input
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: <EMPTY>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=30:
pTemporal/specifically> unexpected end of input
pTemporal/specifically> expecting AFTER, BEFORE, BY, ON, or any token

******* / pTemporal/vaguely                                                                                     :EOF:
pTemporal/vaguely> IN: <EMPTY>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=30:
pTemporal/vaguely> unexpected end of input
pTemporal/vaguely> expecting Other text

regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> VALUE: (RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
permutationsReg> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** / pHenceLest-Hence                                                                                          :EOF:
pHenceLest-Hence> IN: <EMPTY>
pHenceLest-Hence> MATCH (EERR): <EMPTY>
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=30:
pHenceLest-Hence> unexpected end of input
pHenceLest-Hence> expecting HENCE

***** / pHenceLest-Lest                                                                                           :EOF:
pHenceLest-Lest> IN: <EMPTY>
pHenceLest-Lest> MATCH (EERR): <EMPTY>
pHenceLest-Lest> ERROR:
pHenceLest-Lest> offset=30:
pHenceLest-Lest> unexpected end of input
pHenceLest-Lest> expecting LEST

****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
****   pRegRuleNormal: the positive preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: the negative preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRegRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*** \ pRegRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

** \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
** / pRule                                                                                                           :EOF:
pRule> IN: <EMPTY>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=30:
pRule> unexpected end of input
pRule> expecting EOL

EVERY ( "person" ) WHO
    (
        ( "is"
            ( "immortal"
                ( TYPICALLY ( "false" ) )
            )
        ) OR
        ( "has" ( "health insurance" ) )
    ) MAY ( "sharpen knives" )
** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

someDeep> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

pRegRuleSugary> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / labelPrefix                                                                          :2_3:GoDeeper:
labelPrefix> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "is":
********************** / manyIndentation/leaf?                                                         :2_3:Other "is":
*********************** / expression                                                                  :2_3:Other "is":
************************ / labelPrefix                                                               :2_3:Other "is":
labelPrefix> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

************************ \ labelPrefix has returned "is"                                              :2_4:GoDeeper:
************************ / term p                                                                     :2_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :2_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :2_4:GoDeeper:
*************************** / someIndentation                                                      :2_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :2_4:Other "immo:
**************************** / manyIndentation/leaf?                                               :2_4:Other "immo:
***************************** / expression                                                        :2_4:Other "immo:
****************************** / labelPrefix                                                     :2_4:Other "immo:
labelPrefix> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected (

****************************** / term p                                                          :2_4:Other "immo:
******************************* / term p/notLabelTerm                                           :2_4:Other "immo:
******************************** / term p/2:someIndentation expr p                             :2_4:Other "immo:
********************************* / someIndentation                                           :2_4:Other "immo:
********************************** / myindented: consuming GoDeeper                          :2_4:Other "immo:
myindented: consuming GoDeeper> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "immortal"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "immortal"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "immortal"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :2_4:Other "immo:
********************************* / pRelPred                                                  :2_4:Other "immo:
********************************** / slRelPred                                               :2_4:Other "immo:
*********************************** / nested simpleHorn                                     :2_4:Other "immo:
************************************ > |^|                                                 :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |^| deeps                                            :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************************************ \ |^| deeps has returned ([()],1)                       :2_5:Typically:
nested simpleHorn> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
nested simpleHorn> MATCH (CERR): "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

*********************************** / RPConstraint                                          :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPConstraint> MATCH (CERR): "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPBoolStructR> MATCH (CERR): "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slAKA                                             :2_4:Other "immo:
************************************** / $*|                                             :2_4:Other "immo:
*************************************** / slAKA base                                    :2_4:Other "immo:
**************************************** / slMultiTerm                                 :2_4:Other "immo:
***************************************** / someSL                                    :2_4:Other "immo:
****************************************** / pNumAsText                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

***************************************** \ someSL has returned (["immortal"],0)       :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

**************************************** \ slMultiTerm has returned (["immortal"],0)    :2_5:GoDeeper:
slAKA base> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA base> MATCH (COK): "immortal"
slAKA base> VALUE: ((["immortal"],0),[])

*************************************** \ slAKA base has returned (["immortal"],0)       :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************** \ $*| has returned (["immortal"],0)                :2_5:GoDeeper:
************************************** / |>>/recurse                                      :2_5:GoDeeper:
*************************************** / |>>/recurse                                     :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*************************************** / |>>/base                                        :2_5:Typically:
**************************************** / slAKA optional akapart                        :2_5:Typically:
***************************************** / |?| optional something                      :2_5:Typically:
****************************************** / |>>/recurse                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

****************************************** / |>>/base                                  :2_5:Typically:
******************************************* / PAKA/akapart                            :2_5:Typically:
******************************************** / $>|                                   :2_5:Typically:
********************************************* / Aka Token                           :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :2_5:Typically:
**************************************** > |>>/base got Nothing                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)               :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************************************** \ |>>/recurse has returned (Nothing,1)              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
*************************************** / slAKA optional typically                        :2_5:Typically:
**************************************** / |?| optional something                        :2_5:Typically:
***************************************** / |>>/recurse                                 :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

***************************************** / |>>/base                                    :2_5:Typically:
****************************************** / typically                                 :2_5:Typically:
******************************************* / $>|                                     :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

******************************************* \ $>| has returned Typically               :2_6:GoDeeper:
******************************************* / |>>/recurse                              :2_6:GoDeeper:
******************************************** / |>>/recurse                             :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

******************************************** / |>>/base                                :2_6:Other "fals:
********************************************* / slMultiTerm                           :2_6:Other "fals:
********************************************** / someSL                              :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

********************************************** \ someSL has returned (["false"],0) :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

********************************************* \ slMultiTerm has returned (["false"],0) :3_3:UnDeeper:
********************************************* > |>>/base got ["false"]           :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

******************************************** \ |>>/base has returned (["false"],0) :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

******************************************* \ |>>/recurse has returned (["false"],1) :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

****************************************** \ typically has returned (["false"],1)   :3_3:UnDeeper:
****************************************** > |>>/base got ["false"]                 :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

***************************************** \ |>>/base has returned (["false"],1)      :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

**************************************** \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*************************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*************************************** > |>>/base got Just ["false"]                  :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

************************************** \ |>>/base has returned (Just ["false"],1)       :3_3:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
************************************** > pAKA: entityalias = Nothing                    :3_3:UnDeeper:
slAKA> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************* \ slAKA has returned (["immortal"],2)              :3_3:UnDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************ \ $*| has returned (["immortal"],2)                  :3_3:UnDeeper:
RPMT> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPMT> MATCH (COK): "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************************** \ RPMT has returned (RPMT ["immortal"],2)              :3_3:UnDeeper:
slRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************** \ slRelPred has returned (RPMT ["immortal"],2)           :3_3:UnDeeper:
********************************** / undeepers                                              :3_3:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers :3_3:UnDeeper:
*********************************** > sameLine: success!                                       :3_5:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :3_5:UnDeeper:
pRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
pRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
pRelPred> VALUE: (RPMT ["immortal"],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ pRelPred has returned RPMT ["immortal"]                      :3_5:UnDeeper:
term p/3:plain p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/3:plain p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["immortal"])       :3_5:UnDeeper:
term p/notLabelTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/notLabelTerm> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])      :3_5:UnDeeper:
term p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ term p has returned MyLeaf (RPMT ["immortal"])                     :3_5:UnDeeper:
****************************** / binary(Or)                                                         :3_5:UnDeeper:
binary(Or)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                        :3_5:UnDeeper:
binary(And)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                    :3_5:UnDeeper:
binary(SetLess)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                    :3_5:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
expression> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
expression> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ expression has returned MyLeaf (RPMT ["immortal"])                   :3_5:UnDeeper:
manyIndentation/leaf?> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["immortal"])          :3_5:UnDeeper:
**************************** / myindented: consuming UnDeeper                                         :3_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                     :3_6:UnDeeper:
someIndentation> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
someIndentation> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ someIndentation has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p/2:someIndentation expr p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["immortal"])      :3_6:UnDeeper:
term p/notLabelTerm> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ term p has returned MyLeaf (RPMT ["immortal"])                                   :3_6:UnDeeper:
************************ / binary(Or)                                                                       :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                      :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                                  :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                                  :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ expression has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))       :3_6:UnDeeper:
********************** / myindented: consuming UnDeeper                                                       :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ someIndentation has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"])) :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ term p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                     :3_2:Or:
****************** / binary(Or)                                                                          :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

****************** \ binary(Or) has returned Or                                                           :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "has":
********************** / manyIndentation/leaf?                                                         :3_3:Other "has":
*********************** / expression                                                                  :3_3:Other "has":
************************ / labelPrefix                                                               :3_3:Other "has":
labelPrefix> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
labelPrefix> MATCH (COK): "has"
labelPrefix> VALUE: ("has",[])

************************ \ labelPrefix has returned "has"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "heal:
**************************** / manyIndentation/leaf?                                               :3_4:Other "heal:
***************************** / expression                                                        :3_4:Other "heal:
****************************** / labelPrefix                                                     :3_4:Other "heal:
labelPrefix> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "heal:
******************************* / term p/notLabelTerm                                           :3_4:Other "heal:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "heal:
********************************* / someIndentation                                           :3_4:Other "heal:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "heal:
myindented: consuming GoDeeper> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected "health insurance"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected "health insurance"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected "health insurance"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "heal:
********************************* / pRelPred                                                  :3_4:Other "heal:
********************************** / slRelPred                                               :3_4:Other "heal:
*********************************** / nested simpleHorn                                     :3_4:Other "heal:
************************************ > |^|                                                 :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:May:
nested simpleHorn> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
nested simpleHorn> MATCH (CERR): "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPConstraint> MATCH (CERR): "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPBoolStructR> MATCH (CERR): "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slAKA                                             :3_4:Other "heal:
************************************** / $*|                                             :3_4:Other "heal:
*************************************** / slAKA base                                    :3_4:Other "heal:
**************************************** / slMultiTerm                                 :3_4:Other "heal:
***************************************** / someSL                                    :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

***************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

**************************************** \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
slAKA base> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA base> MATCH (COK): "health insurance"
slAKA base> VALUE: ((["health insurance"],0),[])

*************************************** \ slAKA base has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************** \ $*| has returned (["health insurance"],0)    :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA> MATCH (COK): "health insurance"
slAKA> VALUE: ((["health insurance"],0),[])

************************************* \ slAKA has returned (["health insurance"],0)    :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
RPMT> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPMT> MATCH (COK): "health insurance"
RPMT> VALUE: ((RPMT ["health insurance"],0),[])

*********************************** \ RPMT has returned (RPMT ["health insurance"],0)    :4_2:UnDeeper:
slRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slRelPred> MATCH (COK): "health insurance"
slRelPred> VALUE: ((RPMT ["health insurance"],0),[])

********************************** \ slRelPred has returned (RPMT ["health insurance"],0) :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
pRelPred> MATCH (COK): "health insurance"
pRelPred> VALUE: (RPMT ["health insurance"],[])

********************************* \ pRelPred has returned RPMT ["health insurance"]        :4_2:UnDeeper:
term p/3:plain p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/3:plain p> MATCH (COK): "health insurance"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/notLabelTerm> MATCH (COK): "health insurance"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p> MATCH (COK): "health insurance"
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["health insurance"])       :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
expression> MATCH (COK): "health insurance"
expression> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["health insurance"])     :4_2:UnDeeper:
manyIndentation/leaf?> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
manyIndentation/leaf?> MATCH (COK): "health insurance"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
someIndentation> MATCH (COK): ( "health insurance" )
someIndentation> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/2:someIndentation expr p> MATCH (COK): ( "health insurance" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/notLabelTerm> MATCH (COK): ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p> MATCH (COK): ( "health insurance" )
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************ \ term p has returned MyLeaf (RPMT ["health insurance"])                     :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

*********************** \ expression has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************* \ someIndentation has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p> MATCH (COK): ( "has" ( "health insurance" ) )
term p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

****************** \ term p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))                 :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ term p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
|>>/recurse> IN: "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected "sharpen knives"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
pTemporal/eventually> IN: "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected "sharpen knives"
pTemporal/eventually> expecting EVENTUALLY

*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
$>|> IN: "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected "sharpen knives"
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected "sharpen knives"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
pTemporal/vaguely> IN: "sharpen knives" )
pTemporal/vaguely> MATCH (COK): "sharpen knives"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "sharpen knives"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
|>>/base> IN: "sharpen knives" )
|>>/base> MATCH (COK): "sharpen knives"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
|>>/recurse> IN: ( "sharpen knives" )
|>>/recurse> MATCH (COK): ( "sharpen knives"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
|>| calling $>>> IN: ( "sharpen knives" )
|>| calling $>>> MATCH (COK): ( "sharpen knives"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
undeepers> IN: )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                           :EOF:
pDT> IN: MAY ( "sharpen knives" )
pDT> MATCH (COK): MAY ( "sharpen knives" )
pDT> VALUE: ((DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives")),[])

******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDoAction/Do                                                                                          :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=30:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=30:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / labelPrefix                                                                          :2_3:GoDeeper:
labelPrefix> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "is":
********************** / manyIndentation/leaf?                                                         :2_3:Other "is":
*********************** / expression                                                                  :2_3:Other "is":
************************ / labelPrefix                                                               :2_3:Other "is":
labelPrefix> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

************************ \ labelPrefix has returned "is"                                              :2_4:GoDeeper:
************************ / term p                                                                     :2_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :2_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :2_4:GoDeeper:
*************************** / someIndentation                                                      :2_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :2_4:Other "immo:
**************************** / manyIndentation/leaf?                                               :2_4:Other "immo:
***************************** / expression                                                        :2_4:Other "immo:
****************************** / labelPrefix                                                     :2_4:Other "immo:
labelPrefix> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected (

****************************** / term p                                                          :2_4:Other "immo:
******************************* / term p/notLabelTerm                                           :2_4:Other "immo:
******************************** / term p/2:someIndentation expr p                             :2_4:Other "immo:
********************************* / someIndentation                                           :2_4:Other "immo:
********************************** / myindented: consuming GoDeeper                          :2_4:Other "immo:
myindented: consuming GoDeeper> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "immortal"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "immortal"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "immortal"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :2_4:Other "immo:
********************************* / pRelPred                                                  :2_4:Other "immo:
********************************** / slRelPred                                               :2_4:Other "immo:
*********************************** / nested simpleHorn                                     :2_4:Other "immo:
************************************ > |^|                                                 :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |^| deeps                                            :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************************************ \ |^| deeps has returned ([()],1)                       :2_5:Typically:
nested simpleHorn> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
nested simpleHorn> MATCH (CERR): "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

*********************************** / RPConstraint                                          :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPConstraint> MATCH (CERR): "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPBoolStructR> MATCH (CERR): "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slAKA                                             :2_4:Other "immo:
************************************** / $*|                                             :2_4:Other "immo:
*************************************** / slAKA base                                    :2_4:Other "immo:
**************************************** / slMultiTerm                                 :2_4:Other "immo:
***************************************** / someSL                                    :2_4:Other "immo:
****************************************** / pNumAsText                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

***************************************** \ someSL has returned (["immortal"],0)       :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

**************************************** \ slMultiTerm has returned (["immortal"],0)    :2_5:GoDeeper:
slAKA base> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA base> MATCH (COK): "immortal"
slAKA base> VALUE: ((["immortal"],0),[])

*************************************** \ slAKA base has returned (["immortal"],0)       :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************** \ $*| has returned (["immortal"],0)                :2_5:GoDeeper:
************************************** / |>>/recurse                                      :2_5:GoDeeper:
*************************************** / |>>/recurse                                     :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*************************************** / |>>/base                                        :2_5:Typically:
**************************************** / slAKA optional akapart                        :2_5:Typically:
***************************************** / |?| optional something                      :2_5:Typically:
****************************************** / |>>/recurse                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

****************************************** / |>>/base                                  :2_5:Typically:
******************************************* / PAKA/akapart                            :2_5:Typically:
******************************************** / $>|                                   :2_5:Typically:
********************************************* / Aka Token                           :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :2_5:Typically:
**************************************** > |>>/base got Nothing                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)               :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************************************** \ |>>/recurse has returned (Nothing,1)              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
*************************************** / slAKA optional typically                        :2_5:Typically:
**************************************** / |?| optional something                        :2_5:Typically:
***************************************** / |>>/recurse                                 :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

***************************************** / |>>/base                                    :2_5:Typically:
****************************************** / typically                                 :2_5:Typically:
******************************************* / $>|                                     :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

******************************************* \ $>| has returned Typically               :2_6:GoDeeper:
******************************************* / |>>/recurse                              :2_6:GoDeeper:
******************************************** / |>>/recurse                             :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

******************************************** / |>>/base                                :2_6:Other "fals:
********************************************* / slMultiTerm                           :2_6:Other "fals:
********************************************** / someSL                              :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

********************************************** \ someSL has returned (["false"],0) :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

********************************************* \ slMultiTerm has returned (["false"],0) :3_3:UnDeeper:
********************************************* > |>>/base got ["false"]           :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

******************************************** \ |>>/base has returned (["false"],0) :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

******************************************* \ |>>/recurse has returned (["false"],1) :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

****************************************** \ typically has returned (["false"],1)   :3_3:UnDeeper:
****************************************** > |>>/base got ["false"]                 :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

***************************************** \ |>>/base has returned (["false"],1)      :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

**************************************** \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*************************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*************************************** > |>>/base got Just ["false"]                  :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

************************************** \ |>>/base has returned (Just ["false"],1)       :3_3:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
************************************** > pAKA: entityalias = Nothing                    :3_3:UnDeeper:
slAKA> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************* \ slAKA has returned (["immortal"],2)              :3_3:UnDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************ \ $*| has returned (["immortal"],2)                  :3_3:UnDeeper:
RPMT> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPMT> MATCH (COK): "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************************** \ RPMT has returned (RPMT ["immortal"],2)              :3_3:UnDeeper:
slRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************** \ slRelPred has returned (RPMT ["immortal"],2)           :3_3:UnDeeper:
********************************** / undeepers                                              :3_3:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers :3_3:UnDeeper:
*********************************** > sameLine: success!                                       :3_5:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :3_5:UnDeeper:
pRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
pRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
pRelPred> VALUE: (RPMT ["immortal"],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ pRelPred has returned RPMT ["immortal"]                      :3_5:UnDeeper:
term p/3:plain p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/3:plain p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["immortal"])       :3_5:UnDeeper:
term p/notLabelTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/notLabelTerm> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])      :3_5:UnDeeper:
term p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ term p has returned MyLeaf (RPMT ["immortal"])                     :3_5:UnDeeper:
****************************** / binary(Or)                                                         :3_5:UnDeeper:
binary(Or)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                        :3_5:UnDeeper:
binary(And)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                    :3_5:UnDeeper:
binary(SetLess)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                    :3_5:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
expression> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
expression> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ expression has returned MyLeaf (RPMT ["immortal"])                   :3_5:UnDeeper:
manyIndentation/leaf?> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["immortal"])          :3_5:UnDeeper:
**************************** / myindented: consuming UnDeeper                                         :3_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                     :3_6:UnDeeper:
someIndentation> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
someIndentation> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ someIndentation has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p/2:someIndentation expr p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["immortal"])      :3_6:UnDeeper:
term p/notLabelTerm> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ term p has returned MyLeaf (RPMT ["immortal"])                                   :3_6:UnDeeper:
************************ / binary(Or)                                                                       :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                      :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                                  :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                                  :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ expression has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))       :3_6:UnDeeper:
********************** / myindented: consuming UnDeeper                                                       :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ someIndentation has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"])) :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ term p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                     :3_2:Or:
****************** / binary(Or)                                                                          :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

****************** \ binary(Or) has returned Or                                                           :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "has":
********************** / manyIndentation/leaf?                                                         :3_3:Other "has":
*********************** / expression                                                                  :3_3:Other "has":
************************ / labelPrefix                                                               :3_3:Other "has":
labelPrefix> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
labelPrefix> MATCH (COK): "has"
labelPrefix> VALUE: ("has",[])

************************ \ labelPrefix has returned "has"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "heal:
**************************** / manyIndentation/leaf?                                               :3_4:Other "heal:
***************************** / expression                                                        :3_4:Other "heal:
****************************** / labelPrefix                                                     :3_4:Other "heal:
labelPrefix> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "heal:
******************************* / term p/notLabelTerm                                           :3_4:Other "heal:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "heal:
********************************* / someIndentation                                           :3_4:Other "heal:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "heal:
myindented: consuming GoDeeper> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected "health insurance"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected "health insurance"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected "health insurance"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "heal:
********************************* / pRelPred                                                  :3_4:Other "heal:
********************************** / slRelPred                                               :3_4:Other "heal:
*********************************** / nested simpleHorn                                     :3_4:Other "heal:
************************************ > |^|                                                 :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:May:
nested simpleHorn> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
nested simpleHorn> MATCH (CERR): "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPConstraint> MATCH (CERR): "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPBoolStructR> MATCH (CERR): "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slAKA                                             :3_4:Other "heal:
************************************** / $*|                                             :3_4:Other "heal:
*************************************** / slAKA base                                    :3_4:Other "heal:
**************************************** / slMultiTerm                                 :3_4:Other "heal:
***************************************** / someSL                                    :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

***************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

**************************************** \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
slAKA base> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA base> MATCH (COK): "health insurance"
slAKA base> VALUE: ((["health insurance"],0),[])

*************************************** \ slAKA base has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************** \ $*| has returned (["health insurance"],0)    :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA> MATCH (COK): "health insurance"
slAKA> VALUE: ((["health insurance"],0),[])

************************************* \ slAKA has returned (["health insurance"],0)    :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
RPMT> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPMT> MATCH (COK): "health insurance"
RPMT> VALUE: ((RPMT ["health insurance"],0),[])

*********************************** \ RPMT has returned (RPMT ["health insurance"],0)    :4_2:UnDeeper:
slRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slRelPred> MATCH (COK): "health insurance"
slRelPred> VALUE: ((RPMT ["health insurance"],0),[])

********************************** \ slRelPred has returned (RPMT ["health insurance"],0) :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
pRelPred> MATCH (COK): "health insurance"
pRelPred> VALUE: (RPMT ["health insurance"],[])

********************************* \ pRelPred has returned RPMT ["health insurance"]        :4_2:UnDeeper:
term p/3:plain p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/3:plain p> MATCH (COK): "health insurance"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/notLabelTerm> MATCH (COK): "health insurance"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p> MATCH (COK): "health insurance"
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["health insurance"])       :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
expression> MATCH (COK): "health insurance"
expression> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["health insurance"])     :4_2:UnDeeper:
manyIndentation/leaf?> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
manyIndentation/leaf?> MATCH (COK): "health insurance"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
someIndentation> MATCH (COK): ( "health insurance" )
someIndentation> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/2:someIndentation expr p> MATCH (COK): ( "health insurance" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/notLabelTerm> MATCH (COK): ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p> MATCH (COK): ( "health insurance" )
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************ \ term p has returned MyLeaf (RPMT ["health insurance"])                     :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

*********************** \ expression has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************* \ someIndentation has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p> MATCH (COK): ( "has" ( "health insurance" ) )
term p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

****************** \ term p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))                 :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ term p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :4_1:May:
pTemporal/eventually> IN: MAY ( "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MAY ( "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=26:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :4_1:May:
pTemporal/vaguely> IN: MAY ( "sharpen knives" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=26:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :4_1:May:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / expression                                                                                       :4_2:GoDeeper:
************ / labelPrefix                                                                                    :4_2:GoDeeper:
labelPrefix> IN: ( "sharpen knives" )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :4_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :4_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :4_2:GoDeeper:
*************** / someIndentation                                                                          :4_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "sharpen knives" )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :4_2:Other "shar:
**************** / manyIndentation/leaf?                                                                   :4_2:Other "shar:
***************** / expression                                                                            :4_2:Other "shar:
****************** / labelPrefix                                                                         :4_2:Other "shar:
labelPrefix> IN: "sharpen knives" )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected )

****************** / term p                                                                              :4_2:Other "shar:
******************* / term p/notLabelTerm                                                               :4_2:Other "shar:
******************** / term p/2:someIndentation expr p                                                 :4_2:Other "shar:
********************* / someIndentation                                                               :4_2:Other "shar:
********************** / myindented: consuming GoDeeper                                              :4_2:Other "shar:
myindented: consuming GoDeeper> IN: "sharpen knives" )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=28:
myindented: consuming GoDeeper> unexpected "sharpen knives"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected "sharpen knives"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected "sharpen knives"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :4_2:Other "shar:
********************* / pParamText                                                                    :4_2:Other "shar:
********************** / pParamText(flat) first line: pKeyValues                                     :4_2:Other "shar:
*********************** / pKeyValuesAka                                                             :4_2:Other "shar:
************************ / slAKA                                                                   :4_2:Other "shar:
************************* / $*|                                                                   :4_2:Other "shar:
************************** / slAKA base                                                          :4_2:Other "shar:
*************************** / slKeyValues                                                       :4_2:Other "shar:
**************************** / $*|                                                             :4_2:Other "shar:
***************************** / someSL                                                        :4_2:Other "shar:
someSL> IN: "sharpen knives" )
someSL> MATCH (COK): "sharpen knives"
someSL> VALUE: ((["sharpen knives"],0),[])

***************************** \ someSL has returned (["sharpen knives"],0)                     :1_2:UnDeeper:
$*|> IN: "sharpen knives" )
$*|> MATCH (COK): "sharpen knives"
$*|> VALUE: ((["sharpen knives"],0),[])

**************************** \ $*| has returned (["sharpen knives"],0)                          :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / |?| optional something                                         :1_2:UnDeeper:
****************************** / |>>/recurse                                                  :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :1_2:UnDeeper:
******************************* / slTypeSig                                                  :1_2:UnDeeper:
******************************** / $>|                                                      :1_2:UnDeeper:
$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: )
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=29:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :1_2:UnDeeper:
***************************** > |>>/base got Nothing                                           :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                :1_2:UnDeeper:
slKeyValues> IN: "sharpen knives" )
slKeyValues> MATCH (COK): "sharpen knives"
slKeyValues> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

*************************** \ slKeyValues has returned (("sharpen knives" :| [],Nothing),0)      :1_2:UnDeeper:
slAKA base> IN: "sharpen knives" )
slAKA base> MATCH (COK): "sharpen knives"
slAKA base> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************** \ slAKA base has returned (("sharpen knives" :| [],Nothing),0)         :1_2:UnDeeper:
$*|> IN: "sharpen knives" )
$*|> MATCH (COK): "sharpen knives"
$*|> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************* \ $*| has returned (("sharpen knives" :| [],Nothing),0)                  :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional akapart                                               :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / PAKA/akapart                                                   :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
******************************* / Aka Token                                                  :1_2:UnDeeper:
Aka Token> IN: )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=29:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=29:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
slAKA optional akapart> IN: )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :1_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional typically                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / typically                                                      :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=29:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
slAKA optional typically> IN: )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :1_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :1_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :1_2:UnDeeper:
slAKA> IN: "sharpen knives" )
slAKA> MATCH (COK): "sharpen knives"
slAKA> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************ \ slAKA has returned (("sharpen knives" :| [],Nothing),0)                  :1_2:UnDeeper:
************************ / undeepers                                                                :1_2:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************* > sameLine: success!                                                     :1_2:UnDeeper:
undeepers> IN: )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                :1_2:UnDeeper:
pKeyValuesAka> IN: "sharpen knives" )
pKeyValuesAka> MATCH (COK): "sharpen knives"
pKeyValuesAka> VALUE: (("sharpen knives" :| [],Nothing),[])

*********************** \ pKeyValuesAka has returned ("sharpen knives" :| [],Nothing)                :1_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "sharpen knives" )
pParamText(flat) first line: pKeyValues> MATCH (COK): "sharpen knives"
pParamText(flat) first line: pKeyValues> VALUE: (("sharpen knives" :| [],Nothing),[])

********************** \ pParamText(flat) first line: pKeyValues has returned ("sharpen knives" :| [],Nothing) :1_2:UnDeeper:
********************** / pParamText(flat) subsequent lines: sameMany pKeyValues                       :1_2:UnDeeper:
*********************** / manyIndentation/leaf?                                                      :1_2:UnDeeper:
************************ / sameMany                                                                 :1_2:UnDeeper:
************************* / pKeyValuesAka                                                          :1_2:UnDeeper:
************************** / slAKA                                                                :1_2:UnDeeper:
*************************** / $*|                                                                :1_2:UnDeeper:
**************************** / slAKA base                                                       :1_2:UnDeeper:
***************************** / slKeyValues                                                    :1_2:UnDeeper:
****************************** / $*|                                                          :1_2:UnDeeper:
******************************* / someSL                                                     :1_2:UnDeeper:
******************************** / pNumAsText                                               :1_2:UnDeeper:
pNumAsText> IN: )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=29:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=29:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=29:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=29:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: )
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************ \ sameMany has returned []                                                 :1_2:UnDeeper:
manyIndentation/leaf?> IN: )
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************** \ manyIndentation/leaf? has returned []                                      :1_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: )
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []       :1_2:UnDeeper:
pParamText> IN: "sharpen knives" )
pParamText> MATCH (COK): "sharpen knives"
pParamText> VALUE: (("sharpen knives" :| [],Nothing) :| [],[])

********************* \ pParamText has returned ("sharpen knives" :| [],Nothing) :| []                 :1_2:UnDeeper:
term p/3:plain p> IN: "sharpen knives" )
term p/3:plain p> MATCH (COK): "sharpen knives"
term p/3:plain p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

******************** \ term p/3:plain p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])    :1_2:UnDeeper:
term p/notLabelTerm> IN: "sharpen knives" )
term p/notLabelTerm> MATCH (COK): "sharpen knives"
term p/notLabelTerm> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])   :1_2:UnDeeper:
term p> IN: "sharpen knives" )
term p> MATCH (COK): "sharpen knives"
term p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                  :1_2:UnDeeper:
****************** / binary(Or)                                                                           :1_2:UnDeeper:
binary(Or)> IN: )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=29:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :1_2:UnDeeper:
binary(And)> IN: )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=29:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :1_2:UnDeeper:
binary(SetLess)> IN: )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=29:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :1_2:UnDeeper:
binary(SetPlus)> IN: )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=29:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "sharpen knives" )
expression> MATCH (COK): "sharpen knives"
expression> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

***************** \ expression has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                :1_2:UnDeeper:
manyIndentation/leaf?> IN: "sharpen knives" )
manyIndentation/leaf?> MATCH (COK): "sharpen knives"
manyIndentation/leaf?> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])       :1_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                :EOF:
someIndentation> IN: ( "sharpen knives" )
someIndentation> MATCH (COK): ( "sharpen knives" )
someIndentation> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

*************** \ someIndentation has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])          :EOF:
term p/2:someIndentation expr p> IN: ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (COK): ( "sharpen knives" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| []) :EOF:
term p/notLabelTerm> IN: ( "sharpen knives" )
term p/notLabelTerm> MATCH (COK): ( "sharpen knives" )
term p/notLabelTerm> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************* \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])          :EOF:
term p> IN: ( "sharpen knives" )
term p> MATCH (COK): ( "sharpen knives" )
term p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************ \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                         :EOF:
************ / binary(Or)                                                                                  :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected end of input
binary(Or)> expecting OR

************ / binary(And)                                                                                 :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected end of input
binary(And)> expecting AND

************ / binary(SetLess)                                                                             :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                             :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting PLUS

expression> IN: ( "sharpen knives" )
expression> MATCH (COK): ( "sharpen knives" )
expression> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

*********** \ expression has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                       :EOF:
expr pParamText> IN: ( "sharpen knives" )
expr pParamText> MATCH (COK): ( "sharpen knives" )
expr pParamText> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

********** \ expr pParamText has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                    :EOF:
dBoolStructP calling exprP> IN: ( "sharpen knives" )
dBoolStructP calling exprP> MATCH (COK): ( "sharpen knives" )
dBoolStructP calling exprP> VALUE: (Leaf (("sharpen knives" :| [],Nothing) :| []),[])

********* \ dBoolStructP calling exprP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
pAction calling dBoolStructP> IN: ( "sharpen knives" )
pAction calling dBoolStructP> MATCH (COK): ( "sharpen knives" )
pAction calling dBoolStructP> VALUE: (Leaf (("sharpen knives" :| [],Nothing) :| []),[])

******** \ pAction calling dBoolStructP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
pDA> IN: MAY ( "sharpen knives" )
pDA> MATCH (COK): MAY ( "sharpen knives" )
pDA> VALUE: ((DMay,Leaf (("sharpen knives" :| [],Nothing) :| [])),[])

******* \ pDA has returned (DMay,Leaf (("sharpen knives" :| [],Nothing) :| []))                                 :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                  :EOF:
pTemporal/eventually> IN: <EMPTY>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=30:
pTemporal/eventually> unexpected end of input
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: <EMPTY>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=30:
pTemporal/specifically> unexpected end of input
pTemporal/specifically> expecting AFTER, BEFORE, BY, ON, or any token

******* / pTemporal/vaguely                                                                                     :EOF:
pTemporal/vaguely> IN: <EMPTY>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=30:
pTemporal/vaguely> unexpected end of input
pTemporal/vaguely> expecting Other text

regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> VALUE: (RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
permutationsReg> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** / pHenceLest-Hence                                                                                          :EOF:
pHenceLest-Hence> IN: <EMPTY>
pHenceLest-Hence> MATCH (EERR): <EMPTY>
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=30:
pHenceLest-Hence> unexpected end of input
pHenceLest-Hence> expecting HENCE

***** / pHenceLest-Lest                                                                                           :EOF:
pHenceLest-Lest> IN: <EMPTY>
pHenceLest-Lest> MATCH (EERR): <EMPTY>
pHenceLest-Lest> ERROR:
pHenceLest-Lest> offset=30:
pHenceLest-Lest> unexpected end of input
pHenceLest-Lest> expecting LEST

****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
****   pRegRuleNormal: the positive preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: the negative preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRegRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*** \ pRegRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

** \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
EVERY ( "person" ) WHO
    (
        ( "is"
            ( "immortal"
                ( TYPICALLY ( "false" ) )
            )
        ) OR
        ( "has" ( "health insurance" ) )
    ) MAY ( "sharpen knives" )
** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

someDeep> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

pRegRuleSugary> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / labelPrefix                                                                          :2_3:GoDeeper:
labelPrefix> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "is":
********************** / manyIndentation/leaf?                                                         :2_3:Other "is":
*********************** / expression                                                                  :2_3:Other "is":
************************ / labelPrefix                                                               :2_3:Other "is":
labelPrefix> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

************************ \ labelPrefix has returned "is"                                              :2_4:GoDeeper:
************************ / term p                                                                     :2_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :2_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :2_4:GoDeeper:
*************************** / someIndentation                                                      :2_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :2_4:Other "immo:
**************************** / manyIndentation/leaf?                                               :2_4:Other "immo:
***************************** / expression                                                        :2_4:Other "immo:
****************************** / labelPrefix                                                     :2_4:Other "immo:
labelPrefix> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected (

****************************** / term p                                                          :2_4:Other "immo:
******************************* / term p/notLabelTerm                                           :2_4:Other "immo:
******************************** / term p/2:someIndentation expr p                             :2_4:Other "immo:
********************************* / someIndentation                                           :2_4:Other "immo:
********************************** / myindented: consuming GoDeeper                          :2_4:Other "immo:
myindented: consuming GoDeeper> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "immortal"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "immortal"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "immortal"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :2_4:Other "immo:
********************************* / pRelPred                                                  :2_4:Other "immo:
********************************** / slRelPred                                               :2_4:Other "immo:
*********************************** / nested simpleHorn                                     :2_4:Other "immo:
************************************ > |^|                                                 :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |^| deeps                                            :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************************************ \ |^| deeps has returned ([()],1)                       :2_5:Typically:
nested simpleHorn> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
nested simpleHorn> MATCH (CERR): "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

*********************************** / RPConstraint                                          :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPConstraint> MATCH (CERR): "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPBoolStructR> MATCH (CERR): "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slAKA                                             :2_4:Other "immo:
************************************** / $*|                                             :2_4:Other "immo:
*************************************** / slAKA base                                    :2_4:Other "immo:
**************************************** / slMultiTerm                                 :2_4:Other "immo:
***************************************** / someSL                                    :2_4:Other "immo:
****************************************** / pNumAsText                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

***************************************** \ someSL has returned (["immortal"],0)       :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

**************************************** \ slMultiTerm has returned (["immortal"],0)    :2_5:GoDeeper:
slAKA base> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA base> MATCH (COK): "immortal"
slAKA base> VALUE: ((["immortal"],0),[])

*************************************** \ slAKA base has returned (["immortal"],0)       :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************** \ $*| has returned (["immortal"],0)                :2_5:GoDeeper:
************************************** / |>>/recurse                                      :2_5:GoDeeper:
*************************************** / |>>/recurse                                     :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*************************************** / |>>/base                                        :2_5:Typically:
**************************************** / slAKA optional akapart                        :2_5:Typically:
***************************************** / |?| optional something                      :2_5:Typically:
****************************************** / |>>/recurse                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

****************************************** / |>>/base                                  :2_5:Typically:
******************************************* / PAKA/akapart                            :2_5:Typically:
******************************************** / $>|                                   :2_5:Typically:
********************************************* / Aka Token                           :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :2_5:Typically:
**************************************** > |>>/base got Nothing                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)               :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************************************** \ |>>/recurse has returned (Nothing,1)              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
*************************************** / slAKA optional typically                        :2_5:Typically:
**************************************** / |?| optional something                        :2_5:Typically:
***************************************** / |>>/recurse                                 :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

***************************************** / |>>/base                                    :2_5:Typically:
****************************************** / typically                                 :2_5:Typically:
******************************************* / $>|                                     :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

******************************************* \ $>| has returned Typically               :2_6:GoDeeper:
******************************************* / |>>/recurse                              :2_6:GoDeeper:
******************************************** / |>>/recurse                             :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

******************************************** / |>>/base                                :2_6:Other "fals:
********************************************* / slMultiTerm                           :2_6:Other "fals:
********************************************** / someSL                              :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

********************************************** \ someSL has returned (["false"],0) :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

********************************************* \ slMultiTerm has returned (["false"],0) :3_3:UnDeeper:
********************************************* > |>>/base got ["false"]           :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

******************************************** \ |>>/base has returned (["false"],0) :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

******************************************* \ |>>/recurse has returned (["false"],1) :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

****************************************** \ typically has returned (["false"],1)   :3_3:UnDeeper:
****************************************** > |>>/base got ["false"]                 :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

***************************************** \ |>>/base has returned (["false"],1)      :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

**************************************** \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*************************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*************************************** > |>>/base got Just ["false"]                  :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

************************************** \ |>>/base has returned (Just ["false"],1)       :3_3:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
************************************** > pAKA: entityalias = Nothing                    :3_3:UnDeeper:
slAKA> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************* \ slAKA has returned (["immortal"],2)              :3_3:UnDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************ \ $*| has returned (["immortal"],2)                  :3_3:UnDeeper:
RPMT> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPMT> MATCH (COK): "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************************** \ RPMT has returned (RPMT ["immortal"],2)              :3_3:UnDeeper:
slRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************** \ slRelPred has returned (RPMT ["immortal"],2)           :3_3:UnDeeper:
********************************** / undeepers                                              :3_3:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers :3_3:UnDeeper:
*********************************** > sameLine: success!                                       :3_5:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :3_5:UnDeeper:
pRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
pRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
pRelPred> VALUE: (RPMT ["immortal"],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ pRelPred has returned RPMT ["immortal"]                      :3_5:UnDeeper:
term p/3:plain p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/3:plain p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["immortal"])       :3_5:UnDeeper:
term p/notLabelTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/notLabelTerm> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])      :3_5:UnDeeper:
term p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ term p has returned MyLeaf (RPMT ["immortal"])                     :3_5:UnDeeper:
****************************** / binary(Or)                                                         :3_5:UnDeeper:
binary(Or)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                        :3_5:UnDeeper:
binary(And)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                    :3_5:UnDeeper:
binary(SetLess)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                    :3_5:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
expression> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
expression> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ expression has returned MyLeaf (RPMT ["immortal"])                   :3_5:UnDeeper:
manyIndentation/leaf?> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["immortal"])          :3_5:UnDeeper:
**************************** / myindented: consuming UnDeeper                                         :3_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                     :3_6:UnDeeper:
someIndentation> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
someIndentation> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ someIndentation has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p/2:someIndentation expr p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["immortal"])      :3_6:UnDeeper:
term p/notLabelTerm> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ term p has returned MyLeaf (RPMT ["immortal"])                                   :3_6:UnDeeper:
************************ / binary(Or)                                                                       :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                      :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                                  :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                                  :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ expression has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))       :3_6:UnDeeper:
********************** / myindented: consuming UnDeeper                                                       :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ someIndentation has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"])) :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ term p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                     :3_2:Or:
****************** / binary(Or)                                                                          :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

****************** \ binary(Or) has returned Or                                                           :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "has":
********************** / manyIndentation/leaf?                                                         :3_3:Other "has":
*********************** / expression                                                                  :3_3:Other "has":
************************ / labelPrefix                                                               :3_3:Other "has":
labelPrefix> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
labelPrefix> MATCH (COK): "has"
labelPrefix> VALUE: ("has",[])

************************ \ labelPrefix has returned "has"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "heal:
**************************** / manyIndentation/leaf?                                               :3_4:Other "heal:
***************************** / expression                                                        :3_4:Other "heal:
****************************** / labelPrefix                                                     :3_4:Other "heal:
labelPrefix> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "heal:
******************************* / term p/notLabelTerm                                           :3_4:Other "heal:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "heal:
********************************* / someIndentation                                           :3_4:Other "heal:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "heal:
myindented: consuming GoDeeper> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected "health insurance"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected "health insurance"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected "health insurance"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "heal:
********************************* / pRelPred                                                  :3_4:Other "heal:
********************************** / slRelPred                                               :3_4:Other "heal:
*********************************** / nested simpleHorn                                     :3_4:Other "heal:
************************************ > |^|                                                 :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:May:
nested simpleHorn> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
nested simpleHorn> MATCH (CERR): "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPConstraint> MATCH (CERR): "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPBoolStructR> MATCH (CERR): "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slAKA                                             :3_4:Other "heal:
************************************** / $*|                                             :3_4:Other "heal:
*************************************** / slAKA base                                    :3_4:Other "heal:
**************************************** / slMultiTerm                                 :3_4:Other "heal:
***************************************** / someSL                                    :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

***************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

**************************************** \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
slAKA base> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA base> MATCH (COK): "health insurance"
slAKA base> VALUE: ((["health insurance"],0),[])

*************************************** \ slAKA base has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************** \ $*| has returned (["health insurance"],0)    :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA> MATCH (COK): "health insurance"
slAKA> VALUE: ((["health insurance"],0),[])

************************************* \ slAKA has returned (["health insurance"],0)    :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
RPMT> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPMT> MATCH (COK): "health insurance"
RPMT> VALUE: ((RPMT ["health insurance"],0),[])

*********************************** \ RPMT has returned (RPMT ["health insurance"],0)    :4_2:UnDeeper:
slRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slRelPred> MATCH (COK): "health insurance"
slRelPred> VALUE: ((RPMT ["health insurance"],0),[])

********************************** \ slRelPred has returned (RPMT ["health insurance"],0) :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
pRelPred> MATCH (COK): "health insurance"
pRelPred> VALUE: (RPMT ["health insurance"],[])

********************************* \ pRelPred has returned RPMT ["health insurance"]        :4_2:UnDeeper:
term p/3:plain p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/3:plain p> MATCH (COK): "health insurance"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/notLabelTerm> MATCH (COK): "health insurance"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p> MATCH (COK): "health insurance"
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["health insurance"])       :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
expression> MATCH (COK): "health insurance"
expression> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["health insurance"])     :4_2:UnDeeper:
manyIndentation/leaf?> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
manyIndentation/leaf?> MATCH (COK): "health insurance"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
someIndentation> MATCH (COK): ( "health insurance" )
someIndentation> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/2:someIndentation expr p> MATCH (COK): ( "health insurance" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/notLabelTerm> MATCH (COK): ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p> MATCH (COK): ( "health insurance" )
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************ \ term p has returned MyLeaf (RPMT ["health insurance"])                     :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

*********************** \ expression has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************* \ someIndentation has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p> MATCH (COK): ( "has" ( "health insurance" ) )
term p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

****************** \ term p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))                 :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ term p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
|>>/recurse> IN: "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected "sharpen knives"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
pTemporal/eventually> IN: "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected "sharpen knives"
pTemporal/eventually> expecting EVENTUALLY

*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
$>|> IN: "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected "sharpen knives"
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected "sharpen knives"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
pTemporal/vaguely> IN: "sharpen knives" )
pTemporal/vaguely> MATCH (COK): "sharpen knives"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "sharpen knives"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
|>>/base> IN: "sharpen knives" )
|>>/base> MATCH (COK): "sharpen knives"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
|>>/recurse> IN: ( "sharpen knives" )
|>>/recurse> MATCH (COK): ( "sharpen knives"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
|>| calling $>>> IN: ( "sharpen knives" )
|>| calling $>>> MATCH (COK): ( "sharpen knives"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
undeepers> IN: )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                           :EOF:
pDT> IN: MAY ( "sharpen knives" )
pDT> MATCH (COK): MAY ( "sharpen knives" )
pDT> VALUE: ((DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives")),[])

******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDoAction/Do                                                                                          :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=30:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=30:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / labelPrefix                                                                          :2_3:GoDeeper:
labelPrefix> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "is":
********************** / manyIndentation/leaf?                                                         :2_3:Other "is":
*********************** / expression                                                                  :2_3:Other "is":
************************ / labelPrefix                                                               :2_3:Other "is":
labelPrefix> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

************************ \ labelPrefix has returned "is"                                              :2_4:GoDeeper:
************************ / term p                                                                     :2_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :2_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :2_4:GoDeeper:
*************************** / someIndentation                                                      :2_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :2_4:Other "immo:
**************************** / manyIndentation/leaf?                                               :2_4:Other "immo:
***************************** / expression                                                        :2_4:Other "immo:
****************************** / labelPrefix                                                     :2_4:Other "immo:
labelPrefix> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected (

****************************** / term p                                                          :2_4:Other "immo:
******************************* / term p/notLabelTerm                                           :2_4:Other "immo:
******************************** / term p/2:someIndentation expr p                             :2_4:Other "immo:
********************************* / someIndentation                                           :2_4:Other "immo:
********************************** / myindented: consuming GoDeeper                          :2_4:Other "immo:
myindented: consuming GoDeeper> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "immortal"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "immortal"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "immortal"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :2_4:Other "immo:
********************************* / pRelPred                                                  :2_4:Other "immo:
********************************** / slRelPred                                               :2_4:Other "immo:
*********************************** / nested simpleHorn                                     :2_4:Other "immo:
************************************ > |^|                                                 :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |^| deeps                                            :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************************************ \ |^| deeps has returned ([()],1)                       :2_5:Typically:
nested simpleHorn> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
nested simpleHorn> MATCH (CERR): "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

*********************************** / RPConstraint                                          :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPConstraint> MATCH (CERR): "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPBoolStructR> MATCH (CERR): "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slAKA                                             :2_4:Other "immo:
************************************** / $*|                                             :2_4:Other "immo:
*************************************** / slAKA base                                    :2_4:Other "immo:
**************************************** / slMultiTerm                                 :2_4:Other "immo:
***************************************** / someSL                                    :2_4:Other "immo:
****************************************** / pNumAsText                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

***************************************** \ someSL has returned (["immortal"],0)       :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

**************************************** \ slMultiTerm has returned (["immortal"],0)    :2_5:GoDeeper:
slAKA base> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA base> MATCH (COK): "immortal"
slAKA base> VALUE: ((["immortal"],0),[])

*************************************** \ slAKA base has returned (["immortal"],0)       :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************** \ $*| has returned (["immortal"],0)                :2_5:GoDeeper:
************************************** / |>>/recurse                                      :2_5:GoDeeper:
*************************************** / |>>/recurse                                     :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*************************************** / |>>/base                                        :2_5:Typically:
**************************************** / slAKA optional akapart                        :2_5:Typically:
***************************************** / |?| optional something                      :2_5:Typically:
****************************************** / |>>/recurse                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

****************************************** / |>>/base                                  :2_5:Typically:
******************************************* / PAKA/akapart                            :2_5:Typically:
******************************************** / $>|                                   :2_5:Typically:
********************************************* / Aka Token                           :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :2_5:Typically:
**************************************** > |>>/base got Nothing                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)               :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************************************** \ |>>/recurse has returned (Nothing,1)              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
*************************************** / slAKA optional typically                        :2_5:Typically:
**************************************** / |?| optional something                        :2_5:Typically:
***************************************** / |>>/recurse                                 :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

***************************************** / |>>/base                                    :2_5:Typically:
****************************************** / typically                                 :2_5:Typically:
******************************************* / $>|                                     :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

******************************************* \ $>| has returned Typically               :2_6:GoDeeper:
******************************************* / |>>/recurse                              :2_6:GoDeeper:
******************************************** / |>>/recurse                             :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

******************************************** / |>>/base                                :2_6:Other "fals:
********************************************* / slMultiTerm                           :2_6:Other "fals:
********************************************** / someSL                              :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

********************************************** \ someSL has returned (["false"],0) :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

********************************************* \ slMultiTerm has returned (["false"],0) :3_3:UnDeeper:
********************************************* > |>>/base got ["false"]           :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

******************************************** \ |>>/base has returned (["false"],0) :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

******************************************* \ |>>/recurse has returned (["false"],1) :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

****************************************** \ typically has returned (["false"],1)   :3_3:UnDeeper:
****************************************** > |>>/base got ["false"]                 :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

***************************************** \ |>>/base has returned (["false"],1)      :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

**************************************** \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*************************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*************************************** > |>>/base got Just ["false"]                  :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

************************************** \ |>>/base has returned (Just ["false"],1)       :3_3:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
************************************** > pAKA: entityalias = Nothing                    :3_3:UnDeeper:
slAKA> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************* \ slAKA has returned (["immortal"],2)              :3_3:UnDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************ \ $*| has returned (["immortal"],2)                  :3_3:UnDeeper:
RPMT> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPMT> MATCH (COK): "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************************** \ RPMT has returned (RPMT ["immortal"],2)              :3_3:UnDeeper:
slRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************** \ slRelPred has returned (RPMT ["immortal"],2)           :3_3:UnDeeper:
********************************** / undeepers                                              :3_3:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers :3_3:UnDeeper:
*********************************** > sameLine: success!                                       :3_5:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :3_5:UnDeeper:
pRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
pRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
pRelPred> VALUE: (RPMT ["immortal"],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ pRelPred has returned RPMT ["immortal"]                      :3_5:UnDeeper:
term p/3:plain p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/3:plain p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["immortal"])       :3_5:UnDeeper:
term p/notLabelTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/notLabelTerm> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])      :3_5:UnDeeper:
term p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ term p has returned MyLeaf (RPMT ["immortal"])                     :3_5:UnDeeper:
****************************** / binary(Or)                                                         :3_5:UnDeeper:
binary(Or)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                        :3_5:UnDeeper:
binary(And)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                    :3_5:UnDeeper:
binary(SetLess)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                    :3_5:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
expression> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
expression> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ expression has returned MyLeaf (RPMT ["immortal"])                   :3_5:UnDeeper:
manyIndentation/leaf?> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["immortal"])          :3_5:UnDeeper:
**************************** / myindented: consuming UnDeeper                                         :3_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                     :3_6:UnDeeper:
someIndentation> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
someIndentation> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ someIndentation has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p/2:someIndentation expr p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["immortal"])      :3_6:UnDeeper:
term p/notLabelTerm> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ term p has returned MyLeaf (RPMT ["immortal"])                                   :3_6:UnDeeper:
************************ / binary(Or)                                                                       :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                      :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                                  :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                                  :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ expression has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))       :3_6:UnDeeper:
********************** / myindented: consuming UnDeeper                                                       :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ someIndentation has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"])) :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ term p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                     :3_2:Or:
****************** / binary(Or)                                                                          :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

****************** \ binary(Or) has returned Or                                                           :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "has":
********************** / manyIndentation/leaf?                                                         :3_3:Other "has":
*********************** / expression                                                                  :3_3:Other "has":
************************ / labelPrefix                                                               :3_3:Other "has":
labelPrefix> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
labelPrefix> MATCH (COK): "has"
labelPrefix> VALUE: ("has",[])

************************ \ labelPrefix has returned "has"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "heal:
**************************** / manyIndentation/leaf?                                               :3_4:Other "heal:
***************************** / expression                                                        :3_4:Other "heal:
****************************** / labelPrefix                                                     :3_4:Other "heal:
labelPrefix> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "heal:
******************************* / term p/notLabelTerm                                           :3_4:Other "heal:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "heal:
********************************* / someIndentation                                           :3_4:Other "heal:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "heal:
myindented: consuming GoDeeper> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected "health insurance"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected "health insurance"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected "health insurance"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "heal:
********************************* / pRelPred                                                  :3_4:Other "heal:
********************************** / slRelPred                                               :3_4:Other "heal:
*********************************** / nested simpleHorn                                     :3_4:Other "heal:
************************************ > |^|                                                 :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:May:
nested simpleHorn> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
nested simpleHorn> MATCH (CERR): "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPConstraint> MATCH (CERR): "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPBoolStructR> MATCH (CERR): "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slAKA                                             :3_4:Other "heal:
************************************** / $*|                                             :3_4:Other "heal:
*************************************** / slAKA base                                    :3_4:Other "heal:
**************************************** / slMultiTerm                                 :3_4:Other "heal:
***************************************** / someSL                                    :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

***************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

**************************************** \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
slAKA base> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA base> MATCH (COK): "health insurance"
slAKA base> VALUE: ((["health insurance"],0),[])

*************************************** \ slAKA base has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************** \ $*| has returned (["health insurance"],0)    :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA> MATCH (COK): "health insurance"
slAKA> VALUE: ((["health insurance"],0),[])

************************************* \ slAKA has returned (["health insurance"],0)    :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
RPMT> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPMT> MATCH (COK): "health insurance"
RPMT> VALUE: ((RPMT ["health insurance"],0),[])

*********************************** \ RPMT has returned (RPMT ["health insurance"],0)    :4_2:UnDeeper:
slRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slRelPred> MATCH (COK): "health insurance"
slRelPred> VALUE: ((RPMT ["health insurance"],0),[])

********************************** \ slRelPred has returned (RPMT ["health insurance"],0) :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
pRelPred> MATCH (COK): "health insurance"
pRelPred> VALUE: (RPMT ["health insurance"],[])

********************************* \ pRelPred has returned RPMT ["health insurance"]        :4_2:UnDeeper:
term p/3:plain p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/3:plain p> MATCH (COK): "health insurance"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/notLabelTerm> MATCH (COK): "health insurance"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p> MATCH (COK): "health insurance"
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["health insurance"])       :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
expression> MATCH (COK): "health insurance"
expression> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["health insurance"])     :4_2:UnDeeper:
manyIndentation/leaf?> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
manyIndentation/leaf?> MATCH (COK): "health insurance"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
someIndentation> MATCH (COK): ( "health insurance" )
someIndentation> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/2:someIndentation expr p> MATCH (COK): ( "health insurance" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/notLabelTerm> MATCH (COK): ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p> MATCH (COK): ( "health insurance" )
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************ \ term p has returned MyLeaf (RPMT ["health insurance"])                     :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

*********************** \ expression has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************* \ someIndentation has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p> MATCH (COK): ( "has" ( "health insurance" ) )
term p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

****************** \ term p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))                 :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ term p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :4_1:May:
pTemporal/eventually> IN: MAY ( "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MAY ( "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=26:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :4_1:May:
pTemporal/vaguely> IN: MAY ( "sharpen knives" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=26:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :4_1:May:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / expression                                                                                       :4_2:GoDeeper:
************ / labelPrefix                                                                                    :4_2:GoDeeper:
labelPrefix> IN: ( "sharpen knives" )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :4_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :4_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :4_2:GoDeeper:
*************** / someIndentation                                                                          :4_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "sharpen knives" )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :4_2:Other "shar:
**************** / manyIndentation/leaf?                                                                   :4_2:Other "shar:
***************** / expression                                                                            :4_2:Other "shar:
****************** / labelPrefix                                                                         :4_2:Other "shar:
labelPrefix> IN: "sharpen knives" )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected )

****************** / term p                                                                              :4_2:Other "shar:
******************* / term p/notLabelTerm                                                               :4_2:Other "shar:
******************** / term p/2:someIndentation expr p                                                 :4_2:Other "shar:
********************* / someIndentation                                                               :4_2:Other "shar:
********************** / myindented: consuming GoDeeper                                              :4_2:Other "shar:
myindented: consuming GoDeeper> IN: "sharpen knives" )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=28:
myindented: consuming GoDeeper> unexpected "sharpen knives"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected "sharpen knives"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected "sharpen knives"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :4_2:Other "shar:
********************* / pParamText                                                                    :4_2:Other "shar:
********************** / pParamText(flat) first line: pKeyValues                                     :4_2:Other "shar:
*********************** / pKeyValuesAka                                                             :4_2:Other "shar:
************************ / slAKA                                                                   :4_2:Other "shar:
************************* / $*|                                                                   :4_2:Other "shar:
************************** / slAKA base                                                          :4_2:Other "shar:
*************************** / slKeyValues                                                       :4_2:Other "shar:
**************************** / $*|                                                             :4_2:Other "shar:
***************************** / someSL                                                        :4_2:Other "shar:
someSL> IN: "sharpen knives" )
someSL> MATCH (COK): "sharpen knives"
someSL> VALUE: ((["sharpen knives"],0),[])

***************************** \ someSL has returned (["sharpen knives"],0)                     :1_2:UnDeeper:
$*|> IN: "sharpen knives" )
$*|> MATCH (COK): "sharpen knives"
$*|> VALUE: ((["sharpen knives"],0),[])

**************************** \ $*| has returned (["sharpen knives"],0)                          :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / |?| optional something                                         :1_2:UnDeeper:
****************************** / |>>/recurse                                                  :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :1_2:UnDeeper:
******************************* / slTypeSig                                                  :1_2:UnDeeper:
******************************** / $>|                                                      :1_2:UnDeeper:
$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: )
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=29:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :1_2:UnDeeper:
***************************** > |>>/base got Nothing                                           :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                :1_2:UnDeeper:
slKeyValues> IN: "sharpen knives" )
slKeyValues> MATCH (COK): "sharpen knives"
slKeyValues> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

*************************** \ slKeyValues has returned (("sharpen knives" :| [],Nothing),0)      :1_2:UnDeeper:
slAKA base> IN: "sharpen knives" )
slAKA base> MATCH (COK): "sharpen knives"
slAKA base> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************** \ slAKA base has returned (("sharpen knives" :| [],Nothing),0)         :1_2:UnDeeper:
$*|> IN: "sharpen knives" )
$*|> MATCH (COK): "sharpen knives"
$*|> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************* \ $*| has returned (("sharpen knives" :| [],Nothing),0)                  :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional akapart                                               :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / PAKA/akapart                                                   :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
******************************* / Aka Token                                                  :1_2:UnDeeper:
Aka Token> IN: )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=29:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=29:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
slAKA optional akapart> IN: )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :1_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional typically                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / typically                                                      :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=29:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
slAKA optional typically> IN: )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :1_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :1_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :1_2:UnDeeper:
slAKA> IN: "sharpen knives" )
slAKA> MATCH (COK): "sharpen knives"
slAKA> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************ \ slAKA has returned (("sharpen knives" :| [],Nothing),0)                  :1_2:UnDeeper:
************************ / undeepers                                                                :1_2:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************* > sameLine: success!                                                     :1_2:UnDeeper:
undeepers> IN: )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                :1_2:UnDeeper:
pKeyValuesAka> IN: "sharpen knives" )
pKeyValuesAka> MATCH (COK): "sharpen knives"
pKeyValuesAka> VALUE: (("sharpen knives" :| [],Nothing),[])

*********************** \ pKeyValuesAka has returned ("sharpen knives" :| [],Nothing)                :1_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "sharpen knives" )
pParamText(flat) first line: pKeyValues> MATCH (COK): "sharpen knives"
pParamText(flat) first line: pKeyValues> VALUE: (("sharpen knives" :| [],Nothing),[])

********************** \ pParamText(flat) first line: pKeyValues has returned ("sharpen knives" :| [],Nothing) :1_2:UnDeeper:
********************** / pParamText(flat) subsequent lines: sameMany pKeyValues                       :1_2:UnDeeper:
*********************** / manyIndentation/leaf?                                                      :1_2:UnDeeper:
************************ / sameMany                                                                 :1_2:UnDeeper:
************************* / pKeyValuesAka                                                          :1_2:UnDeeper:
************************** / slAKA                                                                :1_2:UnDeeper:
*************************** / $*|                                                                :1_2:UnDeeper:
**************************** / slAKA base                                                       :1_2:UnDeeper:
***************************** / slKeyValues                                                    :1_2:UnDeeper:
****************************** / $*|                                                          :1_2:UnDeeper:
******************************* / someSL                                                     :1_2:UnDeeper:
******************************** / pNumAsText                                               :1_2:UnDeeper:
pNumAsText> IN: )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=29:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=29:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=29:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=29:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: )
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************ \ sameMany has returned []                                                 :1_2:UnDeeper:
manyIndentation/leaf?> IN: )
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************** \ manyIndentation/leaf? has returned []                                      :1_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: )
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []       :1_2:UnDeeper:
pParamText> IN: "sharpen knives" )
pParamText> MATCH (COK): "sharpen knives"
pParamText> VALUE: (("sharpen knives" :| [],Nothing) :| [],[])

********************* \ pParamText has returned ("sharpen knives" :| [],Nothing) :| []                 :1_2:UnDeeper:
term p/3:plain p> IN: "sharpen knives" )
term p/3:plain p> MATCH (COK): "sharpen knives"
term p/3:plain p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

******************** \ term p/3:plain p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])    :1_2:UnDeeper:
term p/notLabelTerm> IN: "sharpen knives" )
term p/notLabelTerm> MATCH (COK): "sharpen knives"
term p/notLabelTerm> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])   :1_2:UnDeeper:
term p> IN: "sharpen knives" )
term p> MATCH (COK): "sharpen knives"
term p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                  :1_2:UnDeeper:
****************** / binary(Or)                                                                           :1_2:UnDeeper:
binary(Or)> IN: )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=29:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :1_2:UnDeeper:
binary(And)> IN: )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=29:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :1_2:UnDeeper:
binary(SetLess)> IN: )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=29:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :1_2:UnDeeper:
binary(SetPlus)> IN: )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=29:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "sharpen knives" )
expression> MATCH (COK): "sharpen knives"
expression> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

***************** \ expression has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                :1_2:UnDeeper:
manyIndentation/leaf?> IN: "sharpen knives" )
manyIndentation/leaf?> MATCH (COK): "sharpen knives"
manyIndentation/leaf?> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])       :1_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                :EOF:
someIndentation> IN: ( "sharpen knives" )
someIndentation> MATCH (COK): ( "sharpen knives" )
someIndentation> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

*************** \ someIndentation has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])          :EOF:
term p/2:someIndentation expr p> IN: ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (COK): ( "sharpen knives" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| []) :EOF:
term p/notLabelTerm> IN: ( "sharpen knives" )
term p/notLabelTerm> MATCH (COK): ( "sharpen knives" )
term p/notLabelTerm> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************* \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])          :EOF:
term p> IN: ( "sharpen knives" )
term p> MATCH (COK): ( "sharpen knives" )
term p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************ \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                         :EOF:
************ / binary(Or)                                                                                  :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected end of input
binary(Or)> expecting OR

************ / binary(And)                                                                                 :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected end of input
binary(And)> expecting AND

************ / binary(SetLess)                                                                             :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                             :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting PLUS

expression> IN: ( "sharpen knives" )
expression> MATCH (COK): ( "sharpen knives" )
expression> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

*********** \ expression has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                       :EOF:
expr pParamText> IN: ( "sharpen knives" )
expr pParamText> MATCH (COK): ( "sharpen knives" )
expr pParamText> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

********** \ expr pParamText has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                    :EOF:
dBoolStructP calling exprP> IN: ( "sharpen knives" )
dBoolStructP calling exprP> MATCH (COK): ( "sharpen knives" )
dBoolStructP calling exprP> VALUE: (Leaf (("sharpen knives" :| [],Nothing) :| []),[])

********* \ dBoolStructP calling exprP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
pAction calling dBoolStructP> IN: ( "sharpen knives" )
pAction calling dBoolStructP> MATCH (COK): ( "sharpen knives" )
pAction calling dBoolStructP> VALUE: (Leaf (("sharpen knives" :| [],Nothing) :| []),[])

******** \ pAction calling dBoolStructP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
pDA> IN: MAY ( "sharpen knives" )
pDA> MATCH (COK): MAY ( "sharpen knives" )
pDA> VALUE: ((DMay,Leaf (("sharpen knives" :| [],Nothing) :| [])),[])

******* \ pDA has returned (DMay,Leaf (("sharpen knives" :| [],Nothing) :| []))                                 :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                  :EOF:
pTemporal/eventually> IN: <EMPTY>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=30:
pTemporal/eventually> unexpected end of input
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: <EMPTY>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=30:
pTemporal/specifically> unexpected end of input
pTemporal/specifically> expecting AFTER, BEFORE, BY, ON, or any token

******* / pTemporal/vaguely                                                                                     :EOF:
pTemporal/vaguely> IN: <EMPTY>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=30:
pTemporal/vaguely> unexpected end of input
pTemporal/vaguely> expecting Other text

regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> VALUE: (RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
permutationsReg> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** / pHenceLest-Hence                                                                                          :EOF:
pHenceLest-Hence> IN: <EMPTY>
pHenceLest-Hence> MATCH (EERR): <EMPTY>
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=30:
pHenceLest-Hence> unexpected end of input
pHenceLest-Hence> expecting HENCE

***** / pHenceLest-Lest                                                                                           :EOF:
pHenceLest-Lest> IN: <EMPTY>
pHenceLest-Lest> MATCH (EERR): <EMPTY>
pHenceLest-Lest> ERROR:
pHenceLest-Lest> offset=30:
pHenceLest-Lest> unexpected end of input
pHenceLest-Lest> expecting LEST

****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
****   pRegRuleNormal: the positive preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: the negative preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRegRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*** \ pRegRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

** \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
EVERY ( "person" ) WHO
    (
        ( "is"
            ( "immortal"
                ( TYPICALLY ( "false" ) )
            )
        ) OR
        ( "has" ( "health insurance" ) )
    ) MAY ( "sharpen knives" )
** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

someDeep> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

pRegRuleSugary> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / labelPrefix                                                                          :2_3:GoDeeper:
labelPrefix> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "is":
********************** / manyIndentation/leaf?                                                         :2_3:Other "is":
*********************** / expression                                                                  :2_3:Other "is":
************************ / labelPrefix                                                               :2_3:Other "is":
labelPrefix> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

************************ \ labelPrefix has returned "is"                                              :2_4:GoDeeper:
************************ / term p                                                                     :2_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :2_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :2_4:GoDeeper:
*************************** / someIndentation                                                      :2_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :2_4:Other "immo:
**************************** / manyIndentation/leaf?                                               :2_4:Other "immo:
***************************** / expression                                                        :2_4:Other "immo:
****************************** / labelPrefix                                                     :2_4:Other "immo:
labelPrefix> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected (

****************************** / term p                                                          :2_4:Other "immo:
******************************* / term p/notLabelTerm                                           :2_4:Other "immo:
******************************** / term p/2:someIndentation expr p                             :2_4:Other "immo:
********************************* / someIndentation                                           :2_4:Other "immo:
********************************** / myindented: consuming GoDeeper                          :2_4:Other "immo:
myindented: consuming GoDeeper> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "immortal"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "immortal"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "immortal"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :2_4:Other "immo:
********************************* / pRelPred                                                  :2_4:Other "immo:
********************************** / slRelPred                                               :2_4:Other "immo:
*********************************** / nested simpleHorn                                     :2_4:Other "immo:
************************************ > |^|                                                 :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |^| deeps                                            :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************************************ \ |^| deeps has returned ([()],1)                       :2_5:Typically:
nested simpleHorn> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
nested simpleHorn> MATCH (CERR): "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

*********************************** / RPConstraint                                          :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPConstraint> MATCH (CERR): "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPBoolStructR> MATCH (CERR): "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slAKA                                             :2_4:Other "immo:
************************************** / $*|                                             :2_4:Other "immo:
*************************************** / slAKA base                                    :2_4:Other "immo:
**************************************** / slMultiTerm                                 :2_4:Other "immo:
***************************************** / someSL                                    :2_4:Other "immo:
****************************************** / pNumAsText                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

***************************************** \ someSL has returned (["immortal"],0)       :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

**************************************** \ slMultiTerm has returned (["immortal"],0)    :2_5:GoDeeper:
slAKA base> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA base> MATCH (COK): "immortal"
slAKA base> VALUE: ((["immortal"],0),[])

*************************************** \ slAKA base has returned (["immortal"],0)       :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************** \ $*| has returned (["immortal"],0)                :2_5:GoDeeper:
************************************** / |>>/recurse                                      :2_5:GoDeeper:
*************************************** / |>>/recurse                                     :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*************************************** / |>>/base                                        :2_5:Typically:
**************************************** / slAKA optional akapart                        :2_5:Typically:
***************************************** / |?| optional something                      :2_5:Typically:
****************************************** / |>>/recurse                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

****************************************** / |>>/base                                  :2_5:Typically:
******************************************* / PAKA/akapart                            :2_5:Typically:
******************************************** / $>|                                   :2_5:Typically:
********************************************* / Aka Token                           :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :2_5:Typically:
**************************************** > |>>/base got Nothing                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)               :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************************************** \ |>>/recurse has returned (Nothing,1)              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
*************************************** / slAKA optional typically                        :2_5:Typically:
**************************************** / |?| optional something                        :2_5:Typically:
***************************************** / |>>/recurse                                 :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

***************************************** / |>>/base                                    :2_5:Typically:
****************************************** / typically                                 :2_5:Typically:
******************************************* / $>|                                     :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

******************************************* \ $>| has returned Typically               :2_6:GoDeeper:
******************************************* / |>>/recurse                              :2_6:GoDeeper:
******************************************** / |>>/recurse                             :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

******************************************** / |>>/base                                :2_6:Other "fals:
********************************************* / slMultiTerm                           :2_6:Other "fals:
********************************************** / someSL                              :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

********************************************** \ someSL has returned (["false"],0) :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

********************************************* \ slMultiTerm has returned (["false"],0) :3_3:UnDeeper:
********************************************* > |>>/base got ["false"]           :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

******************************************** \ |>>/base has returned (["false"],0) :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

******************************************* \ |>>/recurse has returned (["false"],1) :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

****************************************** \ typically has returned (["false"],1)   :3_3:UnDeeper:
****************************************** > |>>/base got ["false"]                 :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

***************************************** \ |>>/base has returned (["false"],1)      :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

**************************************** \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*************************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*************************************** > |>>/base got Just ["false"]                  :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

************************************** \ |>>/base has returned (Just ["false"],1)       :3_3:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
************************************** > pAKA: entityalias = Nothing                    :3_3:UnDeeper:
slAKA> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************* \ slAKA has returned (["immortal"],2)              :3_3:UnDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************ \ $*| has returned (["immortal"],2)                  :3_3:UnDeeper:
RPMT> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPMT> MATCH (COK): "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************************** \ RPMT has returned (RPMT ["immortal"],2)              :3_3:UnDeeper:
slRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************** \ slRelPred has returned (RPMT ["immortal"],2)           :3_3:UnDeeper:
********************************** / undeepers                                              :3_3:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers :3_3:UnDeeper:
*********************************** > sameLine: success!                                       :3_5:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :3_5:UnDeeper:
pRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
pRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
pRelPred> VALUE: (RPMT ["immortal"],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ pRelPred has returned RPMT ["immortal"]                      :3_5:UnDeeper:
term p/3:plain p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/3:plain p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["immortal"])       :3_5:UnDeeper:
term p/notLabelTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/notLabelTerm> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])      :3_5:UnDeeper:
term p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ term p has returned MyLeaf (RPMT ["immortal"])                     :3_5:UnDeeper:
****************************** / binary(Or)                                                         :3_5:UnDeeper:
binary(Or)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                        :3_5:UnDeeper:
binary(And)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                    :3_5:UnDeeper:
binary(SetLess)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                    :3_5:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
expression> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
expression> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ expression has returned MyLeaf (RPMT ["immortal"])                   :3_5:UnDeeper:
manyIndentation/leaf?> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["immortal"])          :3_5:UnDeeper:
**************************** / myindented: consuming UnDeeper                                         :3_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                     :3_6:UnDeeper:
someIndentation> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
someIndentation> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ someIndentation has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p/2:someIndentation expr p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["immortal"])      :3_6:UnDeeper:
term p/notLabelTerm> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ term p has returned MyLeaf (RPMT ["immortal"])                                   :3_6:UnDeeper:
************************ / binary(Or)                                                                       :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                      :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                                  :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                                  :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ expression has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))       :3_6:UnDeeper:
********************** / myindented: consuming UnDeeper                                                       :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ someIndentation has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"])) :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ term p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                     :3_2:Or:
****************** / binary(Or)                                                                          :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

****************** \ binary(Or) has returned Or                                                           :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "has":
********************** / manyIndentation/leaf?                                                         :3_3:Other "has":
*********************** / expression                                                                  :3_3:Other "has":
************************ / labelPrefix                                                               :3_3:Other "has":
labelPrefix> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
labelPrefix> MATCH (COK): "has"
labelPrefix> VALUE: ("has",[])

************************ \ labelPrefix has returned "has"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "heal:
**************************** / manyIndentation/leaf?                                               :3_4:Other "heal:
***************************** / expression                                                        :3_4:Other "heal:
****************************** / labelPrefix                                                     :3_4:Other "heal:
labelPrefix> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "heal:
******************************* / term p/notLabelTerm                                           :3_4:Other "heal:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "heal:
********************************* / someIndentation                                           :3_4:Other "heal:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "heal:
myindented: consuming GoDeeper> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected "health insurance"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected "health insurance"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected "health insurance"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "heal:
********************************* / pRelPred                                                  :3_4:Other "heal:
********************************** / slRelPred                                               :3_4:Other "heal:
*********************************** / nested simpleHorn                                     :3_4:Other "heal:
************************************ > |^|                                                 :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:May:
nested simpleHorn> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
nested simpleHorn> MATCH (CERR): "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPConstraint> MATCH (CERR): "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPBoolStructR> MATCH (CERR): "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slAKA                                             :3_4:Other "heal:
************************************** / $*|                                             :3_4:Other "heal:
*************************************** / slAKA base                                    :3_4:Other "heal:
**************************************** / slMultiTerm                                 :3_4:Other "heal:
***************************************** / someSL                                    :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

***************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

**************************************** \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
slAKA base> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA base> MATCH (COK): "health insurance"
slAKA base> VALUE: ((["health insurance"],0),[])

*************************************** \ slAKA base has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************** \ $*| has returned (["health insurance"],0)    :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA> MATCH (COK): "health insurance"
slAKA> VALUE: ((["health insurance"],0),[])

************************************* \ slAKA has returned (["health insurance"],0)    :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
RPMT> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPMT> MATCH (COK): "health insurance"
RPMT> VALUE: ((RPMT ["health insurance"],0),[])

*********************************** \ RPMT has returned (RPMT ["health insurance"],0)    :4_2:UnDeeper:
slRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slRelPred> MATCH (COK): "health insurance"
slRelPred> VALUE: ((RPMT ["health insurance"],0),[])

********************************** \ slRelPred has returned (RPMT ["health insurance"],0) :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
pRelPred> MATCH (COK): "health insurance"
pRelPred> VALUE: (RPMT ["health insurance"],[])

********************************* \ pRelPred has returned RPMT ["health insurance"]        :4_2:UnDeeper:
term p/3:plain p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/3:plain p> MATCH (COK): "health insurance"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/notLabelTerm> MATCH (COK): "health insurance"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p> MATCH (COK): "health insurance"
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["health insurance"])       :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
expression> MATCH (COK): "health insurance"
expression> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["health insurance"])     :4_2:UnDeeper:
manyIndentation/leaf?> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
manyIndentation/leaf?> MATCH (COK): "health insurance"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
someIndentation> MATCH (COK): ( "health insurance" )
someIndentation> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/2:someIndentation expr p> MATCH (COK): ( "health insurance" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/notLabelTerm> MATCH (COK): ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p> MATCH (COK): ( "health insurance" )
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************ \ term p has returned MyLeaf (RPMT ["health insurance"])                     :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

*********************** \ expression has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************* \ someIndentation has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p> MATCH (COK): ( "has" ( "health insurance" ) )
term p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

****************** \ term p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))                 :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ term p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
|>>/recurse> IN: "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected "sharpen knives"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
pTemporal/eventually> IN: "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected "sharpen knives"
pTemporal/eventually> expecting EVENTUALLY

*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
$>|> IN: "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected "sharpen knives"
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected "sharpen knives"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
pTemporal/vaguely> IN: "sharpen knives" )
pTemporal/vaguely> MATCH (COK): "sharpen knives"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "sharpen knives"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
|>>/base> IN: "sharpen knives" )
|>>/base> MATCH (COK): "sharpen knives"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
|>>/recurse> IN: ( "sharpen knives" )
|>>/recurse> MATCH (COK): ( "sharpen knives"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
|>| calling $>>> IN: ( "sharpen knives" )
|>| calling $>>> MATCH (COK): ( "sharpen knives"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
undeepers> IN: )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                           :EOF:
pDT> IN: MAY ( "sharpen knives" )
pDT> MATCH (COK): MAY ( "sharpen knives" )
pDT> VALUE: ((DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives")),[])

******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDoAction/Do                                                                                          :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=30:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=30:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / labelPrefix                                                                          :2_3:GoDeeper:
labelPrefix> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected (
labelPrefix> expecting Other text

****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "is":
********************** / manyIndentation/leaf?                                                         :2_3:Other "is":
*********************** / expression                                                                  :2_3:Other "is":
************************ / labelPrefix                                                               :2_3:Other "is":
labelPrefix> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

************************ \ labelPrefix has returned "is"                                              :2_4:GoDeeper:
************************ / term p                                                                     :2_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :2_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :2_4:GoDeeper:
*************************** / someIndentation                                                      :2_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :2_4:Other "immo:
**************************** / manyIndentation/leaf?                                               :2_4:Other "immo:
***************************** / expression                                                        :2_4:Other "immo:
****************************** / labelPrefix                                                     :2_4:Other "immo:
labelPrefix> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=10:
labelPrefix> unexpected (

****************************** / term p                                                          :2_4:Other "immo:
******************************* / term p/notLabelTerm                                           :2_4:Other "immo:
******************************** / term p/2:someIndentation expr p                             :2_4:Other "immo:
********************************* / someIndentation                                           :2_4:Other "immo:
********************************** / myindented: consuming GoDeeper                          :2_4:Other "immo:
myindented: consuming GoDeeper> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "immortal"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "immortal"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "immortal"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :2_4:Other "immo:
********************************* / pRelPred                                                  :2_4:Other "immo:
********************************** / slRelPred                                               :2_4:Other "immo:
*********************************** / nested simpleHorn                                     :2_4:Other "immo:
************************************ > |^|                                                 :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |^| deeps                                            :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************************************ \ |^| deeps has returned ([()],1)                       :2_5:Typically:
nested simpleHorn> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
nested simpleHorn> MATCH (CERR): "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

*********************************** / RPConstraint                                          :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPConstraint> MATCH (CERR): "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slMultiTerm                                       :2_4:Other "immo:
************************************** / someSL                                          :2_4:Other "immo:
*************************************** / pNumAsText                                      :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

************************************** \ someSL has returned (["immortal"],0)             :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

************************************* \ slMultiTerm has returned (["immortal"],0)          :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************ \ $*| has returned (["immortal"],0)                    :2_5:GoDeeper:
************************************ / |>| calling $>>                                      :2_5:GoDeeper:
************************************* / |>>/recurse                                        :2_5:GoDeeper:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************************* / |>>/base                                           :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPBoolStructR> MATCH (CERR): "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :2_4:Other "immo:
************************************ / $*|                                                 :2_4:Other "immo:
************************************* / slAKA                                             :2_4:Other "immo:
************************************** / $*|                                             :2_4:Other "immo:
*************************************** / slAKA base                                    :2_4:Other "immo:
**************************************** / slMultiTerm                                 :2_4:Other "immo:
***************************************** / someSL                                    :2_4:Other "immo:
****************************************** / pNumAsText                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

someSL> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
someSL> MATCH (COK): "immortal"
someSL> VALUE: ((["immortal"],0),[])

***************************************** \ someSL has returned (["immortal"],0)       :2_5:GoDeeper:
slMultiTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "immortal"
slMultiTerm> VALUE: ((["immortal"],0),[])

**************************************** \ slMultiTerm has returned (["immortal"],0)    :2_5:GoDeeper:
slAKA base> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA base> MATCH (COK): "immortal"
slAKA base> VALUE: ((["immortal"],0),[])

*************************************** \ slAKA base has returned (["immortal"],0)       :2_5:GoDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal"
$*|> VALUE: ((["immortal"],0),[])

************************************** \ $*| has returned (["immortal"],0)                :2_5:GoDeeper:
************************************** / |>>/recurse                                      :2_5:GoDeeper:
*************************************** / |>>/recurse                                     :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*************************************** / |>>/base                                        :2_5:Typically:
**************************************** / slAKA optional akapart                        :2_5:Typically:
***************************************** / |?| optional something                      :2_5:Typically:
****************************************** / |>>/recurse                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

****************************************** / |>>/base                                  :2_5:Typically:
******************************************* / PAKA/akapart                            :2_5:Typically:
******************************************** / $>|                                   :2_5:Typically:
********************************************* / Aka Token                           :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :2_5:Typically:
**************************************** > |>>/base got Nothing                          :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)               :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************************************** \ |>>/recurse has returned (Nothing,1)              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** / |>>/base                                          :2_5:Typically:
*************************************** / slAKA optional typically                        :2_5:Typically:
**************************************** / |?| optional something                        :2_5:Typically:
***************************************** / |>>/recurse                                 :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

***************************************** / |>>/base                                    :2_5:Typically:
****************************************** / typically                                 :2_5:Typically:
******************************************* / $>|                                     :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

******************************************* \ $>| has returned Typically               :2_6:GoDeeper:
******************************************* / |>>/recurse                              :2_6:GoDeeper:
******************************************** / |>>/recurse                             :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

******************************************** / |>>/base                                :2_6:Other "fals:
********************************************* / slMultiTerm                           :2_6:Other "fals:
********************************************** / someSL                              :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

********************************************** \ someSL has returned (["false"],0) :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

********************************************* \ slMultiTerm has returned (["false"],0) :3_3:UnDeeper:
********************************************* > |>>/base got ["false"]           :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

******************************************** \ |>>/base has returned (["false"],0) :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

******************************************* \ |>>/recurse has returned (["false"],1) :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

****************************************** \ typically has returned (["false"],1)   :3_3:UnDeeper:
****************************************** > |>>/base got ["false"]                 :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

***************************************** \ |>>/base has returned (["false"],1)      :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

**************************************** \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*************************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*************************************** > |>>/base got Just ["false"]                  :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

************************************** \ |>>/base has returned (Just ["false"],1)       :3_3:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
************************************** > pAKA: entityalias = Nothing                    :3_3:UnDeeper:
slAKA> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slAKA> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************* \ slAKA has returned (["immortal"],2)              :3_3:UnDeeper:
$*|> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
$*|> MATCH (COK): "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************************ \ $*| has returned (["immortal"],2)                  :3_3:UnDeeper:
RPMT> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
RPMT> MATCH (COK): "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************************** \ RPMT has returned (RPMT ["immortal"],2)              :3_3:UnDeeper:
slRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
slRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["immortal"],2),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************** \ slRelPred has returned (RPMT ["immortal"],2)           :3_3:UnDeeper:
********************************** / undeepers                                              :3_3:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers :3_3:UnDeeper:
*********************************** > sameLine: success!                                       :3_5:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :3_5:UnDeeper:
pRelPred> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
pRelPred> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
pRelPred> VALUE: (RPMT ["immortal"],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ pRelPred has returned RPMT ["immortal"]                      :3_5:UnDeeper:
term p/3:plain p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/3:plain p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["immortal"])       :3_5:UnDeeper:
term p/notLabelTerm> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p/notLabelTerm> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])      :3_5:UnDeeper:
term p> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
term p> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ term p has returned MyLeaf (RPMT ["immortal"])                     :3_5:UnDeeper:
****************************** / binary(Or)                                                         :3_5:UnDeeper:
binary(Or)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                        :3_5:UnDeeper:
binary(And)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                                    :3_5:UnDeeper:
binary(SetLess)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                                    :3_5:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
expression> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
expression> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ expression has returned MyLeaf (RPMT ["immortal"])                   :3_5:UnDeeper:
manyIndentation/leaf?> IN: "immortal" ( TYPICALLY ( "false" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "immortal" ( TYPICALLY ( "false" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["immortal"])          :3_5:UnDeeper:
**************************** / myindented: consuming UnDeeper                                         :3_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( "has" ( "health insurance" ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                     :3_6:UnDeeper:
someIndentation> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
someIndentation> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ someIndentation has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p/2:someIndentation expr p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["immortal"])      :3_6:UnDeeper:
term p/notLabelTerm> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["immortal"])                    :3_6:UnDeeper:
term p> IN: ( "immortal" ( TYPICALLY ( "false" ) ) ) <…>
term p> MATCH (COK): ( "immortal" ( TYPICALLY ( "false" ) ) )
term p> VALUE: (MyLeaf (RPMT ["immortal"]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ term p has returned MyLeaf (RPMT ["immortal"])                                   :3_6:UnDeeper:
************************ / binary(Or)                                                                       :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                      :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                                  :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                                  :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ expression has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))       :3_6:UnDeeper:
********************** / myindented: consuming UnDeeper                                                       :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ someIndentation has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"])) :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))      :3_2:Or:
term p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p> VALUE: (MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ term p has returned MyLabel ["is"] (MyLeaf (RPMT ["immortal"]))                     :3_2:Or:
****************** / binary(Or)                                                                          :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

****************** \ binary(Or) has returned Or                                                           :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "has":
********************** / manyIndentation/leaf?                                                         :3_3:Other "has":
*********************** / expression                                                                  :3_3:Other "has":
************************ / labelPrefix                                                               :3_3:Other "has":
labelPrefix> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
labelPrefix> MATCH (COK): "has"
labelPrefix> VALUE: ("has",[])

************************ \ labelPrefix has returned "has"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "heal:
**************************** / manyIndentation/leaf?                                               :3_4:Other "heal:
***************************** / expression                                                        :3_4:Other "heal:
****************************** / labelPrefix                                                     :3_4:Other "heal:
labelPrefix> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "heal:
******************************* / term p/notLabelTerm                                           :3_4:Other "heal:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "heal:
********************************* / someIndentation                                           :3_4:Other "heal:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "heal:
myindented: consuming GoDeeper> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected "health insurance"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected "health insurance"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected "health insurance"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "heal:
********************************* / pRelPred                                                  :3_4:Other "heal:
********************************** / slRelPred                                               :3_4:Other "heal:
*********************************** / nested simpleHorn                                     :3_4:Other "heal:
************************************ > |^|                                                 :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:May:
nested simpleHorn> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
nested simpleHorn> MATCH (CERR): "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPConstraint> MATCH (CERR): "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slMultiTerm                                       :3_4:Other "heal:
************************************** / someSL                                          :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

************************************* \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPBoolStructR> MATCH (CERR): "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "heal:
************************************ / $*|                                                 :3_4:Other "heal:
************************************* / slAKA                                             :3_4:Other "heal:
************************************** / $*|                                             :3_4:Other "heal:
*************************************** / slAKA base                                    :3_4:Other "heal:
**************************************** / slMultiTerm                                 :3_4:Other "heal:
***************************************** / someSL                                    :3_4:Other "heal:
someSL> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
someSL> MATCH (COK): "health insurance"
someSL> VALUE: ((["health insurance"],0),[])

***************************************** \ someSL has returned (["health insurance"],0) :4_2:UnDeeper:
slMultiTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slMultiTerm> MATCH (COK): "health insurance"
slMultiTerm> VALUE: ((["health insurance"],0),[])

**************************************** \ slMultiTerm has returned (["health insurance"],0) :4_2:UnDeeper:
slAKA base> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA base> MATCH (COK): "health insurance"
slAKA base> VALUE: ((["health insurance"],0),[])

*************************************** \ slAKA base has returned (["health insurance"],0) :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************** \ $*| has returned (["health insurance"],0)    :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slAKA> MATCH (COK): "health insurance"
slAKA> VALUE: ((["health insurance"],0),[])

************************************* \ slAKA has returned (["health insurance"],0)    :4_2:UnDeeper:
$*|> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
$*|> MATCH (COK): "health insurance"
$*|> VALUE: ((["health insurance"],0),[])

************************************ \ $*| has returned (["health insurance"],0)        :4_2:UnDeeper:
RPMT> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
RPMT> MATCH (COK): "health insurance"
RPMT> VALUE: ((RPMT ["health insurance"],0),[])

*********************************** \ RPMT has returned (RPMT ["health insurance"],0)    :4_2:UnDeeper:
slRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
slRelPred> MATCH (COK): "health insurance"
slRelPred> VALUE: ((RPMT ["health insurance"],0),[])

********************************** \ slRelPred has returned (RPMT ["health insurance"],0) :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
pRelPred> MATCH (COK): "health insurance"
pRelPred> VALUE: (RPMT ["health insurance"],[])

********************************* \ pRelPred has returned RPMT ["health insurance"]        :4_2:UnDeeper:
term p/3:plain p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/3:plain p> MATCH (COK): "health insurance"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p/notLabelTerm> MATCH (COK): "health insurance"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
term p> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
term p> MATCH (COK): "health insurance"
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["health insurance"])       :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
expression> MATCH (COK): "health insurance"
expression> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["health insurance"])     :4_2:UnDeeper:
manyIndentation/leaf?> IN: "health insurance" ) ) ) MAY ( "sharpen  <…>
manyIndentation/leaf?> MATCH (COK): "health insurance"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["health insurance"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
someIndentation> MATCH (COK): ( "health insurance" )
someIndentation> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/2:someIndentation expr p> MATCH (COK): ( "health insurance" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p/notLabelTerm> MATCH (COK): ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["health insurance"])      :4_3:UnDeeper:
term p> IN: ( "health insurance" ) ) ) MAY ( "sharpe <…>
term p> MATCH (COK): ( "health insurance" )
term p> VALUE: (MyLeaf (RPMT ["health insurance"]),[])

************************ \ term p has returned MyLeaf (RPMT ["health insurance"])                     :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

*********************** \ expression has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

********************* \ someIndentation has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))  :4_4:UnDeeper:
term p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p> MATCH (COK): ( "has" ( "health insurance" ) )
term p> VALUE: (MyLabel ["has"] (MyLeaf (RPMT ["health insurance"])),[])

****************** \ term p has returned MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))                 :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
term p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ term p has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLabel ["is"] (MyLeaf (RPMT ["immortal"])),MyLabel ["has"] (MyLeaf (RPMT ["health insurance"]))] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :4_1:May:
pTemporal/eventually> IN: MAY ( "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MAY ( "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=26:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :4_1:May:
pTemporal/vaguely> IN: MAY ( "sharpen knives" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=26:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :4_1:May:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / expression                                                                                       :4_2:GoDeeper:
************ / labelPrefix                                                                                    :4_2:GoDeeper:
labelPrefix> IN: ( "sharpen knives" )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :4_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :4_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :4_2:GoDeeper:
*************** / someIndentation                                                                          :4_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "sharpen knives" )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :4_2:Other "shar:
**************** / manyIndentation/leaf?                                                                   :4_2:Other "shar:
***************** / expression                                                                            :4_2:Other "shar:
****************** / labelPrefix                                                                         :4_2:Other "shar:
labelPrefix> IN: "sharpen knives" )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected )

****************** / term p                                                                              :4_2:Other "shar:
******************* / term p/notLabelTerm                                                               :4_2:Other "shar:
******************** / term p/2:someIndentation expr p                                                 :4_2:Other "shar:
********************* / someIndentation                                                               :4_2:Other "shar:
********************** / myindented: consuming GoDeeper                                              :4_2:Other "shar:
myindented: consuming GoDeeper> IN: "sharpen knives" )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=28:
myindented: consuming GoDeeper> unexpected "sharpen knives"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected "sharpen knives"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected "sharpen knives"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :4_2:Other "shar:
********************* / pParamText                                                                    :4_2:Other "shar:
********************** / pParamText(flat) first line: pKeyValues                                     :4_2:Other "shar:
*********************** / pKeyValuesAka                                                             :4_2:Other "shar:
************************ / slAKA                                                                   :4_2:Other "shar:
************************* / $*|                                                                   :4_2:Other "shar:
************************** / slAKA base                                                          :4_2:Other "shar:
*************************** / slKeyValues                                                       :4_2:Other "shar:
**************************** / $*|                                                             :4_2:Other "shar:
***************************** / someSL                                                        :4_2:Other "shar:
someSL> IN: "sharpen knives" )
someSL> MATCH (COK): "sharpen knives"
someSL> VALUE: ((["sharpen knives"],0),[])

***************************** \ someSL has returned (["sharpen knives"],0)                     :1_2:UnDeeper:
$*|> IN: "sharpen knives" )
$*|> MATCH (COK): "sharpen knives"
$*|> VALUE: ((["sharpen knives"],0),[])

**************************** \ $*| has returned (["sharpen knives"],0)                          :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / |?| optional something                                         :1_2:UnDeeper:
****************************** / |>>/recurse                                                  :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :1_2:UnDeeper:
******************************* / slTypeSig                                                  :1_2:UnDeeper:
******************************** / $>|                                                      :1_2:UnDeeper:
$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: )
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=29:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :1_2:UnDeeper:
***************************** > |>>/base got Nothing                                           :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                :1_2:UnDeeper:
slKeyValues> IN: "sharpen knives" )
slKeyValues> MATCH (COK): "sharpen knives"
slKeyValues> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

*************************** \ slKeyValues has returned (("sharpen knives" :| [],Nothing),0)      :1_2:UnDeeper:
slAKA base> IN: "sharpen knives" )
slAKA base> MATCH (COK): "sharpen knives"
slAKA base> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************** \ slAKA base has returned (("sharpen knives" :| [],Nothing),0)         :1_2:UnDeeper:
$*|> IN: "sharpen knives" )
$*|> MATCH (COK): "sharpen knives"
$*|> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************* \ $*| has returned (("sharpen knives" :| [],Nothing),0)                  :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional akapart                                               :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / PAKA/akapart                                                   :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
******************************* / Aka Token                                                  :1_2:UnDeeper:
Aka Token> IN: )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=29:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=29:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
slAKA optional akapart> IN: )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :1_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional typically                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>/recurse                                                      :1_2:UnDeeper:
|>>/recurse> IN: )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :1_2:UnDeeper:
***************************** / typically                                                      :1_2:UnDeeper:
****************************** / $>|                                                          :1_2:UnDeeper:
$>|> IN: )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=29:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
slAKA optional typically> IN: )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :1_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :1_2:UnDeeper:
|>>/base> IN: )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :1_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :1_2:UnDeeper:
slAKA> IN: "sharpen knives" )
slAKA> MATCH (COK): "sharpen knives"
slAKA> VALUE: ((("sharpen knives" :| [],Nothing),0),[])

************************ \ slAKA has returned (("sharpen knives" :| [],Nothing),0)                  :1_2:UnDeeper:
************************ / undeepers                                                                :1_2:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
************************* > sameLine: success!                                                     :1_2:UnDeeper:
undeepers> IN: )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                :1_2:UnDeeper:
pKeyValuesAka> IN: "sharpen knives" )
pKeyValuesAka> MATCH (COK): "sharpen knives"
pKeyValuesAka> VALUE: (("sharpen knives" :| [],Nothing),[])

*********************** \ pKeyValuesAka has returned ("sharpen knives" :| [],Nothing)                :1_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "sharpen knives" )
pParamText(flat) first line: pKeyValues> MATCH (COK): "sharpen knives"
pParamText(flat) first line: pKeyValues> VALUE: (("sharpen knives" :| [],Nothing),[])

********************** \ pParamText(flat) first line: pKeyValues has returned ("sharpen knives" :| [],Nothing) :1_2:UnDeeper:
********************** / pParamText(flat) subsequent lines: sameMany pKeyValues                       :1_2:UnDeeper:
*********************** / manyIndentation/leaf?                                                      :1_2:UnDeeper:
************************ / sameMany                                                                 :1_2:UnDeeper:
************************* / pKeyValuesAka                                                          :1_2:UnDeeper:
************************** / slAKA                                                                :1_2:UnDeeper:
*************************** / $*|                                                                :1_2:UnDeeper:
**************************** / slAKA base                                                       :1_2:UnDeeper:
***************************** / slKeyValues                                                    :1_2:UnDeeper:
****************************** / $*|                                                          :1_2:UnDeeper:
******************************* / someSL                                                     :1_2:UnDeeper:
******************************** / pNumAsText                                               :1_2:UnDeeper:
pNumAsText> IN: )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=29:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=29:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=29:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=29:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: )
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************ \ sameMany has returned []                                                 :1_2:UnDeeper:
manyIndentation/leaf?> IN: )
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************** \ manyIndentation/leaf? has returned []                                      :1_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: )
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []       :1_2:UnDeeper:
pParamText> IN: "sharpen knives" )
pParamText> MATCH (COK): "sharpen knives"
pParamText> VALUE: (("sharpen knives" :| [],Nothing) :| [],[])

********************* \ pParamText has returned ("sharpen knives" :| [],Nothing) :| []                 :1_2:UnDeeper:
term p/3:plain p> IN: "sharpen knives" )
term p/3:plain p> MATCH (COK): "sharpen knives"
term p/3:plain p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

******************** \ term p/3:plain p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])    :1_2:UnDeeper:
term p/notLabelTerm> IN: "sharpen knives" )
term p/notLabelTerm> MATCH (COK): "sharpen knives"
term p/notLabelTerm> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])   :1_2:UnDeeper:
term p> IN: "sharpen knives" )
term p> MATCH (COK): "sharpen knives"
term p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                  :1_2:UnDeeper:
****************** / binary(Or)                                                                           :1_2:UnDeeper:
binary(Or)> IN: )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=29:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :1_2:UnDeeper:
binary(And)> IN: )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=29:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :1_2:UnDeeper:
binary(SetLess)> IN: )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=29:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :1_2:UnDeeper:
binary(SetPlus)> IN: )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=29:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "sharpen knives" )
expression> MATCH (COK): "sharpen knives"
expression> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

***************** \ expression has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                :1_2:UnDeeper:
manyIndentation/leaf?> IN: "sharpen knives" )
manyIndentation/leaf?> MATCH (COK): "sharpen knives"
manyIndentation/leaf?> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])       :1_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                :EOF:
someIndentation> IN: ( "sharpen knives" )
someIndentation> MATCH (COK): ( "sharpen knives" )
someIndentation> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

*************** \ someIndentation has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])          :EOF:
term p/2:someIndentation expr p> IN: ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (COK): ( "sharpen knives" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| []) :EOF:
term p/notLabelTerm> IN: ( "sharpen knives" )
term p/notLabelTerm> MATCH (COK): ( "sharpen knives" )
term p/notLabelTerm> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************* \ term p/notLabelTerm has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])          :EOF:
term p> IN: ( "sharpen knives" )
term p> MATCH (COK): ( "sharpen knives" )
term p> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

************ \ term p has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                         :EOF:
************ / binary(Or)                                                                                  :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected end of input
binary(Or)> expecting OR

************ / binary(And)                                                                                 :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected end of input
binary(And)> expecting AND

************ / binary(SetLess)                                                                             :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                             :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting PLUS

expression> IN: ( "sharpen knives" )
expression> MATCH (COK): ( "sharpen knives" )
expression> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

*********** \ expression has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                       :EOF:
expr pParamText> IN: ( "sharpen knives" )
expr pParamText> MATCH (COK): ( "sharpen knives" )
expr pParamText> VALUE: (MyLeaf (("sharpen knives" :| [],Nothing) :| []),[])

********** \ expr pParamText has returned MyLeaf (("sharpen knives" :| [],Nothing) :| [])                    :EOF:
dBoolStructP calling exprP> IN: ( "sharpen knives" )
dBoolStructP calling exprP> MATCH (COK): ( "sharpen knives" )
dBoolStructP calling exprP> VALUE: (Leaf (("sharpen knives" :| [],Nothing) :| []),[])

********* \ dBoolStructP calling exprP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
pAction calling dBoolStructP> IN: ( "sharpen knives" )
pAction calling dBoolStructP> MATCH (COK): ( "sharpen knives" )
pAction calling dBoolStructP> VALUE: (Leaf (("sharpen knives" :| [],Nothing) :| []),[])

******** \ pAction calling dBoolStructP has returned Leaf (("sharpen knives" :| [],Nothing) :| [])             :EOF:
pDA> IN: MAY ( "sharpen knives" )
pDA> MATCH (COK): MAY ( "sharpen knives" )
pDA> VALUE: ((DMay,Leaf (("sharpen knives" :| [],Nothing) :| [])),[])

******* \ pDA has returned (DMay,Leaf (("sharpen knives" :| [],Nothing) :| []))                                 :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                  :EOF:
pTemporal/eventually> IN: <EMPTY>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=30:
pTemporal/eventually> unexpected end of input
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: <EMPTY>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=30:
pTemporal/specifically> unexpected end of input
pTemporal/specifically> expecting AFTER, BEFORE, BY, ON, or any token

******* / pTemporal/vaguely                                                                                     :EOF:
pTemporal/vaguely> IN: <EMPTY>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=30:
pTemporal/vaguely> unexpected end of input
pTemporal/vaguely> expecting Other text

regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> VALUE: (RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
permutationsReg> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
***** / pHenceLest-Hence                                                                                          :EOF:
pHenceLest-Hence> IN: <EMPTY>
pHenceLest-Hence> MATCH (EERR): <EMPTY>
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=30:
pHenceLest-Hence> unexpected end of input
pHenceLest-Hence> expecting HENCE

***** / pHenceLest-Lest                                                                                           :EOF:
pHenceLest-Lest> IN: <EMPTY>
pHenceLest-Lest> MATCH (EERR): <EMPTY>
pHenceLest-Lest> ERROR:
pHenceLest-Lest> offset=30:
pHenceLest-Lest> unexpected end of input
pHenceLest-Lest> expecting LEST

****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("sharpen knives" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Just (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), rbwhere = []} :EOF:
****   pRegRuleNormal: the positive preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: the negative preamble is Nothing                                                           :EOF:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRegRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*** \ pRegRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:
pRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> MATCH (COK): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> VALUE: (Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

** \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :EOF:

PDPA
  boolstructp-3 FAILED [1]
  boolstructp-3 FAILED [2]
  boolstructp-3
  boolstructp-3

Failures:

  test/Spec.hs:124:3: 
  1) PDPA boolstructp-3
       expected: [[Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}]]
        but got: [[Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefTypically {name = ["immortal"], defaults = [RPConstraint ["immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}]]

  To rerun use: --match "/PDPA/boolstructp-3/"

  test/Spec.hs:124:3: 
  2) PDPA boolstructp-3
       expected: [[["person","has","health insurance"]]]
        but got: [[["person","is","immortal"],["person","has","health insurance"]]]

  To rerun use: --match "/PDPA/boolstructp-3/"

Randomized with seed 1326996537

Finished in 0.1673 seconds
4 examples, 2 failures

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

