* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/revised parser/horn-0-1/")

* Tokens
"X"
    ( IS ( "Y" ) )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRelPred                                                                                                          :1_1:Other "X":
*** / slRelPred                                                                                                       :1_1:Other "X":
**** / nested simpleHorn                                                                                             :1_1:Other "X":
***** > |^|                                                                                                         :1_1:Other "X":
***** / $*|                                                                                                         :1_1:Other "X":
****** / slMultiTerm                                                                                               :1_1:Other "X":
******* / someSL                                                                                                  :1_1:Other "X":
******** / pNumAsText                                                                                              :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "X" ( IS ( "Y" ) )
someSL> MATCH (COK): "X"
someSL> VALUE: ((["X"],0),[])

******* \ someSL has returned (["X"],0)                                                                            :1_2:GoDeeper:
slMultiTerm> IN: "X" ( IS ( "Y" ) )
slMultiTerm> MATCH (COK): "X"
slMultiTerm> VALUE: ((["X"],0),[])

****** \ slMultiTerm has returned (["X"],0)                                                                         :1_2:GoDeeper:
$*|> IN: "X" ( IS ( "Y" ) )
$*|> MATCH (COK): "X"
$*|> VALUE: ((["X"],0),[])

***** \ $*| has returned (["X"],0)                                                                                   :1_2:GoDeeper:
***** / |^| deeps                                                                                                    :1_2:GoDeeper:
|^| deeps> IN: ( IS ( "Y" ) )
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

***** \ |^| deeps has returned ([()],1)                                                                               :1_2:Is:
nested simpleHorn> IN: "X" ( IS ( "Y" ) )
nested simpleHorn> MATCH (CERR): "X" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=2:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting ( or MEANS

**** / RPConstraint                                                                                                  :1_1:Other "X":
***** / $*|                                                                                                         :1_1:Other "X":
****** / slMultiTerm                                                                                               :1_1:Other "X":
******* / someSL                                                                                                  :1_1:Other "X":
******** / pNumAsText                                                                                              :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: "X" ( IS ( "Y" ) )
someSL> MATCH (COK): "X"
someSL> VALUE: ((["X"],0),[])

******* \ someSL has returned (["X"],0)                                                                            :1_2:GoDeeper:
slMultiTerm> IN: "X" ( IS ( "Y" ) )
slMultiTerm> MATCH (COK): "X"
slMultiTerm> VALUE: ((["X"],0),[])

****** \ slMultiTerm has returned (["X"],0)                                                                         :1_2:GoDeeper:
$*|> IN: "X" ( IS ( "Y" ) )
$*|> MATCH (COK): "X"
$*|> VALUE: ((["X"],0),[])

***** \ $*| has returned (["X"],0)                                                                                   :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Is:
|>>/recurse> IN: IS ( "Y" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected IS
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Is:
******** > |>>/base got RPis                                                                                        :1_3:GoDeeper:
|>>/base> IN: IS ( "Y" ) )
|>>/base> MATCH (COK): IS
|>>/base> VALUE: ((RPis,0),[])

******* \ |>>/base has returned (RPis,0)                                                                             :1_3:GoDeeper:
|>>/recurse> IN: ( IS ( "Y" ) )
|>>/recurse> MATCH (COK): ( IS
|>>/recurse> VALUE: ((RPis,1),[])

****** \ |>>/recurse has returned (RPis,1)                                                                            :1_3:GoDeeper:
|>| calling $>>> IN: ( IS ( "Y" ) )
|>| calling $>>> MATCH (COK): ( IS
|>| calling $>>> VALUE: ((RPis,1),[])

***** \ |>| calling $>> has returned (RPis,1)                                                                          :1_3:GoDeeper:
***** / |>>/recurse                                                                                                    :1_3:GoDeeper:
****** / |>>/recurse                                                                                                   :1_3:Other "Y":
|>>/recurse> IN: "Y" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected "Y"
|>>/recurse> expecting (

****** / |>>/base                                                                                                      :1_3:Other "Y":
******* / slMultiTerm                                                                                                 :1_3:Other "Y":
******** / someSL                                                                                                    :1_3:Other "Y":
someSL> IN: "Y" ) )
someSL> MATCH (COK): "Y"
someSL> VALUE: ((["Y"],0),[])

******** \ someSL has returned (["Y"],0)                                                                            :1_2:UnDeeper:
slMultiTerm> IN: "Y" ) )
slMultiTerm> MATCH (COK): "Y"
slMultiTerm> VALUE: ((["Y"],0),[])

******* \ slMultiTerm has returned (["Y"],0)                                                                         :1_2:UnDeeper:
******* > |>>/base got ["Y"]                                                                                         :1_2:UnDeeper:
|>>/base> IN: "Y" ) )
|>>/base> MATCH (COK): "Y"
|>>/base> VALUE: ((["Y"],0),[])

****** \ |>>/base has returned (["Y"],0)                                                                              :1_2:UnDeeper:
|>>/recurse> IN: ( "Y" ) )
|>>/recurse> MATCH (COK): ( "Y"
|>>/recurse> VALUE: ((["Y"],1),[])

***** \ |>>/recurse has returned (["Y"],1)                                                                             :1_2:UnDeeper:
RPConstraint> IN: "X" ( IS ( "Y" ) )
RPConstraint> MATCH (COK): "X" ( IS ( "Y"
RPConstraint> VALUE: ((RPConstraint ["X"] RPis ["Y"],2),[])

**** \ RPConstraint has returned (RPConstraint ["X"] RPis ["Y"],2)                                                      :1_2:UnDeeper:
slRelPred> IN: "X" ( IS ( "Y" ) )
slRelPred> MATCH (COK): "X" ( IS ( "Y"
slRelPred> VALUE: ((RPConstraint ["X"] RPis ["Y"],2),[])

*** \ slRelPred has returned (RPConstraint ["X"] RPis ["Y"],2)                                                           :1_2:UnDeeper:
*** / undeepers                                                                                                          :1_2:UnDeeper:
**** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                           :1_2:UnDeeper:
**** > sameLine: success!                                                                                          :EOF:
undeepers> IN: ) )
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

*** \ undeepers has returned ()                                                                                     :EOF:
pRelPred> IN: "X" ( IS ( "Y" ) )
pRelPred> MATCH (COK): "X" ( IS ( "Y" ) )
pRelPred> VALUE: (RPConstraint ["X"] RPis ["Y"],[])

** \ pRelPred has returned RPConstraint ["X"] RPis ["Y"]                                                             :EOF:
"X"
    ( IS ( "Y" ) )
** / pBSR                                                                                                              :1_1:Other "X":
*** / ppp inner                                                                                                       :1_1:Other "X":
**** / expression                                                                                                    :1_1:Other "X":
***** / labelPrefix                                                                                                 :1_1:Other "X":
labelPrefix> IN: "X" ( IS ( "Y" ) )
labelPrefix> MATCH (COK): "X"
labelPrefix> VALUE: ("X",[])

***** \ labelPrefix has returned "X"                                                                                 :1_2:GoDeeper:
***** / term p                                                                                                       :1_2:GoDeeper:
****** / term p/notLabelTerm                                                                                        :1_2:GoDeeper:
******* / term p/2:someIndentation expr p                                                                          :1_2:GoDeeper:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( IS ( "Y" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Is:
********* / manyIndentation/leaf?                                                                                 :1_2:Is:
********** / expression                                                                                          :1_2:Is:
*********** / labelPrefix                                                                                       :1_2:Is:
labelPrefix> IN: IS ( "Y" ) )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=2:
labelPrefix> unexpected IS
labelPrefix> expecting Other text

*********** / term p                                                                                            :1_2:Is:
************ / term p/notLabelTerm                                                                             :1_2:Is:
************* / term p/2:someIndentation expr p                                                               :1_2:Is:
************** / someIndentation                                                                             :1_2:Is:
*************** / myindented: consuming GoDeeper                                                            :1_2:Is:
myindented: consuming GoDeeper> IN: IS ( "Y" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=2:
myindented: consuming GoDeeper> unexpected IS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IS ( "Y" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=2:
someIndentation> unexpected IS
someIndentation> expecting (

term p/2:someIndentation expr p> IN: IS ( "Y" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=2:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting (

************* / term p/3:plain p                                                                              :1_2:Is:
************** / pRelPred                                                                                    :1_2:Is:
*************** / slRelPred                                                                                 :1_2:Is:
**************** / nested simpleHorn                                                                       :1_2:Is:
***************** > |^|                                                                                   :1_2:Is:
***************** / $*|                                                                                   :1_2:Is:
****************** / slMultiTerm                                                                         :1_2:Is:
******************* / someSL                                                                            :1_2:Is:
******************** / pNumAsText                                                                      :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( "Y" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( "Y" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected IS
$*|> expecting other text or number

nested simpleHorn> IN: IS ( "Y" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=2:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting other text or number

**************** / RPConstraint                                                                            :1_2:Is:
***************** / $*|                                                                                   :1_2:Is:
****************** / slMultiTerm                                                                         :1_2:Is:
******************* / someSL                                                                            :1_2:Is:
******************** / pNumAsText                                                                      :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( "Y" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( "Y" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected IS
$*|> expecting other text or number

RPConstraint> IN: IS ( "Y" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=2:
RPConstraint> unexpected IS
RPConstraint> expecting other text or number

**************** / RPBoolStructR                                                                           :1_2:Is:
***************** / $*|                                                                                   :1_2:Is:
****************** / slMultiTerm                                                                         :1_2:Is:
******************* / someSL                                                                            :1_2:Is:
******************** / pNumAsText                                                                      :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( "Y" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( "Y" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected IS
$*|> expecting other text or number

RPBoolStructR> IN: IS ( "Y" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=2:
RPBoolStructR> unexpected IS
RPBoolStructR> expecting other text or number

**************** / RPMT                                                                                    :1_2:Is:
***************** / $*|                                                                                   :1_2:Is:
****************** / slAKA                                                                               :1_2:Is:
******************* / $*|                                                                               :1_2:Is:
******************** / slAKA base                                                                      :1_2:Is:
********************* / slMultiTerm                                                                   :1_2:Is:
********************** / someSL                                                                      :1_2:Is:
*********************** / pNumAsText                                                                :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( "Y" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( "Y" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

slAKA base> IN: IS ( "Y" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=2:
slAKA base> unexpected IS
slAKA base> expecting other text or number

$*|> IN: IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected IS
$*|> expecting other text or number

slAKA> IN: IS ( "Y" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=2:
slAKA> unexpected IS
slAKA> expecting other text or number

$*|> IN: IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected IS
$*|> expecting other text or number

RPMT> IN: IS ( "Y" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=2:
RPMT> unexpected IS
RPMT> expecting other text or number

slRelPred> IN: IS ( "Y" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=2:
slRelPred> unexpected IS
slRelPred> expecting other text or number

pRelPred> IN: IS ( "Y" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=2:
pRelPred> unexpected IS
pRelPred> expecting other text or number

term p/3:plain p> IN: IS ( "Y" ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=2:
term p/3:plain p> unexpected IS
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: IS ( "Y" ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=2:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting ( or term

term p> IN: IS ( "Y" ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=2:
term p> unexpected IS
term p> expecting ( or term

expression> IN: IS ( "Y" ) )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=2:
expression> unexpected IS
expression> expecting expression

manyIndentation/leaf?> IN: IS ( "Y" ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=2:
manyIndentation/leaf?> unexpected IS
manyIndentation/leaf?> expecting expression

********* / manyIndentation/deeper; calling someIndentation                                                       :1_2:Is:
********** / someIndentation                                                                                     :1_2:Is:
*********** / myindented: consuming GoDeeper                                                                    :1_2:Is:
myindented: consuming GoDeeper> IN: IS ( "Y" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=2:
myindented: consuming GoDeeper> unexpected IS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IS ( "Y" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=2:
someIndentation> unexpected IS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: IS ( "Y" ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=2:
manyIndentation/deeper; calling someIndentation> unexpected IS
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( IS ( "Y" ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=2:
someIndentation> unexpected IS
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( IS ( "Y" ) )
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=2:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting ( or expression

******* / term p/3:plain p                                                                                         :1_2:GoDeeper:
******** / pRelPred                                                                                               :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( "Y" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( "Y" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( IS ( "Y" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( "Y" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( "Y" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( IS ( "Y" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( "Y" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( "Y" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( IS ( "Y" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( "Y" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( "Y" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( IS ( "Y" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( IS ( "Y" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( IS ( "Y" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( IS ( "Y" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( IS ( "Y" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( IS ( "Y" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( IS ( "Y" ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=1:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( IS ( "Y" ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=2:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting ( or expression

term p> IN: ( IS ( "Y" ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=2:
term p> unexpected IS
term p> expecting ( or expression

expression> IN: "X" ( IS ( "Y" ) )
expression> MATCH (CERR): "X"
expression> ERROR:
expression> offset=2:
expression> unexpected IS
expression> expecting (, NOT, or expression

ppp inner> IN: "X" ( IS ( "Y" ) )
ppp inner> MATCH (CERR): "X"
ppp inner> ERROR:
ppp inner> offset=2:
ppp inner> unexpected IS
ppp inner> expecting (, NOT, or expression

*** / withPrePost                                                                                                     :1_1:Other "X":
**** > |<* starting                                                                                                  :1_1:Other "X":
**** / $*|                                                                                                           :1_1:Other "X":
***** / pre part                                                                                                    :1_1:Other "X":
****** / aboveNextLineKeyword                                                                                       :1_2:GoDeeper:
******* / expectUnDeepers                                                                                          :1_2:GoDeeper:
******** / pNumAsText                                                                                             :1_2:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                              :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( IS ( "Y" ) )
expectUnDeepers> MATCH (CERR): (
expectUnDeepers> ERROR:
expectUnDeepers> offset=2:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( IS ( "Y" ) )
aboveNextLineKeyword> MATCH (CERR): (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=2:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                              :1_2:GoDeeper:
****** / aboveNextLineKeyword                                                                                        :1_2:Is:
******* / expectUnDeepers                                                                                           :1_2:Is:
******** / pNumAsText                                                                                              :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: IS ( "Y" ) )
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=2:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: IS ( "Y" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=2:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                               :1_2:Is:
pre part> IN: "X" ( IS ( "Y" ) )
pre part> MATCH (CERR): "X"
pre part> ERROR:
pre part> offset=2:
pre part> unexpected IS
pre part> expecting (, ), Other text, or other text or number

$*|> IN: "X" ( IS ( "Y" ) )
$*|> MATCH (CERR): "X"
$*|> ERROR:
$*|> offset=2:
$*|> unexpected IS
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: "X" ( IS ( "Y" ) )
withPrePost> MATCH (CERR): "X"
withPrePost> ERROR:
withPrePost> offset=2:
withPrePost> unexpected IS
withPrePost> expecting (, ), Other text, or other text or number

*** / withPreOnly                                                                                                     :1_1:Other "X":
**** / $*|                                                                                                           :1_1:Other "X":
***** / pre part                                                                                                    :1_1:Other "X":
****** / aboveNextLineKeyword                                                                                       :1_2:GoDeeper:
******* / expectUnDeepers                                                                                          :1_2:GoDeeper:
******** / pNumAsText                                                                                             :1_2:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                              :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( IS ( "Y" ) )
expectUnDeepers> MATCH (CERR): (
expectUnDeepers> ERROR:
expectUnDeepers> offset=2:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( IS ( "Y" ) )
aboveNextLineKeyword> MATCH (CERR): (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=2:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                              :1_2:GoDeeper:
****** / aboveNextLineKeyword                                                                                        :1_2:Is:
******* / expectUnDeepers                                                                                           :1_2:Is:
******** / pNumAsText                                                                                              :1_2:Is:
pNumAsText> IN: IS ( "Y" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: IS ( "Y" ) )
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=2:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: IS ( "Y" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=2:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                               :1_2:Is:
pre part> IN: "X" ( IS ( "Y" ) )
pre part> MATCH (CERR): "X"
pre part> ERROR:
pre part> offset=2:
pre part> unexpected IS
pre part> expecting (, ), Other text, or other text or number

$*|> IN: "X" ( IS ( "Y" ) )
$*|> MATCH (CERR): "X"
$*|> ERROR:
$*|> offset=2:
$*|> unexpected IS
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: "X" ( IS ( "Y" ) )
withPreOnly> MATCH (CERR): "X"
withPreOnly> ERROR:
withPreOnly> offset=2:
withPreOnly> unexpected IS
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: "X" ( IS ( "Y" ) )
pBSR> MATCH (CERR): "X"
pBSR> ERROR:
pBSR> offset=2:
pBSR> unexpected IS
pBSR> expecting (, ), NOT, Other text, expression, or other text or number


revised parser
  horn-0-1
  horn-0-1 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) revised parser horn-0-1
       expected: [(Leaf (RPConstraint ["X"] RPis ["Y"]),[])]
       but parsing failed with error:
       1:2:
       unexpected IS
       expecting (, ), NOT, Other text, expression, or other text or number
       X    ✳ IS Y   
       

  To rerun use: --match "/revised parser/horn-0-1/"

Randomized with seed 1603360649

Finished in 0.0054 seconds
2 examples, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

