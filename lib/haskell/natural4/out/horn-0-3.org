* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/revised parser/horn-0-3/")

* Tokens
"X1"
    ( "X2"
        ( IS ( "Y" ) )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pBSR                                                                                                              :1_1:Other "X1":
*** / ppp inner                                                                                                       :1_1:Other "X1":
**** / expression                                                                                                    :1_1:Other "X1":
***** / labelPrefix                                                                                                 :1_1:Other "X1":
labelPrefix> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
labelPrefix> MATCH (COK): "X1"
labelPrefix> VALUE: ("X1",[])

***** \ labelPrefix has returned "X1"                                                                                :1_2:GoDeeper:
***** / term p                                                                                                       :1_2:GoDeeper:
****** / term p/notLabelTerm                                                                                        :1_2:GoDeeper:
******* / term p/2:someIndentation expr p                                                                          :1_2:GoDeeper:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "X2" ( IS ( "Y" ) ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "X2":
********* / manyIndentation/leaf?                                                                                 :1_2:Other "X2":
********** / expression                                                                                          :1_2:Other "X2":
*********** / labelPrefix                                                                                       :1_2:Other "X2":
labelPrefix> IN: "X2" ( IS ( "Y" ) ) )
labelPrefix> MATCH (COK): "X2"
labelPrefix> VALUE: ("X2",[])

*********** \ labelPrefix has returned "X2"                                                                      :1_3:GoDeeper:
*********** / term p                                                                                             :1_3:GoDeeper:
************ / term p/notLabelTerm                                                                              :1_3:GoDeeper:
************* / term p/2:someIndentation expr p                                                                :1_3:GoDeeper:
************** / someIndentation                                                                              :1_3:GoDeeper:
*************** / myindented: consuming GoDeeper                                                             :1_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( IS ( "Y" ) ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                        :1_3:Is:
*************** / manyIndentation/leaf?                                                                       :1_3:Is:
**************** / expression                                                                                :1_3:Is:
***************** / labelPrefix                                                                             :1_3:Is:
labelPrefix> IN: IS ( "Y" ) ) )
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected IS
labelPrefix> expecting Other text

***************** / term p                                                                                  :1_3:Is:
****************** / term p/notLabelTerm                                                                   :1_3:Is:
******************* / term p/2:someIndentation expr p                                                     :1_3:Is:
******************** / someIndentation                                                                   :1_3:Is:
********************* / myindented: consuming GoDeeper                                                  :1_3:Is:
myindented: consuming GoDeeper> IN: IS ( "Y" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected IS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IS ( "Y" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected IS
someIndentation> expecting (

term p/2:someIndentation expr p> IN: IS ( "Y" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=4:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting (

******************* / term p/3:plain p                                                                    :1_3:Is:
******************** / pRelPred                                                                          :1_3:Is:
********************* / slRelPred                                                                       :1_3:Is:
********************** / nested simpleHorn                                                             :1_3:Is:
*********************** > |^|                                                                         :1_3:Is:
*********************** / $*|                                                                         :1_3:Is:
************************ / slMultiTerm                                                               :1_3:Is:
************************* / someSL                                                                  :1_3:Is:
************************** / pNumAsText                                                            :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IS
$*|> expecting other text or number

nested simpleHorn> IN: IS ( "Y" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected IS
nested simpleHorn> expecting other text or number

********************** / RPConstraint                                                                  :1_3:Is:
*********************** / $*|                                                                         :1_3:Is:
************************ / slMultiTerm                                                               :1_3:Is:
************************* / someSL                                                                  :1_3:Is:
************************** / pNumAsText                                                            :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IS
$*|> expecting other text or number

RPConstraint> IN: IS ( "Y" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected IS
RPConstraint> expecting other text or number

********************** / RPBoolStructR                                                                 :1_3:Is:
*********************** / $*|                                                                         :1_3:Is:
************************ / slMultiTerm                                                               :1_3:Is:
************************* / someSL                                                                  :1_3:Is:
************************** / pNumAsText                                                            :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

$*|> IN: IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IS
$*|> expecting other text or number

RPBoolStructR> IN: IS ( "Y" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected IS
RPBoolStructR> expecting other text or number

********************** / RPMT                                                                          :1_3:Is:
*********************** / $*|                                                                         :1_3:Is:
************************ / slAKA                                                                     :1_3:Is:
************************* / $*|                                                                     :1_3:Is:
************************** / slAKA base                                                            :1_3:Is:
*************************** / slMultiTerm                                                         :1_3:Is:
**************************** / someSL                                                            :1_3:Is:
***************************** / pNumAsText                                                      :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

someSL> IN: IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected IS
someSL> expecting other text or number

slMultiTerm> IN: IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected IS
slMultiTerm> expecting other text or number

slAKA base> IN: IS ( "Y" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected IS
slAKA base> expecting other text or number

$*|> IN: IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IS
$*|> expecting other text or number

slAKA> IN: IS ( "Y" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected IS
slAKA> expecting other text or number

$*|> IN: IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IS
$*|> expecting other text or number

RPMT> IN: IS ( "Y" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected IS
RPMT> expecting other text or number

slRelPred> IN: IS ( "Y" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected IS
slRelPred> expecting other text or number

pRelPred> IN: IS ( "Y" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected IS
pRelPred> expecting other text or number

term p/3:plain p> IN: IS ( "Y" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected IS
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: IS ( "Y" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=4:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting ( or term

term p> IN: IS ( "Y" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=4:
term p> unexpected IS
term p> expecting ( or term

expression> IN: IS ( "Y" ) ) )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=4:
expression> unexpected IS
expression> expecting expression

manyIndentation/leaf?> IN: IS ( "Y" ) ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected IS
manyIndentation/leaf?> expecting expression

*************** / manyIndentation/deeper; calling someIndentation                                             :1_3:Is:
**************** / someIndentation                                                                           :1_3:Is:
***************** / myindented: consuming GoDeeper                                                          :1_3:Is:
myindented: consuming GoDeeper> IN: IS ( "Y" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected IS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: IS ( "Y" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected IS
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: IS ( "Y" ) ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected IS
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( IS ( "Y" ) ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected IS
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( IS ( "Y" ) ) )
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=4:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting ( or expression

************* / term p/3:plain p                                                                               :1_3:GoDeeper:
************** / pRelPred                                                                                     :1_3:GoDeeper:
*************** / slRelPred                                                                                  :1_3:GoDeeper:
**************** / nested simpleHorn                                                                        :1_3:GoDeeper:
***************** > |^|                                                                                    :1_3:GoDeeper:
***************** / $*|                                                                                    :1_3:GoDeeper:
****************** / slMultiTerm                                                                          :1_3:GoDeeper:
******************* / someSL                                                                             :1_3:GoDeeper:
******************** / pNumAsText                                                                       :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( IS ( "Y" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=3:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

**************** / RPConstraint                                                                             :1_3:GoDeeper:
***************** / $*|                                                                                    :1_3:GoDeeper:
****************** / slMultiTerm                                                                          :1_3:GoDeeper:
******************* / someSL                                                                             :1_3:GoDeeper:
******************** / pNumAsText                                                                       :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( IS ( "Y" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=3:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

**************** / RPBoolStructR                                                                            :1_3:GoDeeper:
***************** / $*|                                                                                    :1_3:GoDeeper:
****************** / slMultiTerm                                                                          :1_3:GoDeeper:
******************* / someSL                                                                             :1_3:GoDeeper:
******************** / pNumAsText                                                                       :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( IS ( "Y" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=3:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

**************** / RPMT                                                                                     :1_3:GoDeeper:
***************** / $*|                                                                                    :1_3:GoDeeper:
****************** / slAKA                                                                                :1_3:GoDeeper:
******************* / $*|                                                                                :1_3:GoDeeper:
******************** / slAKA base                                                                       :1_3:GoDeeper:
********************* / slMultiTerm                                                                    :1_3:GoDeeper:
********************** / someSL                                                                       :1_3:GoDeeper:
*********************** / pNumAsText                                                                 :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=3:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=3:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( IS ( "Y" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=3:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( IS ( "Y" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=3:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=3:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( IS ( "Y" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=3:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( IS ( "Y" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=3:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( IS ( "Y" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=3:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( IS ( "Y" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=3:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( IS ( "Y" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=4:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting ( or expression

term p> IN: ( IS ( "Y" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=4:
term p> unexpected IS
term p> expecting ( or expression

expression> IN: "X2" ( IS ( "Y" ) ) )
expression> MATCH (CERR): "X2"
expression> ERROR:
expression> offset=4:
expression> unexpected IS
expression> expecting (, NOT, or expression

manyIndentation/leaf?> IN: "X2" ( IS ( "Y" ) ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected IS
manyIndentation/leaf?> expecting (, NOT, or expression

********* / manyIndentation/deeper; calling someIndentation                                                       :1_2:Other "X2":
********** / someIndentation                                                                                     :1_2:Other "X2":
*********** / myindented: consuming GoDeeper                                                                    :1_2:Other "X2":
myindented: consuming GoDeeper> IN: "X2" ( IS ( "Y" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=2:
myindented: consuming GoDeeper> unexpected "X2"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "X2" ( IS ( "Y" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=2:
someIndentation> unexpected "X2"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "X2" ( IS ( "Y" ) ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=2:
manyIndentation/deeper; calling someIndentation> unexpected "X2"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "X2" ( IS ( "Y" ) ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected IS
someIndentation> expecting (, NOT, or expression

term p/2:someIndentation expr p> IN: ( "X2" ( IS ( "Y" ) ) )
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=4:
term p/2:someIndentation expr p> unexpected IS
term p/2:someIndentation expr p> expecting (, NOT, or expression

******* / term p/3:plain p                                                                                         :1_2:GoDeeper:
******** / pRelPred                                                                                               :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( "X2" ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "X2" ( IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "X2" ( IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "X2" ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "X2" ( IS ( "Y" ) ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( "X2" ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "X2" ( IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "X2" ( IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "X2" ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "X2" ( IS ( "Y" ) ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( "X2" ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "X2" ( IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "X2" ( IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "X2" ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "X2" ( IS ( "Y" ) ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( "X2" ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "X2" ( IS ( "Y" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "X2" ( IS ( "Y" ) ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "X2" ( IS ( "Y" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "X2" ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "X2" ( IS ( "Y" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "X2" ( IS ( "Y" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "X2" ( IS ( "Y" ) ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "X2" ( IS ( "Y" ) ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "X2" ( IS ( "Y" ) ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "X2" ( IS ( "Y" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=1:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "X2" ( IS ( "Y" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=4:
term p/notLabelTerm> unexpected IS
term p/notLabelTerm> expecting (, NOT, or expression

term p> IN: ( "X2" ( IS ( "Y" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=4:
term p> unexpected IS
term p> expecting (, NOT, or expression

expression> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
expression> MATCH (CERR): "X1"
expression> ERROR:
expression> offset=4:
expression> unexpected IS
expression> expecting (, NOT, or expression

ppp inner> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
ppp inner> MATCH (CERR): "X1"
ppp inner> ERROR:
ppp inner> offset=4:
ppp inner> unexpected IS
ppp inner> expecting (, NOT, or expression

*** / withPrePost                                                                                                     :1_1:Other "X1":
**** > |<* starting                                                                                                  :1_1:Other "X1":
**** / $*|                                                                                                           :1_1:Other "X1":
***** / pre part                                                                                                    :1_1:Other "X1":
****** / aboveNextLineKeyword                                                                                       :1_2:GoDeeper:
******* / expectUnDeepers                                                                                          :1_2:GoDeeper:
******** / pNumAsText                                                                                             :1_2:GoDeeper:
pNumAsText> IN: ( "X2" ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                               :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                                :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( "X2" ( IS ( "Y" ) ) )
expectUnDeepers> MATCH (CERR): ( "X2" (
expectUnDeepers> ERROR:
expectUnDeepers> offset=4:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( "X2" ( IS ( "Y" ) ) )
aboveNextLineKeyword> MATCH (CERR): ( "X2" (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=4:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                              :1_2:GoDeeper:
****** / aboveNextLineKeyword                                                                                        :1_2:Other "X2":
******* / expectUnDeepers                                                                                           :1_2:Other "X2":
******** / pNumAsText                                                                                               :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                                :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: "X2" ( IS ( "Y" ) ) )
expectUnDeepers> MATCH (CERR): "X2" (
expectUnDeepers> ERROR:
expectUnDeepers> offset=4:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: "X2" ( IS ( "Y" ) ) )
aboveNextLineKeyword> MATCH (CERR): "X2" (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=4:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                               :1_2:Other "X2":
****** / aboveNextLineKeyword                                                                                         :1_3:GoDeeper:
******* / expectUnDeepers                                                                                            :1_3:GoDeeper:
******** / pNumAsText                                                                                               :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                                :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( IS ( "Y" ) ) )
expectUnDeepers> MATCH (CERR): (
expectUnDeepers> ERROR:
expectUnDeepers> offset=4:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( IS ( "Y" ) ) )
aboveNextLineKeyword> MATCH (CERR): (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=4:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                                :1_3:GoDeeper:
****** / aboveNextLineKeyword                                                                                          :1_3:Is:
******* / expectUnDeepers                                                                                             :1_3:Is:
******** / pNumAsText                                                                                                :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: IS ( "Y" ) ) )
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=4:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: IS ( "Y" ) ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=4:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                                 :1_3:Is:
pre part> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
pre part> MATCH (CERR): "X1"
pre part> ERROR:
pre part> offset=4:
pre part> unexpected IS
pre part> expecting (, ), Other text, or other text or number

$*|> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
$*|> MATCH (CERR): "X1"
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IS
$*|> expecting (, ), Other text, or other text or number

withPrePost> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
withPrePost> MATCH (CERR): "X1"
withPrePost> ERROR:
withPrePost> offset=4:
withPrePost> unexpected IS
withPrePost> expecting (, ), Other text, or other text or number

*** / withPreOnly                                                                                                     :1_1:Other "X1":
**** / $*|                                                                                                           :1_1:Other "X1":
***** / pre part                                                                                                    :1_1:Other "X1":
****** / aboveNextLineKeyword                                                                                       :1_2:GoDeeper:
******* / expectUnDeepers                                                                                          :1_2:GoDeeper:
******** / pNumAsText                                                                                             :1_2:GoDeeper:
pNumAsText> IN: ( "X2" ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                               :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                                :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( "X2" ( IS ( "Y" ) ) )
expectUnDeepers> MATCH (CERR): ( "X2" (
expectUnDeepers> ERROR:
expectUnDeepers> offset=4:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( "X2" ( IS ( "Y" ) ) )
aboveNextLineKeyword> MATCH (CERR): ( "X2" (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=4:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                              :1_2:GoDeeper:
****** / aboveNextLineKeyword                                                                                        :1_2:Other "X2":
******* / expectUnDeepers                                                                                           :1_2:Other "X2":
******** / pNumAsText                                                                                               :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                                :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: "X2" ( IS ( "Y" ) ) )
expectUnDeepers> MATCH (CERR): "X2" (
expectUnDeepers> ERROR:
expectUnDeepers> offset=4:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: "X2" ( IS ( "Y" ) ) )
aboveNextLineKeyword> MATCH (CERR): "X2" (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=4:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                               :1_2:Other "X2":
****** / aboveNextLineKeyword                                                                                         :1_3:GoDeeper:
******* / expectUnDeepers                                                                                            :1_3:GoDeeper:
******** / pNumAsText                                                                                               :1_3:GoDeeper:
pNumAsText> IN: ( IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=3:
pNumAsText> unexpected (
pNumAsText> expecting number

******** / pNumAsText                                                                                                :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: ( IS ( "Y" ) ) )
expectUnDeepers> MATCH (CERR): (
expectUnDeepers> ERROR:
expectUnDeepers> offset=4:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: ( IS ( "Y" ) ) )
aboveNextLineKeyword> MATCH (CERR): (
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=4:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                                :1_3:GoDeeper:
****** / aboveNextLineKeyword                                                                                          :1_3:Is:
******* / expectUnDeepers                                                                                             :1_3:Is:
******** / pNumAsText                                                                                                :1_3:Is:
pNumAsText> IN: IS ( "Y" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IS
pNumAsText> expecting number

expectUnDeepers> IN: IS ( "Y" ) ) )
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=4:
expectUnDeepers> unexpected IS
expectUnDeepers> expecting (, ), or other text or number

aboveNextLineKeyword> IN: IS ( "Y" ) ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=4:
aboveNextLineKeyword> unexpected IS
aboveNextLineKeyword> expecting (, ), or other text or number

****** > /*= lookAhead failed, delegating to plain /+=                                                                 :1_3:Is:
pre part> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
pre part> MATCH (CERR): "X1"
pre part> ERROR:
pre part> offset=4:
pre part> unexpected IS
pre part> expecting (, ), Other text, or other text or number

$*|> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
$*|> MATCH (CERR): "X1"
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IS
$*|> expecting (, ), Other text, or other text or number

withPreOnly> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
withPreOnly> MATCH (CERR): "X1"
withPreOnly> ERROR:
withPreOnly> offset=4:
withPreOnly> unexpected IS
withPreOnly> expecting (, ), Other text, or other text or number

pBSR> IN: "X1" ( "X2" ( IS ( "Y" ) ) )
pBSR> MATCH (CERR): "X1"
pBSR> ERROR:
pBSR> offset=4:
pBSR> unexpected IS
pBSR> expecting (, ), NOT, Other text, expression, or other text or number


revised parser
  horn-0-3 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) revised parser horn-0-3
       expected: [(Leaf (RPConstraint ["X1","X2"] RPis ["Y"]),[])]
       but parsing failed with error:
       1:3:
       unexpected IS
       expecting (, ), NOT, Other text, expression, or other text or number
       X1   X2   ✳ IS Y   
       

  To rerun use: --match "/revised parser/horn-0-3/"

Randomized with seed 1608888556

Finished in 0.0062 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

