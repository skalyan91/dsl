* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/revised parser/horn-2/")

* Tokens
[Decide,GoDeeper,Other "X",GoDeeper,Is,GoDeeper,Other "Y",UnDeeper,UnDeeper,UnDeeper,When,GoDeeper,Other "Z",GoDeeper,Is,GoDeeper,Other "Q",UnDeeper,UnDeeper,UnDeeper,And,GoDeeper,Other "P",GoDeeper,TokGT,GoDeeper,Other "NP",UnDeeper,UnDeeper,UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Decide:
*** / pRegRule                                                                                                        :1_1:Decide:
**** / pRuleLabel                                                                                                    :1_1:Decide:
***** / $>|                                                                                                         :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Decide
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :1_1:Decide:
***** / someDeep                                                                                                    :1_1:Decide:
****** / someDeep first part calls base directly                                                                   :1_1:Decide:
someDeep first part calls base directly> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected Decide
someDeep first part calls base directly> expecting Other text

someDeep> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected Decide
someDeep> expecting Other text

pRegRuleSugary> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected Decide
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Decide:
***** / permutationsReg                                                                                             :1_1:Decide:
****** / regulative permutation with deontic-temporal                                                              :1_1:Decide:
******* / WHERE                                                                                                   :1_1:Decide:
WHERE> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected Decide
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :1_1:Decide:
******** / $>|                                                                                                   :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Having

preambleParamText:[Having]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected Decide
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :1_1:Decide:
******** / $>|                                                                                                   :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Given

preambleParamText:[Given]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Decide
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :1_1:Decide:
******** / $>|                                                                                                   :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Upon

preambleParamText:[Upon]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Decide
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :1_1:Decide:
preambleBoolStructR [Unless]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected Decide
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :1_1:Decide:
preambleBoolStructR [When,If]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected Decide
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :1_1:Decide:
******** / $>|                                                                                                   :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting May, Must, or Shant

pDT> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected Decide
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Decide:
pActor [Every,Party,TokAll]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=0:
pActor [Every,Party,TokAll]> unexpected Decide
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDoAction/Do                                                                                            :1_1:Decide:
pDoAction/Do> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=0:
pDoAction/Do> unexpected Decide
pDoAction/Do> expecting Do

regulative permutation with deontic-temporal> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=0:
regulative permutation with deontic-temporal> unexpected Decide
regulative permutation with deontic-temporal> expecting Do, Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

****** / regulative permutation with deontic-action                                                                :1_1:Decide:
******* / WHERE                                                                                                   :1_1:Decide:
WHERE> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected Decide
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :1_1:Decide:
******** / $>|                                                                                                   :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Having

preambleParamText:[Having]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected Decide
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :1_1:Decide:
******** / $>|                                                                                                   :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Given

preambleParamText:[Given]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Decide
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :1_1:Decide:
******** / $>|                                                                                                   :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Upon

preambleParamText:[Upon]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Decide
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :1_1:Decide:
preambleBoolStructR [Unless]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected Decide
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :1_1:Decide:
preambleBoolStructR [When,If]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected Decide
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :1_1:Decide:
pTemporal/eventually> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected Decide
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :1_1:Decide:
******** / $>|                                                                                                   :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected Decide
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :1_1:Decide:
pTemporal/vaguely> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected Decide
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Decide:
pActor [Every,Party,TokAll]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=0:
pActor [Every,Party,TokAll]> unexpected Decide
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDA                                                                                                     :1_1:Decide:
pDA> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=0:
pDA> unexpected Decide
pDA> expecting May, Must, or Shant

regulative permutation with deontic-action> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=0:
regulative permutation with deontic-action> unexpected Decide
regulative permutation with deontic-action> expecting After, Before, By, Eventually, Every, Given, Having, If, May, Must, On, Other text, Party, Shant, TokAll, Unless, Upon, When, or Where

permutationsReg> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=0:
permutationsReg> unexpected Decide
permutationsReg> expecting After, Before, By, Do, Eventually, Every, Given, Having, If, May, Must, On, Other text, Party, Shant, TokAll, Unless, Upon, When, or Where

pRegRuleNormal> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=0:
pRegRuleNormal> unexpected Decide
pRegRuleNormal> expecting After, Before, By, Do, Eventually, Every, Given, Having, If, May, Must, On, Other text, Party, Shant, TokAll, Unless, Upon, When, or Where

pRegRule> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=0:
pRegRule> unexpected Decide
pRegRule> expecting After, Before, Breach, By, Do, Eventually, Every, Fulfilled, Given, Having, If, May, Must, On, Other text, Party, RuleMarker 1 "\167", Shant, TokAll, Unless, Upon, When, or Where

*** / pTypeDefinition                                                                                                 :1_1:Decide:
**** / pRuleLabel                                                                                                    :1_1:Decide:
***** / $>|                                                                                                         :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Decide
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pHornlike/uponLimb                                                                                            :1_1:Decide:
***** / preambleParamText:[Upon]                                                                                    :1_1:Decide:
****** / $>|                                                                                                       :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Upon

preambleParamText:[Upon]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Decide
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected Decide
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :1_1:Decide:
***** / preambleParamText:[Given]                                                                                   :1_1:Decide:
****** / $>|                                                                                                       :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Given

preambleParamText:[Given]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Decide
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected Decide
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected Decide
pTypeDefinition> expecting Define, Given, RuleMarker 1 "\167", or Upon

*** / pConstitutiveRule                                                                                               :1_1:Decide:
**** / pRuleLabel                                                                                                    :1_1:Decide:
***** / $>|                                                                                                         :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Decide
pRuleLabel> expecting RuleMarker 1 "\167"

**** / calling myindented pNameParens                                                                                :1_1:Decide:
***** / manyIndentation/leaf?                                                                                       :1_1:Decide:
****** / pMultiTermAka                                                                                             :1_1:Decide:
******* / pAKA                                                                                                    :1_1:Decide:
******** / slAKA                                                                                                 :1_1:Decide:
********* / $*|                                                                                                 :1_1:Decide:
********** / slAKA base                                                                                        :1_1:Decide:
*********** / slMultiTerm                                                                                     :1_1:Decide:
************ / someSL                                                                                        :1_1:Decide:
************* / pNumAsText                                                                                  :1_1:Decide:
pNumAsText> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Decide
pNumAsText> expecting number

someSL> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Decide
someSL> expecting other text or number

slMultiTerm> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Decide
slMultiTerm> expecting other text or number

slAKA base> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Decide
slAKA base> expecting other text or number

$*|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Decide
$*|> expecting other text or number

slAKA> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Decide
slAKA> expecting other text or number

pAKA> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected Decide
pAKA> expecting other text or number

pMultiTermAka> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected Decide
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected Decide
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Decide:
****** / someIndentation                                                                                           :1_1:Decide:
******* / myindented: consuming GoDeeper                                                                          :1_1:Decide:
myindented: consuming GoDeeper> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected Decide
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected Decide
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected Decide
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected Decide
calling myindented pNameParens> expecting GoDeeper or other text or number

pConstitutiveRule> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected Decide
pConstitutiveRule> expecting GoDeeper, RuleMarker 1 "\167", or other text or number

*** / pScenarioRule                                                                                                   :1_1:Decide:
**** / pRuleLabel                                                                                                    :1_1:Decide:
***** / $>|                                                                                                         :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Decide
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pExpect                                                                                                       :1_1:Decide:
pExpect> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=0:
pExpect> unexpected Decide
pExpect> expecting Expect

pScenarioRule> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected Decide
pScenarioRule> expecting Expect, Given, or RuleMarker 1 "\167"

*** / pHornlike                                                                                                       :1_1:Decide:
**** / pSrcRef                                                                                                       :1_1:Decide:
***** / pRuleLabel                                                                                                  :1_1:Decide:
****** / $>|                                                                                                       :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Decide
pRuleLabel> expecting RuleMarker 1 "\167"

pSrcRef> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Decide:
**** / pHornlike / permute                                                                                           :1_1:Decide:
***** / whenCase                                                                                                    :1_1:Decide:
****** / whenMeansIf                                                                                               :1_1:Decide:
whenMeansIf> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected Decide
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :1_1:Decide:
Otherwise> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected Decide
Otherwise> expecting Otherwise

whenCase> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected Decide
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :1_1:Decide:
****** / preambleParamText:[Upon]                                                                                  :1_1:Decide:
******* / $>|                                                                                                     :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Upon

preambleParamText:[Upon]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Decide
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected Decide
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :1_1:Decide:
****** / whenMeansIf                                                                                               :1_1:Decide:
whenMeansIf> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected Decide
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :1_1:Decide:
Otherwise> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected Decide
Otherwise> expecting Otherwise

whenCase> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected Decide
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/givenLimb                                                                                         :1_1:Decide:
****** / preambleParamText:[Given]                                                                                 :1_1:Decide:
******* / $>|                                                                                                     :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Decide
$>|> expecting Given

preambleParamText:[Given]> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Decide
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected Decide
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :1_1:Decide:
****** / whenMeansIf                                                                                               :1_1:Decide:
whenMeansIf> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected Decide
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :1_1:Decide:
Otherwise> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected Decide
Otherwise> expecting Otherwise

whenCase> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected Decide
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :1_1:Decide:
****** / $>|                                                                                                       :1_1:Decide:
$>|> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
$>|> MATCH (COK): Decide
$>|> VALUE: (Decide,[])

****** \ $>| has returned Decide                                                                                    :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "X":
|>>/recurse> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "X"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "X":
******** / slMultiTerm                                                                                             :1_2:Other "X":
********* / someSL                                                                                                :1_2:Other "X":
********** / pNumAsText                                                                                            :1_3:Is:
pNumAsText> IN: Is GoDeeper Other "Y" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
someSL> MATCH (COK): Other "X"
someSL> VALUE: ((["X"],0),[])

********* \ someSL has returned (["X"],0)                                                                          :1_3:GoDeeper:
slMultiTerm> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
slMultiTerm> MATCH (COK): Other "X"
slMultiTerm> VALUE: ((["X"],0),[])

******** \ slMultiTerm has returned (["X"],0)                                                                       :1_3:GoDeeper:
******** > |>>/base got ["X"]                                                                                       :1_3:GoDeeper:
|>>/base> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
|>>/base> MATCH (COK): Other "X"
|>>/base> VALUE: ((["X"],0),[])

******* \ |>>/base has returned (["X"],0)                                                                            :1_3:GoDeeper:
|>>/recurse> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper Other "X"
|>>/recurse> VALUE: ((["X"],1),[])

****** \ |>>/recurse has returned (["X"],1)                                                                           :1_3:GoDeeper:
****** / undeepers                                                                                                    :1_3:GoDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :1_3:GoDeeper:
undeepers> IN: GoDeeper Is GoDeeper Other "Y" UnDeeper  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=3:
undeepers> unexpected GoDeeper
undeepers> expecting UnDeeper

pHornlike/ambitious> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike/ambitious> MATCH (CERR): Decide GoDeeper Other "X"
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=3:
pHornlike/ambitious> unexpected GoDeeper
pHornlike/ambitious> expecting UnDeeper

***** / pHornlike/someStructure                                                                                     :1_1:Decide:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

optIndented> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected GoDeeper
optIndented> expecting other text or number

optIndentedTuple> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected GoDeeper
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected GoDeeper
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected GoDeeper
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

$*|> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected GoDeeper
$*|> expecting other text or number

relPredSamelineWhen> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected GoDeeper
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected GoDeeper
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:Other "X":
******** / manyIndentation/leaf?                                                                                   :1_2:Other "X":
********* / relPredNextlineWhen                                                                                   :1_2:Other "X":
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Other "X":
*********** / optIndentedTuple                                                                                  :1_2:Other "X":
************ / optIndented                                                                                     :1_2:Other "X":
************* / pRelPred                                                                                      :1_2:Other "X":
************** / slRelPred                                                                                   :1_2:Other "X":
*************** / nested simpleHorn                                                                         :1_2:Other "X":
**************** > |^|                                                                                     :1_2:Other "X":
**************** / $*|                                                                                     :1_2:Other "X":
***************** / slMultiTerm                                                                           :1_2:Other "X":
****************** / someSL                                                                              :1_2:Other "X":
******************* / pNumAsText                                                                          :1_3:Is:
pNumAsText> IN: Is GoDeeper Other "Y" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
someSL> MATCH (COK): Other "X"
someSL> VALUE: ((["X"],0),[])

****************** \ someSL has returned (["X"],0)                                                        :1_3:GoDeeper:
slMultiTerm> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
slMultiTerm> MATCH (COK): Other "X"
slMultiTerm> VALUE: ((["X"],0),[])

***************** \ slMultiTerm has returned (["X"],0)                                                     :1_3:GoDeeper:
$*|> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
$*|> MATCH (COK): Other "X"
$*|> VALUE: ((["X"],0),[])

**************** \ $*| has returned (["X"],0)                                                               :1_3:GoDeeper:
**************** / |^| deeps                                                                                :1_3:GoDeeper:
|^| deeps> IN: GoDeeper Is GoDeeper Other "Y" UnDeeper  <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

**************** \ |^| deeps has returned ([()],1)                                                           :1_3:Is:
nested simpleHorn> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
nested simpleHorn> MATCH (CERR): Other "X" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Is
nested simpleHorn> expecting GoDeeper or Means

*************** / RPConstraint                                                                              :1_2:Other "X":
**************** / $*|                                                                                     :1_2:Other "X":
***************** / slMultiTerm                                                                           :1_2:Other "X":
****************** / someSL                                                                              :1_2:Other "X":
******************* / pNumAsText                                                                          :1_3:Is:
pNumAsText> IN: Is GoDeeper Other "Y" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
someSL> MATCH (COK): Other "X"
someSL> VALUE: ((["X"],0),[])

****************** \ someSL has returned (["X"],0)                                                        :1_3:GoDeeper:
slMultiTerm> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
slMultiTerm> MATCH (COK): Other "X"
slMultiTerm> VALUE: ((["X"],0),[])

***************** \ slMultiTerm has returned (["X"],0)                                                     :1_3:GoDeeper:
$*|> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
$*|> MATCH (COK): Other "X"
$*|> VALUE: ((["X"],0),[])

**************** \ $*| has returned (["X"],0)                                                               :1_3:GoDeeper:
**************** / |>| calling $>>                                                                          :1_3:GoDeeper:
***************** / |>>/recurse                                                                            :1_3:GoDeeper:
****************** / |>>/recurse                                                                           :1_3:Is:
|>>/recurse> IN: Is GoDeeper Other "Y" UnDeeper UnDeeper  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected Is
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                              :1_3:Is:
******************* > |>>/base got RPis                                                                    :1_4:GoDeeper:
|>>/base> IN: Is GoDeeper Other "Y" UnDeeper UnDeeper  <…>
|>>/base> MATCH (COK): Is
|>>/base> VALUE: ((RPis,0),[])

****************** \ |>>/base has returned (RPis,0)                                                         :1_4:GoDeeper:
|>>/recurse> IN: GoDeeper Is GoDeeper Other "Y" UnDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper Is
|>>/recurse> VALUE: ((RPis,1),[])

***************** \ |>>/recurse has returned (RPis,1)                                                        :1_4:GoDeeper:
|>| calling $>>> IN: GoDeeper Is GoDeeper Other "Y" UnDeeper  <…>
|>| calling $>>> MATCH (COK): GoDeeper Is
|>| calling $>>> VALUE: ((RPis,1),[])

**************** \ |>| calling $>> has returned (RPis,1)                                                      :1_4:GoDeeper:
**************** / |>>/recurse                                                                                :1_4:GoDeeper:
***************** / |>>/recurse                                                                               :1_4:Other "Y":
|>>/recurse> IN: Other "Y" UnDeeper UnDeeper UnDeeper Whe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Other "Y"
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                                  :1_4:Other "Y":
****************** / slMultiTerm                                                                             :1_4:Other "Y":
******************* / someSL                                                                                :1_4:Other "Y":
someSL> IN: Other "Y" UnDeeper UnDeeper UnDeeper Whe <…>
someSL> MATCH (COK): Other "Y"
someSL> VALUE: ((["Y"],0),[])

******************* \ someSL has returned (["Y"],0)                                                      :2_2:UnDeeper:
slMultiTerm> IN: Other "Y" UnDeeper UnDeeper UnDeeper Whe <…>
slMultiTerm> MATCH (COK): Other "Y"
slMultiTerm> VALUE: ((["Y"],0),[])

****************** \ slMultiTerm has returned (["Y"],0)                                                   :2_2:UnDeeper:
****************** > |>>/base got ["Y"]                                                                   :2_2:UnDeeper:
|>>/base> IN: Other "Y" UnDeeper UnDeeper UnDeeper Whe <…>
|>>/base> MATCH (COK): Other "Y"
|>>/base> VALUE: ((["Y"],0),[])

***************** \ |>>/base has returned (["Y"],0)                                                        :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Y" UnDeeper UnDeeper UnD <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Y"
|>>/recurse> VALUE: ((["Y"],1),[])

**************** \ |>>/recurse has returned (["Y"],1)                                                       :2_2:UnDeeper:
RPConstraint> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
RPConstraint> MATCH (COK): Other "X" GoDeeper Is GoDeeper Other "Y"
RPConstraint> VALUE: ((RPConstraint ["X"] RPis ["Y"],2),[])

*************** \ RPConstraint has returned (RPConstraint ["X"] RPis ["Y"],2)                                :2_2:UnDeeper:
slRelPred> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
slRelPred> MATCH (COK): Other "X" GoDeeper Is GoDeeper Other "Y"
slRelPred> VALUE: ((RPConstraint ["X"] RPis ["Y"],2),[])

************** \ slRelPred has returned (RPConstraint ["X"] RPis ["Y"],2)                                     :2_2:UnDeeper:
************** / undeepers                                                                                    :2_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                     :2_2:UnDeeper:
*************** > sameLine: success!                                                                             :2_4:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper When GoDeeper <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                        :2_4:UnDeeper:
pRelPred> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
pRelPred> MATCH (COK): Other "X" GoDeeper Is GoDeeper Other "Y" <…>
pRelPred> VALUE: (RPConstraint ["X"] RPis ["Y"],[])

************* \ pRelPred has returned RPConstraint ["X"] RPis ["Y"]                                                :2_4:UnDeeper:
************* / someIndentation                                                                                    :2_4:UnDeeper:
************** / myindented: consuming GoDeeper                                                                   :2_4:UnDeeper:
myindented: consuming GoDeeper> IN: UnDeeper When GoDeeper Other "Z" GoDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected UnDeeper
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: UnDeeper When GoDeeper Other "Z" GoDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected UnDeeper
someIndentation> expecting GoDeeper

optIndented> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
optIndented> MATCH (COK): Other "X" GoDeeper Is GoDeeper Other "Y" <…>
optIndented> VALUE: ((RPConstraint ["X"] RPis ["Y"],Nothing),[])

************ \ optIndented has returned (RPConstraint ["X"] RPis ["Y"],Nothing)                                     :2_4:UnDeeper:
optIndentedTuple> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
optIndentedTuple> MATCH (COK): Other "X" GoDeeper Is GoDeeper Other "Y" <…>
optIndentedTuple> VALUE: ((RPConstraint ["X"] RPis ["Y"],Nothing),[])

*********** \ optIndentedTuple has returned (RPConstraint ["X"] RPis ["Y"],Nothing)                                  :2_4:UnDeeper:
pRelPred optIndentedTuple whenCase> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
pRelPred optIndentedTuple whenCase> MATCH (COK): Other "X" GoDeeper Is GoDeeper Other "Y" <…>
pRelPred optIndentedTuple whenCase> VALUE: ((RPConstraint ["X"] RPis ["Y"],Nothing),[])

********** \ pRelPred optIndentedTuple whenCase has returned (RPConstraint ["X"] RPis ["Y"],Nothing)                  :2_4:UnDeeper:
relPredNextlineWhen> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
relPredNextlineWhen> MATCH (COK): Other "X" GoDeeper Is GoDeeper Other "Y" <…>
relPredNextlineWhen> VALUE: ((RPConstraint ["X"] RPis ["Y"],Nothing),[])

********* \ relPredNextlineWhen has returned (RPConstraint ["X"] RPis ["Y"],Nothing)                                   :2_4:UnDeeper:
manyIndentation/leaf?> IN: Other "X" GoDeeper Is GoDeeper Other "Y" <…>
manyIndentation/leaf?> MATCH (COK): Other "X" GoDeeper Is GoDeeper Other "Y" <…>
manyIndentation/leaf?> VALUE: ((RPConstraint ["X"] RPis ["Y"],Nothing),[])

******** \ manyIndentation/leaf? has returned (RPConstraint ["X"] RPis ["Y"],Nothing)                                   :2_4:UnDeeper:
******** / myindented: consuming UnDeeper                                                                               :2_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper When GoDeeper Other "Z" GoDeepe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******** \ myindented: consuming UnDeeper has returned UnDeeper                                                  :2_1:When:
someIndentation> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someIndentation> MATCH (COK): GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
someIndentation> VALUE: ((RPConstraint ["X"] RPis ["Y"],Nothing),[])

******* \ someIndentation has returned (RPConstraint ["X"] RPis ["Y"],Nothing)                                    :2_1:When:
manyIndentation/deeper; calling someIndentation> IN: GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
manyIndentation/deeper; calling someIndentation> MATCH (COK): GoDeeper Other "X" GoDeeper Is GoDeeper  <…>
manyIndentation/deeper; calling someIndentation> VALUE: ((RPConstraint ["X"] RPis ["Y"],Nothing),[])

****** \ manyIndentation/deeper; calling someIndentation has returned (RPConstraint ["X"] RPis ["Y"],Nothing)      :2_1:When:
pHornlike/someStructure> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike/someStructure> MATCH (COK): Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike/someStructure> VALUE: ((Just Decide,["X"],[HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Nothing}]),[])

***** \ pHornlike/someStructure has returned (Just Decide,["X"],[HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Nothing}]) :2_1:When:
***** / whenCase                                                                                                    :2_1:When:
****** / whenMeansIf                                                                                               :2_1:When:
whenMeansIf> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenMeansIf> MATCH (COK): When
whenMeansIf> VALUE: (When,[])

****** \ whenMeansIf has returned When                                                                              :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:Other "Z":
************* / manyIndentation/leaf?                                                                         :2_2:Other "Z":
************** / expression                                                                                  :2_2:Other "Z":
*************** / labelPrefix                                                                               :2_2:Other "Z":
labelPrefix> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
labelPrefix> MATCH (COK): Other "Z"
labelPrefix> VALUE: ("Z",[])

*************** \ labelPrefix has returned "Z"                                                               :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Is:
******************* / manyIndentation/leaf?                                                               :2_3:Is:
******************** / expression                                                                        :2_3:Is:
********************* / labelPrefix                                                                     :2_3:Is:
labelPrefix> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected Is
labelPrefix> expecting Other text

********************* / term p                                                                          :2_3:Is:
********************** / term p/notLabelTerm                                                           :2_3:Is:
*********************** / term p/2:someIndentation expr p                                             :2_3:Is:
************************ / someIndentation                                                           :2_3:Is:
************************* / myindented: consuming GoDeeper                                          :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper

*********************** / term p/3:plain p                                                            :2_3:Is:
************************ / pRelPred                                                                  :2_3:Is:
************************* / slRelPred                                                               :2_3:Is:
************************** / nested simpleHorn                                                     :2_3:Is:
*************************** > |^|                                                                 :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

nested simpleHorn> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected Is
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPConstraint> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected Is
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPBoolStructR> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected Is
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slAKA                                                             :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slAKA base                                                    :2_3:Is:
******************************* / slMultiTerm                                                 :2_3:Is:
******************************** / someSL                                                    :2_3:Is:
********************************* / pNumAsText                                              :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

slAKA base> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected Is
slAKA base> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

slAKA> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected Is
slAKA> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPMT> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected Is
RPMT> expecting other text or number

slRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected Is
slRelPred> expecting other text or number

pRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected Is
pRelPred> expecting other text or number

term p/3:plain p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected Is
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or term

expression> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

manyIndentation/leaf?> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting expression

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Is:
******************** / someIndentation                                                                   :2_3:Is:
********************* / myindented: consuming GoDeeper                                                  :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=14:
manyIndentation/deeper; calling someIndentation> unexpected Is
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper or expression

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or expression

expression> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expression> MATCH (CERR): Other "Z"
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting GoDeeper, MPNot, or expression

manyIndentation/leaf?> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting GoDeeper, MPNot, or expression

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:Other "Z":
************** / someIndentation                                                                             :2_2:Other "Z":
*************** / myindented: consuming GoDeeper                                                            :2_2:Other "Z":
myindented: consuming GoDeeper> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "Z"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "Z"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Other "Z"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper, MPNot, or expression

term p/2:someIndentation expr p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper, MPNot, or expression

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper, MPNot, or expression

term p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper, MPNot, or expression

expression> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

ppp inner> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected Is
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPrePost> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected Is
withPrePost> expecting GoDeeper, Other text, UnDeeper, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPreOnly> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> unexpected Is
withPreOnly> expecting GoDeeper, Other text, UnDeeper, or other text or number

pBSR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> unexpected Is
pBSR> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

****** / Otherwise                                                                                                 :2_1:When:
Otherwise> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=10:
Otherwise> unexpected When
Otherwise> expecting Otherwise

whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> unexpected Is
whenCase> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

pHornlike / permute> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike / permute> MATCH (COK): Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike / permute> VALUE: (((Just Decide,["X"],[HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Nothing}]),Nothing,Nothing,Nothing),[])

**** \ pHornlike / permute has returned ((Just Decide,["X"],[HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Nothing}]),Nothing,Nothing,Nothing) :2_1:When:
pHornlike> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike> MATCH (COK): Decide GoDeeper Other "X" GoDeeper Is Go <…>
pHornlike> VALUE: (Hornlike {name = ["X"], keyword = Decide, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []},[])

*** \ pHornlike has returned Hornlike {name = ["X"], keyword = Decide, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []} :2_1:When:
pRule> IN: Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRule> MATCH (COK): Decide GoDeeper Other "X" GoDeeper Is Go <…>
pRule> VALUE: (Hornlike {name = ["X"], keyword = Decide, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []},[])

** \ pRule has returned Hornlike {name = ["X"], keyword = Decide, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []} :2_1:When:
** / pRule                                                                                                             :2_1:When:
*** / pRegRule                                                                                                        :2_1:When:
**** / pRuleLabel                                                                                                    :2_1:When:
***** / $>|                                                                                                         :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=10:
pRuleLabel> unexpected When
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :2_1:When:
***** / someDeep                                                                                                    :2_1:When:
****** / someDeep first part calls base directly                                                                   :2_1:When:
someDeep first part calls base directly> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=10:
someDeep first part calls base directly> unexpected When
someDeep first part calls base directly> expecting Other text

someDeep> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=10:
someDeep> unexpected When
someDeep> expecting Other text

pRegRuleSugary> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=10:
pRegRuleSugary> unexpected When
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:When:
***** / permutationsReg                                                                                             :2_1:When:
****** / regulative permutation with deontic-temporal                                                              :2_1:When:
******* / WHERE                                                                                                   :2_1:When:
WHERE> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=10:
WHERE> unexpected When
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:When:
******** / $>|                                                                                                   :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Having

preambleParamText:[Having]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=10:
preambleParamText:[Having]> unexpected When
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:When:
******** / $>|                                                                                                   :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Given

preambleParamText:[Given]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=10:
preambleParamText:[Given]> unexpected When
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:When:
******** / $>|                                                                                                   :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Upon

preambleParamText:[Upon]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=10:
preambleParamText:[Upon]> unexpected When
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:When:
preambleBoolStructR [Unless]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=10:
preambleBoolStructR [Unless]> unexpected When
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:When:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :2_2:Other "Z":
*************** / manyIndentation/leaf?                                                                     :2_2:Other "Z":
**************** / expression                                                                              :2_2:Other "Z":
***************** / labelPrefix                                                                           :2_2:Other "Z":
labelPrefix> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
labelPrefix> MATCH (COK): Other "Z"
labelPrefix> VALUE: ("Z",[])

***************** \ labelPrefix has returned "Z"                                                           :2_3:GoDeeper:
***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Is:
********************* / manyIndentation/leaf?                                                           :2_3:Is:
********************** / expression                                                                    :2_3:Is:
*********************** / labelPrefix                                                                 :2_3:Is:
labelPrefix> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected Is
labelPrefix> expecting Other text

*********************** / term p                                                                      :2_3:Is:
************************ / term p/notLabelTerm                                                       :2_3:Is:
************************* / term p/2:someIndentation expr p                                         :2_3:Is:
************************** / someIndentation                                                       :2_3:Is:
*************************** / myindented: consuming GoDeeper                                      :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper

************************* / term p/3:plain p                                                        :2_3:Is:
************************** / pRelPred                                                              :2_3:Is:
*************************** / slRelPred                                                           :2_3:Is:
**************************** / nested simpleHorn                                                 :2_3:Is:
***************************** > |^|                                                             :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slMultiTerm                                                   :2_3:Is:
******************************* / someSL                                                      :2_3:Is:
******************************** / pNumAsText                                                :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

nested simpleHorn> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected Is
nested simpleHorn> expecting other text or number

**************************** / RPConstraint                                                      :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slMultiTerm                                                   :2_3:Is:
******************************* / someSL                                                      :2_3:Is:
******************************** / pNumAsText                                                :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPConstraint> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected Is
RPConstraint> expecting other text or number

**************************** / RPBoolStructR                                                     :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slMultiTerm                                                   :2_3:Is:
******************************* / someSL                                                      :2_3:Is:
******************************** / pNumAsText                                                :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPBoolStructR> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected Is
RPBoolStructR> expecting other text or number

**************************** / RPMT                                                              :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slAKA                                                         :2_3:Is:
******************************* / $*|                                                         :2_3:Is:
******************************** / slAKA base                                                :2_3:Is:
********************************* / slMultiTerm                                             :2_3:Is:
********************************** / someSL                                                :2_3:Is:
*********************************** / pNumAsText                                          :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

slAKA base> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected Is
slAKA base> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

slAKA> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected Is
slAKA> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPMT> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected Is
RPMT> expecting other text or number

slRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected Is
slRelPred> expecting other text or number

pRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected Is
pRelPred> expecting other text or number

term p/3:plain p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected Is
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or term

expression> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

manyIndentation/leaf?> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting expression

********************* / manyIndentation/deeper; calling someIndentation                                 :2_3:Is:
********************** / someIndentation                                                               :2_3:Is:
*********************** / myindented: consuming GoDeeper                                              :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=14:
manyIndentation/deeper; calling someIndentation> unexpected Is
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper or expression

******************* / term p/3:plain p                                                                   :2_3:GoDeeper:
******************** / pRelPred                                                                         :2_3:GoDeeper:
********************* / slRelPred                                                                      :2_3:GoDeeper:
********************** / nested simpleHorn                                                            :2_3:GoDeeper:
*********************** > |^|                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slMultiTerm                                                              :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

********************** / RPConstraint                                                                 :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slMultiTerm                                                              :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

********************** / RPBoolStructR                                                                :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slMultiTerm                                                              :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

********************** / RPMT                                                                         :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA                                                                    :2_3:GoDeeper:
************************* / $*|                                                                    :2_3:GoDeeper:
************************** / slAKA base                                                           :2_3:GoDeeper:
*************************** / slMultiTerm                                                        :2_3:GoDeeper:
**************************** / someSL                                                           :2_3:GoDeeper:
***************************** / pNumAsText                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or expression

expression> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expression> MATCH (CERR): Other "Z"
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting GoDeeper, MPNot, or expression

manyIndentation/leaf?> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting GoDeeper, MPNot, or expression

*************** / manyIndentation/deeper; calling someIndentation                                           :2_2:Other "Z":
**************** / someIndentation                                                                         :2_2:Other "Z":
***************** / myindented: consuming GoDeeper                                                        :2_2:Other "Z":
myindented: consuming GoDeeper> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "Z"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "Z"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Other "Z"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper, MPNot, or expression

term p/2:someIndentation expr p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper, MPNot, or expression

************* / term p/3:plain p                                                                             :2_2:GoDeeper:
************** / pRelPred                                                                                   :2_2:GoDeeper:
*************** / slRelPred                                                                                :2_2:GoDeeper:
**************** / nested simpleHorn                                                                      :2_2:GoDeeper:
***************** > |^|                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slMultiTerm                                                                        :2_2:GoDeeper:
******************* / someSL                                                                           :2_2:GoDeeper:
******************** / pNumAsText                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

**************** / RPConstraint                                                                           :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slMultiTerm                                                                        :2_2:GoDeeper:
******************* / someSL                                                                           :2_2:GoDeeper:
******************** / pNumAsText                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

**************** / RPBoolStructR                                                                          :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slMultiTerm                                                                        :2_2:GoDeeper:
******************* / someSL                                                                           :2_2:GoDeeper:
******************** / pNumAsText                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

**************** / RPMT                                                                                   :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA                                                                              :2_2:GoDeeper:
******************* / $*|                                                                              :2_2:GoDeeper:
******************** / slAKA base                                                                     :2_2:GoDeeper:
********************* / slMultiTerm                                                                  :2_2:GoDeeper:
********************** / someSL                                                                     :2_2:GoDeeper:
*********************** / pNumAsText                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper, MPNot, or expression

term p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper, MPNot, or expression

expression> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

ppp inner> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected Is
ppp inner> expecting expression

********* / withPrePost                                                                                          :2_2:GoDeeper:
********** > |<* starting                                                                                       :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                            :2_2:Other "Z":
************* / expectUnDeepers                                                                               :2_2:Other "Z":
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                   :2_2:Other "Z":
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Is:
************* / expectUnDeepers                                                                                 :2_3:Is:
************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPrePost> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected Is
withPrePost> expecting GoDeeper, Other text, UnDeeper, or other text or number

********* / withPreOnly                                                                                          :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                            :2_2:Other "Z":
************* / expectUnDeepers                                                                               :2_2:Other "Z":
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                   :2_2:Other "Z":
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Is:
************* / expectUnDeepers                                                                                 :2_3:Is:
************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPreOnly> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> unexpected Is
withPreOnly> expecting GoDeeper, Other text, UnDeeper, or other text or number

pBSR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> unexpected Is
pBSR> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

preambleBoolStructR [When,If]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleBoolStructR [When,If]> MATCH (CERR): When GoDeeper
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=14:
preambleBoolStructR [When,If]> unexpected Is
preambleBoolStructR [When,If]> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

regulative permutation with deontic-temporal> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
regulative permutation with deontic-temporal> MATCH (CERR): When GoDeeper
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=14:
regulative permutation with deontic-temporal> unexpected Is
regulative permutation with deontic-temporal> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

****** / regulative permutation with deontic-action                                                                :2_1:When:
******* / WHERE                                                                                                   :2_1:When:
WHERE> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=10:
WHERE> unexpected When
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:When:
******** / $>|                                                                                                   :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Having

preambleParamText:[Having]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=10:
preambleParamText:[Having]> unexpected When
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:When:
******** / $>|                                                                                                   :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Given

preambleParamText:[Given]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=10:
preambleParamText:[Given]> unexpected When
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:When:
******** / $>|                                                                                                   :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Upon

preambleParamText:[Upon]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=10:
preambleParamText:[Upon]> unexpected When
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:When:
preambleBoolStructR [Unless]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=10:
preambleBoolStructR [Unless]> unexpected When
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:When:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / labelPrefix                                                                                      :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :2_2:Other "Z":
*************** / manyIndentation/leaf?                                                                     :2_2:Other "Z":
**************** / expression                                                                              :2_2:Other "Z":
***************** / labelPrefix                                                                           :2_2:Other "Z":
labelPrefix> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
labelPrefix> MATCH (COK): Other "Z"
labelPrefix> VALUE: ("Z",[])

***************** \ labelPrefix has returned "Z"                                                           :2_3:GoDeeper:
***************** / term p                                                                                 :2_3:GoDeeper:
****************** / term p/notLabelTerm                                                                  :2_3:GoDeeper:
******************* / term p/2:someIndentation expr p                                                    :2_3:GoDeeper:
******************** / someIndentation                                                                  :2_3:GoDeeper:
********************* / myindented: consuming GoDeeper                                                 :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented: consuming GoDeeper has returned GoDeeper                            :2_3:Is:
********************* / manyIndentation/leaf?                                                           :2_3:Is:
********************** / expression                                                                    :2_3:Is:
*********************** / labelPrefix                                                                 :2_3:Is:
labelPrefix> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected Is
labelPrefix> expecting Other text

*********************** / term p                                                                      :2_3:Is:
************************ / term p/notLabelTerm                                                       :2_3:Is:
************************* / term p/2:someIndentation expr p                                         :2_3:Is:
************************** / someIndentation                                                       :2_3:Is:
*************************** / myindented: consuming GoDeeper                                      :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper

************************* / term p/3:plain p                                                        :2_3:Is:
************************** / pRelPred                                                              :2_3:Is:
*************************** / slRelPred                                                           :2_3:Is:
**************************** / nested simpleHorn                                                 :2_3:Is:
***************************** > |^|                                                             :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slMultiTerm                                                   :2_3:Is:
******************************* / someSL                                                      :2_3:Is:
******************************** / pNumAsText                                                :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

nested simpleHorn> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected Is
nested simpleHorn> expecting other text or number

**************************** / RPConstraint                                                      :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slMultiTerm                                                   :2_3:Is:
******************************* / someSL                                                      :2_3:Is:
******************************** / pNumAsText                                                :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPConstraint> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected Is
RPConstraint> expecting other text or number

**************************** / RPBoolStructR                                                     :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slMultiTerm                                                   :2_3:Is:
******************************* / someSL                                                      :2_3:Is:
******************************** / pNumAsText                                                :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPBoolStructR> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected Is
RPBoolStructR> expecting other text or number

**************************** / RPMT                                                              :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slAKA                                                         :2_3:Is:
******************************* / $*|                                                         :2_3:Is:
******************************** / slAKA base                                                :2_3:Is:
********************************* / slMultiTerm                                             :2_3:Is:
********************************** / someSL                                                :2_3:Is:
*********************************** / pNumAsText                                          :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

slAKA base> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected Is
slAKA base> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

slAKA> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected Is
slAKA> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPMT> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected Is
RPMT> expecting other text or number

slRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected Is
slRelPred> expecting other text or number

pRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected Is
pRelPred> expecting other text or number

term p/3:plain p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected Is
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or term

expression> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

manyIndentation/leaf?> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting expression

********************* / manyIndentation/deeper; calling someIndentation                                 :2_3:Is:
********************** / someIndentation                                                               :2_3:Is:
*********************** / myindented: consuming GoDeeper                                              :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=14:
manyIndentation/deeper; calling someIndentation> unexpected Is
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper or expression

******************* / term p/3:plain p                                                                   :2_3:GoDeeper:
******************** / pRelPred                                                                         :2_3:GoDeeper:
********************* / slRelPred                                                                      :2_3:GoDeeper:
********************** / nested simpleHorn                                                            :2_3:GoDeeper:
*********************** > |^|                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slMultiTerm                                                              :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

********************** / RPConstraint                                                                 :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slMultiTerm                                                              :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

********************** / RPBoolStructR                                                                :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slMultiTerm                                                              :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

********************** / RPMT                                                                         :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA                                                                    :2_3:GoDeeper:
************************* / $*|                                                                    :2_3:GoDeeper:
************************** / slAKA base                                                           :2_3:GoDeeper:
*************************** / slMultiTerm                                                        :2_3:GoDeeper:
**************************** / someSL                                                           :2_3:GoDeeper:
***************************** / pNumAsText                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or expression

expression> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expression> MATCH (CERR): Other "Z"
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting GoDeeper, MPNot, or expression

manyIndentation/leaf?> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting GoDeeper, MPNot, or expression

*************** / manyIndentation/deeper; calling someIndentation                                           :2_2:Other "Z":
**************** / someIndentation                                                                         :2_2:Other "Z":
***************** / myindented: consuming GoDeeper                                                        :2_2:Other "Z":
myindented: consuming GoDeeper> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "Z"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "Z"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Other "Z"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper, MPNot, or expression

term p/2:someIndentation expr p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper, MPNot, or expression

************* / term p/3:plain p                                                                             :2_2:GoDeeper:
************** / pRelPred                                                                                   :2_2:GoDeeper:
*************** / slRelPred                                                                                :2_2:GoDeeper:
**************** / nested simpleHorn                                                                      :2_2:GoDeeper:
***************** > |^|                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slMultiTerm                                                                        :2_2:GoDeeper:
******************* / someSL                                                                           :2_2:GoDeeper:
******************** / pNumAsText                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

**************** / RPConstraint                                                                           :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slMultiTerm                                                                        :2_2:GoDeeper:
******************* / someSL                                                                           :2_2:GoDeeper:
******************** / pNumAsText                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

**************** / RPBoolStructR                                                                          :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slMultiTerm                                                                        :2_2:GoDeeper:
******************* / someSL                                                                           :2_2:GoDeeper:
******************** / pNumAsText                                                                     :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

**************** / RPMT                                                                                   :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA                                                                              :2_2:GoDeeper:
******************* / $*|                                                                              :2_2:GoDeeper:
******************** / slAKA base                                                                     :2_2:GoDeeper:
********************* / slMultiTerm                                                                  :2_2:GoDeeper:
********************** / someSL                                                                     :2_2:GoDeeper:
*********************** / pNumAsText                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper, MPNot, or expression

term p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper, MPNot, or expression

expression> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

ppp inner> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected Is
ppp inner> expecting expression

********* / withPrePost                                                                                          :2_2:GoDeeper:
********** > |<* starting                                                                                       :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                            :2_2:Other "Z":
************* / expectUnDeepers                                                                               :2_2:Other "Z":
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                   :2_2:Other "Z":
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Is:
************* / expectUnDeepers                                                                                 :2_3:Is:
************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPrePost> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected Is
withPrePost> expecting GoDeeper, Other text, UnDeeper, or other text or number

********* / withPreOnly                                                                                          :2_2:GoDeeper:
********** / $*|                                                                                                :2_2:GoDeeper:
*********** / pre part                                                                                         :2_2:GoDeeper:
************ / aboveNextLineKeyword                                                                            :2_2:Other "Z":
************* / expectUnDeepers                                                                               :2_2:Other "Z":
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                   :2_2:Other "Z":
************ / aboveNextLineKeyword                                                                             :2_3:GoDeeper:
************* / expectUnDeepers                                                                                :2_3:GoDeeper:
************** / pNumAsText                                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                    :2_3:GoDeeper:
************ / aboveNextLineKeyword                                                                              :2_3:Is:
************* / expectUnDeepers                                                                                 :2_3:Is:
************** / pNumAsText                                                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

************ > /*= lookAhead failed, delegating to plain /+=                                                     :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPreOnly> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> unexpected Is
withPreOnly> expecting GoDeeper, Other text, UnDeeper, or other text or number

pBSR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> unexpected Is
pBSR> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

preambleBoolStructR [When,If]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleBoolStructR [When,If]> MATCH (CERR): When GoDeeper
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=14:
preambleBoolStructR [When,If]> unexpected Is
preambleBoolStructR [When,If]> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

regulative permutation with deontic-action> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
regulative permutation with deontic-action> MATCH (CERR): When GoDeeper
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=14:
regulative permutation with deontic-action> unexpected Is
regulative permutation with deontic-action> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

permutationsReg> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=14:
permutationsReg> unexpected Is
permutationsReg> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

pRegRuleNormal> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=14:
pRegRuleNormal> unexpected Is
pRegRuleNormal> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

pRegRule> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=14:
pRegRule> unexpected Is
pRegRule> expecting GoDeeper, Other text, RuleMarker 1 "\167", UnDeeper, expression, or other text or number

*** / pTypeDefinition                                                                                                 :2_1:When:
**** / pRuleLabel                                                                                                    :2_1:When:
***** / $>|                                                                                                         :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=10:
pRuleLabel> unexpected When
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pHornlike/uponLimb                                                                                            :2_1:When:
***** / preambleParamText:[Upon]                                                                                    :2_1:When:
****** / $>|                                                                                                       :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Upon

preambleParamText:[Upon]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=10:
preambleParamText:[Upon]> unexpected When
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=10:
pHornlike/uponLimb> unexpected When
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:When:
***** / preambleParamText:[Given]                                                                                   :2_1:When:
****** / $>|                                                                                                       :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Given

preambleParamText:[Given]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=10:
preambleParamText:[Given]> unexpected When
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=10:
pHornlike/givenLimb> unexpected When
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=10:
pTypeDefinition> unexpected When
pTypeDefinition> expecting Define, Given, RuleMarker 1 "\167", or Upon

*** / pConstitutiveRule                                                                                               :2_1:When:
**** / pRuleLabel                                                                                                    :2_1:When:
***** / $>|                                                                                                         :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=10:
pRuleLabel> unexpected When
pRuleLabel> expecting RuleMarker 1 "\167"

**** / calling myindented pNameParens                                                                                :2_1:When:
***** / manyIndentation/leaf?                                                                                       :2_1:When:
****** / pMultiTermAka                                                                                             :2_1:When:
******* / pAKA                                                                                                    :2_1:When:
******** / slAKA                                                                                                 :2_1:When:
********* / $*|                                                                                                 :2_1:When:
********** / slAKA base                                                                                        :2_1:When:
*********** / slMultiTerm                                                                                     :2_1:When:
************ / someSL                                                                                        :2_1:When:
************* / pNumAsText                                                                                  :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

pAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=10:
pAKA> unexpected When
pAKA> expecting other text or number

pMultiTermAka> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=10:
pMultiTermAka> unexpected When
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=10:
manyIndentation/leaf?> unexpected When
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:When:
****** / someIndentation                                                                                           :2_1:When:
******* / myindented: consuming GoDeeper                                                                          :2_1:When:
myindented: consuming GoDeeper> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected When
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected When
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=10:
manyIndentation/deeper; calling someIndentation> unexpected When
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=10:
calling myindented pNameParens> unexpected When
calling myindented pNameParens> expecting GoDeeper or other text or number

pConstitutiveRule> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=10:
pConstitutiveRule> unexpected When
pConstitutiveRule> expecting GoDeeper, RuleMarker 1 "\167", or other text or number

*** / pScenarioRule                                                                                                   :2_1:When:
**** / pRuleLabel                                                                                                    :2_1:When:
***** / $>|                                                                                                         :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=10:
pRuleLabel> unexpected When
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pExpect                                                                                                       :2_1:When:
pExpect> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=10:
pExpect> unexpected When
pExpect> expecting Expect

pScenarioRule> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=10:
pScenarioRule> unexpected When
pScenarioRule> expecting Expect, Given, or RuleMarker 1 "\167"

*** / pHornlike                                                                                                       :2_1:When:
**** / pSrcRef                                                                                                       :2_1:When:
***** / pRuleLabel                                                                                                  :2_1:When:
****** / $>|                                                                                                       :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=10:
pRuleLabel> unexpected When
pRuleLabel> expecting RuleMarker 1 "\167"

pSrcRef> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:When:
**** / pHornlike / permute                                                                                           :2_1:When:
***** / whenCase                                                                                                    :2_1:When:
****** / whenMeansIf                                                                                               :2_1:When:
whenMeansIf> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenMeansIf> MATCH (COK): When
whenMeansIf> VALUE: (When,[])

****** \ whenMeansIf has returned When                                                                              :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:Other "Z":
************* / manyIndentation/leaf?                                                                         :2_2:Other "Z":
************** / expression                                                                                  :2_2:Other "Z":
*************** / labelPrefix                                                                               :2_2:Other "Z":
labelPrefix> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
labelPrefix> MATCH (COK): Other "Z"
labelPrefix> VALUE: ("Z",[])

*************** \ labelPrefix has returned "Z"                                                               :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Is:
******************* / manyIndentation/leaf?                                                               :2_3:Is:
******************** / expression                                                                        :2_3:Is:
********************* / labelPrefix                                                                     :2_3:Is:
labelPrefix> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected Is
labelPrefix> expecting Other text

********************* / term p                                                                          :2_3:Is:
********************** / term p/notLabelTerm                                                           :2_3:Is:
*********************** / term p/2:someIndentation expr p                                             :2_3:Is:
************************ / someIndentation                                                           :2_3:Is:
************************* / myindented: consuming GoDeeper                                          :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper

*********************** / term p/3:plain p                                                            :2_3:Is:
************************ / pRelPred                                                                  :2_3:Is:
************************* / slRelPred                                                               :2_3:Is:
************************** / nested simpleHorn                                                     :2_3:Is:
*************************** > |^|                                                                 :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

nested simpleHorn> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected Is
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPConstraint> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected Is
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPBoolStructR> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected Is
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slAKA                                                             :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slAKA base                                                    :2_3:Is:
******************************* / slMultiTerm                                                 :2_3:Is:
******************************** / someSL                                                    :2_3:Is:
********************************* / pNumAsText                                              :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

slAKA base> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected Is
slAKA base> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

slAKA> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected Is
slAKA> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPMT> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected Is
RPMT> expecting other text or number

slRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected Is
slRelPred> expecting other text or number

pRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected Is
pRelPred> expecting other text or number

term p/3:plain p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected Is
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or term

expression> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

manyIndentation/leaf?> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting expression

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Is:
******************** / someIndentation                                                                   :2_3:Is:
********************* / myindented: consuming GoDeeper                                                  :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=14:
manyIndentation/deeper; calling someIndentation> unexpected Is
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper or expression

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or expression

expression> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expression> MATCH (CERR): Other "Z"
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting GoDeeper, MPNot, or expression

manyIndentation/leaf?> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting GoDeeper, MPNot, or expression

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:Other "Z":
************** / someIndentation                                                                             :2_2:Other "Z":
*************** / myindented: consuming GoDeeper                                                            :2_2:Other "Z":
myindented: consuming GoDeeper> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "Z"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "Z"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Other "Z"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper, MPNot, or expression

term p/2:someIndentation expr p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper, MPNot, or expression

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper, MPNot, or expression

term p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper, MPNot, or expression

expression> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

ppp inner> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected Is
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPrePost> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected Is
withPrePost> expecting GoDeeper, Other text, UnDeeper, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPreOnly> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> unexpected Is
withPreOnly> expecting GoDeeper, Other text, UnDeeper, or other text or number

pBSR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> unexpected Is
pBSR> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

****** / Otherwise                                                                                                 :2_1:When:
Otherwise> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=10:
Otherwise> unexpected When
Otherwise> expecting Otherwise

whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> unexpected Is
whenCase> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

***** / pHornlike/uponLimb                                                                                          :2_1:When:
****** / preambleParamText:[Upon]                                                                                  :2_1:When:
******* / $>|                                                                                                     :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Upon

preambleParamText:[Upon]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=10:
preambleParamText:[Upon]> unexpected When
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=10:
pHornlike/uponLimb> unexpected When
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:When:
****** / whenMeansIf                                                                                               :2_1:When:
whenMeansIf> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenMeansIf> MATCH (COK): When
whenMeansIf> VALUE: (When,[])

****** \ whenMeansIf has returned When                                                                              :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:Other "Z":
************* / manyIndentation/leaf?                                                                         :2_2:Other "Z":
************** / expression                                                                                  :2_2:Other "Z":
*************** / labelPrefix                                                                               :2_2:Other "Z":
labelPrefix> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
labelPrefix> MATCH (COK): Other "Z"
labelPrefix> VALUE: ("Z",[])

*************** \ labelPrefix has returned "Z"                                                               :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Is:
******************* / manyIndentation/leaf?                                                               :2_3:Is:
******************** / expression                                                                        :2_3:Is:
********************* / labelPrefix                                                                     :2_3:Is:
labelPrefix> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected Is
labelPrefix> expecting Other text

********************* / term p                                                                          :2_3:Is:
********************** / term p/notLabelTerm                                                           :2_3:Is:
*********************** / term p/2:someIndentation expr p                                             :2_3:Is:
************************ / someIndentation                                                           :2_3:Is:
************************* / myindented: consuming GoDeeper                                          :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper

*********************** / term p/3:plain p                                                            :2_3:Is:
************************ / pRelPred                                                                  :2_3:Is:
************************* / slRelPred                                                               :2_3:Is:
************************** / nested simpleHorn                                                     :2_3:Is:
*************************** > |^|                                                                 :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

nested simpleHorn> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected Is
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPConstraint> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected Is
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPBoolStructR> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected Is
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slAKA                                                             :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slAKA base                                                    :2_3:Is:
******************************* / slMultiTerm                                                 :2_3:Is:
******************************** / someSL                                                    :2_3:Is:
********************************* / pNumAsText                                              :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

slAKA base> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected Is
slAKA base> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

slAKA> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected Is
slAKA> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPMT> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected Is
RPMT> expecting other text or number

slRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected Is
slRelPred> expecting other text or number

pRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected Is
pRelPred> expecting other text or number

term p/3:plain p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected Is
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or term

expression> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

manyIndentation/leaf?> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting expression

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Is:
******************** / someIndentation                                                                   :2_3:Is:
********************* / myindented: consuming GoDeeper                                                  :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=14:
manyIndentation/deeper; calling someIndentation> unexpected Is
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper or expression

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or expression

expression> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expression> MATCH (CERR): Other "Z"
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting GoDeeper, MPNot, or expression

manyIndentation/leaf?> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting GoDeeper, MPNot, or expression

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:Other "Z":
************** / someIndentation                                                                             :2_2:Other "Z":
*************** / myindented: consuming GoDeeper                                                            :2_2:Other "Z":
myindented: consuming GoDeeper> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "Z"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "Z"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Other "Z"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper, MPNot, or expression

term p/2:someIndentation expr p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper, MPNot, or expression

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper, MPNot, or expression

term p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper, MPNot, or expression

expression> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

ppp inner> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected Is
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPrePost> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected Is
withPrePost> expecting GoDeeper, Other text, UnDeeper, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPreOnly> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> unexpected Is
withPreOnly> expecting GoDeeper, Other text, UnDeeper, or other text or number

pBSR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> unexpected Is
pBSR> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

****** / Otherwise                                                                                                 :2_1:When:
Otherwise> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=10:
Otherwise> unexpected When
Otherwise> expecting Otherwise

whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> unexpected Is
whenCase> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

***** / pHornlike/givenLimb                                                                                         :2_1:When:
****** / preambleParamText:[Given]                                                                                 :2_1:When:
******* / $>|                                                                                                     :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Given

preambleParamText:[Given]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=10:
preambleParamText:[Given]> unexpected When
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=10:
pHornlike/givenLimb> unexpected When
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:When:
****** / whenMeansIf                                                                                               :2_1:When:
whenMeansIf> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenMeansIf> MATCH (COK): When
whenMeansIf> VALUE: (When,[])

****** \ whenMeansIf has returned When                                                                              :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:Other "Z":
************* / manyIndentation/leaf?                                                                         :2_2:Other "Z":
************** / expression                                                                                  :2_2:Other "Z":
*************** / labelPrefix                                                                               :2_2:Other "Z":
labelPrefix> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
labelPrefix> MATCH (COK): Other "Z"
labelPrefix> VALUE: ("Z",[])

*************** \ labelPrefix has returned "Z"                                                               :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Is:
******************* / manyIndentation/leaf?                                                               :2_3:Is:
******************** / expression                                                                        :2_3:Is:
********************* / labelPrefix                                                                     :2_3:Is:
labelPrefix> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected Is
labelPrefix> expecting Other text

********************* / term p                                                                          :2_3:Is:
********************** / term p/notLabelTerm                                                           :2_3:Is:
*********************** / term p/2:someIndentation expr p                                             :2_3:Is:
************************ / someIndentation                                                           :2_3:Is:
************************* / myindented: consuming GoDeeper                                          :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper

*********************** / term p/3:plain p                                                            :2_3:Is:
************************ / pRelPred                                                                  :2_3:Is:
************************* / slRelPred                                                               :2_3:Is:
************************** / nested simpleHorn                                                     :2_3:Is:
*************************** > |^|                                                                 :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

nested simpleHorn> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected Is
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPConstraint> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected Is
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPBoolStructR> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected Is
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slAKA                                                             :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slAKA base                                                    :2_3:Is:
******************************* / slMultiTerm                                                 :2_3:Is:
******************************** / someSL                                                    :2_3:Is:
********************************* / pNumAsText                                              :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

slAKA base> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected Is
slAKA base> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

slAKA> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected Is
slAKA> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPMT> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected Is
RPMT> expecting other text or number

slRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected Is
slRelPred> expecting other text or number

pRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected Is
pRelPred> expecting other text or number

term p/3:plain p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected Is
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or term

expression> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

manyIndentation/leaf?> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting expression

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Is:
******************** / someIndentation                                                                   :2_3:Is:
********************* / myindented: consuming GoDeeper                                                  :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=14:
manyIndentation/deeper; calling someIndentation> unexpected Is
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper or expression

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or expression

expression> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expression> MATCH (CERR): Other "Z"
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting GoDeeper, MPNot, or expression

manyIndentation/leaf?> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting GoDeeper, MPNot, or expression

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:Other "Z":
************** / someIndentation                                                                             :2_2:Other "Z":
*************** / myindented: consuming GoDeeper                                                            :2_2:Other "Z":
myindented: consuming GoDeeper> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "Z"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "Z"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Other "Z"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper, MPNot, or expression

term p/2:someIndentation expr p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper, MPNot, or expression

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper, MPNot, or expression

term p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper, MPNot, or expression

expression> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

ppp inner> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected Is
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPrePost> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected Is
withPrePost> expecting GoDeeper, Other text, UnDeeper, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPreOnly> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> unexpected Is
withPreOnly> expecting GoDeeper, Other text, UnDeeper, or other text or number

pBSR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> unexpected Is
pBSR> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

****** / Otherwise                                                                                                 :2_1:When:
Otherwise> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=10:
Otherwise> unexpected When
Otherwise> expecting Otherwise

whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> unexpected Is
whenCase> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:When:
****** / $>|                                                                                                       :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Decide or Define

pHornlike/ambitious> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=10:
pHornlike/ambitious> unexpected When
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:When:
****** / manyIndentation/leaf?                                                                                     :2_1:When:
******* / relPredNextlineWhen                                                                                     :2_1:When:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:When:
********* / optIndentedTuple                                                                                    :2_1:When:
********** / optIndented                                                                                       :2_1:When:
*********** / pRelPred                                                                                        :2_1:When:
************ / slRelPred                                                                                     :2_1:When:
************* / nested simpleHorn                                                                           :2_1:When:
************** > |^|                                                                                       :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slAKA                                                                                   :2_1:When:
**************** / $*|                                                                                   :2_1:When:
***************** / slAKA base                                                                          :2_1:When:
****************** / slMultiTerm                                                                       :2_1:When:
******************* / someSL                                                                          :2_1:When:
******************** / pNumAsText                                                                    :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

pRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected When
pRelPred> expecting other text or number

optIndented> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=10:
optIndented> unexpected When
optIndented> expecting other text or number

optIndentedTuple> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=10:
optIndentedTuple> unexpected When
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=10:
pRelPred optIndentedTuple whenCase> unexpected When
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=10:
relPredNextlineWhen> unexpected When
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:When:
******** / $*|                                                                                                   :2_1:When:
********* / slRelPred                                                                                           :2_1:When:
********** / nested simpleHorn                                                                                 :2_1:When:
*********** > |^|                                                                                             :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slAKA                                                                                         :2_1:When:
************* / $*|                                                                                         :2_1:When:
************** / slAKA base                                                                                :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

relPredSamelineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=10:
relPredSamelineWhen> unexpected When
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=10:
manyIndentation/leaf?> unexpected When
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:When:
******* / someIndentation                                                                                         :2_1:When:
******** / myindented: consuming GoDeeper                                                                        :2_1:When:
myindented: consuming GoDeeper> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected When
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected When
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=10:
manyIndentation/deeper; calling someIndentation> unexpected When
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=10:
pHornlike/someStructure> unexpected When
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:When:
****** / $>|                                                                                                       :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Decide or Define

pHornlike/ambitious> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=10:
pHornlike/ambitious> unexpected When
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:When:
****** / manyIndentation/leaf?                                                                                     :2_1:When:
******* / relPredNextlineWhen                                                                                     :2_1:When:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:When:
********* / optIndentedTuple                                                                                    :2_1:When:
********** / optIndented                                                                                       :2_1:When:
*********** / pRelPred                                                                                        :2_1:When:
************ / slRelPred                                                                                     :2_1:When:
************* / nested simpleHorn                                                                           :2_1:When:
************** > |^|                                                                                       :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slAKA                                                                                   :2_1:When:
**************** / $*|                                                                                   :2_1:When:
***************** / slAKA base                                                                          :2_1:When:
****************** / slMultiTerm                                                                       :2_1:When:
******************* / someSL                                                                          :2_1:When:
******************** / pNumAsText                                                                    :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

pRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected When
pRelPred> expecting other text or number

optIndented> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=10:
optIndented> unexpected When
optIndented> expecting other text or number

optIndentedTuple> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=10:
optIndentedTuple> unexpected When
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=10:
pRelPred optIndentedTuple whenCase> unexpected When
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=10:
relPredNextlineWhen> unexpected When
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:When:
******** / $*|                                                                                                   :2_1:When:
********* / slRelPred                                                                                           :2_1:When:
********** / nested simpleHorn                                                                                 :2_1:When:
*********** > |^|                                                                                             :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slAKA                                                                                         :2_1:When:
************* / $*|                                                                                         :2_1:When:
************** / slAKA base                                                                                :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

relPredSamelineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=10:
relPredSamelineWhen> unexpected When
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=10:
manyIndentation/leaf?> unexpected When
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:When:
******* / someIndentation                                                                                         :2_1:When:
******** / myindented: consuming GoDeeper                                                                        :2_1:When:
myindented: consuming GoDeeper> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected When
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected When
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=10:
manyIndentation/deeper; calling someIndentation> unexpected When
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=10:
pHornlike/someStructure> unexpected When
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/givenLimb                                                                                         :2_1:When:
****** / preambleParamText:[Given]                                                                                 :2_1:When:
******* / $>|                                                                                                     :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Given

preambleParamText:[Given]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=10:
preambleParamText:[Given]> unexpected When
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=10:
pHornlike/givenLimb> unexpected When
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:When:
****** / whenMeansIf                                                                                               :2_1:When:
whenMeansIf> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenMeansIf> MATCH (COK): When
whenMeansIf> VALUE: (When,[])

****** \ whenMeansIf has returned When                                                                              :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:Other "Z":
************* / manyIndentation/leaf?                                                                         :2_2:Other "Z":
************** / expression                                                                                  :2_2:Other "Z":
*************** / labelPrefix                                                                               :2_2:Other "Z":
labelPrefix> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
labelPrefix> MATCH (COK): Other "Z"
labelPrefix> VALUE: ("Z",[])

*************** \ labelPrefix has returned "Z"                                                               :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Is:
******************* / manyIndentation/leaf?                                                               :2_3:Is:
******************** / expression                                                                        :2_3:Is:
********************* / labelPrefix                                                                     :2_3:Is:
labelPrefix> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected Is
labelPrefix> expecting Other text

********************* / term p                                                                          :2_3:Is:
********************** / term p/notLabelTerm                                                           :2_3:Is:
*********************** / term p/2:someIndentation expr p                                             :2_3:Is:
************************ / someIndentation                                                           :2_3:Is:
************************* / myindented: consuming GoDeeper                                          :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper

*********************** / term p/3:plain p                                                            :2_3:Is:
************************ / pRelPred                                                                  :2_3:Is:
************************* / slRelPred                                                               :2_3:Is:
************************** / nested simpleHorn                                                     :2_3:Is:
*************************** > |^|                                                                 :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

nested simpleHorn> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected Is
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPConstraint> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected Is
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPBoolStructR> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected Is
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slAKA                                                             :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slAKA base                                                    :2_3:Is:
******************************* / slMultiTerm                                                 :2_3:Is:
******************************** / someSL                                                    :2_3:Is:
********************************* / pNumAsText                                              :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

slAKA base> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected Is
slAKA base> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

slAKA> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected Is
slAKA> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPMT> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected Is
RPMT> expecting other text or number

slRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected Is
slRelPred> expecting other text or number

pRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected Is
pRelPred> expecting other text or number

term p/3:plain p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected Is
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or term

expression> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

manyIndentation/leaf?> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting expression

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Is:
******************** / someIndentation                                                                   :2_3:Is:
********************* / myindented: consuming GoDeeper                                                  :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=14:
manyIndentation/deeper; calling someIndentation> unexpected Is
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper or expression

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or expression

expression> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expression> MATCH (CERR): Other "Z"
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting GoDeeper, MPNot, or expression

manyIndentation/leaf?> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting GoDeeper, MPNot, or expression

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:Other "Z":
************** / someIndentation                                                                             :2_2:Other "Z":
*************** / myindented: consuming GoDeeper                                                            :2_2:Other "Z":
myindented: consuming GoDeeper> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "Z"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "Z"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Other "Z"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper, MPNot, or expression

term p/2:someIndentation expr p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper, MPNot, or expression

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper, MPNot, or expression

term p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper, MPNot, or expression

expression> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

ppp inner> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected Is
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPrePost> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected Is
withPrePost> expecting GoDeeper, Other text, UnDeeper, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPreOnly> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> unexpected Is
withPreOnly> expecting GoDeeper, Other text, UnDeeper, or other text or number

pBSR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> unexpected Is
pBSR> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

****** / Otherwise                                                                                                 :2_1:When:
Otherwise> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=10:
Otherwise> unexpected When
Otherwise> expecting Otherwise

whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> unexpected Is
whenCase> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

***** / pHornlike/uponLimb                                                                                          :2_1:When:
****** / preambleParamText:[Upon]                                                                                  :2_1:When:
******* / $>|                                                                                                     :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Upon

preambleParamText:[Upon]> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=10:
preambleParamText:[Upon]> unexpected When
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=10:
pHornlike/uponLimb> unexpected When
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:When:
****** / whenMeansIf                                                                                               :2_1:When:
whenMeansIf> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenMeansIf> MATCH (COK): When
whenMeansIf> VALUE: (When,[])

****** \ whenMeansIf has returned When                                                                              :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / labelPrefix                                                                                          :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:Other "Z":
************* / manyIndentation/leaf?                                                                         :2_2:Other "Z":
************** / expression                                                                                  :2_2:Other "Z":
*************** / labelPrefix                                                                               :2_2:Other "Z":
labelPrefix> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
labelPrefix> MATCH (COK): Other "Z"
labelPrefix> VALUE: ("Z",[])

*************** \ labelPrefix has returned "Z"                                                               :2_3:GoDeeper:
*************** / term p                                                                                     :2_3:GoDeeper:
**************** / term p/notLabelTerm                                                                      :2_3:GoDeeper:
***************** / term p/2:someIndentation expr p                                                        :2_3:GoDeeper:
****************** / someIndentation                                                                      :2_3:GoDeeper:
******************* / myindented: consuming GoDeeper                                                     :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************* \ myindented: consuming GoDeeper has returned GoDeeper                                :2_3:Is:
******************* / manyIndentation/leaf?                                                               :2_3:Is:
******************** / expression                                                                        :2_3:Is:
********************* / labelPrefix                                                                     :2_3:Is:
labelPrefix> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected Is
labelPrefix> expecting Other text

********************* / term p                                                                          :2_3:Is:
********************** / term p/notLabelTerm                                                           :2_3:Is:
*********************** / term p/2:someIndentation expr p                                             :2_3:Is:
************************ / someIndentation                                                           :2_3:Is:
************************* / myindented: consuming GoDeeper                                          :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper

*********************** / term p/3:plain p                                                            :2_3:Is:
************************ / pRelPred                                                                  :2_3:Is:
************************* / slRelPred                                                               :2_3:Is:
************************** / nested simpleHorn                                                     :2_3:Is:
*************************** > |^|                                                                 :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

nested simpleHorn> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected Is
nested simpleHorn> expecting other text or number

************************** / RPConstraint                                                          :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPConstraint> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected Is
RPConstraint> expecting other text or number

************************** / RPBoolStructR                                                         :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slMultiTerm                                                       :2_3:Is:
***************************** / someSL                                                          :2_3:Is:
****************************** / pNumAsText                                                    :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPBoolStructR> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected Is
RPBoolStructR> expecting other text or number

************************** / RPMT                                                                  :2_3:Is:
*************************** / $*|                                                                 :2_3:Is:
**************************** / slAKA                                                             :2_3:Is:
***************************** / $*|                                                             :2_3:Is:
****************************** / slAKA base                                                    :2_3:Is:
******************************* / slMultiTerm                                                 :2_3:Is:
******************************** / someSL                                                    :2_3:Is:
********************************* / pNumAsText                                              :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

someSL> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected Is
someSL> expecting other text or number

slMultiTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected Is
slMultiTerm> expecting other text or number

slAKA base> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected Is
slAKA base> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

slAKA> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected Is
slAKA> expecting other text or number

$*|> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting other text or number

RPMT> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected Is
RPMT> expecting other text or number

slRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected Is
slRelPred> expecting other text or number

pRelPred> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected Is
pRelPred> expecting other text or number

term p/3:plain p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected Is
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or term

expression> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

manyIndentation/leaf?> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting expression

******************* / manyIndentation/deeper; calling someIndentation                                     :2_3:Is:
******************** / someIndentation                                                                   :2_3:Is:
********************* / myindented: consuming GoDeeper                                                  :2_3:Is:
myindented: consuming GoDeeper> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=14:
myindented: consuming GoDeeper> unexpected Is
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=14:
manyIndentation/deeper; calling someIndentation> unexpected Is
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper or expression

***************** / term p/3:plain p                                                                       :2_3:GoDeeper:
****************** / pRelPred                                                                             :2_3:GoDeeper:
******************* / slRelPred                                                                          :2_3:GoDeeper:
******************** / nested simpleHorn                                                                :2_3:GoDeeper:
********************* > |^|                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

******************** / RPConstraint                                                                     :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

******************** / RPBoolStructR                                                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

******************** / RPMT                                                                             :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA                                                                        :2_3:GoDeeper:
*********************** / $*|                                                                        :2_3:GoDeeper:
************************ / slAKA base                                                               :2_3:GoDeeper:
************************* / slMultiTerm                                                            :2_3:GoDeeper:
************************** / someSL                                                               :2_3:GoDeeper:
*************************** / pNumAsText                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper or expression

expression> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expression> MATCH (CERR): Other "Z"
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting GoDeeper, MPNot, or expression

manyIndentation/leaf?> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=14:
manyIndentation/leaf?> unexpected Is
manyIndentation/leaf?> expecting GoDeeper, MPNot, or expression

************* / manyIndentation/deeper; calling someIndentation                                               :2_2:Other "Z":
************** / someIndentation                                                                             :2_2:Other "Z":
*************** / myindented: consuming GoDeeper                                                            :2_2:Other "Z":
myindented: consuming GoDeeper> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "Z"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "Z"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Other "Z"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected Is
someIndentation> expecting GoDeeper, MPNot, or expression

term p/2:someIndentation expr p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected Is
term p/2:someIndentation expr p> expecting GoDeeper, MPNot, or expression

*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** > |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

nested simpleHorn> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting other text or number

************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPConstraint> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting other text or number

************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPBoolStructR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting other text or number

************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / someSL                                                                         :2_2:GoDeeper:
********************* / pNumAsText                                                                   :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting other text or number

slMultiTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting other text or number

slAKA base> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting other text or number

RPMT> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected GoDeeper
RPMT> expecting other text or number

slRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected GoDeeper
slRelPred> expecting other text or number

pRelPred> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected GoDeeper
pRelPred> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected Is
term p/notLabelTerm> expecting GoDeeper, MPNot, or expression

term p> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=14:
term p> unexpected Is
term p> expecting GoDeeper, MPNot, or expression

expression> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected Is
expression> expecting expression

ppp inner> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected Is
ppp inner> expecting expression

******* / withPrePost                                                                                              :2_2:GoDeeper:
******** > |<* starting                                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPrePost> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected Is
withPrePost> expecting GoDeeper, Other text, UnDeeper, or other text or number

******* / withPreOnly                                                                                              :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / pre part                                                                                             :2_2:GoDeeper:
********** / aboveNextLineKeyword                                                                                :2_2:Other "Z":
*********** / expectUnDeepers                                                                                   :2_2:Other "Z":
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
expectUnDeepers> MATCH (CERR): Other "Z" GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Other "Z" GoDeeper Is GoDeeper Other "Q" <…>
aboveNextLineKeyword> MATCH (CERR): Other "Z" GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                       :2_2:Other "Z":
********** / aboveNextLineKeyword                                                                                 :2_3:GoDeeper:
*********** / expectUnDeepers                                                                                    :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
expectUnDeepers> MATCH (CERR): GoDeeper
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: GoDeeper Is GoDeeper Other "Q" UnDeeper  <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                        :2_3:GoDeeper:
********** / aboveNextLineKeyword                                                                                  :2_3:Is:
*********** / expectUnDeepers                                                                                     :2_3:Is:
************ / pNumAsText                                                                                        :2_3:Is:
pNumAsText> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected Is
pNumAsText> expecting number

expectUnDeepers> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=14:
expectUnDeepers> unexpected Is
expectUnDeepers> expecting GoDeeper, UnDeeper, or other text or number

aboveNextLineKeyword> IN: Is GoDeeper Other "Q" UnDeeper UnDeeper  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Is
aboveNextLineKeyword> expecting GoDeeper, UnDeeper, or other text or number

********** > /*= lookAhead failed, delegating to plain /+=                                                         :2_3:Is:
pre part> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=14:
pre part> unexpected Is
pre part> expecting GoDeeper, Other text, UnDeeper, or other text or number

$*|> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=14:
$*|> unexpected Is
$*|> expecting GoDeeper, Other text, UnDeeper, or other text or number

withPreOnly> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=14:
withPreOnly> unexpected Is
withPreOnly> expecting GoDeeper, Other text, UnDeeper, or other text or number

pBSR> IN: GoDeeper Other "Z" GoDeeper Is GoDeeper  <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=14:
pBSR> unexpected Is
pBSR> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

****** / Otherwise                                                                                                 :2_1:When:
Otherwise> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=10:
Otherwise> unexpected When
Otherwise> expecting Otherwise

whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=14:
whenCase> unexpected Is
whenCase> expecting GoDeeper, Other text, UnDeeper, expression, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:When:
****** / $>|                                                                                                       :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Decide or Define

pHornlike/ambitious> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=10:
pHornlike/ambitious> unexpected When
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:When:
****** / manyIndentation/leaf?                                                                                     :2_1:When:
******* / relPredNextlineWhen                                                                                     :2_1:When:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:When:
********* / optIndentedTuple                                                                                    :2_1:When:
********** / optIndented                                                                                       :2_1:When:
*********** / pRelPred                                                                                        :2_1:When:
************ / slRelPred                                                                                     :2_1:When:
************* / nested simpleHorn                                                                           :2_1:When:
************** > |^|                                                                                       :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slAKA                                                                                   :2_1:When:
**************** / $*|                                                                                   :2_1:When:
***************** / slAKA base                                                                          :2_1:When:
****************** / slMultiTerm                                                                       :2_1:When:
******************* / someSL                                                                          :2_1:When:
******************** / pNumAsText                                                                    :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

pRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected When
pRelPred> expecting other text or number

optIndented> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=10:
optIndented> unexpected When
optIndented> expecting other text or number

optIndentedTuple> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=10:
optIndentedTuple> unexpected When
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=10:
pRelPred optIndentedTuple whenCase> unexpected When
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=10:
relPredNextlineWhen> unexpected When
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:When:
******** / $*|                                                                                                   :2_1:When:
********* / slRelPred                                                                                           :2_1:When:
********** / nested simpleHorn                                                                                 :2_1:When:
*********** > |^|                                                                                             :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slAKA                                                                                         :2_1:When:
************* / $*|                                                                                         :2_1:When:
************** / slAKA base                                                                                :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

relPredSamelineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=10:
relPredSamelineWhen> unexpected When
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=10:
manyIndentation/leaf?> unexpected When
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:When:
******* / someIndentation                                                                                         :2_1:When:
******** / myindented: consuming GoDeeper                                                                        :2_1:When:
myindented: consuming GoDeeper> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected When
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected When
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=10:
manyIndentation/deeper; calling someIndentation> unexpected When
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=10:
pHornlike/someStructure> unexpected When
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:When:
****** / $>|                                                                                                       :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Decide or Define

pHornlike/ambitious> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=10:
pHornlike/ambitious> unexpected When
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:When:
****** / manyIndentation/leaf?                                                                                     :2_1:When:
******* / relPredNextlineWhen                                                                                     :2_1:When:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:When:
********* / optIndentedTuple                                                                                    :2_1:When:
********** / optIndented                                                                                       :2_1:When:
*********** / pRelPred                                                                                        :2_1:When:
************ / slRelPred                                                                                     :2_1:When:
************* / nested simpleHorn                                                                           :2_1:When:
************** > |^|                                                                                       :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slAKA                                                                                   :2_1:When:
**************** / $*|                                                                                   :2_1:When:
***************** / slAKA base                                                                          :2_1:When:
****************** / slMultiTerm                                                                       :2_1:When:
******************* / someSL                                                                          :2_1:When:
******************** / pNumAsText                                                                    :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

pRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected When
pRelPred> expecting other text or number

optIndented> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=10:
optIndented> unexpected When
optIndented> expecting other text or number

optIndentedTuple> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=10:
optIndentedTuple> unexpected When
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=10:
pRelPred optIndentedTuple whenCase> unexpected When
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=10:
relPredNextlineWhen> unexpected When
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:When:
******** / $*|                                                                                                   :2_1:When:
********* / slRelPred                                                                                           :2_1:When:
********** / nested simpleHorn                                                                                 :2_1:When:
*********** > |^|                                                                                             :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slAKA                                                                                         :2_1:When:
************* / $*|                                                                                         :2_1:When:
************** / slAKA base                                                                                :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

relPredSamelineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=10:
relPredSamelineWhen> unexpected When
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=10:
manyIndentation/leaf?> unexpected When
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:When:
******* / someIndentation                                                                                         :2_1:When:
******** / myindented: consuming GoDeeper                                                                        :2_1:When:
myindented: consuming GoDeeper> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected When
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected When
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=10:
manyIndentation/deeper; calling someIndentation> unexpected When
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=10:
pHornlike/someStructure> unexpected When
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:When:
****** / $>|                                                                                                       :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting Decide or Define

pHornlike/ambitious> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=10:
pHornlike/ambitious> unexpected When
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:When:
****** / manyIndentation/leaf?                                                                                     :2_1:When:
******* / relPredNextlineWhen                                                                                     :2_1:When:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:When:
********* / optIndentedTuple                                                                                    :2_1:When:
********** / optIndented                                                                                       :2_1:When:
*********** / pRelPred                                                                                        :2_1:When:
************ / slRelPred                                                                                     :2_1:When:
************* / nested simpleHorn                                                                           :2_1:When:
************** > |^|                                                                                       :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:When:
************** / $*|                                                                                       :2_1:When:
*************** / slAKA                                                                                   :2_1:When:
**************** / $*|                                                                                   :2_1:When:
***************** / slAKA base                                                                          :2_1:When:
****************** / slMultiTerm                                                                       :2_1:When:
******************* / someSL                                                                          :2_1:When:
******************** / pNumAsText                                                                    :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

pRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected When
pRelPred> expecting other text or number

optIndented> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=10:
optIndented> unexpected When
optIndented> expecting other text or number

optIndentedTuple> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=10:
optIndentedTuple> unexpected When
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=10:
pRelPred optIndentedTuple whenCase> unexpected When
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=10:
relPredNextlineWhen> unexpected When
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:When:
******** / $*|                                                                                                   :2_1:When:
********* / slRelPred                                                                                           :2_1:When:
********** / nested simpleHorn                                                                                 :2_1:When:
*********** > |^|                                                                                             :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

nested simpleHorn> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected When
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPConstraint> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected When
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slMultiTerm                                                                                   :2_1:When:
************* / someSL                                                                                      :2_1:When:
************** / pNumAsText                                                                                :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPBoolStructR> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected When
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:When:
*********** / $*|                                                                                             :2_1:When:
************ / slAKA                                                                                         :2_1:When:
************* / $*|                                                                                         :2_1:When:
************** / slAKA base                                                                                :2_1:When:
*************** / slMultiTerm                                                                             :2_1:When:
**************** / someSL                                                                                :2_1:When:
***************** / pNumAsText                                                                          :2_1:When:
pNumAsText> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected When
pNumAsText> expecting number

someSL> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected When
someSL> expecting other text or number

slMultiTerm> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected When
slMultiTerm> expecting other text or number

slAKA base> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected When
slAKA base> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

slAKA> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected When
slAKA> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

RPMT> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected When
RPMT> expecting other text or number

slRelPred> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected When
slRelPred> expecting other text or number

$*|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected When
$*|> expecting other text or number

relPredSamelineWhen> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=10:
relPredSamelineWhen> unexpected When
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=10:
manyIndentation/leaf?> unexpected When
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:When:
******* / someIndentation                                                                                         :2_1:When:
******** / myindented: consuming GoDeeper                                                                        :2_1:When:
myindented: consuming GoDeeper> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected When
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected When
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=10:
manyIndentation/deeper; calling someIndentation> unexpected When
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=10:
pHornlike/someStructure> unexpected When
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

pHornlike / permute> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=14:
pHornlike / permute> unexpected Is
pHornlike / permute> expecting Given, GoDeeper, Other text, UnDeeper, Upon, expression, or other text or number

pHornlike> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=14:
pHornlike> unexpected Is
pHornlike> expecting Given, GoDeeper, Other text, RuleMarker 1 "\167", UnDeeper, Upon, expression, or other text or number

*** / pRuleLabel                                                                                                      :2_1:When:
**** / $>|                                                                                                           :2_1:When:
$>|> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected When
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=10:
pRuleLabel> unexpected When
pRuleLabel> expecting RuleMarker 1 "\167"

*** / pRule: unwrapping indentation and recursing                                                                     :2_1:When:
**** / myindented: consuming GoDeeper                                                                                :2_1:When:
myindented: consuming GoDeeper> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected When
myindented: consuming GoDeeper> expecting GoDeeper

pRule: unwrapping indentation and recursing> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=10:
pRule: unwrapping indentation and recursing> unexpected When
pRule: unwrapping indentation and recursing> expecting GoDeeper

pRule> IN: When GoDeeper Other "Z" GoDeeper Is GoDe <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=14:
pRule> unexpected Is
pRule> expecting DECIDE ... IS ... Horn rule, EOL, or regulative rule


revised parser
  horn-2 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) revised parser horn-2
       expected: [[Hornlike {name = ["X"], keyword = Decide, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Just (All Nothing [Leaf (RPConstraint ["Z"] RPis ["Q"]),Leaf (RPConstraint ["P"] RPgt ["NP"])])}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       2:1:
       unexpected When
       expecting end of input
       DECIDE X      IS     Y     
       ✳ WHEN Z      IS     Q     
       AND    P      >      NP    
       

  To rerun use: --match "/revised parser/horn-2/"

Randomized with seed 2124833008

Finished in 0.0737 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

