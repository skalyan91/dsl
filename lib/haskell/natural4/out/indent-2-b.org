* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/our new parser/indent-2-b/")

* Tokens
( "a" ) AND
    ( "b" OR ( "c" ) OR
        ( NOT ( "d" ) )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / expr pParamText                                                                                                    :1_2:GoDeeper:
*** / expression                                                                                                       :1_2:GoDeeper:
**** / labelPrefix                                                                                                    :1_2:GoDeeper:
labelPrefix> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=0:
labelPrefix> unexpected (
labelPrefix> expecting Other text

**** / term p                                                                                                         :1_2:GoDeeper:
***** / term p/notLabelTerm                                                                                          :1_2:GoDeeper:
****** / term p/2:someIndentation expr p                                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:Other "a":
******** / manyIndentation/leaf?                                                                                   :1_2:Other "a":
********* / expression                                                                                            :1_2:Other "a":
********** / labelPrefix                                                                                         :1_2:Other "a":
labelPrefix> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=2:
labelPrefix> unexpected )

********** / term p                                                                                              :1_2:Other "a":
*********** / term p/notLabelTerm                                                                               :1_2:Other "a":
************ / term p/2:someIndentation expr p                                                                 :1_2:Other "a":
************* / someIndentation                                                                               :1_2:Other "a":
************** / myindented: consuming GoDeeper                                                              :1_2:Other "a":
myindented: consuming GoDeeper> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=1:
myindented: consuming GoDeeper> unexpected "a"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected "a"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=1:
term p/2:someIndentation expr p> unexpected "a"
term p/2:someIndentation expr p> expecting (

************ / term p/3:plain p                                                                                :1_2:Other "a":
************* / pParamText                                                                                    :1_2:Other "a":
************** / pParamText(flat) first line: pKeyValues                                                     :1_2:Other "a":
*************** / pKeyValuesAka                                                                             :1_2:Other "a":
**************** / slAKA                                                                                   :1_2:Other "a":
***************** / $*|                                                                                   :1_2:Other "a":
****************** / slAKA base                                                                          :1_2:Other "a":
******************* / slKeyValues                                                                       :1_2:Other "a":
******************** / $*|                                                                             :1_2:Other "a":
********************* / someSL                                                                        :1_2:Other "a":
someSL> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
someSL> MATCH (COK): "a"
someSL> VALUE: ((["a"],0),[])

********************* \ someSL has returned (["a"],0)                                                  :2_2:UnDeeper:
$*|> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
$*|> MATCH (COK): "a"
$*|> VALUE: ((["a"],0),[])

******************** \ $*| has returned (["a"],0)                                                       :2_2:UnDeeper:
******************** / |>>/recurse                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :2_2:UnDeeper:
********************* / |?| optional something                                                         :2_2:UnDeeper:
********************** / |>>/recurse                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** / |>>/base                                                                     :2_2:UnDeeper:
*********************** / slTypeSig                                                                  :2_2:UnDeeper:
************************ / $>|                                                                      :2_2:UnDeeper:
$>|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=2:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :2_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :2_2:UnDeeper:
|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :2_2:UnDeeper:
slKeyValues> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
slKeyValues> MATCH (COK): "a"
slKeyValues> VALUE: ((("a" :| [],Nothing),0),[])

******************* \ slKeyValues has returned (("a" :| [],Nothing),0)                                   :2_2:UnDeeper:
slAKA base> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
slAKA base> MATCH (COK): "a"
slAKA base> VALUE: ((("a" :| [],Nothing),0),[])

****************** \ slAKA base has returned (("a" :| [],Nothing),0)                                      :2_2:UnDeeper:
$*|> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
$*|> MATCH (COK): "a"
$*|> VALUE: ((("a" :| [],Nothing),0),[])

***************** \ $*| has returned (("a" :| [],Nothing),0)                                               :2_2:UnDeeper:
***************** / |>>/recurse                                                                            :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** / |>>/base                                                                               :2_2:UnDeeper:
****************** / slAKA optional akapart                                                               :2_2:UnDeeper:
******************* / |?| optional something                                                             :2_2:UnDeeper:
******************** / |>>/recurse                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :2_2:UnDeeper:
********************* / PAKA/akapart                                                                   :2_2:UnDeeper:
********************** / $>|                                                                          :2_2:UnDeeper:
*********************** / Aka Token                                                                  :2_2:UnDeeper:
Aka Token> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=2:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=2:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :2_2:UnDeeper:
slAKA optional akapart> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :2_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :2_2:UnDeeper:
|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :2_2:UnDeeper:
***************** / |>>/recurse                                                                            :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** / |>>/base                                                                               :2_2:UnDeeper:
****************** / slAKA optional typically                                                             :2_2:UnDeeper:
******************* / |?| optional something                                                             :2_2:UnDeeper:
******************** / |>>/recurse                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :2_2:UnDeeper:
********************* / typically                                                                      :2_2:UnDeeper:
********************** / $>|                                                                          :2_2:UnDeeper:
$>|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=2:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :2_2:UnDeeper:
slAKA optional typically> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :2_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :2_2:UnDeeper:
|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :2_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :2_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :2_2:UnDeeper:
slAKA> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
slAKA> MATCH (COK): "a"
slAKA> VALUE: ((("a" :| [],Nothing),0),[])

**************** \ slAKA has returned (("a" :| [],Nothing),0)                                               :2_2:UnDeeper:
**************** / undeepers                                                                                :2_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                 :2_2:UnDeeper:
***************** > sameLine: success!                                                                     :2_2:UnDeeper:
undeepers> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                :2_2:UnDeeper:
pKeyValuesAka> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
pKeyValuesAka> MATCH (COK): "a"
pKeyValuesAka> VALUE: (("a" :| [],Nothing),[])

*************** \ pKeyValuesAka has returned ("a" :| [],Nothing)                                             :2_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "a"
pParamText(flat) first line: pKeyValues> VALUE: (("a" :| [],Nothing),[])

************** \ pParamText(flat) first line: pKeyValues has returned ("a" :| [],Nothing)                     :2_2:UnDeeper:
************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                       :2_2:UnDeeper:
*************** / manyIndentation/leaf?                                                                      :2_2:UnDeeper:
**************** / sameMany                                                                                 :2_2:UnDeeper:
***************** / pKeyValuesAka                                                                          :2_2:UnDeeper:
****************** / slAKA                                                                                :2_2:UnDeeper:
******************* / $*|                                                                                :2_2:UnDeeper:
******************** / slAKA base                                                                       :2_2:UnDeeper:
********************* / slKeyValues                                                                    :2_2:UnDeeper:
********************** / $*|                                                                          :2_2:UnDeeper:
*********************** / someSL                                                                     :2_2:UnDeeper:
************************ / pNumAsText                                                               :2_2:UnDeeper:
pNumAsText> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=2:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=2:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=2:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=2:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

**************** \ sameMany has returned []                                                                 :2_2:UnDeeper:
manyIndentation/leaf?> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*************** \ manyIndentation/leaf? has returned []                                                      :2_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                       :2_2:UnDeeper:
pParamText> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
pParamText> MATCH (COK): "a"
pParamText> VALUE: (("a" :| [],Nothing) :| [],[])

************* \ pParamText has returned ("a" :| [],Nothing) :| []                                              :2_2:UnDeeper:
term p/3:plain p> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
term p/3:plain p> MATCH (COK): "a"
term p/3:plain p> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

************ \ term p/3:plain p has returned MyLeaf (("a" :| [],Nothing) :| [])                                 :2_2:UnDeeper:
term p/notLabelTerm> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
term p/notLabelTerm> MATCH (COK): "a"
term p/notLabelTerm> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

*********** \ term p/notLabelTerm has returned MyLeaf (("a" :| [],Nothing) :| [])                                :2_2:UnDeeper:
term p> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
term p> MATCH (COK): "a"
term p> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

********** \ term p has returned MyLeaf (("a" :| [],Nothing) :| [])                                               :2_2:UnDeeper:
********** / binary(Or)                                                                                           :2_2:UnDeeper:
binary(Or)> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=2:
binary(Or)> unexpected )
binary(Or)> expecting OR

********** / binary(And)                                                                                          :2_2:UnDeeper:
binary(And)> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=2:
binary(And)> unexpected )
binary(And)> expecting AND

********** / binary(SetLess)                                                                                      :2_2:UnDeeper:
binary(SetLess)> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=2:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********** / binary(SetPlus)                                                                                      :2_2:UnDeeper:
binary(SetPlus)> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=2:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
expression> MATCH (COK): "a"
expression> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

********* \ expression has returned MyLeaf (("a" :| [],Nothing) :| [])                                             :2_2:UnDeeper:
manyIndentation/leaf?> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
manyIndentation/leaf?> MATCH (COK): "a"
manyIndentation/leaf?> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

******** \ manyIndentation/leaf? has returned MyLeaf (("a" :| [],Nothing) :| [])                                    :2_2:UnDeeper:
******** / myindented: consuming UnDeeper                                                                           :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******** \ myindented: consuming UnDeeper has returned UnDeeper                                                  :2_1:And:
someIndentation> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
someIndentation> MATCH (COK): ( "a" )
someIndentation> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

******* \ someIndentation has returned MyLeaf (("a" :| [],Nothing) :| [])                                         :2_1:And:
term p/2:someIndentation expr p> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "a" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

****** \ term p/2:someIndentation expr p has returned MyLeaf (("a" :| [],Nothing) :| [])                           :2_1:And:
term p/notLabelTerm> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
term p/notLabelTerm> MATCH (COK): ( "a" )
term p/notLabelTerm> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

***** \ term p/notLabelTerm has returned MyLeaf (("a" :| [],Nothing) :| [])                                         :2_1:And:
term p> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
term p> MATCH (COK): ( "a" )
term p> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

**** \ term p has returned MyLeaf (("a" :| [],Nothing) :| [])                                                        :2_1:And:
**** / binary(Or)                                                                                                    :2_1:And:
binary(Or)> IN: AND ( "b" OR ( "c" ) OR ( NOT ( "d" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=3:
binary(Or)> unexpected AND
binary(Or)> expecting OR

**** / binary(And)                                                                                                   :2_1:And:
binary(And)> IN: AND ( "b" OR ( "c" ) OR ( NOT ( "d" ) )  <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

**** \ binary(And) has returned And                                                                                   :2_2:GoDeeper:
**** / term p                                                                                                         :2_2:GoDeeper:
***** / term p/notLabelTerm                                                                                          :2_2:GoDeeper:
****** / term p/2:someIndentation expr p                                                                            :2_2:GoDeeper:
******* / someIndentation                                                                                          :2_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :2_2:Other "b":
******** / manyIndentation/leaf?                                                                                   :2_2:Other "b":
********* / expression                                                                                            :2_2:Other "b":
********** / labelPrefix                                                                                         :2_2:Other "b":
labelPrefix> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
labelPrefix> MATCH (COK): "b"
labelPrefix> VALUE: ("b",[])

********** \ labelPrefix has returned "b"                                                                        :3_2:Or:
********** / term p                                                                                              :3_2:Or:
*********** / term p/notLabelTerm                                                                               :3_2:Or:
************ / term p/2:someIndentation expr p                                                                 :3_2:Or:
************* / someIndentation                                                                               :3_2:Or:
************** / myindented: consuming GoDeeper                                                              :3_2:Or:
myindented: consuming GoDeeper> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

************ / term p/3:plain p                                                                                :3_2:Or:
************* / pParamText                                                                                    :3_2:Or:
************** / pParamText(flat) first line: pKeyValues                                                     :3_2:Or:
*************** / pKeyValuesAka                                                                             :3_2:Or:
**************** / slAKA                                                                                   :3_2:Or:
***************** / $*|                                                                                   :3_2:Or:
****************** / slAKA base                                                                          :3_2:Or:
******************* / slKeyValues                                                                       :3_2:Or:
******************** / $*|                                                                             :3_2:Or:
********************* / someSL                                                                        :3_2:Or:
********************** / pNumAsText                                                                  :3_2:Or:
pNumAsText> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected OR
someSL> expecting other text or number

$*|> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected OR
$*|> expecting other text or number

slKeyValues> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=6:
slKeyValues> unexpected OR
slKeyValues> expecting other text or number

slAKA base> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected OR
slAKA> expecting other text or number

pKeyValuesAka> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=6:
pKeyValuesAka> unexpected OR
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=6:
pParamText(flat) first line: pKeyValues> unexpected OR
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=6:
pParamText> unexpected OR
pParamText> expecting other text or number

term p/3:plain p> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=6:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=6:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
expression> MATCH (CERR): "b"
expression> ERROR:
expression> offset=6:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

******** / manyIndentation/deeper; calling someIndentation                                                         :2_2:Other "b":
********* / someIndentation                                                                                       :2_2:Other "b":
********** / myindented: consuming GoDeeper                                                                      :2_2:Other "b":
myindented: consuming GoDeeper> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected "b"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected "b"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected "b"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

****** / term p/3:plain p                                                                                           :2_2:GoDeeper:
******* / pParamText                                                                                               :2_2:GoDeeper:
******** / pParamText(flat) first line: pKeyValues                                                                :2_2:GoDeeper:
********* / pKeyValuesAka                                                                                        :2_2:GoDeeper:
********** / slAKA                                                                                              :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / slAKA base                                                                                     :2_2:GoDeeper:
************* / slKeyValues                                                                                  :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=4:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=4:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=4:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=4:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=6:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=6:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
expression> MATCH (CERR): ( "a" ) AND
expression> ERROR:
expression> offset=6:
expression> unexpected OR
expression> expecting (, NOT, or term

expr pParamText> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
expr pParamText> MATCH (CERR): ( "a" ) AND
expr pParamText> ERROR:
expr pParamText> offset=6:
expr pParamText> unexpected OR
expr pParamText> expecting (, NOT, or term

( "a" ) AND
    ( "b" OR ( "c" ) OR
        ( NOT ( "d" ) )
    )
** / expr pParamText                                                                                                    :1_2:GoDeeper:
*** / expression                                                                                                       :1_2:GoDeeper:
**** / labelPrefix                                                                                                    :1_2:GoDeeper:
labelPrefix> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=0:
labelPrefix> unexpected (
labelPrefix> expecting Other text

**** / term p                                                                                                         :1_2:GoDeeper:
***** / term p/notLabelTerm                                                                                          :1_2:GoDeeper:
****** / term p/2:someIndentation expr p                                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:Other "a":
******** / manyIndentation/leaf?                                                                                   :1_2:Other "a":
********* / expression                                                                                            :1_2:Other "a":
********** / labelPrefix                                                                                         :1_2:Other "a":
labelPrefix> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=2:
labelPrefix> unexpected )

********** / term p                                                                                              :1_2:Other "a":
*********** / term p/notLabelTerm                                                                               :1_2:Other "a":
************ / term p/2:someIndentation expr p                                                                 :1_2:Other "a":
************* / someIndentation                                                                               :1_2:Other "a":
************** / myindented: consuming GoDeeper                                                              :1_2:Other "a":
myindented: consuming GoDeeper> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=1:
myindented: consuming GoDeeper> unexpected "a"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected "a"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=1:
term p/2:someIndentation expr p> unexpected "a"
term p/2:someIndentation expr p> expecting (

************ / term p/3:plain p                                                                                :1_2:Other "a":
************* / pParamText                                                                                    :1_2:Other "a":
************** / pParamText(flat) first line: pKeyValues                                                     :1_2:Other "a":
*************** / pKeyValuesAka                                                                             :1_2:Other "a":
**************** / slAKA                                                                                   :1_2:Other "a":
***************** / $*|                                                                                   :1_2:Other "a":
****************** / slAKA base                                                                          :1_2:Other "a":
******************* / slKeyValues                                                                       :1_2:Other "a":
******************** / $*|                                                                             :1_2:Other "a":
********************* / someSL                                                                        :1_2:Other "a":
someSL> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
someSL> MATCH (COK): "a"
someSL> VALUE: ((["a"],0),[])

********************* \ someSL has returned (["a"],0)                                                  :2_2:UnDeeper:
$*|> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
$*|> MATCH (COK): "a"
$*|> VALUE: ((["a"],0),[])

******************** \ $*| has returned (["a"],0)                                                       :2_2:UnDeeper:
******************** / |>>/recurse                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :2_2:UnDeeper:
********************* / |?| optional something                                                         :2_2:UnDeeper:
********************** / |>>/recurse                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** / |>>/base                                                                     :2_2:UnDeeper:
*********************** / slTypeSig                                                                  :2_2:UnDeeper:
************************ / $>|                                                                      :2_2:UnDeeper:
$>|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=2:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :2_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :2_2:UnDeeper:
|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :2_2:UnDeeper:
slKeyValues> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
slKeyValues> MATCH (COK): "a"
slKeyValues> VALUE: ((("a" :| [],Nothing),0),[])

******************* \ slKeyValues has returned (("a" :| [],Nothing),0)                                   :2_2:UnDeeper:
slAKA base> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
slAKA base> MATCH (COK): "a"
slAKA base> VALUE: ((("a" :| [],Nothing),0),[])

****************** \ slAKA base has returned (("a" :| [],Nothing),0)                                      :2_2:UnDeeper:
$*|> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
$*|> MATCH (COK): "a"
$*|> VALUE: ((("a" :| [],Nothing),0),[])

***************** \ $*| has returned (("a" :| [],Nothing),0)                                               :2_2:UnDeeper:
***************** / |>>/recurse                                                                            :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** / |>>/base                                                                               :2_2:UnDeeper:
****************** / slAKA optional akapart                                                               :2_2:UnDeeper:
******************* / |?| optional something                                                             :2_2:UnDeeper:
******************** / |>>/recurse                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :2_2:UnDeeper:
********************* / PAKA/akapart                                                                   :2_2:UnDeeper:
********************** / $>|                                                                          :2_2:UnDeeper:
*********************** / Aka Token                                                                  :2_2:UnDeeper:
Aka Token> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=2:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=2:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :2_2:UnDeeper:
slAKA optional akapart> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :2_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :2_2:UnDeeper:
|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :2_2:UnDeeper:
***************** / |>>/recurse                                                                            :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** / |>>/base                                                                               :2_2:UnDeeper:
****************** / slAKA optional typically                                                             :2_2:UnDeeper:
******************* / |?| optional something                                                             :2_2:UnDeeper:
******************** / |>>/recurse                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :2_2:UnDeeper:
********************* / typically                                                                      :2_2:UnDeeper:
********************** / $>|                                                                          :2_2:UnDeeper:
$>|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=2:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :2_2:UnDeeper:
slAKA optional typically> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :2_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :2_2:UnDeeper:
|>>/base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :2_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :2_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :2_2:UnDeeper:
slAKA> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
slAKA> MATCH (COK): "a"
slAKA> VALUE: ((("a" :| [],Nothing),0),[])

**************** \ slAKA has returned (("a" :| [],Nothing),0)                                               :2_2:UnDeeper:
**************** / undeepers                                                                                :2_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                 :2_2:UnDeeper:
***************** > sameLine: success!                                                                     :2_2:UnDeeper:
undeepers> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                :2_2:UnDeeper:
pKeyValuesAka> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
pKeyValuesAka> MATCH (COK): "a"
pKeyValuesAka> VALUE: (("a" :| [],Nothing),[])

*************** \ pKeyValuesAka has returned ("a" :| [],Nothing)                                             :2_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "a"
pParamText(flat) first line: pKeyValues> VALUE: (("a" :| [],Nothing),[])

************** \ pParamText(flat) first line: pKeyValues has returned ("a" :| [],Nothing)                     :2_2:UnDeeper:
************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                       :2_2:UnDeeper:
*************** / manyIndentation/leaf?                                                                      :2_2:UnDeeper:
**************** / sameMany                                                                                 :2_2:UnDeeper:
***************** / pKeyValuesAka                                                                          :2_2:UnDeeper:
****************** / slAKA                                                                                :2_2:UnDeeper:
******************* / $*|                                                                                :2_2:UnDeeper:
******************** / slAKA base                                                                       :2_2:UnDeeper:
********************* / slKeyValues                                                                    :2_2:UnDeeper:
********************** / $*|                                                                          :2_2:UnDeeper:
*********************** / someSL                                                                     :2_2:UnDeeper:
************************ / pNumAsText                                                               :2_2:UnDeeper:
pNumAsText> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=2:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=2:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=2:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=2:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

**************** \ sameMany has returned []                                                                 :2_2:UnDeeper:
manyIndentation/leaf?> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*************** \ manyIndentation/leaf? has returned []                                                      :2_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                       :2_2:UnDeeper:
pParamText> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
pParamText> MATCH (COK): "a"
pParamText> VALUE: (("a" :| [],Nothing) :| [],[])

************* \ pParamText has returned ("a" :| [],Nothing) :| []                                              :2_2:UnDeeper:
term p/3:plain p> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
term p/3:plain p> MATCH (COK): "a"
term p/3:plain p> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

************ \ term p/3:plain p has returned MyLeaf (("a" :| [],Nothing) :| [])                                 :2_2:UnDeeper:
term p/notLabelTerm> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
term p/notLabelTerm> MATCH (COK): "a"
term p/notLabelTerm> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

*********** \ term p/notLabelTerm has returned MyLeaf (("a" :| [],Nothing) :| [])                                :2_2:UnDeeper:
term p> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
term p> MATCH (COK): "a"
term p> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

********** \ term p has returned MyLeaf (("a" :| [],Nothing) :| [])                                               :2_2:UnDeeper:
********** / binary(Or)                                                                                           :2_2:UnDeeper:
binary(Or)> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=2:
binary(Or)> unexpected )
binary(Or)> expecting OR

********** / binary(And)                                                                                          :2_2:UnDeeper:
binary(And)> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=2:
binary(And)> unexpected )
binary(And)> expecting AND

********** / binary(SetLess)                                                                                      :2_2:UnDeeper:
binary(SetLess)> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=2:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********** / binary(SetPlus)                                                                                      :2_2:UnDeeper:
binary(SetPlus)> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=2:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
expression> MATCH (COK): "a"
expression> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

********* \ expression has returned MyLeaf (("a" :| [],Nothing) :| [])                                             :2_2:UnDeeper:
manyIndentation/leaf?> IN: "a" ) AND ( "b" OR ( "c" ) OR ( NOT ( "d <…>
manyIndentation/leaf?> MATCH (COK): "a"
manyIndentation/leaf?> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

******** \ manyIndentation/leaf? has returned MyLeaf (("a" :| [],Nothing) :| [])                                    :2_2:UnDeeper:
******** / myindented: consuming UnDeeper                                                                           :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) AND ( "b" OR ( "c" ) OR ( NOT ( "d" )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******** \ myindented: consuming UnDeeper has returned UnDeeper                                                  :2_1:And:
someIndentation> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
someIndentation> MATCH (COK): ( "a" )
someIndentation> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

******* \ someIndentation has returned MyLeaf (("a" :| [],Nothing) :| [])                                         :2_1:And:
term p/2:someIndentation expr p> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "a" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

****** \ term p/2:someIndentation expr p has returned MyLeaf (("a" :| [],Nothing) :| [])                           :2_1:And:
term p/notLabelTerm> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
term p/notLabelTerm> MATCH (COK): ( "a" )
term p/notLabelTerm> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

***** \ term p/notLabelTerm has returned MyLeaf (("a" :| [],Nothing) :| [])                                         :2_1:And:
term p> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
term p> MATCH (COK): ( "a" )
term p> VALUE: (MyLeaf (("a" :| [],Nothing) :| []),[])

**** \ term p has returned MyLeaf (("a" :| [],Nothing) :| [])                                                        :2_1:And:
**** / binary(Or)                                                                                                    :2_1:And:
binary(Or)> IN: AND ( "b" OR ( "c" ) OR ( NOT ( "d" ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=3:
binary(Or)> unexpected AND
binary(Or)> expecting OR

**** / binary(And)                                                                                                   :2_1:And:
binary(And)> IN: AND ( "b" OR ( "c" ) OR ( NOT ( "d" ) )  <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

**** \ binary(And) has returned And                                                                                   :2_2:GoDeeper:
**** / term p                                                                                                         :2_2:GoDeeper:
***** / term p/notLabelTerm                                                                                          :2_2:GoDeeper:
****** / term p/2:someIndentation expr p                                                                            :2_2:GoDeeper:
******* / someIndentation                                                                                          :2_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :2_2:Other "b":
******** / manyIndentation/leaf?                                                                                   :2_2:Other "b":
********* / expression                                                                                            :2_2:Other "b":
********** / labelPrefix                                                                                         :2_2:Other "b":
labelPrefix> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
labelPrefix> MATCH (COK): "b"
labelPrefix> VALUE: ("b",[])

********** \ labelPrefix has returned "b"                                                                        :3_2:Or:
********** / term p                                                                                              :3_2:Or:
*********** / term p/notLabelTerm                                                                               :3_2:Or:
************ / term p/2:someIndentation expr p                                                                 :3_2:Or:
************* / someIndentation                                                                               :3_2:Or:
************** / myindented: consuming GoDeeper                                                              :3_2:Or:
myindented: consuming GoDeeper> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected OR
myindented: consuming GoDeeper> expecting (

someIndentation> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected OR
someIndentation> expecting (

term p/2:someIndentation expr p> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

************ / term p/3:plain p                                                                                :3_2:Or:
************* / pParamText                                                                                    :3_2:Or:
************** / pParamText(flat) first line: pKeyValues                                                     :3_2:Or:
*************** / pKeyValuesAka                                                                             :3_2:Or:
**************** / slAKA                                                                                   :3_2:Or:
***************** / $*|                                                                                   :3_2:Or:
****************** / slAKA base                                                                          :3_2:Or:
******************* / slKeyValues                                                                       :3_2:Or:
******************** / $*|                                                                             :3_2:Or:
********************* / someSL                                                                        :3_2:Or:
********************** / pNumAsText                                                                  :3_2:Or:
pNumAsText> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected OR
pNumAsText> expecting number

someSL> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected OR
someSL> expecting other text or number

$*|> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected OR
$*|> expecting other text or number

slKeyValues> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=6:
slKeyValues> unexpected OR
slKeyValues> expecting other text or number

slAKA base> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected OR
slAKA base> expecting other text or number

$*|> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected OR
$*|> expecting other text or number

slAKA> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected OR
slAKA> expecting other text or number

pKeyValuesAka> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=6:
pKeyValuesAka> unexpected OR
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=6:
pParamText(flat) first line: pKeyValues> unexpected OR
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=6:
pParamText> unexpected OR
pParamText> expecting other text or number

term p/3:plain p> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=6:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=6:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

term p> IN: OR ( "c" ) OR ( NOT ( "d" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=6:
term p> unexpected OR
term p> expecting ( or term

expression> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
expression> MATCH (CERR): "b"
expression> ERROR:
expression> offset=6:
expression> unexpected OR
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting (, NOT, or term

******** / manyIndentation/deeper; calling someIndentation                                                         :2_2:Other "b":
********* / someIndentation                                                                                       :2_2:Other "b":
********** / myindented: consuming GoDeeper                                                                      :2_2:Other "b":
myindented: consuming GoDeeper> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected "b"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected "b"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected "b"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected OR
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (, NOT, or term

****** / term p/3:plain p                                                                                           :2_2:GoDeeper:
******* / pParamText                                                                                               :2_2:GoDeeper:
******** / pParamText(flat) first line: pKeyValues                                                                :2_2:GoDeeper:
********* / pKeyValuesAka                                                                                        :2_2:GoDeeper:
********** / slAKA                                                                                              :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / slAKA base                                                                                     :2_2:GoDeeper:
************* / slKeyValues                                                                                  :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=4:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=4:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=4:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=4:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=6:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "b" OR ( "c" ) OR ( NOT ( "d" ) ) )
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=6:
term p> unexpected OR
term p> expecting (, NOT, or term

expression> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
expression> MATCH (CERR): ( "a" ) AND
expression> ERROR:
expression> offset=6:
expression> unexpected OR
expression> expecting (, NOT, or term

expr pParamText> IN: ( "a" ) AND ( "b" OR ( "c" ) OR ( NOT (  <…>
expr pParamText> MATCH (CERR): ( "a" ) AND
expr pParamText> ERROR:
expr pParamText> offset=6:
expr pParamText> unexpected OR
expr pParamText> expecting (, NOT, or term


our new parser
  indent-2-b FAILED [1]
  indent-2-b FAILED [2]

Failures:

  test/Spec.hs:124:3: 
  1) our new parser indent-2-b
       expected: [(MyAll [MyLeaf (("a" :| [],Nothing) :| []),MyAny [MyLeaf (("b" :| [],Nothing) :| []),MyLeaf (("c" :| [],Nothing) :| []),MyNot (MyLeaf (("d" :| [],Nothing) :| []))]],[])]
       but parsing failed with error:
       3:2:
       unexpected OR
       expecting (, NOT, or term
            a             
       AND  b             
            ✳ OR c        
            OR   NOT  d   
       

  To rerun use: --match "/our new parser/indent-2-b/"

  test/Spec.hs:124:3: 
  2) our new parser indent-2-b
       expected: [(MyAll [MyLeaf (("a" :| [],Nothing) :| []),MyAny [MyLeaf (("b" :| [],Nothing) :| []),MyLeaf (("c" :| [],Nothing) :| []),MyNot (MyLeaf (("d" :| [],Nothing) :| []))]],[])]
       but parsing failed with error:
       3:2:
       unexpected OR
       expecting (, NOT, or term
            a             
       AND  b             
            ✳ OR c        
            OR   NOT  d   
       

  To rerun use: --match "/our new parser/indent-2-b/"

Randomized with seed 1020905405

Finished in 0.0106 seconds
2 examples, 2 failures

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

