* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/our new parser/indent-2-c-3/")

* Tokens
Lib preprocessor: inserting EOL between Other "this is a label" and Other "mid3"
( "top1" ) OR ( "top2" ) OR
    ( "this is a label" EOL ( "mid3" ) OR ( "mid4" ) )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / expr pParamText                                                                                                    :1_2:GoDeeper:
*** / expression                                                                                                       :1_2:GoDeeper:
**** / term p                                                                                                         :1_2:GoDeeper:
***** / term p/notLabelTerm                                                                                          :1_2:GoDeeper:
****** / term p/2:someIndentation expr p                                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "top1" ) OR ( "top2" ) OR ( "this is a <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :1_2:Other "top1:
******** / manyIndentation/leaf?                                                                                   :1_2:Other "top1:
********* / expression                                                                                            :1_2:Other "top1:
********** / term p                                                                                              :1_2:Other "top1:
*********** / term p/notLabelTerm                                                                               :1_2:Other "top1:
************ / term p/2:someIndentation expr p                                                                 :1_2:Other "top1:
************* / someIndentation                                                                               :1_2:Other "top1:
************** / myindented: consuming GoDeeper                                                              :1_2:Other "top1:
myindented: consuming GoDeeper> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=1:
myindented: consuming GoDeeper> unexpected "top1"
myindented: consuming GoDeeper> expecting (

************** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "top1" Expecting: (           :1_2:Other "top1:
someIndentation> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected "top1"
someIndentation> expecting (

************* \ !Unconsumed Error: someIndentation: Unexpected "top1" Expecting: (                            :1_2:Other "top1:
term p/2:someIndentation expr p> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=1:
term p/2:someIndentation expr p> unexpected "top1"
term p/2:someIndentation expr p> expecting (

************ \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "top1" Expecting: (              :1_2:Other "top1:
************ / term p/3:plain p                                                                                :1_2:Other "top1:
************* / pParamText                                                                                    :1_2:Other "top1:
************** / pParamText(flat) first line: pKeyValues                                                     :1_2:Other "top1:
*************** / pKeyValuesAka                                                                             :1_2:Other "top1:
**************** / slAKA                                                                                   :1_2:Other "top1:
***************** / $*|                                                                                   :1_2:Other "top1:
****************** / slAKA base                                                                          :1_2:Other "top1:
******************* / slKeyValues                                                                       :1_2:Other "top1:
******************** / $*|                                                                             :1_2:Other "top1:
********************* / someSL                                                                        :1_2:Other "top1:
someSL> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
someSL> MATCH (COK): "top1"
someSL> VALUE: ((["top1"],0),[])

********************* \ someSL has returned (["top1"],0)                                               :2_2:UnDeeper:
$*|> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
$*|> MATCH (COK): "top1"
$*|> VALUE: ((["top1"],0),[])

******************** \ $*| has returned (["top1"],0)                                                    :2_2:UnDeeper:
******************** / |>>/recurse                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :2_2:UnDeeper:
******************** / |>>/base                                                                         :2_2:UnDeeper:
********************* / |?| optional something                                                         :2_2:UnDeeper:
********************** / |>>/recurse                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                    :2_2:UnDeeper:
********************** / |>>/base                                                                     :2_2:UnDeeper:
*********************** / slTypeSig                                                                  :2_2:UnDeeper:
************************ / $>|                                                                      :2_2:UnDeeper:
$>|> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting :: or IS

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                    :2_2:UnDeeper:
slTypeSig> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=2:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*********************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                :2_2:UnDeeper:
|>>/base> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting :: or IS

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                   :2_2:UnDeeper:
|?| optional something> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :2_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :2_2:UnDeeper:
|>>/base> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :2_2:UnDeeper:
slKeyValues> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
slKeyValues> MATCH (COK): "top1"
slKeyValues> VALUE: ((("top1" :| [],Nothing),0),[])

******************* \ slKeyValues has returned (("top1" :| [],Nothing),0)                                :2_2:UnDeeper:
slAKA base> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
slAKA base> MATCH (COK): "top1"
slAKA base> VALUE: ((("top1" :| [],Nothing),0),[])

****************** \ slAKA base has returned (("top1" :| [],Nothing),0)                                   :2_2:UnDeeper:
$*|> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
$*|> MATCH (COK): "top1"
$*|> VALUE: ((("top1" :| [],Nothing),0),[])

***************** \ $*| has returned (("top1" :| [],Nothing),0)                                            :2_2:UnDeeper:
***************** / |>>/recurse                                                                            :2_2:UnDeeper:
|>>/recurse> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :2_2:UnDeeper:
***************** / |>>/base                                                                               :2_2:UnDeeper:
****************** / slAKA optional akapart                                                               :2_2:UnDeeper:
******************* / |?| optional something                                                             :2_2:UnDeeper:
******************** / |>>/recurse                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :2_2:UnDeeper:
******************** / |>>/base                                                                         :2_2:UnDeeper:
********************* / PAKA/akapart                                                                   :2_2:UnDeeper:
********************** / $>|                                                                          :2_2:UnDeeper:
*********************** / Aka Token                                                                  :2_2:UnDeeper:
Aka Token> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=2:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                  :2_2:UnDeeper:
$>|> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
PAKA/akapart> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=2:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                   :2_2:UnDeeper:
|>>/base> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                         :2_2:UnDeeper:
|?| optional something> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :2_2:UnDeeper:
slAKA optional akapart> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :2_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :2_2:UnDeeper:
|>>/base> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :2_2:UnDeeper:
***************** / |>>/recurse                                                                            :2_2:UnDeeper:
|>>/recurse> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :2_2:UnDeeper:
***************** / |>>/base                                                                               :2_2:UnDeeper:
****************** / slAKA optional typically                                                             :2_2:UnDeeper:
******************* / |?| optional something                                                             :2_2:UnDeeper:
******************** / |>>/recurse                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :2_2:UnDeeper:
******************** / |>>/base                                                                         :2_2:UnDeeper:
********************* / typically                                                                      :2_2:UnDeeper:
********************** / $>|                                                                          :2_2:UnDeeper:
$>|> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=2:
$>|> unexpected )
$>|> expecting TYPICALLY

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                    :2_2:UnDeeper:
typically> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=2:
typically> unexpected )
typically> expecting TYPICALLY

********************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                :2_2:UnDeeper:
|>>/base> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=2:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                   :2_2:UnDeeper:
|?| optional something> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :2_2:UnDeeper:
slAKA optional typically> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :2_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :2_2:UnDeeper:
|>>/base> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :2_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :2_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :2_2:UnDeeper:
slAKA> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
slAKA> MATCH (COK): "top1"
slAKA> VALUE: ((("top1" :| [],Nothing),0),[])

**************** \ slAKA has returned (("top1" :| [],Nothing),0)                                            :2_2:UnDeeper:
**************** / undeepers                                                                                :2_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                 :2_2:UnDeeper:
***************** > sameLine: success!                                                                     :2_2:UnDeeper:
undeepers> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                :2_2:UnDeeper:
pKeyValuesAka> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
pKeyValuesAka> MATCH (COK): "top1"
pKeyValuesAka> VALUE: (("top1" :| [],Nothing),[])

*************** \ pKeyValuesAka has returned ("top1" :| [],Nothing)                                          :2_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "top1"
pParamText(flat) first line: pKeyValues> VALUE: (("top1" :| [],Nothing),[])

************** \ pParamText(flat) first line: pKeyValues has returned ("top1" :| [],Nothing)                  :2_2:UnDeeper:
************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                       :2_2:UnDeeper:
*************** / manyIndentation/leaf?                                                                      :2_2:UnDeeper:
**************** / sameMany                                                                                 :2_2:UnDeeper:
***************** / pKeyValuesAka                                                                          :2_2:UnDeeper:
****************** / slAKA                                                                                :2_2:UnDeeper:
******************* / $*|                                                                                :2_2:UnDeeper:
******************** / slAKA base                                                                       :2_2:UnDeeper:
********************* / slKeyValues                                                                    :2_2:UnDeeper:
********************** / $*|                                                                          :2_2:UnDeeper:
*********************** / someSL                                                                     :2_2:UnDeeper:
************************ / pNumAsText                                                               :2_2:UnDeeper:
pNumAsText> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected )
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number            :2_2:UnDeeper:
someSL> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected )
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number    :2_2:UnDeeper:
$*|> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected )
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number         :2_2:UnDeeper:
slKeyValues> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=2:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

********************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number   :2_2:UnDeeper:
slAKA base> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=2:
slAKA base> unexpected )
slAKA base> expecting other text or number

******************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number      :2_2:UnDeeper:
$*|> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected )
$*|> expecting other text or number

******************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number               :2_2:UnDeeper:
slAKA> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=2:
slAKA> unexpected )
slAKA> expecting other text or number

****************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number               :2_2:UnDeeper:
pKeyValuesAka> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=2:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

***************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number         :2_2:UnDeeper:
sameMany> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

**************** \ sameMany has returned []                                                                 :2_2:UnDeeper:
manyIndentation/leaf?> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*************** \ manyIndentation/leaf? has returned []                                                      :2_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                       :2_2:UnDeeper:
pParamText> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
pParamText> MATCH (COK): "top1"
pParamText> VALUE: (("top1" :| [],Nothing) :| [],[])

************* \ pParamText has returned ("top1" :| [],Nothing) :| []                                           :2_2:UnDeeper:
term p/3:plain p> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
term p/3:plain p> MATCH (COK): "top1"
term p/3:plain p> VALUE: (MyLeaf (("top1" :| [],Nothing) :| []),[])

************ \ term p/3:plain p has returned MyLeaf (("top1" :| [],Nothing) :| [])                              :2_2:UnDeeper:
term p/notLabelTerm> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
term p/notLabelTerm> MATCH (COK): "top1"
term p/notLabelTerm> VALUE: (MyLeaf (("top1" :| [],Nothing) :| []),[])

*********** \ term p/notLabelTerm has returned MyLeaf (("top1" :| [],Nothing) :| [])                             :2_2:UnDeeper:
term p> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
term p> MATCH (COK): "top1"
term p> VALUE: (MyLeaf (("top1" :| [],Nothing) :| []),[])

********** \ term p has returned MyLeaf (("top1" :| [],Nothing) :| [])                                            :2_2:UnDeeper:
********** / binary(Or)                                                                                           :2_2:UnDeeper:
binary(Or)> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=2:
binary(Or)> unexpected )
binary(Or)> expecting OR

********** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                            :2_2:UnDeeper:
********** / binary(And)                                                                                          :2_2:UnDeeper:
binary(And)> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=2:
binary(And)> unexpected )
binary(And)> expecting AND

********** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                          :2_2:UnDeeper:
********** / binary(SetLess)                                                                                      :2_2:UnDeeper:
binary(SetLess)> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=2:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                     :2_2:UnDeeper:
********** / binary(SetPlus)                                                                                      :2_2:UnDeeper:
binary(SetPlus)> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=2:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                     :2_2:UnDeeper:
expression> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
expression> MATCH (COK): "top1"
expression> VALUE: (MyLeaf (("top1" :| [],Nothing) :| []),[])

********* \ expression has returned MyLeaf (("top1" :| [],Nothing) :| [])                                          :2_2:UnDeeper:
manyIndentation/leaf?> IN: "top1" ) OR ( "top2" ) OR ( "this is a l <…>
manyIndentation/leaf?> MATCH (COK): "top1"
manyIndentation/leaf?> VALUE: (MyLeaf (("top1" :| [],Nothing) :| []),[])

******** \ manyIndentation/leaf? has returned MyLeaf (("top1" :| [],Nothing) :| [])                                 :2_2:UnDeeper:
******** / myindented: consuming UnDeeper                                                                           :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "top2" ) OR ( "this is a label" E <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******** \ myindented: consuming UnDeeper has returned UnDeeper                                                  :2_1:Or:
someIndentation> IN: ( "top1" ) OR ( "top2" ) OR ( "this is a <…>
someIndentation> MATCH (COK): ( "top1" )
someIndentation> VALUE: (MyLeaf (("top1" :| [],Nothing) :| []),[])

******* \ someIndentation has returned MyLeaf (("top1" :| [],Nothing) :| [])                                      :2_1:Or:
term p/2:someIndentation expr p> IN: ( "top1" ) OR ( "top2" ) OR ( "this is a <…>
term p/2:someIndentation expr p> MATCH (COK): ( "top1" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("top1" :| [],Nothing) :| []),[])

****** \ term p/2:someIndentation expr p has returned MyLeaf (("top1" :| [],Nothing) :| [])                        :2_1:Or:
term p/notLabelTerm> IN: ( "top1" ) OR ( "top2" ) OR ( "this is a <…>
term p/notLabelTerm> MATCH (COK): ( "top1" )
term p/notLabelTerm> VALUE: (MyLeaf (("top1" :| [],Nothing) :| []),[])

***** \ term p/notLabelTerm has returned MyLeaf (("top1" :| [],Nothing) :| [])                                      :2_1:Or:
term p> IN: ( "top1" ) OR ( "top2" ) OR ( "this is a <…>
term p> MATCH (COK): ( "top1" )
term p> VALUE: (MyLeaf (("top1" :| [],Nothing) :| []),[])

**** \ term p has returned MyLeaf (("top1" :| [],Nothing) :| [])                                                     :2_1:Or:
**** / binary(Or)                                                                                                    :2_1:Or:
binary(Or)> IN: OR ( "top2" ) OR ( "this is a label" EOL <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

**** \ binary(Or) has returned Or                                                                                     :2_2:GoDeeper:
**** / term p                                                                                                         :2_2:GoDeeper:
***** / term p/notLabelTerm                                                                                          :2_2:GoDeeper:
****** / term p/2:someIndentation expr p                                                                            :2_2:GoDeeper:
******* / someIndentation                                                                                          :2_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "top2" ) OR ( "this is a label" EOL (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :2_2:Other "top2:
******** / manyIndentation/leaf?                                                                                   :2_2:Other "top2:
********* / expression                                                                                            :2_2:Other "top2:
********** / term p                                                                                              :2_2:Other "top2:
*********** / term p/notLabelTerm                                                                               :2_2:Other "top2:
************ / term p/2:someIndentation expr p                                                                 :2_2:Other "top2:
************* / someIndentation                                                                               :2_2:Other "top2:
************** / myindented: consuming GoDeeper                                                              :2_2:Other "top2:
myindented: consuming GoDeeper> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected "top2"
myindented: consuming GoDeeper> expecting (

************** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "top2" Expecting: (           :2_2:Other "top2:
someIndentation> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected "top2"
someIndentation> expecting (

************* \ !Unconsumed Error: someIndentation: Unexpected "top2" Expecting: (                            :2_2:Other "top2:
term p/2:someIndentation expr p> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=5:
term p/2:someIndentation expr p> unexpected "top2"
term p/2:someIndentation expr p> expecting (

************ \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "top2" Expecting: (              :2_2:Other "top2:
************ / term p/3:plain p                                                                                :2_2:Other "top2:
************* / pParamText                                                                                    :2_2:Other "top2:
************** / pParamText(flat) first line: pKeyValues                                                     :2_2:Other "top2:
*************** / pKeyValuesAka                                                                             :2_2:Other "top2:
**************** / slAKA                                                                                   :2_2:Other "top2:
***************** / $*|                                                                                   :2_2:Other "top2:
****************** / slAKA base                                                                          :2_2:Other "top2:
******************* / slKeyValues                                                                       :2_2:Other "top2:
******************** / $*|                                                                             :2_2:Other "top2:
********************* / someSL                                                                        :2_2:Other "top2:
someSL> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
someSL> MATCH (COK): "top2"
someSL> VALUE: ((["top2"],0),[])

********************* \ someSL has returned (["top2"],0)                                               :3_2:UnDeeper:
$*|> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
$*|> MATCH (COK): "top2"
$*|> VALUE: ((["top2"],0),[])

******************** \ $*| has returned (["top2"],0)                                                    :3_2:UnDeeper:
******************** / |>>/recurse                                                                      :3_2:UnDeeper:
|>>/recurse> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :3_2:UnDeeper:
******************** / |>>/base                                                                         :3_2:UnDeeper:
********************* / |?| optional something                                                         :3_2:UnDeeper:
********************** / |>>/recurse                                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                    :3_2:UnDeeper:
********************** / |>>/base                                                                     :3_2:UnDeeper:
*********************** / slTypeSig                                                                  :3_2:UnDeeper:
************************ / $>|                                                                      :3_2:UnDeeper:
$>|> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected )
$>|> expecting :: or IS

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                    :3_2:UnDeeper:
slTypeSig> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=6:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*********************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                :3_2:UnDeeper:
|>>/base> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected )
|>>/base> expecting :: or IS

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                   :3_2:UnDeeper:
|?| optional something> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :3_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :3_2:UnDeeper:
|>>/base> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :3_2:UnDeeper:
slKeyValues> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
slKeyValues> MATCH (COK): "top2"
slKeyValues> VALUE: ((("top2" :| [],Nothing),0),[])

******************* \ slKeyValues has returned (("top2" :| [],Nothing),0)                                :3_2:UnDeeper:
slAKA base> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
slAKA base> MATCH (COK): "top2"
slAKA base> VALUE: ((("top2" :| [],Nothing),0),[])

****************** \ slAKA base has returned (("top2" :| [],Nothing),0)                                   :3_2:UnDeeper:
$*|> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
$*|> MATCH (COK): "top2"
$*|> VALUE: ((("top2" :| [],Nothing),0),[])

***************** \ $*| has returned (("top2" :| [],Nothing),0)                                            :3_2:UnDeeper:
***************** / |>>/recurse                                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :3_2:UnDeeper:
***************** / |>>/base                                                                               :3_2:UnDeeper:
****************** / slAKA optional akapart                                                               :3_2:UnDeeper:
******************* / |?| optional something                                                             :3_2:UnDeeper:
******************** / |>>/recurse                                                                      :3_2:UnDeeper:
|>>/recurse> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :3_2:UnDeeper:
******************** / |>>/base                                                                         :3_2:UnDeeper:
********************* / PAKA/akapart                                                                   :3_2:UnDeeper:
********************** / $>|                                                                          :3_2:UnDeeper:
*********************** / Aka Token                                                                  :3_2:UnDeeper:
Aka Token> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                  :3_2:UnDeeper:
$>|> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected )
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                          :3_2:UnDeeper:
PAKA/akapart> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                   :3_2:UnDeeper:
|>>/base> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected )
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                         :3_2:UnDeeper:
|?| optional something> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :3_2:UnDeeper:
slAKA optional akapart> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :3_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :3_2:UnDeeper:
|>>/base> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :3_2:UnDeeper:
***************** / |>>/recurse                                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :3_2:UnDeeper:
***************** / |>>/base                                                                               :3_2:UnDeeper:
****************** / slAKA optional typically                                                             :3_2:UnDeeper:
******************* / |?| optional something                                                             :3_2:UnDeeper:
******************** / |>>/recurse                                                                      :3_2:UnDeeper:
|>>/recurse> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :3_2:UnDeeper:
******************** / |>>/base                                                                         :3_2:UnDeeper:
********************* / typically                                                                      :3_2:UnDeeper:
********************** / $>|                                                                          :3_2:UnDeeper:
$>|> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected )
$>|> expecting TYPICALLY

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                    :3_2:UnDeeper:
typically> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected )
typically> expecting TYPICALLY

********************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                :3_2:UnDeeper:
|>>/base> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                   :3_2:UnDeeper:
|?| optional something> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :3_2:UnDeeper:
slAKA optional typically> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :3_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :3_2:UnDeeper:
|>>/base> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :3_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :3_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :3_2:UnDeeper:
slAKA> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
slAKA> MATCH (COK): "top2"
slAKA> VALUE: ((("top2" :| [],Nothing),0),[])

**************** \ slAKA has returned (("top2" :| [],Nothing),0)                                            :3_2:UnDeeper:
**************** / undeepers                                                                                :3_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                 :3_2:UnDeeper:
***************** > sameLine: success!                                                                     :3_2:UnDeeper:
undeepers> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                :3_2:UnDeeper:
pKeyValuesAka> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
pKeyValuesAka> MATCH (COK): "top2"
pKeyValuesAka> VALUE: (("top2" :| [],Nothing),[])

*************** \ pKeyValuesAka has returned ("top2" :| [],Nothing)                                          :3_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "top2"
pParamText(flat) first line: pKeyValues> VALUE: (("top2" :| [],Nothing),[])

************** \ pParamText(flat) first line: pKeyValues has returned ("top2" :| [],Nothing)                  :3_2:UnDeeper:
************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                       :3_2:UnDeeper:
*************** / manyIndentation/leaf?                                                                      :3_2:UnDeeper:
**************** / sameMany                                                                                 :3_2:UnDeeper:
***************** / pKeyValuesAka                                                                          :3_2:UnDeeper:
****************** / slAKA                                                                                :3_2:UnDeeper:
******************* / $*|                                                                                :3_2:UnDeeper:
******************** / slAKA base                                                                       :3_2:UnDeeper:
********************* / slKeyValues                                                                    :3_2:UnDeeper:
********************** / $*|                                                                          :3_2:UnDeeper:
*********************** / someSL                                                                     :3_2:UnDeeper:
************************ / pNumAsText                                                               :3_2:UnDeeper:
pNumAsText> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected )
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number            :3_2:UnDeeper:
someSL> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected )
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number    :3_2:UnDeeper:
$*|> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected )
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number         :3_2:UnDeeper:
slKeyValues> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=6:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

********************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number   :3_2:UnDeeper:
slAKA base> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=6:
slAKA base> unexpected )
slAKA base> expecting other text or number

******************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number      :3_2:UnDeeper:
$*|> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected )
$*|> expecting other text or number

******************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number               :3_2:UnDeeper:
slAKA> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=6:
slAKA> unexpected )
slAKA> expecting other text or number

****************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number               :3_2:UnDeeper:
pKeyValuesAka> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=6:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

***************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number         :3_2:UnDeeper:
sameMany> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

**************** \ sameMany has returned []                                                                 :3_2:UnDeeper:
manyIndentation/leaf?> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*************** \ manyIndentation/leaf? has returned []                                                      :3_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                       :3_2:UnDeeper:
pParamText> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
pParamText> MATCH (COK): "top2"
pParamText> VALUE: (("top2" :| [],Nothing) :| [],[])

************* \ pParamText has returned ("top2" :| [],Nothing) :| []                                           :3_2:UnDeeper:
term p/3:plain p> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
term p/3:plain p> MATCH (COK): "top2"
term p/3:plain p> VALUE: (MyLeaf (("top2" :| [],Nothing) :| []),[])

************ \ term p/3:plain p has returned MyLeaf (("top2" :| [],Nothing) :| [])                              :3_2:UnDeeper:
term p/notLabelTerm> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
term p/notLabelTerm> MATCH (COK): "top2"
term p/notLabelTerm> VALUE: (MyLeaf (("top2" :| [],Nothing) :| []),[])

*********** \ term p/notLabelTerm has returned MyLeaf (("top2" :| [],Nothing) :| [])                             :3_2:UnDeeper:
term p> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
term p> MATCH (COK): "top2"
term p> VALUE: (MyLeaf (("top2" :| [],Nothing) :| []),[])

********** \ term p has returned MyLeaf (("top2" :| [],Nothing) :| [])                                            :3_2:UnDeeper:
********** / binary(Or)                                                                                           :3_2:UnDeeper:
binary(Or)> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=6:
binary(Or)> unexpected )
binary(Or)> expecting OR

********** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                            :3_2:UnDeeper:
********** / binary(And)                                                                                          :3_2:UnDeeper:
binary(And)> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=6:
binary(And)> unexpected )
binary(And)> expecting AND

********** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                          :3_2:UnDeeper:
********** / binary(SetLess)                                                                                      :3_2:UnDeeper:
binary(SetLess)> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=6:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                     :3_2:UnDeeper:
********** / binary(SetPlus)                                                                                      :3_2:UnDeeper:
binary(SetPlus)> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=6:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                     :3_2:UnDeeper:
expression> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
expression> MATCH (COK): "top2"
expression> VALUE: (MyLeaf (("top2" :| [],Nothing) :| []),[])

********* \ expression has returned MyLeaf (("top2" :| [],Nothing) :| [])                                          :3_2:UnDeeper:
manyIndentation/leaf?> IN: "top2" ) OR ( "this is a label" EOL ( "m <…>
manyIndentation/leaf?> MATCH (COK): "top2"
manyIndentation/leaf?> VALUE: (MyLeaf (("top2" :| [],Nothing) :| []),[])

******** \ manyIndentation/leaf? has returned MyLeaf (("top2" :| [],Nothing) :| [])                                 :3_2:UnDeeper:
******** / myindented: consuming UnDeeper                                                                           :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( "this is a label" EOL ( "mid3" )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

******** \ myindented: consuming UnDeeper has returned UnDeeper                                                  :3_1:Or:
someIndentation> IN: ( "top2" ) OR ( "this is a label" EOL (  <…>
someIndentation> MATCH (COK): ( "top2" )
someIndentation> VALUE: (MyLeaf (("top2" :| [],Nothing) :| []),[])

******* \ someIndentation has returned MyLeaf (("top2" :| [],Nothing) :| [])                                      :3_1:Or:
term p/2:someIndentation expr p> IN: ( "top2" ) OR ( "this is a label" EOL (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "top2" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("top2" :| [],Nothing) :| []),[])

****** \ term p/2:someIndentation expr p has returned MyLeaf (("top2" :| [],Nothing) :| [])                        :3_1:Or:
term p/notLabelTerm> IN: ( "top2" ) OR ( "this is a label" EOL (  <…>
term p/notLabelTerm> MATCH (COK): ( "top2" )
term p/notLabelTerm> VALUE: (MyLeaf (("top2" :| [],Nothing) :| []),[])

***** \ term p/notLabelTerm has returned MyLeaf (("top2" :| [],Nothing) :| [])                                      :3_1:Or:
term p> IN: ( "top2" ) OR ( "this is a label" EOL (  <…>
term p> MATCH (COK): ( "top2" )
term p> VALUE: (MyLeaf (("top2" :| [],Nothing) :| []),[])

**** \ term p has returned MyLeaf (("top2" :| [],Nothing) :| [])                                                     :3_1:Or:
**** / binary(Or)                                                                                                    :3_1:Or:
binary(Or)> IN: OR ( "this is a label" EOL ( "mid3" ) OR <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

**** \ binary(Or) has returned Or                                                                                     :3_2:GoDeeper:
**** / term p                                                                                                         :3_2:GoDeeper:
***** / term p/notLabelTerm                                                                                          :3_2:GoDeeper:
****** / term p/2:someIndentation expr p                                                                            :3_2:GoDeeper:
******* / someIndentation                                                                                          :3_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :3_2:Other "this:
******** / manyIndentation/leaf?                                                                                   :3_2:Other "this:
********* / expression                                                                                            :3_2:Other "this:
********** / term p                                                                                              :3_2:Other "this:
*********** / term p/notLabelTerm                                                                               :3_2:Other "this:
************ / term p/2:someIndentation expr p                                                                 :3_2:Other "this:
************* / someIndentation                                                                               :3_2:Other "this:
************** / myindented: consuming GoDeeper                                                              :3_2:Other "this:
myindented: consuming GoDeeper> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected "this is a label"
myindented: consuming GoDeeper> expecting (

************** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "this is a label" Expecting: ( :3_2:Other "this:
someIndentation> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected "this is a label"
someIndentation> expecting (

************* \ !Unconsumed Error: someIndentation: Unexpected "this is a label" Expecting: (                 :3_2:Other "this:
term p/2:someIndentation expr p> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected "this is a label"
term p/2:someIndentation expr p> expecting (

************ \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "this is a label" Expecting: (   :3_2:Other "this:
************ / term p/3:plain p                                                                                :3_2:Other "this:
************* / pParamText                                                                                    :3_2:Other "this:
************** / pParamText(flat) first line: pKeyValues                                                     :3_2:Other "this:
*************** / pKeyValuesAka                                                                             :3_2:Other "this:
**************** / slAKA                                                                                   :3_2:Other "this:
***************** / $*|                                                                                   :3_2:Other "this:
****************** / slAKA base                                                                          :3_2:Other "this:
******************* / slKeyValues                                                                       :3_2:Other "this:
******************** / $*|                                                                             :3_2:Other "this:
********************* / someSL                                                                        :3_2:Other "this:
someSL> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
someSL> MATCH (COK): "this is a label"
someSL> VALUE: ((["this is a label"],0),[])

********************* \ someSL has returned (["this is a label"],0)                                   :3_2:EOL:
$*|> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
$*|> MATCH (COK): "this is a label"
$*|> VALUE: ((["this is a label"],0),[])

******************** \ $*| has returned (["this is a label"],0)                                        :3_2:EOL:
******************** / |>>/recurse                                                                     :3_2:EOL:
|>>/recurse> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (                     :3_2:EOL:
******************** / |>>/base                                                                        :3_2:EOL:
********************* / |?| optional something                                                        :3_2:EOL:
********************** / |>>/recurse                                                                 :3_2:EOL:
|>>/recurse> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (                 :3_2:EOL:
********************** / |>>/base                                                                    :3_2:EOL:
*********************** / slTypeSig                                                                 :3_2:EOL:
************************ / $>|                                                                     :3_2:EOL:
$>|> IN: EOL ( "mid3" ) OR ( "mid4" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected EOL
$>|> expecting :: or IS

************************ \ !Unconsumed Error: $>|: Unexpected EOL Expecting: IS ::                 :3_2:EOL:
slTypeSig> IN: EOL ( "mid3" ) OR ( "mid4" ) )
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=10:
slTypeSig> unexpected EOL
slTypeSig> expecting :: or IS

*********************** \ !Unconsumed Error: slTypeSig: Unexpected EOL Expecting: IS ::             :3_2:EOL:
|>>/base> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected EOL
|>>/base> expecting :: or IS

********************** \ !Unconsumed Error: |>>/base: Unexpected EOL Expecting: IS ::                :3_2:EOL:
|?| optional something> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                               :3_2:EOL:
********************* > |>>/base got Nothing                                                          :3_2:EOL:
|>>/base> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                               :3_2:EOL:
slKeyValues> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
slKeyValues> MATCH (COK): "this is a label"
slKeyValues> VALUE: ((("this is a label" :| [],Nothing),0),[])

******************* \ slKeyValues has returned (("this is a label" :| [],Nothing),0)                    :3_2:EOL:
slAKA base> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
slAKA base> MATCH (COK): "this is a label"
slAKA base> VALUE: ((("this is a label" :| [],Nothing),0),[])

****************** \ slAKA base has returned (("this is a label" :| [],Nothing),0)                       :3_2:EOL:
$*|> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
$*|> MATCH (COK): "this is a label"
$*|> VALUE: ((("this is a label" :| [],Nothing),0),[])

***************** \ $*| has returned (("this is a label" :| [],Nothing),0)                                :3_2:EOL:
***************** / |>>/recurse                                                                           :3_2:EOL:
|>>/recurse> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (                           :3_2:EOL:
***************** / |>>/base                                                                              :3_2:EOL:
****************** / slAKA optional akapart                                                              :3_2:EOL:
******************* / |?| optional something                                                            :3_2:EOL:
******************** / |>>/recurse                                                                     :3_2:EOL:
|>>/recurse> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (                     :3_2:EOL:
******************** / |>>/base                                                                        :3_2:EOL:
********************* / PAKA/akapart                                                                  :3_2:EOL:
********************** / $>|                                                                         :3_2:EOL:
*********************** / Aka Token                                                                 :3_2:EOL:
Aka Token> IN: EOL ( "mid3" ) OR ( "mid4" ) )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected EOL
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected EOL Expecting: AKA               :3_2:EOL:
$>|> IN: EOL ( "mid3" ) OR ( "mid4" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected EOL
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected EOL Expecting: AKA                       :3_2:EOL:
PAKA/akapart> IN: EOL ( "mid3" ) OR ( "mid4" ) )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected EOL
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected EOL Expecting: AKA                :3_2:EOL:
|>>/base> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected EOL
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected EOL Expecting: AKA                      :3_2:EOL:
|?| optional something> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :3_2:EOL:
slAKA optional akapart> IN: EOL ( "mid3" ) OR ( "mid4" ) )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :3_2:EOL:
****************** > |>>/base got Nothing                                                                :3_2:EOL:
|>>/base> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :3_2:EOL:
***************** / |>>/recurse                                                                           :3_2:EOL:
|>>/recurse> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (                           :3_2:EOL:
***************** / |>>/base                                                                              :3_2:EOL:
****************** / slAKA optional typically                                                            :3_2:EOL:
******************* / |?| optional something                                                            :3_2:EOL:
******************** / |>>/recurse                                                                     :3_2:EOL:
|>>/recurse> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (                     :3_2:EOL:
******************** / |>>/base                                                                        :3_2:EOL:
********************* / typically                                                                     :3_2:EOL:
********************** / $>|                                                                         :3_2:EOL:
$>|> IN: EOL ( "mid3" ) OR ( "mid4" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected EOL
$>|> expecting TYPICALLY

********************** \ !Unconsumed Error: $>|: Unexpected EOL Expecting: TYPICALLY                 :3_2:EOL:
typically> IN: EOL ( "mid3" ) OR ( "mid4" ) )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected EOL
typically> expecting TYPICALLY

********************* \ !Unconsumed Error: typically: Unexpected EOL Expecting: TYPICALLY             :3_2:EOL:
|>>/base> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected EOL
|>>/base> expecting TYPICALLY

******************** \ !Unconsumed Error: |>>/base: Unexpected EOL Expecting: TYPICALLY                :3_2:EOL:
|?| optional something> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :3_2:EOL:
slAKA optional typically> IN: EOL ( "mid3" ) OR ( "mid4" ) )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                   :3_2:EOL:
****************** > |>>/base got Nothing                                                                :3_2:EOL:
|>>/base> IN: EOL ( "mid3" ) OR ( "mid4" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :3_2:EOL:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                        :3_2:EOL:
***************** > pAKA: entityalias = Nothing                                                           :3_2:EOL:
slAKA> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
slAKA> MATCH (COK): "this is a label"
slAKA> VALUE: ((("this is a label" :| [],Nothing),0),[])

**************** \ slAKA has returned (("this is a label" :| [],Nothing),0)                                :3_2:EOL:
**************** / undeepers                                                                               :3_2:EOL:
***************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                :3_2:EOL:
***************** > sameLine: success!                                                                    :3_2:EOL:
undeepers> IN: EOL ( "mid3" ) OR ( "mid4" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                               :3_2:EOL:
pKeyValuesAka> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
pKeyValuesAka> MATCH (COK): "this is a label"
pKeyValuesAka> VALUE: (("this is a label" :| [],Nothing),[])

*************** \ pKeyValuesAka has returned ("this is a label" :| [],Nothing)                              :3_2:EOL:
pParamText(flat) first line: pKeyValues> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "this is a label"
pParamText(flat) first line: pKeyValues> VALUE: (("this is a label" :| [],Nothing),[])

************** \ pParamText(flat) first line: pKeyValues has returned ("this is a label" :| [],Nothing)      :3_2:EOL:
************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                      :3_2:EOL:
*************** / manyIndentation/leaf?                                                                     :3_2:EOL:
**************** / sameMany                                                                                :3_2:EOL:
***************** / pKeyValuesAka                                                                         :3_2:EOL:
****************** / slAKA                                                                               :3_2:EOL:
******************* / $*|                                                                               :3_2:EOL:
******************** / slAKA base                                                                      :3_2:EOL:
********************* / slKeyValues                                                                   :3_2:EOL:
********************** / $*|                                                                         :3_2:EOL:
*********************** / someSL                                                                    :3_2:EOL:
************************ / pNumAsText                                                              :3_2:EOL:
pNumAsText> IN: EOL ( "mid3" ) OR ( "mid4" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected EOL
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected EOL Expecting: number         :3_2:EOL:
someSL> IN: EOL ( "mid3" ) OR ( "mid4" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected EOL
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected EOL Expecting: other text or number :3_2:EOL:
$*|> IN: EOL ( "mid3" ) OR ( "mid4" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected EOL
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected EOL Expecting: other text or number      :3_2:EOL:
slKeyValues> IN: EOL ( "mid3" ) OR ( "mid4" ) )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=10:
slKeyValues> unexpected EOL
slKeyValues> expecting other text or number

********************* \ !Unconsumed Error: slKeyValues: Unexpected EOL Expecting: other text or number :3_2:EOL:
slAKA base> IN: EOL ( "mid3" ) OR ( "mid4" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected EOL
slAKA base> expecting other text or number

******************** \ !Unconsumed Error: slAKA base: Unexpected EOL Expecting: other text or number   :3_2:EOL:
$*|> IN: EOL ( "mid3" ) OR ( "mid4" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected EOL
$*|> expecting other text or number

******************* \ !Unconsumed Error: $*|: Unexpected EOL Expecting: other text or number            :3_2:EOL:
slAKA> IN: EOL ( "mid3" ) OR ( "mid4" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected EOL
slAKA> expecting other text or number

****************** \ !Unconsumed Error: slAKA: Unexpected EOL Expecting: other text or number            :3_2:EOL:
pKeyValuesAka> IN: EOL ( "mid3" ) OR ( "mid4" ) )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=10:
pKeyValuesAka> unexpected EOL
pKeyValuesAka> expecting other text or number

***************** \ !Unconsumed Error: pKeyValuesAka: Unexpected EOL Expecting: other text or number      :3_2:EOL:
sameMany> IN: EOL ( "mid3" ) OR ( "mid4" ) )
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

**************** \ sameMany has returned []                                                                :3_2:EOL:
manyIndentation/leaf?> IN: EOL ( "mid3" ) OR ( "mid4" ) )
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*************** \ manyIndentation/leaf? has returned []                                                     :3_2:EOL:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: EOL ( "mid3" ) OR ( "mid4" ) )
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                      :3_2:EOL:
pParamText> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
pParamText> MATCH (COK): "this is a label"
pParamText> VALUE: (("this is a label" :| [],Nothing) :| [],[])

************* \ pParamText has returned ("this is a label" :| [],Nothing) :| []                               :3_2:EOL:
term p/3:plain p> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
term p/3:plain p> MATCH (COK): "this is a label"
term p/3:plain p> VALUE: (MyLeaf (("this is a label" :| [],Nothing) :| []),[])

************ \ term p/3:plain p has returned MyLeaf (("this is a label" :| [],Nothing) :| [])                  :3_2:EOL:
term p/notLabelTerm> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
term p/notLabelTerm> MATCH (COK): "this is a label"
term p/notLabelTerm> VALUE: (MyLeaf (("this is a label" :| [],Nothing) :| []),[])

*********** \ term p/notLabelTerm has returned MyLeaf (("this is a label" :| [],Nothing) :| [])                 :3_2:EOL:
term p> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
term p> MATCH (COK): "this is a label"
term p> VALUE: (MyLeaf (("this is a label" :| [],Nothing) :| []),[])

********** \ term p has returned MyLeaf (("this is a label" :| [],Nothing) :| [])                                :3_2:EOL:
********** / binary(Or)                                                                                          :3_2:EOL:
binary(Or)> IN: EOL ( "mid3" ) OR ( "mid4" ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=10:
binary(Or)> unexpected EOL
binary(Or)> expecting OR

********** \ !Unconsumed Error: binary(Or): Unexpected EOL Expecting: OR                                         :3_2:EOL:
********** / binary(And)                                                                                         :3_2:EOL:
binary(And)> IN: EOL ( "mid3" ) OR ( "mid4" ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=10:
binary(And)> unexpected EOL
binary(And)> expecting AND

********** \ !Unconsumed Error: binary(And): Unexpected EOL Expecting: AND                                       :3_2:EOL:
********** / binary(SetLess)                                                                                     :3_2:EOL:
binary(SetLess)> IN: EOL ( "mid3" ) OR ( "mid4" ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=10:
binary(SetLess)> unexpected EOL
binary(SetLess)> expecting LESS

********** \ !Unconsumed Error: binary(SetLess): Unexpected EOL Expecting: LESS                                  :3_2:EOL:
********** / binary(SetPlus)                                                                                     :3_2:EOL:
binary(SetPlus)> IN: EOL ( "mid3" ) OR ( "mid4" ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=10:
binary(SetPlus)> unexpected EOL
binary(SetPlus)> expecting PLUS

********** \ !Unconsumed Error: binary(SetPlus): Unexpected EOL Expecting: PLUS                                  :3_2:EOL:
expression> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
expression> MATCH (COK): "this is a label"
expression> VALUE: (MyLeaf (("this is a label" :| [],Nothing) :| []),[])

********* \ expression has returned MyLeaf (("this is a label" :| [],Nothing) :| [])                              :3_2:EOL:
manyIndentation/leaf?> IN: "this is a label" EOL ( "mid3" ) OR ( "m <…>
manyIndentation/leaf?> MATCH (COK): "this is a label"
manyIndentation/leaf?> VALUE: (MyLeaf (("this is a label" :| [],Nothing) :| []),[])

******** \ manyIndentation/leaf? has returned MyLeaf (("this is a label" :| [],Nothing) :| [])                     :3_2:EOL:
******** / myindented: consuming UnDeeper                                                                          :3_2:EOL:
myindented: consuming UnDeeper> IN: EOL ( "mid3" ) OR ( "mid4" ) )
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=10:
myindented: consuming UnDeeper> unexpected EOL
myindented: consuming UnDeeper> expecting )

******** \ !Unconsumed Error: myindented: consuming UnDeeper: Unexpected EOL Expecting: )                          :3_2:EOL:
someIndentation> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
someIndentation> MATCH (CERR): ( "this is a label"
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected EOL
someIndentation> expecting (, ), ::, AKA, AND, IS, LESS, OR, PLUS, TYPICALLY, or other text or number

******* \ !Consumed Error: someIndentation: Unexpected EOL Expecting: OR AND IS :: AKA TYPICALLY ( ) PLUS LESS other text or number :3_2:EOL:
term p/2:someIndentation expr p> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
term p/2:someIndentation expr p> MATCH (CERR): ( "this is a label"
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected EOL
term p/2:someIndentation expr p> expecting (, ), ::, AKA, AND, IS, LESS, OR, PLUS, TYPICALLY, or other text or number

****** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected EOL Expecting: OR AND IS :: AKA TYPICALLY ( ) PLUS LESS other text or number :3_2:EOL:
****** / term p/3:plain p                                                                                           :3_2:GoDeeper:
******* / pParamText                                                                                               :3_2:GoDeeper:
******** / pParamText(flat) first line: pKeyValues                                                                :3_2:GoDeeper:
********* / pKeyValuesAka                                                                                        :3_2:GoDeeper:
********** / slAKA                                                                                              :3_2:GoDeeper:
*********** / $*|                                                                                              :3_2:GoDeeper:
************ / slAKA base                                                                                     :3_2:GoDeeper:
************* / slKeyValues                                                                                  :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
slKeyValues> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=8:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

************* \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number                 :3_2:GoDeeper:
slAKA base> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected (
slAKA base> expecting other text or number

************ \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                    :3_2:GoDeeper:
$*|> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :3_2:GoDeeper:
slAKA> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected (
slAKA> expecting other text or number

********** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                             :3_2:GoDeeper:
pKeyValuesAka> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=8:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

********* \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=8:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

******** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
pParamText> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=8:
pParamText> unexpected (
pParamText> expecting other text or number

******* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                              :3_2:GoDeeper:
term p/3:plain p> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

****** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number                          :3_2:GoDeeper:
term p/notLabelTerm> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=10:
term p/notLabelTerm> unexpected EOL
term p/notLabelTerm> expecting (, ), ::, AKA, AND, IS, LESS, OR, PLUS, TYPICALLY, or other text or number

***** \ !Unconsumed Error: term p/notLabelTerm: Unexpected EOL Expecting: OR AND IS :: AKA TYPICALLY ( ) PLUS LESS other text or number :3_2:GoDeeper:
term p> IN: ( "this is a label" EOL ( "mid3" ) OR (  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=10:
term p> unexpected EOL
term p> expecting (, ), ::, AKA, AND, IS, LESS, OR, PLUS, TYPICALLY, or other text or number

**** \ !Unconsumed Error: term p: Unexpected EOL Expecting: OR AND IS :: AKA TYPICALLY ( ) PLUS LESS other text or number :3_2:GoDeeper:
expression> IN: ( "top1" ) OR ( "top2" ) OR ( "this is a <…>
expression> MATCH (CERR): ( "top1" ) OR ( "top2" ) OR
expression> ERROR:
expression> offset=10:
expression> unexpected EOL
expression> expecting (, ), ::, AKA, AND, IS, LESS, NOT, OR, PLUS, TYPICALLY, or other text or number

*** \ !Consumed Error: expression: Unexpected EOL Expecting: OR AND NOT IS :: AKA TYPICALLY ( ) PLUS LESS other text or number :3_2:GoDeeper:
expr pParamText> IN: ( "top1" ) OR ( "top2" ) OR ( "this is a <…>
expr pParamText> MATCH (CERR): ( "top1" ) OR ( "top2" ) OR
expr pParamText> ERROR:
expr pParamText> offset=10:
expr pParamText> unexpected EOL
expr pParamText> expecting (, ), ::, AKA, AND, IS, LESS, NOT, OR, PLUS, TYPICALLY, or other text or number

** \ !Consumed Error: expr pParamText: Unexpected EOL Expecting: OR AND NOT IS :: AKA TYPICALLY ( ) PLUS LESS other text or number :3_2:GoDeeper:

our new parser
  indent-2-c-3 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) our new parser indent-2-c-3
       expected: [(MyAny [MyLeaf (("top1" :| [],Nothing) :| []),MyLeaf (("top2" :| [],Nothing) :| []),MyLabel ["this is a label"] (MyAny [MyLeaf (("mid3" :| [],Nothing) :| []),MyLeaf (("mid4" :| [],Nothing) :| [])])],[])]
       but parsing failed with error:
       3:2:
       unexpected EOL
       expecting (, ), ::, AKA, AND, IS, LESS, NOT, OR, PLUS, TYPICALLY, or other text or number
       
            top1                       
       OR   top2                       
       OR   ✳ this is a label          
                                mid3   
            OR                  mid4   
       

  To rerun use: --match "/our new parser/indent-2-c-3/"

Randomized with seed 1996277797

Finished in 0.0121 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

