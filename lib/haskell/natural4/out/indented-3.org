* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /megaparsing/indented-3/)

* Tokens
EVERY ( "person" ) WHO ( "walks" ) AND
    ( "degustates" MEANS ( "eats" ) OR
        ( "imbibes" MEANS ( "drinks" ) AND ( "swallows" ) OR ( "spits" ) )
    ) MUST ( "sing" )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

someDeep> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

pRegRuleSugary> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "walk:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "walk:
***************** / expression                                                                            :2_2:Other "walk:
****************** / labelPrefix                                                                         :2_2:Other "walk:
labelPrefix> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=7:
labelPrefix> unexpected )

****************** / term p                                                                              :2_2:Other "walk:
******************* / term p/notLabelTerm                                                               :2_2:Other "walk:
******************** / term p/2:someIndentation expr p                                                 :2_2:Other "walk:
********************* / someIndentation                                                               :2_2:Other "walk:
********************** / myindented: consuming GoDeeper                                              :2_2:Other "walk:
myindented: consuming GoDeeper> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected "walks"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected "walks"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected "walks"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :2_2:Other "walk:
********************* / pRelPred                                                                      :2_2:Other "walk:
********************** / slRelPred                                                                   :2_2:Other "walk:
*********************** / nested simpleHorn                                                         :2_2:Other "walk:
************************ > |^|                                                                     :2_2:Other "walk:
************************ / $*|                                                                     :2_2:Other "walk:
************************* / slMultiTerm                                                           :2_2:Other "walk:
************************** / someSL                                                              :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************** \ someSL has returned (["walks"],0)                                    :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************* \ slMultiTerm has returned (["walks"],0)                                 :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************ \ $*| has returned (["walks"],0)                                           :3_2:UnDeeper:
************************ / |^| deeps                                                                :3_2:UnDeeper:
|^| deeps> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************ \ |^| deeps has returned ([()],-1)                                      :3_1:And:
nested simpleHorn> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
nested simpleHorn> MATCH (CERR): "walks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

*********************** / RPConstraint                                                              :2_2:Other "walk:
************************ / $*|                                                                     :2_2:Other "walk:
************************* / slMultiTerm                                                           :2_2:Other "walk:
************************** / someSL                                                              :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************** \ someSL has returned (["walks"],0)                                    :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************* \ slMultiTerm has returned (["walks"],0)                                 :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************ \ $*| has returned (["walks"],0)                                           :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / |>>/recurse                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPConstraint> MATCH (CERR): "walks"
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** / RPBoolStructR                                                             :2_2:Other "walk:
************************ / $*|                                                                     :2_2:Other "walk:
************************* / slMultiTerm                                                           :2_2:Other "walk:
************************** / someSL                                                              :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************** \ someSL has returned (["walks"],0)                                    :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************* \ slMultiTerm has returned (["walks"],0)                                 :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************ \ $*| has returned (["walks"],0)                                           :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / |>>/recurse                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPBoolStructR> MATCH (CERR): "walks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** / RPMT                                                                      :2_2:Other "walk:
************************ / $*|                                                                     :2_2:Other "walk:
************************* / slAKA                                                                 :2_2:Other "walk:
************************** / $*|                                                                 :2_2:Other "walk:
*************************** / slAKA base                                                        :2_2:Other "walk:
**************************** / slMultiTerm                                                     :2_2:Other "walk:
***************************** / someSL                                                        :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

***************************** \ someSL has returned (["walks"],0)                              :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

**************************** \ slMultiTerm has returned (["walks"],0)                           :3_2:UnDeeper:
slAKA base> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA base> MATCH (COK): "walks"
slAKA base> VALUE: ((["walks"],0),[])

*************************** \ slAKA base has returned (["walks"],0)                              :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************** \ $*| has returned (["walks"],0)                                       :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** / |>>/base                                                             :3_2:UnDeeper:
*************************** / slAKA optional akapart                                             :3_2:UnDeeper:
**************************** / |?| optional something                                           :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / PAKA/akapart                                                 :3_2:UnDeeper:
******************************* / $>|                                                        :3_2:UnDeeper:
******************************** / Aka Token                                                :3_2:UnDeeper:
Aka Token> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :3_2:UnDeeper:
slAKA optional akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional akapart has returned (Nothing,0)                    :3_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** / |>>/base                                                             :3_2:UnDeeper:
*************************** / slAKA optional typically                                           :3_2:UnDeeper:
**************************** / |?| optional something                                           :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / typically                                                    :3_2:UnDeeper:
******************************* / $>|                                                        :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :3_2:UnDeeper:
slAKA optional typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional typically has returned (Nothing,0)                  :3_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :3_2:UnDeeper:
************************** > slAKA: proceeding after base and entityalias are retrieved ...       :3_2:UnDeeper:
************************** > pAKA: entityalias = Nothing                                          :3_2:UnDeeper:
slAKA> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA> MATCH (COK): "walks"
slAKA> VALUE: ((["walks"],0),[])

************************* \ slAKA has returned (["walks"],0)                                       :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************ \ $*| has returned (["walks"],0)                                           :3_2:UnDeeper:
RPMT> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPMT> MATCH (COK): "walks"
RPMT> VALUE: ((RPMT ["walks"],0),[])

*********************** \ RPMT has returned (RPMT ["walks"],0)                                       :3_2:UnDeeper:
slRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slRelPred> MATCH (COK): "walks"
slRelPred> VALUE: ((RPMT ["walks"],0),[])

********************** \ slRelPred has returned (RPMT ["walks"],0)                                    :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :3_2:UnDeeper:
*********************** > sameLine: success!                                                         :3_2:UnDeeper:
undeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                    :3_2:UnDeeper:
pRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
pRelPred> MATCH (COK): "walks"
pRelPred> VALUE: (RPMT ["walks"],[])

********************* \ pRelPred has returned RPMT ["walks"]                                           :3_2:UnDeeper:
term p/3:plain p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/3:plain p> MATCH (COK): "walks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************** \ term p/3:plain p has returned MyLeaf (RPMT ["walks"])                            :3_2:UnDeeper:
term p/notLabelTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/notLabelTerm> MATCH (COK): "walks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                           :3_2:UnDeeper:
term p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p> MATCH (COK): "walks"
term p> VALUE: (MyLeaf (RPMT ["walks"]),[])

****************** \ term p has returned MyLeaf (RPMT ["walks"])                                          :3_2:UnDeeper:
****************** / binary(Or)                                                                           :3_2:UnDeeper:
binary(Or)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=7:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :3_2:UnDeeper:
binary(And)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=7:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :3_2:UnDeeper:
binary(SetLess)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=7:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :3_2:UnDeeper:
binary(SetPlus)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=7:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expression> MATCH (COK): "walks"
expression> VALUE: (MyLeaf (RPMT ["walks"]),[])

***************** \ expression has returned MyLeaf (RPMT ["walks"])                                        :3_2:UnDeeper:
manyIndentation/leaf?> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
manyIndentation/leaf?> MATCH (COK): "walks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["walks"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["walks"])                               :3_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:And:
someIndentation> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someIndentation> MATCH (COK): ( "walks" )
someIndentation> VALUE: (MyLeaf (RPMT ["walks"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
term p/2:someIndentation expr p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/2:someIndentation expr p> MATCH (COK): ( "walks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["walks"])                      :3_1:And:
term p/notLabelTerm> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/notLabelTerm> MATCH (COK): ( "walks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
term p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p> MATCH (COK): ( "walks" )
term p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************ \ term p has returned MyLeaf (RPMT ["walks"])                                                   :3_1:And:
************ / binary(Or)                                                                                    :3_1:And:
binary(Or)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=8:
binary(Or)> unexpected AND
binary(Or)> expecting OR

************ / binary(And)                                                                                   :3_1:And:
binary(And)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

************ \ binary(And) has returned And                                                                   :3_2:GoDeeper:
************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "degu:
**************** / manyIndentation/leaf?                                                                   :3_2:Other "degu:
***************** / expression                                                                            :3_2:Other "degu:
****************** / labelPrefix                                                                         :3_2:Other "degu:
labelPrefix> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
labelPrefix> MATCH (COK): "degustates"
labelPrefix> VALUE: ("degustates",[])

****************** \ labelPrefix has returned "degustates"                                               :4_2:Means:
****************** / term p                                                                              :4_2:Means:
******************* / term p/notLabelTerm                                                               :4_2:Means:
******************** / term p/2:someIndentation expr p                                                 :4_2:Means:
********************* / someIndentation                                                               :4_2:Means:
********************** / myindented: consuming GoDeeper                                              :4_2:Means:
myindented: consuming GoDeeper> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=11:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected MEANS
someIndentation> expecting (

term p/2:someIndentation expr p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :4_2:Means:
********************* / pRelPred                                                                      :4_2:Means:
********************** / slRelPred                                                                   :4_2:Means:
*********************** / nested simpleHorn                                                         :4_2:Means:
************************ > |^|                                                                     :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / slMultiTerm                                                           :4_2:Means:
************************** / someSL                                                              :4_2:Means:
*************************** / pNumAsText                                                        :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

*********************** / RPConstraint                                                              :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / slMultiTerm                                                           :4_2:Means:
************************** / someSL                                                              :4_2:Means:
*************************** / pNumAsText                                                        :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

*********************** / RPBoolStructR                                                             :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / slMultiTerm                                                           :4_2:Means:
************************** / someSL                                                              :4_2:Means:
*************************** / pNumAsText                                                        :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

*********************** / RPMT                                                                      :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / slAKA                                                                 :4_2:Means:
************************** / $*|                                                                 :4_2:Means:
*************************** / slAKA base                                                        :4_2:Means:
**************************** / slMultiTerm                                                     :4_2:Means:
***************************** / someSL                                                        :4_2:Means:
****************************** / pNumAsText                                                  :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

pRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

term p/3:plain p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected MEANS
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting ( or term

term p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=11:
term p> unexpected MEANS
term p> expecting ( or term

expression> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> MATCH (CERR): "degustates"
expression> ERROR:
expression> offset=11:
expression> unexpected MEANS
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting (, NOT, or term

**************** / manyIndentation/deeper; calling someIndentation                                         :3_2:Other "degu:
***************** / someIndentation                                                                       :3_2:Other "degu:
****************** / myindented: consuming GoDeeper                                                      :3_2:Other "degu:
myindented: consuming GoDeeper> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected "degustates"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected "degustates"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=10:
manyIndentation/deeper; calling someIndentation> unexpected "degustates"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected MEANS
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (, NOT, or term

************** / term p/3:plain p                                                                           :3_2:GoDeeper:
*************** / pRelPred                                                                                 :3_2:GoDeeper:
**************** / slRelPred                                                                              :3_2:GoDeeper:
***************** / nested simpleHorn                                                                    :3_2:GoDeeper:
****************** > |^|                                                                                :3_2:GoDeeper:
****************** / $*|                                                                                :3_2:GoDeeper:
******************* / slMultiTerm                                                                      :3_2:GoDeeper:
******************** / someSL                                                                         :3_2:GoDeeper:
********************* / pNumAsText                                                                   :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=9:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

***************** / RPConstraint                                                                         :3_2:GoDeeper:
****************** / $*|                                                                                :3_2:GoDeeper:
******************* / slMultiTerm                                                                      :3_2:GoDeeper:
******************** / someSL                                                                         :3_2:GoDeeper:
********************* / pNumAsText                                                                   :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=9:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

***************** / RPBoolStructR                                                                        :3_2:GoDeeper:
****************** / $*|                                                                                :3_2:GoDeeper:
******************* / slMultiTerm                                                                      :3_2:GoDeeper:
******************** / someSL                                                                         :3_2:GoDeeper:
********************* / pNumAsText                                                                   :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=9:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

***************** / RPMT                                                                                 :3_2:GoDeeper:
****************** / $*|                                                                                :3_2:GoDeeper:
******************* / slAKA                                                                            :3_2:GoDeeper:
******************** / $*|                                                                            :3_2:GoDeeper:
********************* / slAKA base                                                                   :3_2:GoDeeper:
********************** / slMultiTerm                                                                :3_2:GoDeeper:
*********************** / someSL                                                                   :3_2:GoDeeper:
************************ / pNumAsText                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=9:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=9:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=9:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=11:
term p> unexpected MEANS
term p> expecting (, NOT, or term

expression> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> MATCH (CERR): ( "walks" ) AND
expression> ERROR:
expression> offset=11:
expression> unexpected MEANS
expression> expecting (, NOT, or term

ppp inner> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> MATCH (CERR): ( "walks" ) AND
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected MEANS
ppp inner> expecting (, NOT, or term

********** / withPrePost                                                                                        :2_2:GoDeeper:
*********** > |<* starting                                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / pre part                                                                                       :2_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :2_2:Other "walk:
************** / expectUnDeepers                                                                             :2_2:Other "walk:
*************** > ignoring ["walks"]                                                                         :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper]                                                            :3_1:And:
expectUnDeepers> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

************** \ expectUnDeepers has returned 1                                                              :2_2:Other "walk:
************** > aNLK: determined undp_count = 1                                                             :2_2:Other "walk:
************** > ->| trying to consume 1 GoDeepers                                                           :2_2:Other "walk:
************** / $*|                                                                                         :2_2:Other "walk:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :2_2:Other "walk:
aboveNextLineKeyword> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=6:
aboveNextLineKeyword> unexpected "walks"
aboveNextLineKeyword> expecting (

************* > /*= lookAhead failed, delegating to plain /+=                                                 :2_2:Other "walk:
************* / aboveNextLineKeyword                                                                           :3_2:UnDeeper:
************** / expectUnDeepers                                                                              :3_2:UnDeeper:
*************** > ignoring []                                                                                :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper]                                                            :3_1:And:
expectUnDeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

************** \ expectUnDeepers has returned 1                                                               :3_2:UnDeeper:
************** > aNLK: determined undp_count = 1                                                              :3_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_2:UnDeeper:
************** / $*|                                                                                          :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_2:UnDeeper:
aboveNextLineKeyword> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_2:UnDeeper:
pre part> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

withPrePost> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=7:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

********** / withPreOnly                                                                                        :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / pre part                                                                                       :2_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :2_2:Other "walk:
************** / expectUnDeepers                                                                             :2_2:Other "walk:
*************** > ignoring ["walks"]                                                                         :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper]                                                            :3_1:And:
expectUnDeepers> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

************** \ expectUnDeepers has returned 1                                                              :2_2:Other "walk:
************** > aNLK: determined undp_count = 1                                                             :2_2:Other "walk:
************** > ->| trying to consume 1 GoDeepers                                                           :2_2:Other "walk:
************** / $*|                                                                                         :2_2:Other "walk:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :2_2:Other "walk:
aboveNextLineKeyword> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=6:
aboveNextLineKeyword> unexpected "walks"
aboveNextLineKeyword> expecting (

************* > /*= lookAhead failed, delegating to plain /+=                                                 :2_2:Other "walk:
************* / aboveNextLineKeyword                                                                           :3_2:UnDeeper:
************** / expectUnDeepers                                                                              :3_2:UnDeeper:
*************** > ignoring []                                                                                :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper]                                                            :3_1:And:
expectUnDeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

************** \ expectUnDeepers has returned 1                                                               :3_2:UnDeeper:
************** > aNLK: determined undp_count = 1                                                              :3_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_2:UnDeeper:
************** / $*|                                                                                          :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_2:UnDeeper:
aboveNextLineKeyword> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_2:UnDeeper:
pre part> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

withPreOnly> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=7:
withPreOnly> unexpected )
withPreOnly> expecting ( or Other text

pBSR> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=11:
pBSR> unexpected MEANS
pBSR> expecting (, NOT, or term

preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (CERR): WHO (
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=11:
preambleBoolStructR [Who,Which,Whose]> unexpected MEANS
preambleBoolStructR [Who,Which,Whose]> expecting (, NOT, or term

manyIndentation/leaf?> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting (, NOT, or term

******* / manyIndentation/deeper; calling someIndentation                                                         :2_1:Who:
******** / someIndentation                                                                                       :2_1:Who:
********* / myindented: consuming GoDeeper                                                                      :2_1:Who:
myindented: consuming GoDeeper> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected WHO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected WHO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected WHO
manyIndentation/deeper; calling someIndentation> expecting (

******* / WHERE                                                                                                   :2_1:Who:
WHERE> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected WHO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Who:
******** / $>|                                                                                                   :2_1:Who:
$>|> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected WHO
$>|> expecting HAVING

preambleParamText:[Having]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected WHO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Who:
******** / $>|                                                                                                   :2_1:Who:
$>|> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected WHO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected WHO
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:Who:
******** / $>|                                                                                                   :2_1:Who:
$>|> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected WHO
$>|> expecting UPON

preambleParamText:[Upon]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected WHO
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:Who:
preambleBoolStructR [Unless]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected WHO
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:Who:
preambleBoolStructR [When,If]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected WHO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :2_1:Who:
******** / $>|                                                                                                   :2_1:Who:
$>|> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected WHO
$>|> expecting MAY, MUST, or SHANT

pDT> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected WHO
pDT> expecting MAY, MUST, or SHANT

******* / pDoAction/Do                                                                                            :2_1:Who:
pDoAction/Do> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=4:
pDoAction/Do> unexpected WHO
pDoAction/Do> expecting DO

regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" )
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=4:
regulative permutation with deontic-temporal> unexpected WHO
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, MAY, MUST, SHANT, UNLESS, UPON, WHEN, or WHERE

****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented: consuming UnDeeper                                                                         :2_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "person" )
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                  :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=5:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "walk:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "walk:
***************** / expression                                                                            :2_2:Other "walk:
****************** / labelPrefix                                                                         :2_2:Other "walk:
labelPrefix> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=7:
labelPrefix> unexpected )

****************** / term p                                                                              :2_2:Other "walk:
******************* / term p/notLabelTerm                                                               :2_2:Other "walk:
******************** / term p/2:someIndentation expr p                                                 :2_2:Other "walk:
********************* / someIndentation                                                               :2_2:Other "walk:
********************** / myindented: consuming GoDeeper                                              :2_2:Other "walk:
myindented: consuming GoDeeper> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected "walks"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected "walks"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected "walks"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :2_2:Other "walk:
********************* / pRelPred                                                                      :2_2:Other "walk:
********************** / slRelPred                                                                   :2_2:Other "walk:
*********************** / nested simpleHorn                                                         :2_2:Other "walk:
************************ > |^|                                                                     :2_2:Other "walk:
************************ / $*|                                                                     :2_2:Other "walk:
************************* / slMultiTerm                                                           :2_2:Other "walk:
************************** / someSL                                                              :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************** \ someSL has returned (["walks"],0)                                    :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************* \ slMultiTerm has returned (["walks"],0)                                 :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************ \ $*| has returned (["walks"],0)                                           :3_2:UnDeeper:
************************ / |^| deeps                                                                :3_2:UnDeeper:
|^| deeps> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************ \ |^| deeps has returned ([()],-1)                                      :3_1:And:
nested simpleHorn> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
nested simpleHorn> MATCH (CERR): "walks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

*********************** / RPConstraint                                                              :2_2:Other "walk:
************************ / $*|                                                                     :2_2:Other "walk:
************************* / slMultiTerm                                                           :2_2:Other "walk:
************************** / someSL                                                              :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************** \ someSL has returned (["walks"],0)                                    :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************* \ slMultiTerm has returned (["walks"],0)                                 :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************ \ $*| has returned (["walks"],0)                                           :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / |>>/recurse                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPConstraint> MATCH (CERR): "walks"
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** / RPBoolStructR                                                             :2_2:Other "walk:
************************ / $*|                                                                     :2_2:Other "walk:
************************* / slMultiTerm                                                           :2_2:Other "walk:
************************** / someSL                                                              :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************** \ someSL has returned (["walks"],0)                                    :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************* \ slMultiTerm has returned (["walks"],0)                                 :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************ \ $*| has returned (["walks"],0)                                           :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / |>>/recurse                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPBoolStructR> MATCH (CERR): "walks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** / RPMT                                                                      :2_2:Other "walk:
************************ / $*|                                                                     :2_2:Other "walk:
************************* / slAKA                                                                 :2_2:Other "walk:
************************** / $*|                                                                 :2_2:Other "walk:
*************************** / slAKA base                                                        :2_2:Other "walk:
**************************** / slMultiTerm                                                     :2_2:Other "walk:
***************************** / someSL                                                        :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

***************************** \ someSL has returned (["walks"],0)                              :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

**************************** \ slMultiTerm has returned (["walks"],0)                           :3_2:UnDeeper:
slAKA base> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA base> MATCH (COK): "walks"
slAKA base> VALUE: ((["walks"],0),[])

*************************** \ slAKA base has returned (["walks"],0)                              :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************** \ $*| has returned (["walks"],0)                                       :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** / |>>/base                                                             :3_2:UnDeeper:
*************************** / slAKA optional akapart                                             :3_2:UnDeeper:
**************************** / |?| optional something                                           :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / PAKA/akapart                                                 :3_2:UnDeeper:
******************************* / $>|                                                        :3_2:UnDeeper:
******************************** / Aka Token                                                :3_2:UnDeeper:
Aka Token> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :3_2:UnDeeper:
slAKA optional akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional akapart has returned (Nothing,0)                    :3_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** / |>>/base                                                             :3_2:UnDeeper:
*************************** / slAKA optional typically                                           :3_2:UnDeeper:
**************************** / |?| optional something                                           :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / typically                                                    :3_2:UnDeeper:
******************************* / $>|                                                        :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :3_2:UnDeeper:
slAKA optional typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional typically has returned (Nothing,0)                  :3_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :3_2:UnDeeper:
************************** > slAKA: proceeding after base and entityalias are retrieved ...       :3_2:UnDeeper:
************************** > pAKA: entityalias = Nothing                                          :3_2:UnDeeper:
slAKA> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA> MATCH (COK): "walks"
slAKA> VALUE: ((["walks"],0),[])

************************* \ slAKA has returned (["walks"],0)                                       :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************ \ $*| has returned (["walks"],0)                                           :3_2:UnDeeper:
RPMT> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPMT> MATCH (COK): "walks"
RPMT> VALUE: ((RPMT ["walks"],0),[])

*********************** \ RPMT has returned (RPMT ["walks"],0)                                       :3_2:UnDeeper:
slRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slRelPred> MATCH (COK): "walks"
slRelPred> VALUE: ((RPMT ["walks"],0),[])

********************** \ slRelPred has returned (RPMT ["walks"],0)                                    :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :3_2:UnDeeper:
*********************** > sameLine: success!                                                         :3_2:UnDeeper:
undeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                    :3_2:UnDeeper:
pRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
pRelPred> MATCH (COK): "walks"
pRelPred> VALUE: (RPMT ["walks"],[])

********************* \ pRelPred has returned RPMT ["walks"]                                           :3_2:UnDeeper:
term p/3:plain p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/3:plain p> MATCH (COK): "walks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************** \ term p/3:plain p has returned MyLeaf (RPMT ["walks"])                            :3_2:UnDeeper:
term p/notLabelTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/notLabelTerm> MATCH (COK): "walks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                           :3_2:UnDeeper:
term p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p> MATCH (COK): "walks"
term p> VALUE: (MyLeaf (RPMT ["walks"]),[])

****************** \ term p has returned MyLeaf (RPMT ["walks"])                                          :3_2:UnDeeper:
****************** / binary(Or)                                                                           :3_2:UnDeeper:
binary(Or)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=7:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :3_2:UnDeeper:
binary(And)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=7:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :3_2:UnDeeper:
binary(SetLess)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=7:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :3_2:UnDeeper:
binary(SetPlus)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=7:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expression> MATCH (COK): "walks"
expression> VALUE: (MyLeaf (RPMT ["walks"]),[])

***************** \ expression has returned MyLeaf (RPMT ["walks"])                                        :3_2:UnDeeper:
manyIndentation/leaf?> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
manyIndentation/leaf?> MATCH (COK): "walks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["walks"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["walks"])                               :3_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:And:
someIndentation> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someIndentation> MATCH (COK): ( "walks" )
someIndentation> VALUE: (MyLeaf (RPMT ["walks"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
term p/2:someIndentation expr p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/2:someIndentation expr p> MATCH (COK): ( "walks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["walks"])                      :3_1:And:
term p/notLabelTerm> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/notLabelTerm> MATCH (COK): ( "walks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
term p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p> MATCH (COK): ( "walks" )
term p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************ \ term p has returned MyLeaf (RPMT ["walks"])                                                   :3_1:And:
************ / binary(Or)                                                                                    :3_1:And:
binary(Or)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=8:
binary(Or)> unexpected AND
binary(Or)> expecting OR

************ / binary(And)                                                                                   :3_1:And:
binary(And)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

************ \ binary(And) has returned And                                                                   :3_2:GoDeeper:
************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "degu:
**************** / manyIndentation/leaf?                                                                   :3_2:Other "degu:
***************** / expression                                                                            :3_2:Other "degu:
****************** / labelPrefix                                                                         :3_2:Other "degu:
labelPrefix> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
labelPrefix> MATCH (COK): "degustates"
labelPrefix> VALUE: ("degustates",[])

****************** \ labelPrefix has returned "degustates"                                               :4_2:Means:
****************** / term p                                                                              :4_2:Means:
******************* / term p/notLabelTerm                                                               :4_2:Means:
******************** / term p/2:someIndentation expr p                                                 :4_2:Means:
********************* / someIndentation                                                               :4_2:Means:
********************** / myindented: consuming GoDeeper                                              :4_2:Means:
myindented: consuming GoDeeper> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=11:
myindented: consuming GoDeeper> unexpected MEANS
myindented: consuming GoDeeper> expecting (

someIndentation> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected MEANS
someIndentation> expecting (

term p/2:someIndentation expr p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :4_2:Means:
********************* / pRelPred                                                                      :4_2:Means:
********************** / slRelPred                                                                   :4_2:Means:
*********************** / nested simpleHorn                                                         :4_2:Means:
************************ > |^|                                                                     :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / slMultiTerm                                                           :4_2:Means:
************************** / someSL                                                              :4_2:Means:
*************************** / pNumAsText                                                        :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

nested simpleHorn> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

*********************** / RPConstraint                                                              :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / slMultiTerm                                                           :4_2:Means:
************************** / someSL                                                              :4_2:Means:
*************************** / pNumAsText                                                        :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

RPConstraint> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

*********************** / RPBoolStructR                                                             :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / slMultiTerm                                                           :4_2:Means:
************************** / someSL                                                              :4_2:Means:
*************************** / pNumAsText                                                        :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

RPBoolStructR> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

*********************** / RPMT                                                                      :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / slAKA                                                                 :4_2:Means:
************************** / $*|                                                                 :4_2:Means:
*************************** / slAKA base                                                        :4_2:Means:
**************************** / slMultiTerm                                                     :4_2:Means:
***************************** / someSL                                                        :4_2:Means:
****************************** / pNumAsText                                                  :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

slAKA base> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

slAKA> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected MEANS
slAKA> expecting other text or number

$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

RPMT> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected MEANS
RPMT> expecting other text or number

slRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

pRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

term p/3:plain p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected MEANS
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting ( or term

term p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=11:
term p> unexpected MEANS
term p> expecting ( or term

expression> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> MATCH (CERR): "degustates"
expression> ERROR:
expression> offset=11:
expression> unexpected MEANS
expression> expecting (, NOT, or term

manyIndentation/leaf?> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting (, NOT, or term

**************** / manyIndentation/deeper; calling someIndentation                                         :3_2:Other "degu:
***************** / someIndentation                                                                       :3_2:Other "degu:
****************** / myindented: consuming GoDeeper                                                      :3_2:Other "degu:
myindented: consuming GoDeeper> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected "degustates"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected "degustates"
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=10:
manyIndentation/deeper; calling someIndentation> unexpected "degustates"
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected MEANS
someIndentation> expecting (, NOT, or term

term p/2:someIndentation expr p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (, NOT, or term

************** / term p/3:plain p                                                                           :3_2:GoDeeper:
*************** / pRelPred                                                                                 :3_2:GoDeeper:
**************** / slRelPred                                                                              :3_2:GoDeeper:
***************** / nested simpleHorn                                                                    :3_2:GoDeeper:
****************** > |^|                                                                                :3_2:GoDeeper:
****************** / $*|                                                                                :3_2:GoDeeper:
******************* / slMultiTerm                                                                      :3_2:GoDeeper:
******************** / someSL                                                                         :3_2:GoDeeper:
********************* / pNumAsText                                                                   :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

nested simpleHorn> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=9:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

***************** / RPConstraint                                                                         :3_2:GoDeeper:
****************** / $*|                                                                                :3_2:GoDeeper:
******************* / slMultiTerm                                                                      :3_2:GoDeeper:
******************** / someSL                                                                         :3_2:GoDeeper:
********************* / pNumAsText                                                                   :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

RPConstraint> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=9:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

***************** / RPBoolStructR                                                                        :3_2:GoDeeper:
****************** / $*|                                                                                :3_2:GoDeeper:
******************* / slMultiTerm                                                                      :3_2:GoDeeper:
******************** / someSL                                                                         :3_2:GoDeeper:
********************* / pNumAsText                                                                   :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

RPBoolStructR> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=9:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

***************** / RPMT                                                                                 :3_2:GoDeeper:
****************** / $*|                                                                                :3_2:GoDeeper:
******************* / slAKA                                                                            :3_2:GoDeeper:
******************** / $*|                                                                            :3_2:GoDeeper:
********************* / slAKA base                                                                   :3_2:GoDeeper:
********************** / slMultiTerm                                                                :3_2:GoDeeper:
*********************** / someSL                                                                   :3_2:GoDeeper:
************************ / pNumAsText                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

slMultiTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

slAKA base> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected (
slAKA> expecting other text or number

$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

RPMT> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=9:
RPMT> unexpected (
RPMT> expecting other text or number

slRelPred> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=9:
slRelPred> unexpected (
slRelPred> expecting other text or number

pRelPred> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=9:
pRelPred> unexpected (
pRelPred> expecting other text or number

term p/3:plain p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting (, NOT, or term

term p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=11:
term p> unexpected MEANS
term p> expecting (, NOT, or term

expression> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> MATCH (CERR): ( "walks" ) AND
expression> ERROR:
expression> offset=11:
expression> unexpected MEANS
expression> expecting (, NOT, or term

ppp inner> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> MATCH (CERR): ( "walks" ) AND
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected MEANS
ppp inner> expecting (, NOT, or term

********** / withPrePost                                                                                        :2_2:GoDeeper:
*********** > |<* starting                                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / pre part                                                                                       :2_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :2_2:Other "walk:
************** / expectUnDeepers                                                                             :2_2:Other "walk:
*************** > ignoring ["walks"]                                                                         :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper]                                                            :3_1:And:
expectUnDeepers> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

************** \ expectUnDeepers has returned 1                                                              :2_2:Other "walk:
************** > aNLK: determined undp_count = 1                                                             :2_2:Other "walk:
************** > ->| trying to consume 1 GoDeepers                                                           :2_2:Other "walk:
************** / $*|                                                                                         :2_2:Other "walk:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :2_2:Other "walk:
aboveNextLineKeyword> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=6:
aboveNextLineKeyword> unexpected "walks"
aboveNextLineKeyword> expecting (

************* > /*= lookAhead failed, delegating to plain /+=                                                 :2_2:Other "walk:
************* / aboveNextLineKeyword                                                                           :3_2:UnDeeper:
************** / expectUnDeepers                                                                              :3_2:UnDeeper:
*************** > ignoring []                                                                                :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper]                                                            :3_1:And:
expectUnDeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

************** \ expectUnDeepers has returned 1                                                               :3_2:UnDeeper:
************** > aNLK: determined undp_count = 1                                                              :3_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_2:UnDeeper:
************** / $*|                                                                                          :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_2:UnDeeper:
aboveNextLineKeyword> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_2:UnDeeper:
pre part> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

withPrePost> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=7:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

********** / withPreOnly                                                                                        :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / pre part                                                                                       :2_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :2_2:Other "walk:
************** / expectUnDeepers                                                                             :2_2:Other "walk:
*************** > ignoring ["walks"]                                                                         :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper]                                                            :3_1:And:
expectUnDeepers> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

************** \ expectUnDeepers has returned 1                                                              :2_2:Other "walk:
************** > aNLK: determined undp_count = 1                                                             :2_2:Other "walk:
************** > ->| trying to consume 1 GoDeepers                                                           :2_2:Other "walk:
************** / $*|                                                                                         :2_2:Other "walk:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :2_2:Other "walk:
aboveNextLineKeyword> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=6:
aboveNextLineKeyword> unexpected "walks"
aboveNextLineKeyword> expecting (

************* > /*= lookAhead failed, delegating to plain /+=                                                 :2_2:Other "walk:
************* / aboveNextLineKeyword                                                                           :3_2:UnDeeper:
************** / expectUnDeepers                                                                              :3_2:UnDeeper:
*************** > ignoring []                                                                                :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper]                                                            :3_1:And:
expectUnDeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

************** \ expectUnDeepers has returned 1                                                               :3_2:UnDeeper:
************** > aNLK: determined undp_count = 1                                                              :3_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_2:UnDeeper:
************** / $*|                                                                                          :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_2:UnDeeper:
aboveNextLineKeyword> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_2:UnDeeper:
pre part> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

withPreOnly> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=7:
withPreOnly> unexpected )
withPreOnly> expecting ( or Other text

pBSR> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=11:
pBSR> unexpected MEANS
pBSR> expecting (, NOT, or term

preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (CERR): WHO (
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=11:
preambleBoolStructR [Who,Which,Whose]> unexpected MEANS
preambleBoolStructR [Who,Which,Whose]> expecting (, NOT, or term

manyIndentation/leaf?> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected MEANS
manyIndentation/leaf?> expecting (, NOT, or term

******* / manyIndentation/deeper; calling someIndentation                                                         :2_1:Who:
******** / someIndentation                                                                                       :2_1:Who:
********* / myindented: consuming GoDeeper                                                                      :2_1:Who:
myindented: consuming GoDeeper> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected WHO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected WHO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected WHO
manyIndentation/deeper; calling someIndentation> expecting (

******* / WHERE                                                                                                   :2_1:Who:
WHERE> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected WHO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Who:
******** / $>|                                                                                                   :2_1:Who:
$>|> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected WHO
$>|> expecting HAVING

preambleParamText:[Having]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected WHO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Who:
******** / $>|                                                                                                   :2_1:Who:
$>|> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected WHO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected WHO
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:Who:
******** / $>|                                                                                                   :2_1:Who:
$>|> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected WHO
$>|> expecting UPON

preambleParamText:[Upon]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected WHO
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:Who:
preambleBoolStructR [Unless]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected WHO
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:Who:
preambleBoolStructR [When,If]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected WHO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :2_1:Who:
pTemporal/eventually> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=4:
pTemporal/eventually> unexpected WHO
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :2_1:Who:
******** / $>|                                                                                                   :2_1:Who:
$>|> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected WHO
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=4:
pTemporal/specifically> unexpected WHO
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :2_1:Who:
pTemporal/vaguely> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=4:
pTemporal/vaguely> unexpected WHO
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :2_1:Who:
pDA> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=4:
pDA> unexpected WHO
pDA> expecting MAY, MUST, or SHANT

regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "person" )
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=4:
regulative permutation with deontic-action> unexpected WHO
regulative permutation with deontic-action> expecting AFTER, BEFORE, BY, EVENTUALLY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, SHANT, UNLESS, UPON, WHEN, or WHERE

permutationsReg> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=4:
permutationsReg> unexpected WHO
permutationsReg> expecting AFTER, BEFORE, BY, DO, EVENTUALLY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, SHANT, UNLESS, UPON, WHEN, or WHERE

pRegRuleNormal> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=4:
pRegRuleNormal> unexpected WHO
pRegRuleNormal> expecting AFTER, BEFORE, BY, DO, EVENTUALLY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, SHANT, UNLESS, UPON, WHEN, or WHERE

pRegRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=4:
pRegRule> unexpected WHO
pRegRule> expecting AFTER, BEFORE, BY, DO, EVENTUALLY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, SHANT, UNLESS, UPON, WHEN, WHERE, or §

*** / pTypeDefinition                                                                                                 :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pHornlike/uponLimb                                                                                            :1_1:Every:
***** / preambleParamText:[Upon]                                                                                    :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :1_1:Every:
***** / preambleParamText:[Given]                                                                                   :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

pTypeDefinition> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** / pConstitutiveRule                                                                                               :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / calling myindented pNameParens                                                                                :1_1:Every:
***** / manyIndentation/leaf?                                                                                       :1_1:Every:
****** / pMultiTermAka                                                                                             :1_1:Every:
******* / pAKA                                                                                                    :1_1:Every:
******** / slAKA                                                                                                 :1_1:Every:
********* / $*|                                                                                                 :1_1:Every:
********** / slAKA base                                                                                        :1_1:Every:
*********** / slMultiTerm                                                                                     :1_1:Every:
************ / someSL                                                                                        :1_1:Every:
************* / pNumAsText                                                                                  :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

pAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected EVERY
pAKA> expecting other text or number

pMultiTermAka> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Every:
****** / someIndentation                                                                                           :1_1:Every:
******* / myindented: consuming GoDeeper                                                                          :1_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** / pScenarioRule                                                                                                   :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pExpect                                                                                                       :1_1:Every:
pExpect> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=0:
pExpect> unexpected EVERY
pExpect> expecting EXPECT

pScenarioRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting EXPECT, GIVEN, or §

*** / pHornlike                                                                                                       :1_1:Every:
**** / pSrcRef                                                                                                       :1_1:Every:
***** / pRuleLabel                                                                                                  :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

pSrcRef> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Every:
**** / pHornlike / permute                                                                                           :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

pHornlike / permute> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=0:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

pHornlike> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=0:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** / pRuleLabel                                                                                                      :1_1:Every:
**** / $>|                                                                                                           :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** / pRule: unwrapping indentation and recursing                                                                     :1_1:Every:
**** / myindented: consuming GoDeeper                                                                                :1_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

pRule: unwrapping indentation and recursing> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=0:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

pRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=4:
pRule> unexpected WHO
pRule> expecting EOL or regulative rule


megaparsing
  indented-3 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) megaparsing indented-3
       expected: [[Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Just (All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]), cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       2:1:
       unexpected WHO
       expecting EOL or regulative rule
       EVERY      person                          
       ✳ WHO      walks                           
       AND        degustates                      
                  MEANS      eats                 
                  OR         imbibes              
                             MEANS      drinks    
                             AND        swallows  
                             OR         spits     
       MUST       sing                            
       

  To rerun use: --match "/megaparsing/indented-3/"

Randomized with seed 801501955

Finished in 0.0354 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

