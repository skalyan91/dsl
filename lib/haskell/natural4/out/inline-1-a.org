* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/inline-1-a/)

* Tokens
( "Food" ) MEANS
    ( "yummy"
        ( "nightshades" "potato" ) OR ( "tomato" )
    )
1_2:GoDeeper   > |<|
1_2:GoDeeper   > |<* starting
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / $*|                                                                                                                :1_2:GoDeeper:
*** / |>>/recurse                                                                                                      :1_2:GoDeeper:
**** / |>>/recurse                                                                                                     :1_2:Other "Food:
|>>/recurse> IN: "Food" ) MEANS ( "yummy" ( "nightshades" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=1:
|>>/recurse> unexpected "Food"
|>>/recurse> expecting (

**** \ !Unconsumed Error: |>>/recurse: Unexpected "Food" Expecting: (                                                  :1_2:Other "Food:
**** / |>>/base                                                                                                        :1_2:Other "Food:
***** / slMultiTerm                                                                                                   :1_2:Other "Food:
****** / someSL                                                                                                      :1_2:Other "Food:
someSL> IN: "Food" ) MEANS ( "yummy" ( "nightshades" <…>
someSL> MATCH (COK): "Food"
someSL> VALUE: ((["Food"],0),[])

****** \ someSL has returned (["Food"],0)                                                                             :2_2:UnDeeper:
slMultiTerm> IN: "Food" ) MEANS ( "yummy" ( "nightshades" <…>
slMultiTerm> MATCH (COK): "Food"
slMultiTerm> VALUE: ((["Food"],0),[])

***** \ slMultiTerm has returned (["Food"],0)                                                                          :2_2:UnDeeper:
***** > |>>/base got ["Food"]                                                                                          :2_2:UnDeeper:
|>>/base> IN: "Food" ) MEANS ( "yummy" ( "nightshades" <…>
|>>/base> MATCH (COK): "Food"
|>>/base> VALUE: ((["Food"],0),[])

**** \ |>>/base has returned (["Food"],0)                                                                               :2_2:UnDeeper:
|>>/recurse> IN: ( "Food" ) MEANS ( "yummy" ( "nightshade <…>
|>>/recurse> MATCH (COK): ( "Food"
|>>/recurse> VALUE: ((["Food"],1),[])

*** \ |>>/recurse has returned (["Food"],1)                                                                              :2_2:UnDeeper:
$*|> IN: ( "Food" ) MEANS ( "yummy" ( "nightshade <…>
$*|> MATCH (COK): ( "Food"
$*|> VALUE: ((["Food"],1),[])

** \ $*| has returned (["Food"],1)                                                                                        :2_2:UnDeeper:
** / |<*/parent                                                                                                           :2_2:UnDeeper:
*** > |<*/recurse                                                                                                        :2_2:UnDeeper:
*** > |<*/recurse matched 1 UnDeepers                                                                                  :2_2:GoDeeper:
|<*/parent> IN: ) MEANS ( "yummy" ( "nightshades" "potat <…>
|<*/parent> MATCH (COK): ) MEANS
|<*/parent> VALUE: ((Means,-1),[])

** \ |<*/parent has returned (Means,-1)                                                                                 :2_2:GoDeeper:
** / |>| calling $>>                                                                                                    :2_2:GoDeeper:
*** / |>>/recurse                                                                                                      :2_2:GoDeeper:
**** / |>>/recurse                                                                                                     :2_2:Other "yumm:
|>>/recurse> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected "yummy"
|>>/recurse> expecting (

**** \ !Unconsumed Error: |>>/recurse: Unexpected "yummy" Expecting: (                                                 :2_2:Other "yumm:
**** / |>>/base                                                                                                        :2_2:Other "yumm:
***** / pBSR                                                                                                          :2_2:Other "yumm:
****** / ppp inner                                                                                                   :2_2:Other "yumm:
******* / expression                                                                                                :2_2:Other "yumm:
******** / term p                                                                                                  :2_2:Other "yumm:
********* / term p/1a:label directly above                                                                        :2_2:Other "yumm:
********** / $*|                                                                                                 :2_2:Other "yumm:
*********** / someSL                                                                                            :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

*********** \ someSL has returned (["yummy","nightshades"],1)                                                     :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

********** \ $*| has returned (["yummy","nightshades"],1)                                                          :3_3:Other "pota:
********** / |>| calling $>>                                                                                       :3_3:Other "pota:
*********** / |>>/recurse                                                                                         :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

*********** \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                                    :3_3:Other "pota:
*********** / |>>/base                                                                                            :3_3:Other "pota:
************ / expression                                                                                        :3_3:Other "pota:
************* / term p                                                                                          :3_3:Other "pota:
************** / term p/1a:label directly above                                                                :3_3:Other "pota:
*************** / $*|                                                                                         :3_3:Other "pota:
**************** / someSL                                                                                    :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

**************** \ someSL has returned (["potato"],0)                                                         :4_3:UnDeeper:
**************** / pNumAsText                                                                                 :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "tomato" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected )
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                              :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (CERR): "potato"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or other text or number

*************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number                         :4_3:UnDeeper:
term p/1a:label directly above> IN: "potato" ) OR ( "tomato" ) )
term p/1a:label directly above> MATCH (CERR): "potato"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=9:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

************** \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :4_3:UnDeeper:
************** / term p/b:label to the left of line below, with EOL                                            :3_3:Other "pota:
*************** / someSL                                                                                      :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

*************** \ someSL has returned (["potato"],0)                                                           :4_3:UnDeeper:
*************** / undeepers                                                                                    :4_3:UnDeeper:
**************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :4_3:UnDeeper:
**************** > sameLine: success!                                                                         :4_3:UnDeeper:
undeepers> IN: ) OR ( "tomato" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************** \ undeepers has returned ()                                                                    :4_3:UnDeeper:
*************** / matching EOL                                                                                 :4_3:UnDeeper:
matching EOL> IN: ) OR ( "tomato" ) )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=9:
matching EOL> unexpected )
matching EOL> expecting EOL

*************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                                 :4_3:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "potato" ) OR ( "tomato" ) )
term p/b:label to the left of line below, with EOL> MATCH (CERR): "potato"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=9:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

************** \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_3:UnDeeper:
************** / term p/notLabelTerm                                                                           :3_3:Other "pota:
*************** / term p/2:someIndentation expr p                                                             :3_3:Other "pota:
**************** / someIndentation                                                                           :3_3:Other "pota:
***************** / myindented: consuming GoDeeper                                                          :3_3:Other "pota:
myindented: consuming GoDeeper> IN: "potato" ) OR ( "tomato" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected "potato"
myindented: consuming GoDeeper> expecting (

***************** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "potato" Expecting: (     :3_3:Other "pota:
someIndentation> IN: "potato" ) OR ( "tomato" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected "potato"
someIndentation> expecting (

**************** \ !Unconsumed Error: someIndentation: Unexpected "potato" Expecting: (                      :3_3:Other "pota:
term p/2:someIndentation expr p> IN: "potato" ) OR ( "tomato" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected "potato"
term p/2:someIndentation expr p> expecting (

*************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "potato" Expecting: (        :3_3:Other "pota:
*************** / term p/3:plain p                                                                            :3_3:Other "pota:
**************** / pRelPred                                                                                  :3_3:Other "pota:
***************** / slRelPred                                                                               :3_3:Other "pota:
****************** / nested simpleHorn                                                                     :3_3:Other "pota:
******************* > |^|                                                                                 :3_3:Other "pota:
******************* / $*|                                                                                 :3_3:Other "pota:
******************** / slMultiTerm                                                                       :3_3:Other "pota:
********************* / someSL                                                                          :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

********************* \ someSL has returned (["potato"],0)                                               :4_3:UnDeeper:
slMultiTerm> IN: "potato" ) OR ( "tomato" ) )
slMultiTerm> MATCH (COK): "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

******************** \ slMultiTerm has returned (["potato"],0)                                            :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

******************* \ $*| has returned (["potato"],0)                                                      :4_3:UnDeeper:
******************* / |^| deeps                                                                            :4_3:UnDeeper:
|^| deeps> IN: ) OR ( "tomato" ) )
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

******************* \ |^| deeps has returned ([()],-1)                                                  :4_2:Or:
nested simpleHorn> IN: "potato" ) OR ( "tomato" ) )
nested simpleHorn> MATCH (CERR): "potato" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

****************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS )                :4_2:Or:
****************** / RPConstraint                                                                          :3_3:Other "pota:
******************* / $*|                                                                                 :3_3:Other "pota:
******************** / slMultiTerm                                                                       :3_3:Other "pota:
********************* / someSL                                                                          :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

********************* \ someSL has returned (["potato"],0)                                               :4_3:UnDeeper:
slMultiTerm> IN: "potato" ) OR ( "tomato" ) )
slMultiTerm> MATCH (COK): "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

******************** \ slMultiTerm has returned (["potato"],0)                                            :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

******************* \ $*| has returned (["potato"],0)                                                      :4_3:UnDeeper:
******************* / |>| calling $>>                                                                      :4_3:UnDeeper:
******************** / |>>/recurse                                                                        :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :4_3:UnDeeper:
******************** / |>>/base                                                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN ==     :4_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "tomato" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPConstraint> IN: "potato" ) OR ( "tomato" ) )
RPConstraint> MATCH (CERR): "potato"
RPConstraint> ERROR:
RPConstraint> offset=9:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (     :4_3:UnDeeper:
****************** / RPBoolStructR                                                                         :3_3:Other "pota:
******************* / $*|                                                                                 :3_3:Other "pota:
******************** / slMultiTerm                                                                       :3_3:Other "pota:
********************* / someSL                                                                          :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

********************* \ someSL has returned (["potato"],0)                                               :4_3:UnDeeper:
slMultiTerm> IN: "potato" ) OR ( "tomato" ) )
slMultiTerm> MATCH (COK): "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

******************** \ slMultiTerm has returned (["potato"],0)                                            :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

******************* \ $*| has returned (["potato"],0)                                                      :4_3:UnDeeper:
******************* / |>| calling $>>                                                                      :4_3:UnDeeper:
******************** / |>>/recurse                                                                        :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :4_3:UnDeeper:
******************** / |>>/base                                                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN ==     :4_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "tomato" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPBoolStructR> IN: "potato" ) OR ( "tomato" ) )
RPBoolStructR> MATCH (CERR): "potato"
RPBoolStructR> ERROR:
RPBoolStructR> offset=9:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (    :4_3:UnDeeper:
****************** / RPMT                                                                                  :3_3:Other "pota:
******************* / $*|                                                                                 :3_3:Other "pota:
******************** / slAKA                                                                             :3_3:Other "pota:
********************* / $*|                                                                             :3_3:Other "pota:
********************** / slAKA base                                                                    :3_3:Other "pota:
*********************** / slMultiTerm                                                                 :3_3:Other "pota:
************************ / someSL                                                                    :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

************************ \ someSL has returned (["potato"],0)                                         :4_3:UnDeeper:
slMultiTerm> IN: "potato" ) OR ( "tomato" ) )
slMultiTerm> MATCH (COK): "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

*********************** \ slMultiTerm has returned (["potato"],0)                                      :4_3:UnDeeper:
slAKA base> IN: "potato" ) OR ( "tomato" ) )
slAKA base> MATCH (COK): "potato"
slAKA base> VALUE: ((["potato"],0),[])

********************** \ slAKA base has returned (["potato"],0)                                         :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

********************* \ $*| has returned (["potato"],0)                                                  :4_3:UnDeeper:
********************* / |>>/recurse                                                                      :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :4_3:UnDeeper:
********************* / |>>/base                                                                         :4_3:UnDeeper:
********************** / slAKA optional akapart                                                         :4_3:UnDeeper:
*********************** / |?| optional something                                                       :4_3:UnDeeper:
************************ / |>>/recurse                                                                :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :4_3:UnDeeper:
************************ / |>>/base                                                                   :4_3:UnDeeper:
************************* / PAKA/akapart                                                             :4_3:UnDeeper:
************************** / $>|                                                                    :4_3:UnDeeper:
*************************** / Aka Token                                                            :4_3:UnDeeper:
Aka Token> IN: ) OR ( "tomato" ) )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA            :4_3:UnDeeper:
$>|> IN: ) OR ( "tomato" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected )
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                    :4_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "tomato" ) )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA             :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                   :4_3:UnDeeper:
|?| optional something> IN: ) OR ( "tomato" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :4_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "tomato" ) )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                                :4_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :4_3:UnDeeper:
********************* / |>>/recurse                                                                      :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :4_3:UnDeeper:
********************* / |>>/base                                                                         :4_3:UnDeeper:
********************** / slAKA optional typically                                                       :4_3:UnDeeper:
*********************** / |?| optional something                                                       :4_3:UnDeeper:
************************ / |>>/recurse                                                                :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :4_3:UnDeeper:
************************ / |>>/base                                                                   :4_3:UnDeeper:
************************* / typically                                                                :4_3:UnDeeper:
************************** / $>|                                                                    :4_3:UnDeeper:
$>|> IN: ) OR ( "tomato" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected )
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY              :4_3:UnDeeper:
typically> IN: ) OR ( "tomato" ) )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected )
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY          :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY             :4_3:UnDeeper:
|?| optional something> IN: ) OR ( "tomato" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :4_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "tomato" ) )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                              :4_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :4_3:UnDeeper:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                   :4_3:UnDeeper:
********************* > pAKA: entityalias = Nothing                                                      :4_3:UnDeeper:
slAKA> IN: "potato" ) OR ( "tomato" ) )
slAKA> MATCH (COK): "potato"
slAKA> VALUE: ((["potato"],0),[])

******************** \ slAKA has returned (["potato"],0)                                                  :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

******************* \ $*| has returned (["potato"],0)                                                      :4_3:UnDeeper:
RPMT> IN: "potato" ) OR ( "tomato" ) )
RPMT> MATCH (COK): "potato"
RPMT> VALUE: ((RPMT ["potato"],0),[])

****************** \ RPMT has returned (RPMT ["potato"],0)                                                  :4_3:UnDeeper:
slRelPred> IN: "potato" ) OR ( "tomato" ) )
slRelPred> MATCH (COK): "potato"
slRelPred> VALUE: ((RPMT ["potato"],0),[])

***************** \ slRelPred has returned (RPMT ["potato"],0)                                               :4_3:UnDeeper:
***************** / undeepers                                                                                :4_3:UnDeeper:
****************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                 :4_3:UnDeeper:
****************** > sameLine: success!                                                                     :4_3:UnDeeper:
undeepers> IN: ) OR ( "tomato" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************** \ undeepers has returned ()                                                                :4_3:UnDeeper:
pRelPred> IN: "potato" ) OR ( "tomato" ) )
pRelPred> MATCH (COK): "potato"
pRelPred> VALUE: (RPMT ["potato"],[])

**************** \ pRelPred has returned RPMT ["potato"]                                                      :4_3:UnDeeper:
term p/3:plain p> IN: "potato" ) OR ( "tomato" ) )
term p/3:plain p> MATCH (COK): "potato"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["potato"]),[])

*************** \ term p/3:plain p has returned MyLeaf (RPMT ["potato"])                                       :4_3:UnDeeper:
term p/notLabelTerm> IN: "potato" ) OR ( "tomato" ) )
term p/notLabelTerm> MATCH (COK): "potato"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["potato"]),[])

************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["potato"])                                      :4_3:UnDeeper:
term p> IN: "potato" ) OR ( "tomato" ) )
term p> MATCH (COK): "potato"
term p> VALUE: (MyLeaf (RPMT ["potato"]),[])

************* \ term p has returned MyLeaf (RPMT ["potato"])                                                     :4_3:UnDeeper:
************* / binary(Or)                                                                                       :4_3:UnDeeper:
binary(Or)> IN: ) OR ( "tomato" ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=9:
binary(Or)> unexpected )
binary(Or)> expecting OR

************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                        :4_3:UnDeeper:
************* / binary(And)                                                                                      :4_3:UnDeeper:
binary(And)> IN: ) OR ( "tomato" ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=9:
binary(And)> unexpected )
binary(And)> expecting AND

************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                      :4_3:UnDeeper:
************* / binary(SetLess)                                                                                  :4_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "tomato" ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=9:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                 :4_3:UnDeeper:
************* / binary(SetPlus)                                                                                  :4_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "tomato" ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=9:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                 :4_3:UnDeeper:
expression> IN: "potato" ) OR ( "tomato" ) )
expression> MATCH (COK): "potato"
expression> VALUE: (MyLeaf (RPMT ["potato"]),[])

************ \ expression has returned MyLeaf (RPMT ["potato"])                                                   :4_3:UnDeeper:
************ > |>>/base got MyLeaf (RPMT ["potato"])                                                              :4_3:UnDeeper:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (COK): "potato"
|>>/base> VALUE: ((MyLeaf (RPMT ["potato"]),0),[])

*********** \ |>>/base has returned (MyLeaf (RPMT ["potato"]),0)                                                   :4_3:UnDeeper:
|>| calling $>>> IN: "potato" ) OR ( "tomato" ) )
|>| calling $>>> MATCH (COK): "potato"
|>| calling $>>> VALUE: ((MyLeaf (RPMT ["potato"]),0),[])

********** \ |>| calling $>> has returned (MyLeaf (RPMT ["potato"]),0)                                              :4_3:UnDeeper:
********** / undeepers                                                                                              :4_3:UnDeeper:
*********** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                               :4_3:UnDeeper:
*********** > sameLine: success!                                                                                :4_2:Or:
undeepers> IN: ) OR ( "tomato" ) )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

********** \ undeepers has returned ()                                                                           :4_2:Or:
********** > got label, then inner immediately below: ["yummy","nightshades"]                                    :4_2:Or:
********** > got inner: MyLeaf (RPMT ["potato"])                                                                 :4_2:Or:
term p/1a:label directly above> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p/1a:label directly above> MATCH (COK): "yummy" ( "nightshades" "potato" )
term p/1a:label directly above> VALUE: (MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),[])

********* \ term p/1a:label directly above has returned MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])) :4_2:Or:
term p> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p> MATCH (COK): "yummy" ( "nightshades" "potato" )
term p> VALUE: (MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),[])

******** \ term p has returned MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"]))                          :4_2:Or:
******** / binary(Or)                                                                                              :4_2:Or:
binary(Or)> IN: OR ( "tomato" ) )
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                               :4_3:GoDeeper:
******** / term p                                                                                                   :4_3:GoDeeper:
********* / term p/1a:label directly above                                                                         :4_3:GoDeeper:
********** / $*|                                                                                                  :4_3:GoDeeper:
*********** / someSL                                                                                             :4_3:GoDeeper:
************ / pNumAsText                                                                                       :4_3:GoDeeper:
pNumAsText> IN: ( "tomato" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected (
pNumAsText> expecting number

************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                    :4_3:GoDeeper:
someSL> IN: ( "tomato" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected (
someSL> expecting other text or number

*********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                            :4_3:GoDeeper:
$*|> IN: ( "tomato" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected (
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                 :4_3:GoDeeper:
term p/1a:label directly above> IN: ( "tomato" ) )
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=11:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

********* \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number        :4_3:GoDeeper:
********* / term p/b:label to the left of line below, with EOL                                                     :4_3:GoDeeper:
********** / someSL                                                                                               :4_3:GoDeeper:
*********** / pNumAsText                                                                                         :4_3:GoDeeper:
pNumAsText> IN: ( "tomato" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                      :4_3:GoDeeper:
someSL> IN: ( "tomato" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected (
someSL> expecting other text or number

********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                              :4_3:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "tomato" ) )
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=11:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

********* \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
********* / term p/notLabelTerm                                                                                    :4_3:GoDeeper:
********** / term p/2:someIndentation expr p                                                                      :4_3:GoDeeper:
*********** / someIndentation                                                                                    :4_3:GoDeeper:
************ / myindented: consuming GoDeeper                                                                   :4_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "tomato" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                              :4_3:Other "toma:
************ / manyIndentation/leaf?                                                                             :4_3:Other "toma:
************* / expression                                                                                      :4_3:Other "toma:
************** / term p                                                                                        :4_3:Other "toma:
*************** / term p/1a:label directly above                                                              :4_3:Other "toma:
**************** / $*|                                                                                       :4_3:Other "toma:
***************** / someSL                                                                                  :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

***************** \ someSL has returned (["tomato"],0)                                                     :1_2:UnDeeper:
***************** / pNumAsText                                                                             :1_2:UnDeeper:
pNumAsText> IN: ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected )
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                          :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (CERR): "tomato"
$*|> ERROR:
$*|> offset=13:
$*|> unexpected )
$*|> expecting ( or other text or number

**************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number                     :1_2:UnDeeper:
term p/1a:label directly above> IN: "tomato" ) )
term p/1a:label directly above> MATCH (CERR): "tomato"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=13:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

*************** \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :1_2:UnDeeper:
*************** / term p/b:label to the left of line below, with EOL                                          :4_3:Other "toma:
**************** / someSL                                                                                    :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

**************** \ someSL has returned (["tomato"],0)                                                       :1_2:UnDeeper:
**************** / undeepers                                                                                :1_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                 :1_2:UnDeeper:
***************** > sameLine: success!                                                                     :1_2:UnDeeper:
undeepers> IN: ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                :1_2:UnDeeper:
**************** / matching EOL                                                                             :1_2:UnDeeper:
matching EOL> IN: ) )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=13:
matching EOL> unexpected )
matching EOL> expecting EOL

**************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                             :1_2:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "tomato" ) )
term p/b:label to the left of line below, with EOL> MATCH (CERR): "tomato"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=13:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

*************** \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :1_2:UnDeeper:
*************** / term p/notLabelTerm                                                                         :4_3:Other "toma:
**************** / term p/2:someIndentation expr p                                                           :4_3:Other "toma:
***************** / someIndentation                                                                         :4_3:Other "toma:
****************** / myindented: consuming GoDeeper                                                        :4_3:Other "toma:
myindented: consuming GoDeeper> IN: "tomato" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected "tomato"
myindented: consuming GoDeeper> expecting (

****************** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "tomato" Expecting: (   :4_3:Other "toma:
someIndentation> IN: "tomato" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected "tomato"
someIndentation> expecting (

***************** \ !Unconsumed Error: someIndentation: Unexpected "tomato" Expecting: (                    :4_3:Other "toma:
term p/2:someIndentation expr p> IN: "tomato" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=12:
term p/2:someIndentation expr p> unexpected "tomato"
term p/2:someIndentation expr p> expecting (

**************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "tomato" Expecting: (      :4_3:Other "toma:
**************** / term p/3:plain p                                                                          :4_3:Other "toma:
***************** / pRelPred                                                                                :4_3:Other "toma:
****************** / slRelPred                                                                             :4_3:Other "toma:
******************* / nested simpleHorn                                                                   :4_3:Other "toma:
******************** > |^|                                                                               :4_3:Other "toma:
******************** / $*|                                                                               :4_3:Other "toma:
********************* / slMultiTerm                                                                     :4_3:Other "toma:
********************** / someSL                                                                        :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************** \ someSL has returned (["tomato"],0)                                           :1_2:UnDeeper:
slMultiTerm> IN: "tomato" ) )
slMultiTerm> MATCH (COK): "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

********************* \ slMultiTerm has returned (["tomato"],0)                                        :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

******************** \ $*| has returned (["tomato"],0)                                                  :1_2:UnDeeper:
******************** / |^| deeps                                                                        :1_2:UnDeeper:
|^| deeps> IN: ) )
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

******************** \ |^| deeps has returned ([(),()],-2)                                         :EOF:
nested simpleHorn> IN: "tomato" ) )
nested simpleHorn> MATCH (CERR): "tomato" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting ), MEANS, or any token

******************* \ !Consumed Error: nested simpleHorn: Unexpected end of input Expecting: MEANS ) any token :EOF:
******************* / RPConstraint                                                                        :4_3:Other "toma:
******************** / $*|                                                                               :4_3:Other "toma:
********************* / slMultiTerm                                                                     :4_3:Other "toma:
********************** / someSL                                                                        :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************** \ someSL has returned (["tomato"],0)                                           :1_2:UnDeeper:
slMultiTerm> IN: "tomato" ) )
slMultiTerm> MATCH (COK): "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

********************* \ slMultiTerm has returned (["tomato"],0)                                        :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

******************** \ $*| has returned (["tomato"],0)                                                  :1_2:UnDeeper:
******************** / |>| calling $>>                                                                  :1_2:UnDeeper:
********************* / |>>/recurse                                                                    :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :1_2:UnDeeper:
********************* / |>>/base                                                                       :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :1_2:UnDeeper:
|>| calling $>>> IN: ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :1_2:UnDeeper:
RPConstraint> IN: "tomato" ) )
RPConstraint> MATCH (CERR): "tomato"
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :1_2:UnDeeper:
******************* / RPBoolStructR                                                                       :4_3:Other "toma:
******************** / $*|                                                                               :4_3:Other "toma:
********************* / slMultiTerm                                                                     :4_3:Other "toma:
********************** / someSL                                                                        :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************** \ someSL has returned (["tomato"],0)                                           :1_2:UnDeeper:
slMultiTerm> IN: "tomato" ) )
slMultiTerm> MATCH (COK): "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

********************* \ slMultiTerm has returned (["tomato"],0)                                        :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

******************** \ $*| has returned (["tomato"],0)                                                  :1_2:UnDeeper:
******************** / |>| calling $>>                                                                  :1_2:UnDeeper:
********************* / |>>/recurse                                                                    :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :1_2:UnDeeper:
********************* / |>>/base                                                                       :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :1_2:UnDeeper:
|>| calling $>>> IN: ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :1_2:UnDeeper:
RPBoolStructR> IN: "tomato" ) )
RPBoolStructR> MATCH (CERR): "tomato"
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :1_2:UnDeeper:
******************* / RPMT                                                                                :4_3:Other "toma:
******************** / $*|                                                                               :4_3:Other "toma:
********************* / slAKA                                                                           :4_3:Other "toma:
********************** / $*|                                                                           :4_3:Other "toma:
*********************** / slAKA base                                                                  :4_3:Other "toma:
************************ / slMultiTerm                                                               :4_3:Other "toma:
************************* / someSL                                                                  :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

************************* \ someSL has returned (["tomato"],0)                                     :1_2:UnDeeper:
slMultiTerm> IN: "tomato" ) )
slMultiTerm> MATCH (COK): "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

************************ \ slMultiTerm has returned (["tomato"],0)                                  :1_2:UnDeeper:
slAKA base> IN: "tomato" ) )
slAKA base> MATCH (COK): "tomato"
slAKA base> VALUE: ((["tomato"],0),[])

*********************** \ slAKA base has returned (["tomato"],0)                                     :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

********************** \ $*| has returned (["tomato"],0)                                              :1_2:UnDeeper:
********************** / |>>/recurse                                                                  :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                    :1_2:UnDeeper:
********************** / |>>/base                                                                     :1_2:UnDeeper:
*********************** / slAKA optional akapart                                                     :1_2:UnDeeper:
************************ / |?| optional something                                                   :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :1_2:UnDeeper:
************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / PAKA/akapart                                                         :1_2:UnDeeper:
*************************** / $>|                                                                :1_2:UnDeeper:
**************************** / Aka Token                                                        :1_2:UnDeeper:
Aka Token> IN: ) )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=13:
Aka Token> unexpected )
Aka Token> expecting AKA

**************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA        :1_2:UnDeeper:
$>|> IN: ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting AKA

*************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                :1_2:UnDeeper:
PAKA/akapart> IN: ) )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=13:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA         :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting AKA

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA               :1_2:UnDeeper:
|?| optional something> IN: ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************ \ |?| optional something has returned (Nothing,0)                          :1_2:UnDeeper:
slAKA optional akapart> IN: ) )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************** \ slAKA optional akapart has returned (Nothing,0)                            :1_2:UnDeeper:
*********************** > |>>/base got Nothing                                                       :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************** \ |>>/base has returned (Nothing,0)                                            :1_2:UnDeeper:
********************** / |>>/recurse                                                                  :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                    :1_2:UnDeeper:
********************** / |>>/base                                                                     :1_2:UnDeeper:
*********************** / slAKA optional typically                                                   :1_2:UnDeeper:
************************ / |?| optional something                                                   :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :1_2:UnDeeper:
************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / typically                                                            :1_2:UnDeeper:
*************************** / $>|                                                                :1_2:UnDeeper:
$>|> IN: ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

*************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY          :1_2:UnDeeper:
typically> IN: ) )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY      :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY         :1_2:UnDeeper:
|?| optional something> IN: ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************ \ |?| optional something has returned (Nothing,0)                          :1_2:UnDeeper:
slAKA optional typically> IN: ) )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************** \ slAKA optional typically has returned (Nothing,0)                          :1_2:UnDeeper:
*********************** > |>>/base got Nothing                                                       :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************** \ |>>/base has returned (Nothing,0)                                            :1_2:UnDeeper:
********************** > slAKA: proceeding after base and entityalias are retrieved ...               :1_2:UnDeeper:
********************** > pAKA: entityalias = Nothing                                                  :1_2:UnDeeper:
slAKA> IN: "tomato" ) )
slAKA> MATCH (COK): "tomato"
slAKA> VALUE: ((["tomato"],0),[])

********************* \ slAKA has returned (["tomato"],0)                                              :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

******************** \ $*| has returned (["tomato"],0)                                                  :1_2:UnDeeper:
RPMT> IN: "tomato" ) )
RPMT> MATCH (COK): "tomato"
RPMT> VALUE: ((RPMT ["tomato"],0),[])

******************* \ RPMT has returned (RPMT ["tomato"],0)                                              :1_2:UnDeeper:
slRelPred> IN: "tomato" ) )
slRelPred> MATCH (COK): "tomato"
slRelPred> VALUE: ((RPMT ["tomato"],0),[])

****************** \ slRelPred has returned (RPMT ["tomato"],0)                                           :1_2:UnDeeper:
****************** / undeepers                                                                            :1_2:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :1_2:UnDeeper:
******************* > sameLine: success!                                                                 :1_2:UnDeeper:
undeepers> IN: ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************** \ undeepers has returned ()                                                            :1_2:UnDeeper:
pRelPred> IN: "tomato" ) )
pRelPred> MATCH (COK): "tomato"
pRelPred> VALUE: (RPMT ["tomato"],[])

***************** \ pRelPred has returned RPMT ["tomato"]                                                  :1_2:UnDeeper:
term p/3:plain p> IN: "tomato" ) )
term p/3:plain p> MATCH (COK): "tomato"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

**************** \ term p/3:plain p has returned MyLeaf (RPMT ["tomato"])                                   :1_2:UnDeeper:
term p/notLabelTerm> IN: "tomato" ) )
term p/notLabelTerm> MATCH (COK): "tomato"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["tomato"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["tomato"])                                  :1_2:UnDeeper:
term p> IN: "tomato" ) )
term p> MATCH (COK): "tomato"
term p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************** \ term p has returned MyLeaf (RPMT ["tomato"])                                                 :1_2:UnDeeper:
************** / binary(Or)                                                                                   :1_2:UnDeeper:
binary(Or)> IN: ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected )
binary(Or)> expecting OR

************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                    :1_2:UnDeeper:
************** / binary(And)                                                                                  :1_2:UnDeeper:
binary(And)> IN: ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected )
binary(And)> expecting AND

************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                  :1_2:UnDeeper:
************** / binary(SetLess)                                                                              :1_2:UnDeeper:
binary(SetLess)> IN: ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                             :1_2:UnDeeper:
************** / binary(SetPlus)                                                                              :1_2:UnDeeper:
binary(SetPlus)> IN: ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                             :1_2:UnDeeper:
expression> IN: "tomato" ) )
expression> MATCH (COK): "tomato"
expression> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************* \ expression has returned MyLeaf (RPMT ["tomato"])                                               :1_2:UnDeeper:
manyIndentation/leaf?> IN: "tomato" ) )
manyIndentation/leaf?> MATCH (COK): "tomato"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["tomato"])                                      :1_2:UnDeeper:
************ / myindented: consuming UnDeeper                                                                   :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                               :1_3:UnDeeper:
someIndentation> IN: ( "tomato" ) )
someIndentation> MATCH (COK): ( "tomato" )
someIndentation> VALUE: (MyLeaf (RPMT ["tomato"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["tomato"])                                                :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "tomato" ) )
term p/2:someIndentation expr p> MATCH (COK): ( "tomato" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["tomato"])                                  :1_3:UnDeeper:
term p/notLabelTerm> IN: ( "tomato" ) )
term p/notLabelTerm> MATCH (COK): ( "tomato" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["tomato"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["tomato"])                                                :1_3:UnDeeper:
term p> IN: ( "tomato" ) )
term p> MATCH (COK): ( "tomato" )
term p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

******** \ term p has returned MyLeaf (RPMT ["tomato"])                                                               :1_3:UnDeeper:
******** / binary(Or)                                                                                                 :1_3:UnDeeper:
binary(Or)> IN: )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected )
binary(Or)> expecting OR

******** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                                  :1_3:UnDeeper:
******** / binary(And)                                                                                                :1_3:UnDeeper:
binary(And)> IN: )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected )
binary(And)> expecting AND

******** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                                :1_3:UnDeeper:
******** / binary(SetLess)                                                                                            :1_3:UnDeeper:
binary(SetLess)> IN: )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                           :1_3:UnDeeper:
******** / binary(SetPlus)                                                                                            :1_3:UnDeeper:
binary(SetPlus)> IN: )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                           :1_3:UnDeeper:
expression> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
expression> MATCH (COK): "yummy" ( "nightshades" "potato" ) OR (  <…>
expression> VALUE: (MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])],[])

******* \ expression has returned MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])] :1_3:UnDeeper:
ppp inner> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
ppp inner> MATCH (CERR): "yummy" ( "nightshades" "potato" ) OR (  <…>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]

****** \ !Consumed Error: ppp inner: Fail: Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]   :1_3:UnDeeper:
****** / withPrePost                                                                                                 :2_2:Other "yumm:
******* > |<* starting                                                                                              :2_2:Other "yumm:
******* / $*|                                                                                                       :2_2:Other "yumm:
******** / pre part                                                                                                :2_2:Other "yumm:
********* / aboveNextLineKeyword                                                                                   :2_3:GoDeeper:
********** / expectUnDeepers                                                                                      :2_3:GoDeeper:
*********** / pNumAsText                                                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                      :2_3:GoDeeper:
*********** > ignoring ["GD","nightshades","potato"]                                                               :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                       :2_3:GoDeeper:
********** > aNLK: determined undp_count = 1                                                                      :2_3:GoDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                    :2_3:GoDeeper:
********** / $*|                                                                                                  :2_3:GoDeeper:
$*|> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                              :2_3:GoDeeper:
********** > ->| success                                                                                           :2_3:Other "nigh:
********** / |>>/recurse                                                                                           :2_3:Other "nigh:
|>>/recurse> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "nightshades"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "nightshades" Expecting: (                                 :2_3:Other "nigh:
********** / |>>/base                                                                                              :2_3:Other "nigh:
*********** / slMultiTerm                                                                                         :2_3:Other "nigh:
************ / someSL                                                                                            :2_3:Other "nigh:
someSL> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
someSL> MATCH (COK): "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

************ \ someSL has returned (["nightshades"],0)                                                           :3_3:Other "pota:
slMultiTerm> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
slMultiTerm> MATCH (COK): "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

*********** \ slMultiTerm has returned (["nightshades"],0)                                                        :3_3:Other "pota:
*********** > |>>/base got ["nightshades"]                                                                        :3_3:Other "pota:
|>>/base> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/base> MATCH (COK): "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********** \ |>>/base has returned (["nightshades"],0)                                                             :3_3:Other "pota:
********** > aNLK: current depth is 1                                                                              :3_3:Other "pota:
********** > |<|                                                                                                   :3_3:Other "pota:
********** > |<* starting                                                                                          :3_3:Other "pota:
********** / |<*/parent                                                                                            :3_3:Other "pota:
*********** > |<*/recurse                                                                                         :3_3:Other "pota:
*********** / |<*/base                                                                                            :3_3:Other "pota:
|<*/base> IN: "potato" ) OR ( "tomato" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected "potato"
|<*/base> expecting AND, OR, or UNLESS

*********** \ !Unconsumed Error: |<*/base: Unexpected "potato" Expecting: OR AND UNLESS                           :3_3:Other "pota:
|<*/parent> IN: "potato" ) OR ( "tomato" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected "potato"
|<*/parent> expecting ), AND, OR, or UNLESS

********** \ !Unconsumed Error: |<*/parent: Unexpected "potato" Expecting: OR AND UNLESS )                         :3_3:Other "pota:
aboveNextLineKeyword> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
aboveNextLineKeyword> MATCH (CERR): ( "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (, ), AND, OR, or UNLESS

********* \ !Consumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: OR AND UNLESS ( )                 :3_3:Other "pota:
********* > /*= lookAhead failed, delegating to plain /+=                                                          :2_3:GoDeeper:
********* / aboveNextLineKeyword                                                                                    :2_3:Other "nigh:
********** / expectUnDeepers                                                                                       :2_3:Other "nigh:
*********** > ignoring ["nightshades","potato"]                                                                    :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :2_3:Other "nigh:
********** > aNLK: determined undp_count = 1                                                                       :2_3:Other "nigh:
********** > ->| trying to consume 1 GoDeepers                                                                     :2_3:Other "nigh:
********** / $*|                                                                                                   :2_3:Other "nigh:
$*|> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :2_3:Other "nigh:
aboveNextLineKeyword> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected "nightshades"
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "nightshades" Expecting: (                          :2_3:Other "nigh:
********* > /*= lookAhead failed, delegating to plain /+=                                                           :2_3:Other "nigh:
********* / aboveNextLineKeyword                                                                                    :3_3:Other "pota:
********** / expectUnDeepers                                                                                       :3_3:Other "pota:
*********** > ignoring ["potato"]                                                                                  :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: "potato" ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :3_3:Other "pota:
********** > aNLK: determined undp_count = 1                                                                       :3_3:Other "pota:
********** > ->| trying to consume 1 GoDeepers                                                                     :3_3:Other "pota:
********** / $*|                                                                                                   :3_3:Other "pota:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :3_3:Other "pota:
aboveNextLineKeyword> IN: "potato" ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: (                               :3_3:Other "pota:
********* > /*= lookAhead failed, delegating to plain /+=                                                           :3_3:Other "pota:
********* / aboveNextLineKeyword                                                                                     :4_3:UnDeeper:
********** / expectUnDeepers                                                                                        :4_3:UnDeeper:
*********** > ignoring []                                                                                          :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                         :4_3:UnDeeper:
********** > aNLK: determined undp_count = 1                                                                        :4_3:UnDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                      :4_3:UnDeeper:
********** / $*|                                                                                                    :4_3:UnDeeper:
$*|> IN: ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                                :4_3:UnDeeper:
aboveNextLineKeyword> IN: ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected ) Expecting: (                                       :4_3:UnDeeper:
********* > /*= lookAhead failed, delegating to plain /+=                                                            :4_3:UnDeeper:
pre part> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
pre part> MATCH (CERR): "yummy"
pre part> ERROR:
pre part> offset=9:
pre part> unexpected )
pre part> expecting ( or Other text

******** \ !Consumed Error: pre part: Unexpected ) Expecting: ( Other text                                          :2_3:GoDeeper:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (CERR): "yummy"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or Other text

******* \ !Consumed Error: $*|: Unexpected ) Expecting: ( Other text                                                 :2_3:GoDeeper:
withPrePost> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
withPrePost> MATCH (CERR): "yummy"
withPrePost> ERROR:
withPrePost> offset=9:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****** \ !Consumed Error: withPrePost: Unexpected ) Expecting: ( Other text                                           :2_3:GoDeeper:
****** / withPreOnly                                                                                                 :2_2:Other "yumm:
******* / $*|                                                                                                       :2_2:Other "yumm:
******** / pre part                                                                                                :2_2:Other "yumm:
********* / aboveNextLineKeyword                                                                                   :2_3:GoDeeper:
********** / expectUnDeepers                                                                                      :2_3:GoDeeper:
*********** / pNumAsText                                                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                      :2_3:GoDeeper:
*********** > ignoring ["GD","nightshades","potato"]                                                               :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                       :2_3:GoDeeper:
********** > aNLK: determined undp_count = 1                                                                      :2_3:GoDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                    :2_3:GoDeeper:
********** / $*|                                                                                                  :2_3:GoDeeper:
$*|> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                              :2_3:GoDeeper:
********** > ->| success                                                                                           :2_3:Other "nigh:
********** / |>>/recurse                                                                                           :2_3:Other "nigh:
|>>/recurse> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "nightshades"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "nightshades" Expecting: (                                 :2_3:Other "nigh:
********** / |>>/base                                                                                              :2_3:Other "nigh:
*********** / slMultiTerm                                                                                         :2_3:Other "nigh:
************ / someSL                                                                                            :2_3:Other "nigh:
someSL> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
someSL> MATCH (COK): "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

************ \ someSL has returned (["nightshades"],0)                                                           :3_3:Other "pota:
slMultiTerm> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
slMultiTerm> MATCH (COK): "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

*********** \ slMultiTerm has returned (["nightshades"],0)                                                        :3_3:Other "pota:
*********** > |>>/base got ["nightshades"]                                                                        :3_3:Other "pota:
|>>/base> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/base> MATCH (COK): "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********** \ |>>/base has returned (["nightshades"],0)                                                             :3_3:Other "pota:
********** > aNLK: current depth is 1                                                                              :3_3:Other "pota:
********** > |<|                                                                                                   :3_3:Other "pota:
********** > |<* starting                                                                                          :3_3:Other "pota:
********** / |<*/parent                                                                                            :3_3:Other "pota:
*********** > |<*/recurse                                                                                         :3_3:Other "pota:
*********** / |<*/base                                                                                            :3_3:Other "pota:
|<*/base> IN: "potato" ) OR ( "tomato" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected "potato"
|<*/base> expecting AND, OR, or UNLESS

*********** \ !Unconsumed Error: |<*/base: Unexpected "potato" Expecting: OR AND UNLESS                           :3_3:Other "pota:
|<*/parent> IN: "potato" ) OR ( "tomato" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected "potato"
|<*/parent> expecting ), AND, OR, or UNLESS

********** \ !Unconsumed Error: |<*/parent: Unexpected "potato" Expecting: OR AND UNLESS )                         :3_3:Other "pota:
aboveNextLineKeyword> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
aboveNextLineKeyword> MATCH (CERR): ( "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (, ), AND, OR, or UNLESS

********* \ !Consumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: OR AND UNLESS ( )                 :3_3:Other "pota:
********* > /*= lookAhead failed, delegating to plain /+=                                                          :2_3:GoDeeper:
********* / aboveNextLineKeyword                                                                                    :2_3:Other "nigh:
********** / expectUnDeepers                                                                                       :2_3:Other "nigh:
*********** > ignoring ["nightshades","potato"]                                                                    :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :2_3:Other "nigh:
********** > aNLK: determined undp_count = 1                                                                       :2_3:Other "nigh:
********** > ->| trying to consume 1 GoDeepers                                                                     :2_3:Other "nigh:
********** / $*|                                                                                                   :2_3:Other "nigh:
$*|> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :2_3:Other "nigh:
aboveNextLineKeyword> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected "nightshades"
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "nightshades" Expecting: (                          :2_3:Other "nigh:
********* > /*= lookAhead failed, delegating to plain /+=                                                           :2_3:Other "nigh:
********* / aboveNextLineKeyword                                                                                    :3_3:Other "pota:
********** / expectUnDeepers                                                                                       :3_3:Other "pota:
*********** > ignoring ["potato"]                                                                                  :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: "potato" ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :3_3:Other "pota:
********** > aNLK: determined undp_count = 1                                                                       :3_3:Other "pota:
********** > ->| trying to consume 1 GoDeepers                                                                     :3_3:Other "pota:
********** / $*|                                                                                                   :3_3:Other "pota:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :3_3:Other "pota:
aboveNextLineKeyword> IN: "potato" ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: (                               :3_3:Other "pota:
********* > /*= lookAhead failed, delegating to plain /+=                                                           :3_3:Other "pota:
********* / aboveNextLineKeyword                                                                                     :4_3:UnDeeper:
********** / expectUnDeepers                                                                                        :4_3:UnDeeper:
*********** > ignoring []                                                                                          :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                         :4_3:UnDeeper:
********** > aNLK: determined undp_count = 1                                                                        :4_3:UnDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                      :4_3:UnDeeper:
********** / $*|                                                                                                    :4_3:UnDeeper:
$*|> IN: ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                                :4_3:UnDeeper:
aboveNextLineKeyword> IN: ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected ) Expecting: (                                       :4_3:UnDeeper:
********* > /*= lookAhead failed, delegating to plain /+=                                                            :4_3:UnDeeper:
pre part> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
pre part> MATCH (CERR): "yummy"
pre part> ERROR:
pre part> offset=9:
pre part> unexpected )
pre part> expecting ( or Other text

******** \ !Consumed Error: pre part: Unexpected ) Expecting: ( Other text                                          :2_3:GoDeeper:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (CERR): "yummy"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or Other text

******* \ !Consumed Error: $*|: Unexpected ) Expecting: ( Other text                                                 :2_3:GoDeeper:
withPreOnly> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
withPreOnly> MATCH (CERR): "yummy"
withPreOnly> ERROR:
withPreOnly> offset=9:
withPreOnly> unexpected )
withPreOnly> expecting ( or Other text

****** \ !Consumed Error: withPreOnly: Unexpected ) Expecting: ( Other text                                           :2_3:GoDeeper:
pBSR> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
pBSR> MATCH (CERR): "yummy"
pBSR> ERROR:
pBSR> offset=14:
pBSR> Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]

***** \ !Consumed Error: pBSR: Fail: Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]        :2_3:GoDeeper:
|>>/base> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
|>>/base> MATCH (CERR): "yummy"
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]

**** \ !Consumed Error: |>>/base: Fail: Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]      :2_3:GoDeeper:
|>>/recurse> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
|>>/recurse> MATCH (CERR): ( "yummy"
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]

*** \ !Consumed Error: |>>/recurse: Fail: Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]     :2_3:GoDeeper:
*** / |>>/base                                                                                                         :2_2:GoDeeper:
**** / pBSR                                                                                                           :2_2:GoDeeper:
***** / ppp inner                                                                                                    :2_2:GoDeeper:
****** / expression                                                                                                 :2_2:GoDeeper:
******* / term p                                                                                                   :2_2:GoDeeper:
******** / term p/1a:label directly above                                                                         :2_2:GoDeeper:
********* / $*|                                                                                                  :2_2:GoDeeper:
********** / someSL                                                                                             :2_2:GoDeeper:
*********** / pNumAsText                                                                                       :2_2:GoDeeper:
pNumAsText> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                    :2_2:GoDeeper:
someSL> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                            :2_2:GoDeeper:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                 :2_2:GoDeeper:
term p/1a:label directly above> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=4:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

******** \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number        :2_2:GoDeeper:
******** / term p/b:label to the left of line below, with EOL                                                     :2_2:GoDeeper:
********* / someSL                                                                                               :2_2:GoDeeper:
********** / pNumAsText                                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                      :2_2:GoDeeper:
someSL> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

********* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                              :2_2:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=4:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

******** \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
******** / term p/notLabelTerm                                                                                    :2_2:GoDeeper:
********* / term p/2:someIndentation expr p                                                                      :2_2:GoDeeper:
********** / someIndentation                                                                                    :2_2:GoDeeper:
*********** / myindented: consuming GoDeeper                                                                   :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********** \ myindented: consuming GoDeeper has returned GoDeeper                                              :2_2:Other "yumm:
*********** / manyIndentation/leaf?                                                                             :2_2:Other "yumm:
************ / expression                                                                                      :2_2:Other "yumm:
************* / term p                                                                                        :2_2:Other "yumm:
************** / term p/1a:label directly above                                                              :2_2:Other "yumm:
*************** / $*|                                                                                       :2_2:Other "yumm:
**************** / someSL                                                                                  :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

**************** \ someSL has returned (["yummy","nightshades"],1)                                           :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

*************** \ $*| has returned (["yummy","nightshades"],1)                                                :3_3:Other "pota:
*************** / |>| calling $>>                                                                             :3_3:Other "pota:
**************** / |>>/recurse                                                                               :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                          :3_3:Other "pota:
**************** / |>>/base                                                                                  :3_3:Other "pota:
***************** / expression                                                                              :3_3:Other "pota:
****************** / term p                                                                                :3_3:Other "pota:
******************* / term p/1a:label directly above                                                      :3_3:Other "pota:
******************** / $*|                                                                               :3_3:Other "pota:
********************* / someSL                                                                          :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

********************* \ someSL has returned (["potato"],0)                                               :4_3:UnDeeper:
********************* / pNumAsText                                                                       :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "tomato" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected )
pNumAsText> expecting number

********************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                    :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (CERR): "potato"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or other text or number

******************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number               :4_3:UnDeeper:
term p/1a:label directly above> IN: "potato" ) OR ( "tomato" ) )
term p/1a:label directly above> MATCH (CERR): "potato"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=9:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

******************* \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :4_3:UnDeeper:
******************* / term p/b:label to the left of line below, with EOL                                  :3_3:Other "pota:
******************** / someSL                                                                            :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

******************** \ someSL has returned (["potato"],0)                                                 :4_3:UnDeeper:
******************** / undeepers                                                                          :4_3:UnDeeper:
********************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers           :4_3:UnDeeper:
********************* > sameLine: success!                                                               :4_3:UnDeeper:
undeepers> IN: ) OR ( "tomato" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************** \ undeepers has returned ()                                                          :4_3:UnDeeper:
******************** / matching EOL                                                                       :4_3:UnDeeper:
matching EOL> IN: ) OR ( "tomato" ) )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=9:
matching EOL> unexpected )
matching EOL> expecting EOL

******************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                       :4_3:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "potato" ) OR ( "tomato" ) )
term p/b:label to the left of line below, with EOL> MATCH (CERR): "potato"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=9:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

******************* \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_3:UnDeeper:
******************* / term p/notLabelTerm                                                                 :3_3:Other "pota:
******************** / term p/2:someIndentation expr p                                                   :3_3:Other "pota:
********************* / someIndentation                                                                 :3_3:Other "pota:
********************** / myindented: consuming GoDeeper                                                :3_3:Other "pota:
myindented: consuming GoDeeper> IN: "potato" ) OR ( "tomato" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected "potato"
myindented: consuming GoDeeper> expecting (

********************** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "potato" Expecting: ( :3_3:Other "pota:
someIndentation> IN: "potato" ) OR ( "tomato" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected "potato"
someIndentation> expecting (

********************* \ !Unconsumed Error: someIndentation: Unexpected "potato" Expecting: (            :3_3:Other "pota:
term p/2:someIndentation expr p> IN: "potato" ) OR ( "tomato" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected "potato"
term p/2:someIndentation expr p> expecting (

******************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "potato" Expecting: ( :3_3:Other "pota:
******************** / term p/3:plain p                                                                  :3_3:Other "pota:
********************* / pRelPred                                                                        :3_3:Other "pota:
********************** / slRelPred                                                                     :3_3:Other "pota:
*********************** / nested simpleHorn                                                           :3_3:Other "pota:
************************ > |^|                                                                       :3_3:Other "pota:
************************ / $*|                                                                       :3_3:Other "pota:
************************* / slMultiTerm                                                             :3_3:Other "pota:
************************** / someSL                                                                :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

************************** \ someSL has returned (["potato"],0)                                     :4_3:UnDeeper:
slMultiTerm> IN: "potato" ) OR ( "tomato" ) )
slMultiTerm> MATCH (COK): "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

************************* \ slMultiTerm has returned (["potato"],0)                                  :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

************************ \ $*| has returned (["potato"],0)                                            :4_3:UnDeeper:
************************ / |^| deeps                                                                  :4_3:UnDeeper:
|^| deeps> IN: ) OR ( "tomato" ) )
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************ \ |^| deeps has returned ([()],-1)                                        :4_2:Or:
nested simpleHorn> IN: "potato" ) OR ( "tomato" ) )
nested simpleHorn> MATCH (CERR): "potato" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

*********************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS )      :4_2:Or:
*********************** / RPConstraint                                                                :3_3:Other "pota:
************************ / $*|                                                                       :3_3:Other "pota:
************************* / slMultiTerm                                                             :3_3:Other "pota:
************************** / someSL                                                                :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

************************** \ someSL has returned (["potato"],0)                                     :4_3:UnDeeper:
slMultiTerm> IN: "potato" ) OR ( "tomato" ) )
slMultiTerm> MATCH (COK): "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

************************* \ slMultiTerm has returned (["potato"],0)                                  :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

************************ \ $*| has returned (["potato"],0)                                            :4_3:UnDeeper:
************************ / |>| calling $>>                                                            :4_3:UnDeeper:
************************* / |>>/recurse                                                              :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :4_3:UnDeeper:
************************* / |>>/base                                                                 :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "tomato" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPConstraint> IN: "potato" ) OR ( "tomato" ) )
RPConstraint> MATCH (CERR): "potato"
RPConstraint> ERROR:
RPConstraint> offset=9:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
*********************** / RPBoolStructR                                                               :3_3:Other "pota:
************************ / $*|                                                                       :3_3:Other "pota:
************************* / slMultiTerm                                                             :3_3:Other "pota:
************************** / someSL                                                                :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

************************** \ someSL has returned (["potato"],0)                                     :4_3:UnDeeper:
slMultiTerm> IN: "potato" ) OR ( "tomato" ) )
slMultiTerm> MATCH (COK): "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

************************* \ slMultiTerm has returned (["potato"],0)                                  :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

************************ \ $*| has returned (["potato"],0)                                            :4_3:UnDeeper:
************************ / |>| calling $>>                                                            :4_3:UnDeeper:
************************* / |>>/recurse                                                              :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :4_3:UnDeeper:
************************* / |>>/base                                                                 :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "tomato" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPBoolStructR> IN: "potato" ) OR ( "tomato" ) )
RPBoolStructR> MATCH (CERR): "potato"
RPBoolStructR> ERROR:
RPBoolStructR> offset=9:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
*********************** / RPMT                                                                        :3_3:Other "pota:
************************ / $*|                                                                       :3_3:Other "pota:
************************* / slAKA                                                                   :3_3:Other "pota:
************************** / $*|                                                                   :3_3:Other "pota:
*************************** / slAKA base                                                          :3_3:Other "pota:
**************************** / slMultiTerm                                                       :3_3:Other "pota:
***************************** / someSL                                                          :3_3:Other "pota:
someSL> IN: "potato" ) OR ( "tomato" ) )
someSL> MATCH (COK): "potato"
someSL> VALUE: ((["potato"],0),[])

***************************** \ someSL has returned (["potato"],0)                               :4_3:UnDeeper:
slMultiTerm> IN: "potato" ) OR ( "tomato" ) )
slMultiTerm> MATCH (COK): "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

**************************** \ slMultiTerm has returned (["potato"],0)                            :4_3:UnDeeper:
slAKA base> IN: "potato" ) OR ( "tomato" ) )
slAKA base> MATCH (COK): "potato"
slAKA base> VALUE: ((["potato"],0),[])

*************************** \ slAKA base has returned (["potato"],0)                               :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

************************** \ $*| has returned (["potato"],0)                                        :4_3:UnDeeper:
************************** / |>>/recurse                                                            :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :4_3:UnDeeper:
************************** / |>>/base                                                               :4_3:UnDeeper:
*************************** / slAKA optional akapart                                               :4_3:UnDeeper:
**************************** / |?| optional something                                             :4_3:UnDeeper:
***************************** / |>>/recurse                                                      :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :4_3:UnDeeper:
***************************** / |>>/base                                                         :4_3:UnDeeper:
****************************** / PAKA/akapart                                                   :4_3:UnDeeper:
******************************* / $>|                                                          :4_3:UnDeeper:
******************************** / Aka Token                                                  :4_3:UnDeeper:
Aka Token> IN: ) OR ( "tomato" ) )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected )
Aka Token> expecting AKA

******************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA  :4_3:UnDeeper:
$>|> IN: ) OR ( "tomato" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected )
$>|> expecting AKA

******************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA          :4_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "tomato" ) )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

****************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA   :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting AKA

***************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA         :4_3:UnDeeper:
|?| optional something> IN: ) OR ( "tomato" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                    :4_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "tomato" ) )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional akapart has returned (Nothing,0)                      :4_3:UnDeeper:
*************************** > |>>/base got Nothing                                                 :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                      :4_3:UnDeeper:
************************** / |>>/recurse                                                            :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :4_3:UnDeeper:
************************** / |>>/base                                                               :4_3:UnDeeper:
*************************** / slAKA optional typically                                             :4_3:UnDeeper:
**************************** / |?| optional something                                             :4_3:UnDeeper:
***************************** / |>>/recurse                                                      :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :4_3:UnDeeper:
***************************** / |>>/base                                                         :4_3:UnDeeper:
****************************** / typically                                                      :4_3:UnDeeper:
******************************* / $>|                                                          :4_3:UnDeeper:
$>|> IN: ) OR ( "tomato" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY    :4_3:UnDeeper:
typically> IN: ) OR ( "tomato" ) )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected )
typically> expecting TYPICALLY

****************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

***************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY   :4_3:UnDeeper:
|?| optional something> IN: ) OR ( "tomato" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                    :4_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "tomato" ) )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional typically has returned (Nothing,0)                    :4_3:UnDeeper:
*************************** > |>>/base got Nothing                                                 :4_3:UnDeeper:
|>>/base> IN: ) OR ( "tomato" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                      :4_3:UnDeeper:
************************** > slAKA: proceeding after base and entityalias are retrieved ...         :4_3:UnDeeper:
************************** > pAKA: entityalias = Nothing                                            :4_3:UnDeeper:
slAKA> IN: "potato" ) OR ( "tomato" ) )
slAKA> MATCH (COK): "potato"
slAKA> VALUE: ((["potato"],0),[])

************************* \ slAKA has returned (["potato"],0)                                        :4_3:UnDeeper:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (COK): "potato"
$*|> VALUE: ((["potato"],0),[])

************************ \ $*| has returned (["potato"],0)                                            :4_3:UnDeeper:
RPMT> IN: "potato" ) OR ( "tomato" ) )
RPMT> MATCH (COK): "potato"
RPMT> VALUE: ((RPMT ["potato"],0),[])

*********************** \ RPMT has returned (RPMT ["potato"],0)                                        :4_3:UnDeeper:
slRelPred> IN: "potato" ) OR ( "tomato" ) )
slRelPred> MATCH (COK): "potato"
slRelPred> VALUE: ((RPMT ["potato"],0),[])

********************** \ slRelPred has returned (RPMT ["potato"],0)                                     :4_3:UnDeeper:
********************** / undeepers                                                                      :4_3:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :4_3:UnDeeper:
*********************** > sameLine: success!                                                           :4_3:UnDeeper:
undeepers> IN: ) OR ( "tomato" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                      :4_3:UnDeeper:
pRelPred> IN: "potato" ) OR ( "tomato" ) )
pRelPred> MATCH (COK): "potato"
pRelPred> VALUE: (RPMT ["potato"],[])

********************* \ pRelPred has returned RPMT ["potato"]                                            :4_3:UnDeeper:
term p/3:plain p> IN: "potato" ) OR ( "tomato" ) )
term p/3:plain p> MATCH (COK): "potato"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["potato"]),[])

******************** \ term p/3:plain p has returned MyLeaf (RPMT ["potato"])                             :4_3:UnDeeper:
term p/notLabelTerm> IN: "potato" ) OR ( "tomato" ) )
term p/notLabelTerm> MATCH (COK): "potato"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["potato"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["potato"])                            :4_3:UnDeeper:
term p> IN: "potato" ) OR ( "tomato" ) )
term p> MATCH (COK): "potato"
term p> VALUE: (MyLeaf (RPMT ["potato"]),[])

****************** \ term p has returned MyLeaf (RPMT ["potato"])                                           :4_3:UnDeeper:
****************** / binary(Or)                                                                             :4_3:UnDeeper:
binary(Or)> IN: ) OR ( "tomato" ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=9:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_3:UnDeeper:
****************** / binary(And)                                                                            :4_3:UnDeeper:
binary(And)> IN: ) OR ( "tomato" ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=9:
binary(And)> unexpected )
binary(And)> expecting AND

****************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_3:UnDeeper:
****************** / binary(SetLess)                                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "tomato" ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=9:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_3:UnDeeper:
****************** / binary(SetPlus)                                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "tomato" ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=9:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

****************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_3:UnDeeper:
expression> IN: "potato" ) OR ( "tomato" ) )
expression> MATCH (COK): "potato"
expression> VALUE: (MyLeaf (RPMT ["potato"]),[])

***************** \ expression has returned MyLeaf (RPMT ["potato"])                                         :4_3:UnDeeper:
***************** > |>>/base got MyLeaf (RPMT ["potato"])                                                    :4_3:UnDeeper:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (COK): "potato"
|>>/base> VALUE: ((MyLeaf (RPMT ["potato"]),0),[])

**************** \ |>>/base has returned (MyLeaf (RPMT ["potato"]),0)                                         :4_3:UnDeeper:
|>| calling $>>> IN: "potato" ) OR ( "tomato" ) )
|>| calling $>>> MATCH (COK): "potato"
|>| calling $>>> VALUE: ((MyLeaf (RPMT ["potato"]),0),[])

*************** \ |>| calling $>> has returned (MyLeaf (RPMT ["potato"]),0)                                    :4_3:UnDeeper:
*************** / undeepers                                                                                    :4_3:UnDeeper:
**************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                     :4_3:UnDeeper:
**************** > sameLine: success!                                                                      :4_2:Or:
undeepers> IN: ) OR ( "tomato" ) )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

*************** \ undeepers has returned ()                                                                 :4_2:Or:
*************** > got label, then inner immediately below: ["yummy","nightshades"]                          :4_2:Or:
*************** > got inner: MyLeaf (RPMT ["potato"])                                                       :4_2:Or:
term p/1a:label directly above> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p/1a:label directly above> MATCH (COK): "yummy" ( "nightshades" "potato" )
term p/1a:label directly above> VALUE: (MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),[])

************** \ term p/1a:label directly above has returned MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])) :4_2:Or:
term p> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p> MATCH (COK): "yummy" ( "nightshades" "potato" )
term p> VALUE: (MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),[])

************* \ term p has returned MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"]))                :4_2:Or:
************* / binary(Or)                                                                                    :4_2:Or:
binary(Or)> IN: OR ( "tomato" ) )
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

************* \ binary(Or) has returned Or                                                                     :4_3:GoDeeper:
************* / term p                                                                                         :4_3:GoDeeper:
************** / term p/1a:label directly above                                                               :4_3:GoDeeper:
*************** / $*|                                                                                        :4_3:GoDeeper:
**************** / someSL                                                                                   :4_3:GoDeeper:
***************** / pNumAsText                                                                             :4_3:GoDeeper:
pNumAsText> IN: ( "tomato" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :4_3:GoDeeper:
someSL> IN: ( "tomato" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :4_3:GoDeeper:
$*|> IN: ( "tomato" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :4_3:GoDeeper:
term p/1a:label directly above> IN: ( "tomato" ) )
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=11:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

************** \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
************** / term p/b:label to the left of line below, with EOL                                           :4_3:GoDeeper:
*************** / someSL                                                                                     :4_3:GoDeeper:
**************** / pNumAsText                                                                               :4_3:GoDeeper:
pNumAsText> IN: ( "tomato" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :4_3:GoDeeper:
someSL> IN: ( "tomato" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :4_3:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "tomato" ) )
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=11:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

************** \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :4_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :4_3:GoDeeper:
**************** / someIndentation                                                                          :4_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :4_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "tomato" ) )
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :4_3:Other "toma:
***************** / manyIndentation/leaf?                                                                   :4_3:Other "toma:
****************** / expression                                                                            :4_3:Other "toma:
******************* / term p                                                                              :4_3:Other "toma:
******************** / term p/1a:label directly above                                                    :4_3:Other "toma:
********************* / $*|                                                                             :4_3:Other "toma:
********************** / someSL                                                                        :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************** \ someSL has returned (["tomato"],0)                                           :1_2:UnDeeper:
********************** / pNumAsText                                                                   :1_2:UnDeeper:
pNumAsText> IN: ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (CERR): "tomato"
$*|> ERROR:
$*|> offset=13:
$*|> unexpected )
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number           :1_2:UnDeeper:
term p/1a:label directly above> IN: "tomato" ) )
term p/1a:label directly above> MATCH (CERR): "tomato"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=13:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :1_2:UnDeeper:
******************** / term p/b:label to the left of line below, with EOL                                :4_3:Other "toma:
********************* / someSL                                                                          :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************* \ someSL has returned (["tomato"],0)                                             :1_2:UnDeeper:
********************* / undeepers                                                                      :1_2:UnDeeper:
********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :1_2:UnDeeper:
********************** > sameLine: success!                                                           :1_2:UnDeeper:
undeepers> IN: ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************* \ undeepers has returned ()                                                      :1_2:UnDeeper:
********************* / matching EOL                                                                   :1_2:UnDeeper:
matching EOL> IN: ) )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=13:
matching EOL> unexpected )
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                   :1_2:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "tomato" ) )
term p/b:label to the left of line below, with EOL> MATCH (CERR): "tomato"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=13:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :1_2:UnDeeper:
******************** / term p/notLabelTerm                                                               :4_3:Other "toma:
********************* / term p/2:someIndentation expr p                                                 :4_3:Other "toma:
********************** / someIndentation                                                               :4_3:Other "toma:
*********************** / myindented: consuming GoDeeper                                              :4_3:Other "toma:
myindented: consuming GoDeeper> IN: "tomato" ) )
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected "tomato"
myindented: consuming GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "tomato" Expecting: ( :4_3:Other "toma:
someIndentation> IN: "tomato" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected "tomato"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "tomato" Expecting: (          :4_3:Other "toma:
term p/2:someIndentation expr p> IN: "tomato" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=12:
term p/2:someIndentation expr p> unexpected "tomato"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "tomato" Expecting: ( :4_3:Other "toma:
********************* / term p/3:plain p                                                                :4_3:Other "toma:
********************** / pRelPred                                                                      :4_3:Other "toma:
*********************** / slRelPred                                                                   :4_3:Other "toma:
************************ / nested simpleHorn                                                         :4_3:Other "toma:
************************* > |^|                                                                     :4_3:Other "toma:
************************* / $*|                                                                     :4_3:Other "toma:
************************** / slMultiTerm                                                           :4_3:Other "toma:
*************************** / someSL                                                              :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

*************************** \ someSL has returned (["tomato"],0)                                 :1_2:UnDeeper:
slMultiTerm> IN: "tomato" ) )
slMultiTerm> MATCH (COK): "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

************************** \ slMultiTerm has returned (["tomato"],0)                              :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

************************* \ $*| has returned (["tomato"],0)                                        :1_2:UnDeeper:
************************* / |^| deeps                                                              :1_2:UnDeeper:
|^| deeps> IN: ) )
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

************************* \ |^| deeps has returned ([(),()],-2)                               :EOF:
nested simpleHorn> IN: "tomato" ) )
nested simpleHorn> MATCH (CERR): "tomato" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting ), MEANS, or any token

************************ \ !Consumed Error: nested simpleHorn: Unexpected end of input Expecting: MEANS ) any token :EOF:
************************ / RPConstraint                                                              :4_3:Other "toma:
************************* / $*|                                                                     :4_3:Other "toma:
************************** / slMultiTerm                                                           :4_3:Other "toma:
*************************** / someSL                                                              :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

*************************** \ someSL has returned (["tomato"],0)                                 :1_2:UnDeeper:
slMultiTerm> IN: "tomato" ) )
slMultiTerm> MATCH (COK): "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

************************** \ slMultiTerm has returned (["tomato"],0)                              :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

************************* \ $*| has returned (["tomato"],0)                                        :1_2:UnDeeper:
************************* / |>| calling $>>                                                        :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :1_2:UnDeeper:
|>| calling $>>> IN: ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :1_2:UnDeeper:
RPConstraint> IN: "tomato" ) )
RPConstraint> MATCH (CERR): "tomato"
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :1_2:UnDeeper:
************************ / RPBoolStructR                                                             :4_3:Other "toma:
************************* / $*|                                                                     :4_3:Other "toma:
************************** / slMultiTerm                                                           :4_3:Other "toma:
*************************** / someSL                                                              :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

*************************** \ someSL has returned (["tomato"],0)                                 :1_2:UnDeeper:
slMultiTerm> IN: "tomato" ) )
slMultiTerm> MATCH (COK): "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

************************** \ slMultiTerm has returned (["tomato"],0)                              :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

************************* \ $*| has returned (["tomato"],0)                                        :1_2:UnDeeper:
************************* / |>| calling $>>                                                        :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :1_2:UnDeeper:
************************** / |>>/base                                                             :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :1_2:UnDeeper:
|>| calling $>>> IN: ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :1_2:UnDeeper:
RPBoolStructR> IN: "tomato" ) )
RPBoolStructR> MATCH (CERR): "tomato"
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :1_2:UnDeeper:
************************ / RPMT                                                                      :4_3:Other "toma:
************************* / $*|                                                                     :4_3:Other "toma:
************************** / slAKA                                                                 :4_3:Other "toma:
*************************** / $*|                                                                 :4_3:Other "toma:
**************************** / slAKA base                                                        :4_3:Other "toma:
***************************** / slMultiTerm                                                     :4_3:Other "toma:
****************************** / someSL                                                        :4_3:Other "toma:
someSL> IN: "tomato" ) )
someSL> MATCH (COK): "tomato"
someSL> VALUE: ((["tomato"],0),[])

****************************** \ someSL has returned (["tomato"],0)                           :1_2:UnDeeper:
slMultiTerm> IN: "tomato" ) )
slMultiTerm> MATCH (COK): "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

***************************** \ slMultiTerm has returned (["tomato"],0)                        :1_2:UnDeeper:
slAKA base> IN: "tomato" ) )
slAKA base> MATCH (COK): "tomato"
slAKA base> VALUE: ((["tomato"],0),[])

**************************** \ slAKA base has returned (["tomato"],0)                           :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

*************************** \ $*| has returned (["tomato"],0)                                    :1_2:UnDeeper:
*************************** / |>>/recurse                                                        :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :1_2:UnDeeper:
*************************** / |>>/base                                                           :1_2:UnDeeper:
**************************** / slAKA optional akapart                                           :1_2:UnDeeper:
***************************** / |?| optional something                                         :1_2:UnDeeper:
****************************** / |>>/recurse                                                  :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :1_2:UnDeeper:
****************************** / |>>/base                                                     :1_2:UnDeeper:
******************************* / PAKA/akapart                                               :1_2:UnDeeper:
******************************** / $>|                                                      :1_2:UnDeeper:
********************************* / Aka Token                                              :1_2:UnDeeper:
Aka Token> IN: ) )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=13:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :1_2:UnDeeper:
$>|> IN: ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA      :1_2:UnDeeper:
PAKA/akapart> IN: ) )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=13:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA     :1_2:UnDeeper:
|?| optional something> IN: ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :1_2:UnDeeper:
slAKA optional akapart> IN: ) )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :1_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :1_2:UnDeeper:
*************************** / |>>/recurse                                                        :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :1_2:UnDeeper:
*************************** / |>>/base                                                           :1_2:UnDeeper:
**************************** / slAKA optional typically                                         :1_2:UnDeeper:
***************************** / |?| optional something                                         :1_2:UnDeeper:
****************************** / |>>/recurse                                                  :1_2:UnDeeper:
|>>/recurse> IN: ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :1_2:UnDeeper:
****************************** / |>>/base                                                     :1_2:UnDeeper:
******************************* / typically                                                  :1_2:UnDeeper:
******************************** / $>|                                                      :1_2:UnDeeper:
$>|> IN: ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :1_2:UnDeeper:
typically> IN: ) )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :1_2:UnDeeper:
|?| optional something> IN: ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :1_2:UnDeeper:
slAKA optional typically> IN: ) )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :1_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :1_2:UnDeeper:
|>>/base> IN: ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :1_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :1_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :1_2:UnDeeper:
slAKA> IN: "tomato" ) )
slAKA> MATCH (COK): "tomato"
slAKA> VALUE: ((["tomato"],0),[])

************************** \ slAKA has returned (["tomato"],0)                                    :1_2:UnDeeper:
$*|> IN: "tomato" ) )
$*|> MATCH (COK): "tomato"
$*|> VALUE: ((["tomato"],0),[])

************************* \ $*| has returned (["tomato"],0)                                        :1_2:UnDeeper:
RPMT> IN: "tomato" ) )
RPMT> MATCH (COK): "tomato"
RPMT> VALUE: ((RPMT ["tomato"],0),[])

************************ \ RPMT has returned (RPMT ["tomato"],0)                                    :1_2:UnDeeper:
slRelPred> IN: "tomato" ) )
slRelPred> MATCH (COK): "tomato"
slRelPred> VALUE: ((RPMT ["tomato"],0),[])

*********************** \ slRelPred has returned (RPMT ["tomato"],0)                                 :1_2:UnDeeper:
*********************** / undeepers                                                                  :1_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers   :1_2:UnDeeper:
************************ > sameLine: success!                                                       :1_2:UnDeeper:
undeepers> IN: ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                  :1_2:UnDeeper:
pRelPred> IN: "tomato" ) )
pRelPred> MATCH (COK): "tomato"
pRelPred> VALUE: (RPMT ["tomato"],[])

********************** \ pRelPred has returned RPMT ["tomato"]                                        :1_2:UnDeeper:
term p/3:plain p> IN: "tomato" ) )
term p/3:plain p> MATCH (COK): "tomato"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["tomato"])                         :1_2:UnDeeper:
term p/notLabelTerm> IN: "tomato" ) )
term p/notLabelTerm> MATCH (COK): "tomato"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["tomato"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["tomato"])                        :1_2:UnDeeper:
term p> IN: "tomato" ) )
term p> MATCH (COK): "tomato"
term p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

******************* \ term p has returned MyLeaf (RPMT ["tomato"])                                       :1_2:UnDeeper:
******************* / binary(Or)                                                                         :1_2:UnDeeper:
binary(Or)> IN: ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                          :1_2:UnDeeper:
******************* / binary(And)                                                                        :1_2:UnDeeper:
binary(And)> IN: ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                        :1_2:UnDeeper:
******************* / binary(SetLess)                                                                    :1_2:UnDeeper:
binary(SetLess)> IN: ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                   :1_2:UnDeeper:
******************* / binary(SetPlus)                                                                    :1_2:UnDeeper:
binary(SetPlus)> IN: ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                   :1_2:UnDeeper:
expression> IN: "tomato" ) )
expression> MATCH (COK): "tomato"
expression> VALUE: (MyLeaf (RPMT ["tomato"]),[])

****************** \ expression has returned MyLeaf (RPMT ["tomato"])                                     :1_2:UnDeeper:
manyIndentation/leaf?> IN: "tomato" ) )
manyIndentation/leaf?> MATCH (COK): "tomato"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["tomato"]),[])

***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["tomato"])                            :1_2:UnDeeper:
***************** / myindented: consuming UnDeeper                                                         :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented: consuming UnDeeper has returned UnDeeper                                     :1_3:UnDeeper:
someIndentation> IN: ( "tomato" ) )
someIndentation> MATCH (COK): ( "tomato" )
someIndentation> VALUE: (MyLeaf (RPMT ["tomato"]),[])

**************** \ someIndentation has returned MyLeaf (RPMT ["tomato"])                                      :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "tomato" ) )
term p/2:someIndentation expr p> MATCH (COK): ( "tomato" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["tomato"])                        :1_3:UnDeeper:
term p/notLabelTerm> IN: ( "tomato" ) )
term p/notLabelTerm> MATCH (COK): ( "tomato" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["tomato"])                                      :1_3:UnDeeper:
term p> IN: ( "tomato" ) )
term p> MATCH (COK): ( "tomato" )
term p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************* \ term p has returned MyLeaf (RPMT ["tomato"])                                                     :1_3:UnDeeper:
************* / binary(Or)                                                                                       :1_3:UnDeeper:
binary(Or)> IN: )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected )
binary(Or)> expecting OR

************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                        :1_3:UnDeeper:
************* / binary(And)                                                                                      :1_3:UnDeeper:
binary(And)> IN: )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected )
binary(And)> expecting AND

************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                      :1_3:UnDeeper:
************* / binary(SetLess)                                                                                  :1_3:UnDeeper:
binary(SetLess)> IN: )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                 :1_3:UnDeeper:
************* / binary(SetPlus)                                                                                  :1_3:UnDeeper:
binary(SetPlus)> IN: )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                 :1_3:UnDeeper:
expression> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
expression> MATCH (COK): "yummy" ( "nightshades" "potato" ) OR (  <…>
expression> VALUE: (MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])],[])

************ \ expression has returned MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])] :1_3:UnDeeper:
manyIndentation/leaf?> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
manyIndentation/leaf?> MATCH (COK): "yummy" ( "nightshades" "potato" ) OR (  <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])],[])

*********** \ manyIndentation/leaf? has returned MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])] :1_3:UnDeeper:
*********** / myindented: consuming UnDeeper                                                                       :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: )
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*********** \ myindented: consuming UnDeeper has returned UnDeeper                                          :EOF:
someIndentation> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
someIndentation> MATCH (COK): ( "yummy" ( "nightshades" "potato" ) OR  <…>
someIndentation> VALUE: (MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])],[])

********** \ someIndentation has returned MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])] :EOF:
term p/2:someIndentation expr p> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])],[])

********* \ term p/2:someIndentation expr p has returned MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])] :EOF:
term p/notLabelTerm> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p/notLabelTerm> MATCH (COK): ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p/notLabelTerm> VALUE: (MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])],[])

******** \ term p/notLabelTerm has returned MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])] :EOF:
term p> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p> MATCH (COK): ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p> VALUE: (MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])],[])

******* \ term p has returned MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])] :EOF:
******* / binary(Or)                                                                                            :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=15:
binary(Or)> unexpected end of input
binary(Or)> expecting OR

******* \ !Unconsumed Error: binary(Or): Unexpected end of input Expecting: OR                                  :EOF:
******* / binary(And)                                                                                           :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=15:
binary(And)> unexpected end of input
binary(And)> expecting AND

******* \ !Unconsumed Error: binary(And): Unexpected end of input Expecting: AND                                :EOF:
******* / binary(SetLess)                                                                                       :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=15:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting LESS

******* \ !Unconsumed Error: binary(SetLess): Unexpected end of input Expecting: LESS                           :EOF:
******* / binary(SetPlus)                                                                                       :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=15:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting PLUS

******* \ !Unconsumed Error: binary(SetPlus): Unexpected end of input Expecting: PLUS                           :EOF:
expression> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
expression> MATCH (COK): ( "yummy" ( "nightshades" "potato" ) OR  <…>
expression> VALUE: (MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])],[])

****** \ expression has returned MyAny [MyLabel ["yummy","nightshades"] (MyLeaf (RPMT ["potato"])),MyLeaf (RPMT ["tomato"])] :EOF:
ppp inner> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
ppp inner> MATCH (CERR): ( "yummy" ( "nightshades" "potato" ) OR  <…>
ppp inner> ERROR:
ppp inner> offset=15:
ppp inner> Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]

***** \ !Consumed Error: ppp inner: Fail: Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"] :EOF:
***** / withPrePost                                                                                                  :2_2:GoDeeper:
****** > |<* starting                                                                                               :2_2:GoDeeper:
****** / $*|                                                                                                        :2_2:GoDeeper:
******* / pre part                                                                                                 :2_2:GoDeeper:
******** / aboveNextLineKeyword                                                                                    :2_2:Other "yumm:
********* / expectUnDeepers                                                                                       :2_2:Other "yumm:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                        :2_3:GoDeeper:
********** > ignoring ["yummy","GD","nightshades","potato"]                                                         :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                        :2_2:Other "yumm:
********* > aNLK: determined undp_count = 1                                                                       :2_2:Other "yumm:
********* > ->| trying to consume 1 GoDeepers                                                                     :2_2:Other "yumm:
********* / $*|                                                                                                   :2_2:Other "yumm:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                               :2_2:Other "yumm:
aboveNextLineKeyword> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected "yummy"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "yummy" Expecting: (                                :2_2:Other "yumm:
******** > /*= lookAhead failed, delegating to plain /+=                                                           :2_2:Other "yumm:
******** / aboveNextLineKeyword                                                                                     :2_3:GoDeeper:
********* / expectUnDeepers                                                                                        :2_3:GoDeeper:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                        :2_3:GoDeeper:
********** > ignoring ["GD","nightshades","potato"]                                                                 :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                         :2_3:GoDeeper:
********* > aNLK: determined undp_count = 1                                                                        :2_3:GoDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                      :2_3:GoDeeper:
********* / $*|                                                                                                    :2_3:GoDeeper:
$*|> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                :2_3:GoDeeper:
********* > ->| success                                                                                             :2_3:Other "nigh:
********* / |>>/recurse                                                                                             :2_3:Other "nigh:
|>>/recurse> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "nightshades"
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected "nightshades" Expecting: (                                   :2_3:Other "nigh:
********* / |>>/base                                                                                                :2_3:Other "nigh:
********** / slMultiTerm                                                                                           :2_3:Other "nigh:
*********** / someSL                                                                                              :2_3:Other "nigh:
someSL> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
someSL> MATCH (COK): "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

*********** \ someSL has returned (["nightshades"],0)                                                             :3_3:Other "pota:
slMultiTerm> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
slMultiTerm> MATCH (COK): "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

********** \ slMultiTerm has returned (["nightshades"],0)                                                          :3_3:Other "pota:
********** > |>>/base got ["nightshades"]                                                                          :3_3:Other "pota:
|>>/base> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/base> MATCH (COK): "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********* \ |>>/base has returned (["nightshades"],0)                                                               :3_3:Other "pota:
********* > aNLK: current depth is 1                                                                                :3_3:Other "pota:
********* > |<|                                                                                                     :3_3:Other "pota:
********* > |<* starting                                                                                            :3_3:Other "pota:
********* / |<*/parent                                                                                              :3_3:Other "pota:
********** > |<*/recurse                                                                                           :3_3:Other "pota:
********** / |<*/base                                                                                              :3_3:Other "pota:
|<*/base> IN: "potato" ) OR ( "tomato" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected "potato"
|<*/base> expecting AND, OR, or UNLESS

********** \ !Unconsumed Error: |<*/base: Unexpected "potato" Expecting: OR AND UNLESS                             :3_3:Other "pota:
|<*/parent> IN: "potato" ) OR ( "tomato" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected "potato"
|<*/parent> expecting ), AND, OR, or UNLESS

********* \ !Unconsumed Error: |<*/parent: Unexpected "potato" Expecting: OR AND UNLESS )                           :3_3:Other "pota:
aboveNextLineKeyword> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
aboveNextLineKeyword> MATCH (CERR): ( "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (, ), AND, OR, or UNLESS

******** \ !Consumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: OR AND UNLESS ( )                   :3_3:Other "pota:
******** > /*= lookAhead failed, delegating to plain /+=                                                            :2_3:GoDeeper:
******** / aboveNextLineKeyword                                                                                      :2_3:Other "nigh:
********* / expectUnDeepers                                                                                         :2_3:Other "nigh:
********** > ignoring ["nightshades","potato"]                                                                      :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :2_3:Other "nigh:
********* > aNLK: determined undp_count = 1                                                                         :2_3:Other "nigh:
********* > ->| trying to consume 1 GoDeepers                                                                       :2_3:Other "nigh:
********* / $*|                                                                                                     :2_3:Other "nigh:
$*|> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :2_3:Other "nigh:
aboveNextLineKeyword> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected "nightshades"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "nightshades" Expecting: (                            :2_3:Other "nigh:
******** > /*= lookAhead failed, delegating to plain /+=                                                             :2_3:Other "nigh:
******** / aboveNextLineKeyword                                                                                      :3_3:Other "pota:
********* / expectUnDeepers                                                                                         :3_3:Other "pota:
********** > ignoring ["potato"]                                                                                    :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "potato" ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :3_3:Other "pota:
********* > aNLK: determined undp_count = 1                                                                         :3_3:Other "pota:
********* > ->| trying to consume 1 GoDeepers                                                                       :3_3:Other "pota:
********* / $*|                                                                                                     :3_3:Other "pota:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :3_3:Other "pota:
aboveNextLineKeyword> IN: "potato" ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: (                                 :3_3:Other "pota:
******** > /*= lookAhead failed, delegating to plain /+=                                                             :3_3:Other "pota:
******** / aboveNextLineKeyword                                                                                       :4_3:UnDeeper:
********* / expectUnDeepers                                                                                          :4_3:UnDeeper:
********** > ignoring []                                                                                            :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                           :4_3:UnDeeper:
********* > aNLK: determined undp_count = 1                                                                          :4_3:UnDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                        :4_3:UnDeeper:
********* / $*|                                                                                                      :4_3:UnDeeper:
$*|> IN: ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                  :4_3:UnDeeper:
aboveNextLineKeyword> IN: ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected ) Expecting: (                                         :4_3:UnDeeper:
******** > /*= lookAhead failed, delegating to plain /+=                                                              :4_3:UnDeeper:
pre part> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=9:
pre part> unexpected )
pre part> expecting ( or Other text

******* \ !Consumed Error: pre part: Unexpected ) Expecting: ( Other text                                           :2_2:Other "yumm:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or Other text

****** \ !Consumed Error: $*|: Unexpected ) Expecting: ( Other text                                                  :2_2:Other "yumm:
withPrePost> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=9:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

***** \ !Consumed Error: withPrePost: Unexpected ) Expecting: ( Other text                                            :2_2:Other "yumm:
***** / withPreOnly                                                                                                  :2_2:GoDeeper:
****** / $*|                                                                                                        :2_2:GoDeeper:
******* / pre part                                                                                                 :2_2:GoDeeper:
******** / aboveNextLineKeyword                                                                                    :2_2:Other "yumm:
********* / expectUnDeepers                                                                                       :2_2:Other "yumm:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                        :2_3:GoDeeper:
********** > ignoring ["yummy","GD","nightshades","potato"]                                                         :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                        :2_2:Other "yumm:
********* > aNLK: determined undp_count = 1                                                                       :2_2:Other "yumm:
********* > ->| trying to consume 1 GoDeepers                                                                     :2_2:Other "yumm:
********* / $*|                                                                                                   :2_2:Other "yumm:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                               :2_2:Other "yumm:
aboveNextLineKeyword> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected "yummy"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "yummy" Expecting: (                                :2_2:Other "yumm:
******** > /*= lookAhead failed, delegating to plain /+=                                                           :2_2:Other "yumm:
******** / aboveNextLineKeyword                                                                                     :2_3:GoDeeper:
********* / expectUnDeepers                                                                                        :2_3:GoDeeper:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                        :2_3:GoDeeper:
********** > ignoring ["GD","nightshades","potato"]                                                                 :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                         :2_3:GoDeeper:
********* > aNLK: determined undp_count = 1                                                                        :2_3:GoDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                      :2_3:GoDeeper:
********* / $*|                                                                                                    :2_3:GoDeeper:
$*|> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                :2_3:GoDeeper:
********* > ->| success                                                                                             :2_3:Other "nigh:
********* / |>>/recurse                                                                                             :2_3:Other "nigh:
|>>/recurse> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "nightshades"
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected "nightshades" Expecting: (                                   :2_3:Other "nigh:
********* / |>>/base                                                                                                :2_3:Other "nigh:
********** / slMultiTerm                                                                                           :2_3:Other "nigh:
*********** / someSL                                                                                              :2_3:Other "nigh:
someSL> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
someSL> MATCH (COK): "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

*********** \ someSL has returned (["nightshades"],0)                                                             :3_3:Other "pota:
slMultiTerm> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
slMultiTerm> MATCH (COK): "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

********** \ slMultiTerm has returned (["nightshades"],0)                                                          :3_3:Other "pota:
********** > |>>/base got ["nightshades"]                                                                          :3_3:Other "pota:
|>>/base> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/base> MATCH (COK): "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********* \ |>>/base has returned (["nightshades"],0)                                                               :3_3:Other "pota:
********* > aNLK: current depth is 1                                                                                :3_3:Other "pota:
********* > |<|                                                                                                     :3_3:Other "pota:
********* > |<* starting                                                                                            :3_3:Other "pota:
********* / |<*/parent                                                                                              :3_3:Other "pota:
********** > |<*/recurse                                                                                           :3_3:Other "pota:
********** / |<*/base                                                                                              :3_3:Other "pota:
|<*/base> IN: "potato" ) OR ( "tomato" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected "potato"
|<*/base> expecting AND, OR, or UNLESS

********** \ !Unconsumed Error: |<*/base: Unexpected "potato" Expecting: OR AND UNLESS                             :3_3:Other "pota:
|<*/parent> IN: "potato" ) OR ( "tomato" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected "potato"
|<*/parent> expecting ), AND, OR, or UNLESS

********* \ !Unconsumed Error: |<*/parent: Unexpected "potato" Expecting: OR AND UNLESS )                           :3_3:Other "pota:
aboveNextLineKeyword> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
aboveNextLineKeyword> MATCH (CERR): ( "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (, ), AND, OR, or UNLESS

******** \ !Consumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: OR AND UNLESS ( )                   :3_3:Other "pota:
******** > /*= lookAhead failed, delegating to plain /+=                                                            :2_3:GoDeeper:
******** / aboveNextLineKeyword                                                                                      :2_3:Other "nigh:
********* / expectUnDeepers                                                                                         :2_3:Other "nigh:
********** > ignoring ["nightshades","potato"]                                                                      :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :2_3:Other "nigh:
********* > aNLK: determined undp_count = 1                                                                         :2_3:Other "nigh:
********* > ->| trying to consume 1 GoDeepers                                                                       :2_3:Other "nigh:
********* / $*|                                                                                                     :2_3:Other "nigh:
$*|> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :2_3:Other "nigh:
aboveNextLineKeyword> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected "nightshades"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "nightshades" Expecting: (                            :2_3:Other "nigh:
******** > /*= lookAhead failed, delegating to plain /+=                                                             :2_3:Other "nigh:
******** / aboveNextLineKeyword                                                                                      :3_3:Other "pota:
********* / expectUnDeepers                                                                                         :3_3:Other "pota:
********** > ignoring ["potato"]                                                                                    :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "potato" ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :3_3:Other "pota:
********* > aNLK: determined undp_count = 1                                                                         :3_3:Other "pota:
********* > ->| trying to consume 1 GoDeepers                                                                       :3_3:Other "pota:
********* / $*|                                                                                                     :3_3:Other "pota:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :3_3:Other "pota:
aboveNextLineKeyword> IN: "potato" ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: (                                 :3_3:Other "pota:
******** > /*= lookAhead failed, delegating to plain /+=                                                             :3_3:Other "pota:
******** / aboveNextLineKeyword                                                                                       :4_3:UnDeeper:
********* / expectUnDeepers                                                                                          :4_3:UnDeeper:
********** > ignoring []                                                                                            :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                           :4_3:UnDeeper:
********* > aNLK: determined undp_count = 1                                                                          :4_3:UnDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                        :4_3:UnDeeper:
********* / $*|                                                                                                      :4_3:UnDeeper:
$*|> IN: ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                  :4_3:UnDeeper:
aboveNextLineKeyword> IN: ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected ) Expecting: (                                         :4_3:UnDeeper:
******** > /*= lookAhead failed, delegating to plain /+=                                                              :4_3:UnDeeper:
pre part> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=9:
pre part> unexpected )
pre part> expecting ( or Other text

******* \ !Consumed Error: pre part: Unexpected ) Expecting: ( Other text                                           :2_2:Other "yumm:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or Other text

****** \ !Consumed Error: $*|: Unexpected ) Expecting: ( Other text                                                  :2_2:Other "yumm:
withPreOnly> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=9:
withPreOnly> unexpected )
withPreOnly> expecting ( or Other text

***** \ !Consumed Error: withPreOnly: Unexpected ) Expecting: ( Other text                                            :2_2:Other "yumm:
pBSR> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=15:
pBSR> Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]

**** \ !Consumed Error: pBSR: Fail: Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]         :2_2:Other "yumm:
|>>/base> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
|>>/base> MATCH (CERR): (
|>>/base> ERROR:
|>>/base> offset=15:
|>>/base> Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]

*** \ !Consumed Error: |>>/base: Fail: Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]       :2_2:Other "yumm:
|>| calling $>>> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
|>| calling $>>> MATCH (CERR): (
|>| calling $>>> ERROR:
|>| calling $>>> offset=15:
|>| calling $>>> Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]

** \ !Consumed Error: |>| calling $>>: Fail: Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]  :2_2:Other "yumm:

PDPA
  inline-1-a FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA inline-1-a
       expected: [((["Food"],Means,Any (Just (Pre "yummy nightshades")) [Leaf (RPMT ["potato"]),Leaf (RPMT ["tomato"])]),[])]
       but parsing failed with error:
       1:3:
       Label ["yummy","nightshades"] cannot be applied to a leaf: RPMT ["potato"]
       
               Food    ✳             
       MEANS   yummy   nightshades   
                       potato        
               OR      tomato        
       

  To rerun use: --match "/PDPA/inline-1-a/"

Randomized with seed 381230645

Finished in 0.0234 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

