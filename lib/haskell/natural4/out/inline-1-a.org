* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/inline-1-a/)

* Tokens
[GoDeeper,Other "Food",UnDeeper,Means,GoDeeper,Other "yummy",GoDeeper,Other "nightshades",Other "potato",UnDeeper,Or,GoDeeper,Other "tomato",UnDeeper,UnDeeper]
1_2:GoDeeper   > |<|
1_2:GoDeeper   > |<* starting
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / $*|                                                                                                                :1_2:GoDeeper:
*** / |>>/recurse                                                                                                      :1_2:GoDeeper:
**** / |>>/recurse                                                                                                     :1_2:Other "Food:
|>>/recurse> IN: Other "Food" UnDeeper Means GoDeeper Oth <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=1:
|>>/recurse> unexpected Other "Food"
|>>/recurse> expecting GoDeeper

**** / |>>/base                                                                                                        :1_2:Other "Food:
***** / slMultiTerm                                                                                                   :1_2:Other "Food:
****** / someSL                                                                                                      :1_2:Other "Food:
someSL> IN: Other "Food" UnDeeper Means GoDeeper Oth <…>
someSL> MATCH (COK): Other "Food"
someSL> VALUE: ((["Food"],0),[])

****** \ someSL has returned (["Food"],0)                                                                             :2_2:UnDeeper:
slMultiTerm> IN: Other "Food" UnDeeper Means GoDeeper Oth <…>
slMultiTerm> MATCH (COK): Other "Food"
slMultiTerm> VALUE: ((["Food"],0),[])

***** \ slMultiTerm has returned (["Food"],0)                                                                          :2_2:UnDeeper:
***** > |>>/base got ["Food"]                                                                                          :2_2:UnDeeper:
|>>/base> IN: Other "Food" UnDeeper Means GoDeeper Oth <…>
|>>/base> MATCH (COK): Other "Food"
|>>/base> VALUE: ((["Food"],0),[])

**** \ |>>/base has returned (["Food"],0)                                                                               :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Food" UnDeeper Means GoD <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Food"
|>>/recurse> VALUE: ((["Food"],1),[])

*** \ |>>/recurse has returned (["Food"],1)                                                                              :2_2:UnDeeper:
$*|> IN: GoDeeper Other "Food" UnDeeper Means GoD <…>
$*|> MATCH (COK): GoDeeper Other "Food"
$*|> VALUE: ((["Food"],1),[])

** \ $*| has returned (["Food"],1)                                                                                        :2_2:UnDeeper:
** / |<*/parent                                                                                                           :2_2:UnDeeper:
*** > |<*/recurse                                                                                                        :2_2:UnDeeper:
*** > |<*/recurse matched 1 UnDeepers                                                                                  :2_2:GoDeeper:
|<*/parent> IN: UnDeeper Means GoDeeper Other "yummy" Go <…>
|<*/parent> MATCH (COK): UnDeeper Means
|<*/parent> VALUE: ((Means,-1),[])

** \ |<*/parent has returned (Means,-1)                                                                                 :2_2:GoDeeper:
** / |>| calling $>>                                                                                                    :2_2:GoDeeper:
*** / |>>/recurse                                                                                                      :2_2:GoDeeper:
**** / |>>/recurse                                                                                                     :2_2:Other "yumm:
|>>/recurse> IN: Other "yummy" GoDeeper Other "nightshade <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Other "yummy"
|>>/recurse> expecting GoDeeper

**** / |>>/base                                                                                                        :2_2:Other "yumm:
***** / pBSR                                                                                                          :2_2:Other "yumm:
****** / ppp inner                                                                                                   :2_2:Other "yumm:
******* / expression                                                                                                :2_2:Other "yumm:
******** / labelPrefix                                                                                             :2_2:Other "yumm:
labelPrefix> IN: Other "yummy" GoDeeper Other "nightshade <…>
labelPrefix> MATCH (COK): Other "yummy"
labelPrefix> VALUE: ("yummy",[])

******** \ labelPrefix has returned "yummy"                                                                         :2_3:GoDeeper:
******** / term p                                                                                                   :2_3:GoDeeper:
********* / term p/1a:label directly above                                                                         :2_3:GoDeeper:
********** / $*|                                                                                                  :2_3:GoDeeper:
*********** / someSL                                                                                             :2_3:GoDeeper:
************ / pNumAsText                                                                                       :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "nightshades" Other "pota <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "nightshades" Other "pota <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "nightshades" Other "pota <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********* / term p/b:label to the left of line below, with EOL                                                     :2_3:GoDeeper:
********** / someSL                                                                                               :2_3:GoDeeper:
*********** / pNumAsText                                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "nightshades" Other "pota <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "nightshades" Other "pota <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********* / term p/notLabelTerm                                                                                    :2_3:GoDeeper:
********** / term p/2:someIndentation expr p                                                                      :2_3:GoDeeper:
*********** / someIndentation                                                                                    :2_3:GoDeeper:
************ / myindented: consuming GoDeeper                                                                   :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "nightshades" Other "pota <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                              :2_3:Other "nigh:
************ / manyIndentation/leaf?                                                                             :2_3:Other "nigh:
************* / expression                                                                                      :2_3:Other "nigh:
************** / labelPrefix                                                                                   :2_3:Other "nigh:
labelPrefix> IN: Other "nightshades" Other "potato" UnDee <…>
labelPrefix> MATCH (COK): Other "nightshades"
labelPrefix> VALUE: ("nightshades",[])

************** \ labelPrefix has returned "nightshades"                                                        :3_3:Other "pota:
************** / term p                                                                                        :3_3:Other "pota:
*************** / term p/1a:label directly above                                                              :3_3:Other "pota:
**************** / $*|                                                                                       :3_3:Other "pota:
***************** / someSL                                                                                  :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

***************** \ someSL has returned (["potato"],0)                                                       :4_3:UnDeeper:
***************** / pNumAsText                                                                               :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (CERR): Other "potato"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/1a:label directly above> MATCH (CERR): Other "potato"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=9:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

*************** / term p/b:label to the left of line below, with EOL                                          :3_3:Other "pota:
**************** / someSL                                                                                    :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

**************** \ someSL has returned (["potato"],0)                                                         :4_3:UnDeeper:
**************** / undeepers                                                                                  :4_3:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                   :4_3:UnDeeper:
***************** > sameLine: success!                                                                       :4_3:UnDeeper:
undeepers> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                  :4_3:UnDeeper:
**************** / matching EOL                                                                               :4_3:UnDeeper:
matching EOL> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=9:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "potato"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=9:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

*************** / term p/notLabelTerm                                                                         :3_3:Other "pota:
**************** / term p/2:someIndentation expr p                                                           :3_3:Other "pota:
***************** / someIndentation                                                                         :3_3:Other "pota:
****************** / myindented: consuming GoDeeper                                                        :3_3:Other "pota:
myindented: consuming GoDeeper> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected Other "potato"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected Other "potato"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected Other "potato"
term p/2:someIndentation expr p> expecting GoDeeper

**************** / term p/3:plain p                                                                          :3_3:Other "pota:
***************** / pRelPred                                                                                :3_3:Other "pota:
****************** / slRelPred                                                                             :3_3:Other "pota:
******************* / nested simpleHorn                                                                   :3_3:Other "pota:
******************** > |^|                                                                               :3_3:Other "pota:
******************** / $*|                                                                               :3_3:Other "pota:
********************* / slMultiTerm                                                                     :3_3:Other "pota:
********************** / someSL                                                                        :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

********************** \ someSL has returned (["potato"],0)                                             :4_3:UnDeeper:
slMultiTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

********************* \ slMultiTerm has returned (["potato"],0)                                          :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

******************** \ $*| has returned (["potato"],0)                                                    :4_3:UnDeeper:
******************** / |^| deeps                                                                          :4_3:UnDeeper:
|^| deeps> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|^| deeps> MATCH (COK): UnDeeper
|^| deeps> VALUE: (([()],-1),[])

******************** \ |^| deeps has returned ([()],-1)                                                :4_2:Or:
nested simpleHorn> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
nested simpleHorn> MATCH (CERR): Other "potato" UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

******************* / RPConstraint                                                                        :3_3:Other "pota:
******************** / $*|                                                                               :3_3:Other "pota:
********************* / slMultiTerm                                                                     :3_3:Other "pota:
********************** / someSL                                                                        :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

********************** \ someSL has returned (["potato"],0)                                             :4_3:UnDeeper:
slMultiTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

********************* \ slMultiTerm has returned (["potato"],0)                                          :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

******************** \ $*| has returned (["potato"],0)                                                    :4_3:UnDeeper:
******************** / |>| calling $>>                                                                    :4_3:UnDeeper:
********************* / |>>/recurse                                                                      :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                         :4_3:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
RPConstraint> MATCH (CERR): Other "potato"
RPConstraint> ERROR:
RPConstraint> offset=9:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************* / RPBoolStructR                                                                       :3_3:Other "pota:
******************** / $*|                                                                               :3_3:Other "pota:
********************* / slMultiTerm                                                                     :3_3:Other "pota:
********************** / someSL                                                                        :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

********************** \ someSL has returned (["potato"],0)                                             :4_3:UnDeeper:
slMultiTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

********************* \ slMultiTerm has returned (["potato"],0)                                          :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

******************** \ $*| has returned (["potato"],0)                                                    :4_3:UnDeeper:
******************** / |>| calling $>>                                                                    :4_3:UnDeeper:
********************* / |>>/recurse                                                                      :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                         :4_3:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
RPBoolStructR> MATCH (CERR): Other "potato"
RPBoolStructR> ERROR:
RPBoolStructR> offset=9:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************* / RPMT                                                                                :3_3:Other "pota:
******************** / $*|                                                                               :3_3:Other "pota:
********************* / slAKA                                                                           :3_3:Other "pota:
********************** / $*|                                                                           :3_3:Other "pota:
*********************** / slAKA base                                                                  :3_3:Other "pota:
************************ / slMultiTerm                                                               :3_3:Other "pota:
************************* / someSL                                                                  :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

************************* \ someSL has returned (["potato"],0)                                       :4_3:UnDeeper:
slMultiTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

************************ \ slMultiTerm has returned (["potato"],0)                                    :4_3:UnDeeper:
slAKA base> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slAKA base> MATCH (COK): Other "potato"
slAKA base> VALUE: ((["potato"],0),[])

*********************** \ slAKA base has returned (["potato"],0)                                       :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

********************** \ $*| has returned (["potato"],0)                                                :4_3:UnDeeper:
********************** / |>>/recurse                                                                    :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                       :4_3:UnDeeper:
*********************** / slAKA optional akapart                                                       :4_3:UnDeeper:
************************ / |?| optional something                                                     :4_3:UnDeeper:
************************* / |>>/recurse                                                              :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                                 :4_3:UnDeeper:
************************** / PAKA/akapart                                                           :4_3:UnDeeper:
*************************** / $>|                                                                  :4_3:UnDeeper:
**************************** / Aka Token                                                          :4_3:UnDeeper:
Aka Token> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************ \ |?| optional something has returned (Nothing,0)                            :4_3:UnDeeper:
slAKA optional akapart> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************** \ slAKA optional akapart has returned (Nothing,0)                              :4_3:UnDeeper:
*********************** > |>>/base got Nothing                                                         :4_3:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************** \ |>>/base has returned (Nothing,0)                                              :4_3:UnDeeper:
********************** / |>>/recurse                                                                    :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                       :4_3:UnDeeper:
*********************** / slAKA optional typically                                                     :4_3:UnDeeper:
************************ / |?| optional something                                                     :4_3:UnDeeper:
************************* / |>>/recurse                                                              :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                                 :4_3:UnDeeper:
************************** / typically                                                              :4_3:UnDeeper:
*************************** / $>|                                                                  :4_3:UnDeeper:
$>|> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************ \ |?| optional something has returned (Nothing,0)                            :4_3:UnDeeper:
slAKA optional typically> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************** \ slAKA optional typically has returned (Nothing,0)                            :4_3:UnDeeper:
*********************** > |>>/base got Nothing                                                         :4_3:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************** \ |>>/base has returned (Nothing,0)                                              :4_3:UnDeeper:
********************** > slAKA: proceeding after base and entityalias are retrieved ...                 :4_3:UnDeeper:
********************** > pAKA: entityalias = Nothing                                                    :4_3:UnDeeper:
slAKA> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slAKA> MATCH (COK): Other "potato"
slAKA> VALUE: ((["potato"],0),[])

********************* \ slAKA has returned (["potato"],0)                                                :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

******************** \ $*| has returned (["potato"],0)                                                    :4_3:UnDeeper:
RPMT> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
RPMT> MATCH (COK): Other "potato"
RPMT> VALUE: ((RPMT ["potato"],0),[])

******************* \ RPMT has returned (RPMT ["potato"],0)                                                :4_3:UnDeeper:
slRelPred> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slRelPred> MATCH (COK): Other "potato"
slRelPred> VALUE: ((RPMT ["potato"],0),[])

****************** \ slRelPred has returned (RPMT ["potato"],0)                                             :4_3:UnDeeper:
****************** / undeepers                                                                              :4_3:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers               :4_3:UnDeeper:
******************* > sameLine: success!                                                                   :4_3:UnDeeper:
undeepers> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************** \ undeepers has returned ()                                                              :4_3:UnDeeper:
pRelPred> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
pRelPred> MATCH (COK): Other "potato"
pRelPred> VALUE: (RPMT ["potato"],[])

***************** \ pRelPred has returned RPMT ["potato"]                                                    :4_3:UnDeeper:
term p/3:plain p> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/3:plain p> MATCH (COK): Other "potato"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["potato"]),[])

**************** \ term p/3:plain p has returned MyLeaf (RPMT ["potato"])                                     :4_3:UnDeeper:
term p/notLabelTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/notLabelTerm> MATCH (COK): Other "potato"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["potato"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["potato"])                                    :4_3:UnDeeper:
term p> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p> MATCH (COK): Other "potato"
term p> VALUE: (MyLeaf (RPMT ["potato"]),[])

************** \ term p has returned MyLeaf (RPMT ["potato"])                                                   :4_3:UnDeeper:
************** / binary(Or)                                                                                     :4_3:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=9:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************** / binary(And)                                                                                    :4_3:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=9:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************** / binary(SetLess)                                                                                :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=9:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************** / binary(SetPlus)                                                                                :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=9:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "nightshades" Other "potato" UnDee <…>
expression> MATCH (COK): Other "nightshades" Other "potato"
expression> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

************* \ expression has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))                       :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "nightshades" Other "potato" UnDee <…>
manyIndentation/leaf?> MATCH (COK): Other "nightshades" Other "potato"
manyIndentation/leaf?> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

************ \ manyIndentation/leaf? has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))              :4_3:UnDeeper:
************ / myindented: consuming UnDeeper                                                                     :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                            :4_2:Or:
someIndentation> IN: GoDeeper Other "nightshades" Other "pota <…>
someIndentation> MATCH (COK): GoDeeper Other "nightshades" Other "pota <…>
someIndentation> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

*********** \ someIndentation has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))                   :4_2:Or:
term p/2:someIndentation expr p> IN: GoDeeper Other "nightshades" Other "pota <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "nightshades" Other "pota <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

********** \ term p/2:someIndentation expr p has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))     :4_2:Or:
term p/notLabelTerm> IN: GoDeeper Other "nightshades" Other "pota <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "nightshades" Other "pota <…>
term p/notLabelTerm> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

********* \ term p/notLabelTerm has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))                   :4_2:Or:
term p> IN: GoDeeper Other "nightshades" Other "pota <…>
term p> MATCH (COK): GoDeeper Other "nightshades" Other "pota <…>
term p> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

******** \ term p has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))                                  :4_2:Or:
******** / binary(Or)                                                                                              :4_2:Or:
binary(Or)> IN: Or GoDeeper Other "tomato" UnDeeper UnDe <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                               :4_3:GoDeeper:
******** / term p                                                                                                   :4_3:GoDeeper:
********* / term p/1a:label directly above                                                                         :4_3:GoDeeper:
********** / $*|                                                                                                  :4_3:GoDeeper:
*********** / someSL                                                                                             :4_3:GoDeeper:
************ / pNumAsText                                                                                       :4_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=11:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********* / term p/b:label to the left of line below, with EOL                                                     :4_3:GoDeeper:
********** / someSL                                                                                               :4_3:GoDeeper:
*********** / pNumAsText                                                                                         :4_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=11:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********* / term p/notLabelTerm                                                                                    :4_3:GoDeeper:
********** / term p/2:someIndentation expr p                                                                      :4_3:GoDeeper:
*********** / someIndentation                                                                                    :4_3:GoDeeper:
************ / myindented: consuming GoDeeper                                                                   :4_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                              :4_3:Other "toma:
************ / manyIndentation/leaf?                                                                             :4_3:Other "toma:
************* / expression                                                                                      :4_3:Other "toma:
************** / labelPrefix                                                                                   :4_3:Other "toma:
labelPrefix> IN: Other "tomato" UnDeeper UnDeeper
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected UnDeeper

************** / term p                                                                                        :4_3:Other "toma:
*************** / term p/1a:label directly above                                                              :4_3:Other "toma:
**************** / $*|                                                                                       :4_3:Other "toma:
***************** / someSL                                                                                  :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

***************** \ someSL has returned (["tomato"],0)                                                     :1_2:UnDeeper:
***************** / pNumAsText                                                                             :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (CERR): Other "tomato"
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "tomato" UnDeeper UnDeeper
term p/1a:label directly above> MATCH (CERR): Other "tomato"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=13:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

*************** / term p/b:label to the left of line below, with EOL                                          :4_3:Other "toma:
**************** / someSL                                                                                    :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

**************** \ someSL has returned (["tomato"],0)                                                       :1_2:UnDeeper:
**************** / undeepers                                                                                :1_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                 :1_2:UnDeeper:
***************** > sameLine: success!                                                                     :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                :1_2:UnDeeper:
**************** / matching EOL                                                                             :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=13:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "tomato" UnDeeper UnDeeper
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "tomato"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=13:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

*************** / term p/notLabelTerm                                                                         :4_3:Other "toma:
**************** / term p/2:someIndentation expr p                                                           :4_3:Other "toma:
***************** / someIndentation                                                                         :4_3:Other "toma:
****************** / myindented: consuming GoDeeper                                                        :4_3:Other "toma:
myindented: consuming GoDeeper> IN: Other "tomato" UnDeeper UnDeeper
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "tomato"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "tomato" UnDeeper UnDeeper
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "tomato"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "tomato" UnDeeper UnDeeper
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=12:
term p/2:someIndentation expr p> unexpected Other "tomato"
term p/2:someIndentation expr p> expecting GoDeeper

**************** / term p/3:plain p                                                                          :4_3:Other "toma:
***************** / pRelPred                                                                                :4_3:Other "toma:
****************** / slRelPred                                                                             :4_3:Other "toma:
******************* / nested simpleHorn                                                                   :4_3:Other "toma:
******************** > |^|                                                                               :4_3:Other "toma:
******************** / $*|                                                                               :4_3:Other "toma:
********************* / slMultiTerm                                                                     :4_3:Other "toma:
********************** / someSL                                                                        :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************** \ someSL has returned (["tomato"],0)                                           :1_2:UnDeeper:
slMultiTerm> IN: Other "tomato" UnDeeper UnDeeper
slMultiTerm> MATCH (COK): Other "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

********************* \ slMultiTerm has returned (["tomato"],0)                                        :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

******************** \ $*| has returned (["tomato"],0)                                                  :1_2:UnDeeper:
******************** / |^| deeps                                                                        :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

******************** \ |^| deeps has returned ([(),()],-2)                                         :EOF:
nested simpleHorn> IN: Other "tomato" UnDeeper UnDeeper
nested simpleHorn> MATCH (CERR): Other "tomato" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

******************* / RPConstraint                                                                        :4_3:Other "toma:
******************** / $*|                                                                               :4_3:Other "toma:
********************* / slMultiTerm                                                                     :4_3:Other "toma:
********************** / someSL                                                                        :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************** \ someSL has returned (["tomato"],0)                                           :1_2:UnDeeper:
slMultiTerm> IN: Other "tomato" UnDeeper UnDeeper
slMultiTerm> MATCH (COK): Other "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

********************* \ slMultiTerm has returned (["tomato"],0)                                        :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

******************** \ $*| has returned (["tomato"],0)                                                  :1_2:UnDeeper:
******************** / |>| calling $>>                                                                  :1_2:UnDeeper:
********************* / |>>/recurse                                                                    :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                       :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "tomato" UnDeeper UnDeeper
RPConstraint> MATCH (CERR): Other "tomato"
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************* / RPBoolStructR                                                                       :4_3:Other "toma:
******************** / $*|                                                                               :4_3:Other "toma:
********************* / slMultiTerm                                                                     :4_3:Other "toma:
********************** / someSL                                                                        :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************** \ someSL has returned (["tomato"],0)                                           :1_2:UnDeeper:
slMultiTerm> IN: Other "tomato" UnDeeper UnDeeper
slMultiTerm> MATCH (COK): Other "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

********************* \ slMultiTerm has returned (["tomato"],0)                                        :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

******************** \ $*| has returned (["tomato"],0)                                                  :1_2:UnDeeper:
******************** / |>| calling $>>                                                                  :1_2:UnDeeper:
********************* / |>>/recurse                                                                    :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                       :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "tomato" UnDeeper UnDeeper
RPBoolStructR> MATCH (CERR): Other "tomato"
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

******************* / RPMT                                                                                :4_3:Other "toma:
******************** / $*|                                                                               :4_3:Other "toma:
********************* / slAKA                                                                           :4_3:Other "toma:
********************** / $*|                                                                           :4_3:Other "toma:
*********************** / slAKA base                                                                  :4_3:Other "toma:
************************ / slMultiTerm                                                               :4_3:Other "toma:
************************* / someSL                                                                  :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

************************* \ someSL has returned (["tomato"],0)                                     :1_2:UnDeeper:
slMultiTerm> IN: Other "tomato" UnDeeper UnDeeper
slMultiTerm> MATCH (COK): Other "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

************************ \ slMultiTerm has returned (["tomato"],0)                                  :1_2:UnDeeper:
slAKA base> IN: Other "tomato" UnDeeper UnDeeper
slAKA base> MATCH (COK): Other "tomato"
slAKA base> VALUE: ((["tomato"],0),[])

*********************** \ slAKA base has returned (["tomato"],0)                                     :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

********************** \ $*| has returned (["tomato"],0)                                              :1_2:UnDeeper:
********************** / |>>/recurse                                                                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                     :1_2:UnDeeper:
*********************** / slAKA optional akapart                                                     :1_2:UnDeeper:
************************ / |?| optional something                                                   :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / PAKA/akapart                                                         :1_2:UnDeeper:
*************************** / $>|                                                                :1_2:UnDeeper:
**************************** / Aka Token                                                        :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=13:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=13:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************ \ |?| optional something has returned (Nothing,0)                          :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************** \ slAKA optional akapart has returned (Nothing,0)                            :1_2:UnDeeper:
*********************** > |>>/base got Nothing                                                       :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************** \ |>>/base has returned (Nothing,0)                                            :1_2:UnDeeper:
********************** / |>>/recurse                                                                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                     :1_2:UnDeeper:
*********************** / slAKA optional typically                                                   :1_2:UnDeeper:
************************ / |?| optional something                                                   :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / typically                                                            :1_2:UnDeeper:
*************************** / $>|                                                                :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************ \ |?| optional something has returned (Nothing,0)                          :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************** \ slAKA optional typically has returned (Nothing,0)                          :1_2:UnDeeper:
*********************** > |>>/base got Nothing                                                       :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************** \ |>>/base has returned (Nothing,0)                                            :1_2:UnDeeper:
********************** > slAKA: proceeding after base and entityalias are retrieved ...               :1_2:UnDeeper:
********************** > pAKA: entityalias = Nothing                                                  :1_2:UnDeeper:
slAKA> IN: Other "tomato" UnDeeper UnDeeper
slAKA> MATCH (COK): Other "tomato"
slAKA> VALUE: ((["tomato"],0),[])

********************* \ slAKA has returned (["tomato"],0)                                              :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

******************** \ $*| has returned (["tomato"],0)                                                  :1_2:UnDeeper:
RPMT> IN: Other "tomato" UnDeeper UnDeeper
RPMT> MATCH (COK): Other "tomato"
RPMT> VALUE: ((RPMT ["tomato"],0),[])

******************* \ RPMT has returned (RPMT ["tomato"],0)                                              :1_2:UnDeeper:
slRelPred> IN: Other "tomato" UnDeeper UnDeeper
slRelPred> MATCH (COK): Other "tomato"
slRelPred> VALUE: ((RPMT ["tomato"],0),[])

****************** \ slRelPred has returned (RPMT ["tomato"],0)                                           :1_2:UnDeeper:
****************** / undeepers                                                                            :1_2:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :1_2:UnDeeper:
******************* > sameLine: success!                                                                 :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************** \ undeepers has returned ()                                                            :1_2:UnDeeper:
pRelPred> IN: Other "tomato" UnDeeper UnDeeper
pRelPred> MATCH (COK): Other "tomato"
pRelPred> VALUE: (RPMT ["tomato"],[])

***************** \ pRelPred has returned RPMT ["tomato"]                                                  :1_2:UnDeeper:
term p/3:plain p> IN: Other "tomato" UnDeeper UnDeeper
term p/3:plain p> MATCH (COK): Other "tomato"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

**************** \ term p/3:plain p has returned MyLeaf (RPMT ["tomato"])                                   :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "tomato" UnDeeper UnDeeper
term p/notLabelTerm> MATCH (COK): Other "tomato"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["tomato"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["tomato"])                                  :1_2:UnDeeper:
term p> IN: Other "tomato" UnDeeper UnDeeper
term p> MATCH (COK): Other "tomato"
term p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************** \ term p has returned MyLeaf (RPMT ["tomato"])                                                 :1_2:UnDeeper:
************** / binary(Or)                                                                                   :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************** / binary(And)                                                                                  :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************** / binary(SetLess)                                                                              :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************** / binary(SetPlus)                                                                              :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "tomato" UnDeeper UnDeeper
expression> MATCH (COK): Other "tomato"
expression> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************* \ expression has returned MyLeaf (RPMT ["tomato"])                                               :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "tomato" UnDeeper UnDeeper
manyIndentation/leaf?> MATCH (COK): Other "tomato"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["tomato"])                                      :1_2:UnDeeper:
************ / myindented: consuming UnDeeper                                                                   :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                               :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "tomato" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["tomato"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["tomato"])                                                :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "tomato" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["tomato"])                                  :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "tomato" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["tomato"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["tomato"])                                                :1_3:UnDeeper:
term p> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "tomato" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

******** \ term p has returned MyLeaf (RPMT ["tomato"])                                                               :1_3:UnDeeper:
******** / binary(Or)                                                                                                 :1_3:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******** / binary(And)                                                                                                :1_3:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******** / binary(SetLess)                                                                                            :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******** / binary(SetPlus)                                                                                            :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "yummy" GoDeeper Other "nightshade <…>
expression> MATCH (COK): Other "yummy" GoDeeper Other "nightshade <…>
expression> VALUE: (MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])),[])

******* \ expression has returned MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])) :1_3:UnDeeper:
ppp inner> IN: Other "yummy" GoDeeper Other "nightshade <…>
ppp inner> MATCH (CERR): Other "yummy" GoDeeper Other "nightshade <…>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> Label (["yummy"]) followed by label (["nightshades"]) is not allowed

****** / withPrePost                                                                                                 :2_2:Other "yumm:
******* > |<* starting                                                                                              :2_2:Other "yumm:
******* / $*|                                                                                                       :2_2:Other "yumm:
******** / pre part                                                                                                :2_2:Other "yumm:
********* / aboveNextLineKeyword                                                                                   :2_3:GoDeeper:
********** / expectUnDeepers                                                                                      :2_3:GoDeeper:
*********** / pNumAsText                                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*********** > ignoring ["GD","nightshades","potato"]                                                               :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: GoDeeper Other "nightshades" Other "pota <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                       :2_3:GoDeeper:
********** > aNLK: determined undp_count = 1                                                                      :2_3:GoDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                    :2_3:GoDeeper:
********** / $*|                                                                                                  :2_3:GoDeeper:
$*|> IN: GoDeeper Other "nightshades" Other "pota <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                              :2_3:GoDeeper:
********** > ->| success                                                                                           :2_3:Other "nigh:
********** / |>>/recurse                                                                                           :2_3:Other "nigh:
|>>/recurse> IN: Other "nightshades" Other "potato" UnDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "nightshades"
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                              :2_3:Other "nigh:
*********** / slMultiTerm                                                                                         :2_3:Other "nigh:
************ / someSL                                                                                            :2_3:Other "nigh:
someSL> IN: Other "nightshades" Other "potato" UnDee <…>
someSL> MATCH (COK): Other "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

************ \ someSL has returned (["nightshades"],0)                                                           :3_3:Other "pota:
slMultiTerm> IN: Other "nightshades" Other "potato" UnDee <…>
slMultiTerm> MATCH (COK): Other "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

*********** \ slMultiTerm has returned (["nightshades"],0)                                                        :3_3:Other "pota:
*********** > |>>/base got ["nightshades"]                                                                        :3_3:Other "pota:
|>>/base> IN: Other "nightshades" Other "potato" UnDee <…>
|>>/base> MATCH (COK): Other "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********** \ |>>/base has returned (["nightshades"],0)                                                             :3_3:Other "pota:
********** > aNLK: current depth is 1                                                                              :3_3:Other "pota:
********** > |<|                                                                                                   :3_3:Other "pota:
********** > |<* starting                                                                                          :3_3:Other "pota:
********** / |<*/parent                                                                                            :3_3:Other "pota:
*********** > |<*/recurse                                                                                         :3_3:Other "pota:
*********** / |<*/base                                                                                            :3_3:Other "pota:
|<*/base> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected Other "potato"
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected Other "potato"
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "nightshades" Other "pota <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected Other "potato"
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

********* > /*= lookAhead failed, delegating to plain /+=                                                          :2_3:GoDeeper:
********* / aboveNextLineKeyword                                                                                    :2_3:Other "nigh:
********** / expectUnDeepers                                                                                       :2_3:Other "nigh:
*********** > ignoring ["nightshades","potato"]                                                                    :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: Other "nightshades" Other "potato" UnDee <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :2_3:Other "nigh:
********** > aNLK: determined undp_count = 1                                                                       :2_3:Other "nigh:
********** > ->| trying to consume 1 GoDeepers                                                                     :2_3:Other "nigh:
********** / $*|                                                                                                   :2_3:Other "nigh:
$*|> IN: Other "nightshades" Other "potato" UnDee <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :2_3:Other "nigh:
aboveNextLineKeyword> IN: Other "nightshades" Other "potato" UnDee <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "nightshades"
aboveNextLineKeyword> expecting GoDeeper

********* > /*= lookAhead failed, delegating to plain /+=                                                           :2_3:Other "nigh:
********* / aboveNextLineKeyword                                                                                    :3_3:Other "pota:
********** / expectUnDeepers                                                                                       :3_3:Other "pota:
*********** > ignoring ["potato"]                                                                                  :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :3_3:Other "pota:
********** > aNLK: determined undp_count = 1                                                                       :3_3:Other "pota:
********** > ->| trying to consume 1 GoDeepers                                                                     :3_3:Other "pota:
********** / $*|                                                                                                   :3_3:Other "pota:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :3_3:Other "pota:
aboveNextLineKeyword> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected Other "potato"
aboveNextLineKeyword> expecting GoDeeper

********* > /*= lookAhead failed, delegating to plain /+=                                                           :3_3:Other "pota:
********* / aboveNextLineKeyword                                                                                     :4_3:UnDeeper:
********** / expectUnDeepers                                                                                        :4_3:UnDeeper:
*********** > ignoring []                                                                                          :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                         :4_3:UnDeeper:
********** > aNLK: determined undp_count = 1                                                                        :4_3:UnDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                      :4_3:UnDeeper:
********** / $*|                                                                                                    :4_3:UnDeeper:
$*|> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                                :4_3:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********* > /*= lookAhead failed, delegating to plain /+=                                                            :4_3:UnDeeper:
pre part> IN: Other "yummy" GoDeeper Other "nightshade <…>
pre part> MATCH (CERR): Other "yummy"
pre part> ERROR:
pre part> offset=9:
pre part> unexpected UnDeeper
pre part> expecting GoDeeper or Other text

$*|> IN: Other "yummy" GoDeeper Other "nightshade <…>
$*|> MATCH (CERR): Other "yummy"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper or Other text

withPrePost> IN: Other "yummy" GoDeeper Other "nightshade <…>
withPrePost> MATCH (CERR): Other "yummy"
withPrePost> ERROR:
withPrePost> offset=9:
withPrePost> unexpected UnDeeper
withPrePost> expecting GoDeeper or Other text

****** / withPreOnly                                                                                                 :2_2:Other "yumm:
******* / $*|                                                                                                       :2_2:Other "yumm:
******** / pre part                                                                                                :2_2:Other "yumm:
********* / aboveNextLineKeyword                                                                                   :2_3:GoDeeper:
********** / expectUnDeepers                                                                                      :2_3:GoDeeper:
*********** / pNumAsText                                                                                         :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*********** > ignoring ["GD","nightshades","potato"]                                                               :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: GoDeeper Other "nightshades" Other "pota <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                       :2_3:GoDeeper:
********** > aNLK: determined undp_count = 1                                                                      :2_3:GoDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                    :2_3:GoDeeper:
********** / $*|                                                                                                  :2_3:GoDeeper:
$*|> IN: GoDeeper Other "nightshades" Other "pota <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                              :2_3:GoDeeper:
********** > ->| success                                                                                           :2_3:Other "nigh:
********** / |>>/recurse                                                                                           :2_3:Other "nigh:
|>>/recurse> IN: Other "nightshades" Other "potato" UnDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "nightshades"
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                              :2_3:Other "nigh:
*********** / slMultiTerm                                                                                         :2_3:Other "nigh:
************ / someSL                                                                                            :2_3:Other "nigh:
someSL> IN: Other "nightshades" Other "potato" UnDee <…>
someSL> MATCH (COK): Other "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

************ \ someSL has returned (["nightshades"],0)                                                           :3_3:Other "pota:
slMultiTerm> IN: Other "nightshades" Other "potato" UnDee <…>
slMultiTerm> MATCH (COK): Other "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

*********** \ slMultiTerm has returned (["nightshades"],0)                                                        :3_3:Other "pota:
*********** > |>>/base got ["nightshades"]                                                                        :3_3:Other "pota:
|>>/base> IN: Other "nightshades" Other "potato" UnDee <…>
|>>/base> MATCH (COK): Other "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********** \ |>>/base has returned (["nightshades"],0)                                                             :3_3:Other "pota:
********** > aNLK: current depth is 1                                                                              :3_3:Other "pota:
********** > |<|                                                                                                   :3_3:Other "pota:
********** > |<* starting                                                                                          :3_3:Other "pota:
********** / |<*/parent                                                                                            :3_3:Other "pota:
*********** > |<*/recurse                                                                                         :3_3:Other "pota:
*********** / |<*/base                                                                                            :3_3:Other "pota:
|<*/base> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected Other "potato"
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected Other "potato"
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "nightshades" Other "pota <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected Other "potato"
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

********* > /*= lookAhead failed, delegating to plain /+=                                                          :2_3:GoDeeper:
********* / aboveNextLineKeyword                                                                                    :2_3:Other "nigh:
********** / expectUnDeepers                                                                                       :2_3:Other "nigh:
*********** > ignoring ["nightshades","potato"]                                                                    :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: Other "nightshades" Other "potato" UnDee <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :2_3:Other "nigh:
********** > aNLK: determined undp_count = 1                                                                       :2_3:Other "nigh:
********** > ->| trying to consume 1 GoDeepers                                                                     :2_3:Other "nigh:
********** / $*|                                                                                                   :2_3:Other "nigh:
$*|> IN: Other "nightshades" Other "potato" UnDee <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :2_3:Other "nigh:
aboveNextLineKeyword> IN: Other "nightshades" Other "potato" UnDee <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "nightshades"
aboveNextLineKeyword> expecting GoDeeper

********* > /*= lookAhead failed, delegating to plain /+=                                                           :2_3:Other "nigh:
********* / aboveNextLineKeyword                                                                                    :3_3:Other "pota:
********** / expectUnDeepers                                                                                       :3_3:Other "pota:
*********** > ignoring ["potato"]                                                                                  :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :3_3:Other "pota:
********** > aNLK: determined undp_count = 1                                                                       :3_3:Other "pota:
********** > ->| trying to consume 1 GoDeepers                                                                     :3_3:Other "pota:
********** / $*|                                                                                                   :3_3:Other "pota:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :3_3:Other "pota:
aboveNextLineKeyword> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected Other "potato"
aboveNextLineKeyword> expecting GoDeeper

********* > /*= lookAhead failed, delegating to plain /+=                                                           :3_3:Other "pota:
********* / aboveNextLineKeyword                                                                                     :4_3:UnDeeper:
********** / expectUnDeepers                                                                                        :4_3:UnDeeper:
*********** > ignoring []                                                                                          :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                         :4_3:UnDeeper:
********** > aNLK: determined undp_count = 1                                                                        :4_3:UnDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                      :4_3:UnDeeper:
********** / $*|                                                                                                    :4_3:UnDeeper:
$*|> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                                :4_3:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

********* > /*= lookAhead failed, delegating to plain /+=                                                            :4_3:UnDeeper:
pre part> IN: Other "yummy" GoDeeper Other "nightshade <…>
pre part> MATCH (CERR): Other "yummy"
pre part> ERROR:
pre part> offset=9:
pre part> unexpected UnDeeper
pre part> expecting GoDeeper or Other text

$*|> IN: Other "yummy" GoDeeper Other "nightshade <…>
$*|> MATCH (CERR): Other "yummy"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper or Other text

withPreOnly> IN: Other "yummy" GoDeeper Other "nightshade <…>
withPreOnly> MATCH (CERR): Other "yummy"
withPreOnly> ERROR:
withPreOnly> offset=9:
withPreOnly> unexpected UnDeeper
withPreOnly> expecting GoDeeper or Other text

pBSR> IN: Other "yummy" GoDeeper Other "nightshade <…>
pBSR> MATCH (CERR): Other "yummy"
pBSR> ERROR:
pBSR> offset=14:
pBSR> Label (["yummy"]) followed by label (["nightshades"]) is not allowed

|>>/base> IN: Other "yummy" GoDeeper Other "nightshade <…>
|>>/base> MATCH (CERR): Other "yummy"
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> Label (["yummy"]) followed by label (["nightshades"]) is not allowed

|>>/recurse> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
|>>/recurse> MATCH (CERR): GoDeeper Other "yummy"
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> Label (["yummy"]) followed by label (["nightshades"]) is not allowed

*** / |>>/base                                                                                                         :2_2:GoDeeper:
**** / pBSR                                                                                                           :2_2:GoDeeper:
***** / ppp inner                                                                                                    :2_2:GoDeeper:
****** / expression                                                                                                 :2_2:GoDeeper:
******* / labelPrefix                                                                                              :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******* / term p                                                                                                   :2_2:GoDeeper:
******** / term p/1a:label directly above                                                                         :2_2:GoDeeper:
********* / $*|                                                                                                  :2_2:GoDeeper:
********** / someSL                                                                                             :2_2:GoDeeper:
*********** / pNumAsText                                                                                       :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=4:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******** / term p/b:label to the left of line below, with EOL                                                     :2_2:GoDeeper:
********* / someSL                                                                                               :2_2:GoDeeper:
********** / pNumAsText                                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=4:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******** / term p/notLabelTerm                                                                                    :2_2:GoDeeper:
********* / term p/2:someIndentation expr p                                                                      :2_2:GoDeeper:
********** / someIndentation                                                                                    :2_2:GoDeeper:
*********** / myindented: consuming GoDeeper                                                                   :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********** \ myindented: consuming GoDeeper has returned GoDeeper                                              :2_2:Other "yumm:
*********** / manyIndentation/leaf?                                                                             :2_2:Other "yumm:
************ / expression                                                                                      :2_2:Other "yumm:
************* / labelPrefix                                                                                   :2_2:Other "yumm:
labelPrefix> IN: Other "yummy" GoDeeper Other "nightshade <…>
labelPrefix> MATCH (COK): Other "yummy"
labelPrefix> VALUE: ("yummy",[])

************* \ labelPrefix has returned "yummy"                                                               :2_3:GoDeeper:
************* / term p                                                                                         :2_3:GoDeeper:
************** / term p/1a:label directly above                                                               :2_3:GoDeeper:
*************** / $*|                                                                                        :2_3:GoDeeper:
**************** / someSL                                                                                   :2_3:GoDeeper:
***************** / pNumAsText                                                                             :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "nightshades" Other "pota <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "nightshades" Other "pota <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "nightshades" Other "pota <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************** / term p/b:label to the left of line below, with EOL                                           :2_3:GoDeeper:
*************** / someSL                                                                                     :2_3:GoDeeper:
**************** / pNumAsText                                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "nightshades" Other "pota <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "nightshades" Other "pota <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************** / term p/notLabelTerm                                                                          :2_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :2_3:GoDeeper:
**************** / someIndentation                                                                          :2_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "nightshades" Other "pota <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_3:Other "nigh:
***************** / manyIndentation/leaf?                                                                   :2_3:Other "nigh:
****************** / expression                                                                            :2_3:Other "nigh:
******************* / labelPrefix                                                                         :2_3:Other "nigh:
labelPrefix> IN: Other "nightshades" Other "potato" UnDee <…>
labelPrefix> MATCH (COK): Other "nightshades"
labelPrefix> VALUE: ("nightshades",[])

******************* \ labelPrefix has returned "nightshades"                                              :3_3:Other "pota:
******************* / term p                                                                              :3_3:Other "pota:
******************** / term p/1a:label directly above                                                    :3_3:Other "pota:
********************* / $*|                                                                             :3_3:Other "pota:
********************** / someSL                                                                        :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

********************** \ someSL has returned (["potato"],0)                                             :4_3:UnDeeper:
********************** / pNumAsText                                                                     :4_3:UnDeeper:
pNumAsText> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (CERR): Other "potato"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/1a:label directly above> MATCH (CERR): Other "potato"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=9:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************** / term p/b:label to the left of line below, with EOL                                :3_3:Other "pota:
********************* / someSL                                                                          :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

********************* \ someSL has returned (["potato"],0)                                               :4_3:UnDeeper:
********************* / undeepers                                                                        :4_3:UnDeeper:
********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :4_3:UnDeeper:
********************** > sameLine: success!                                                             :4_3:UnDeeper:
undeepers> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************* \ undeepers has returned ()                                                        :4_3:UnDeeper:
********************* / matching EOL                                                                     :4_3:UnDeeper:
matching EOL> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=9:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "potato"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=9:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************** / term p/notLabelTerm                                                               :3_3:Other "pota:
********************* / term p/2:someIndentation expr p                                                 :3_3:Other "pota:
********************** / someIndentation                                                               :3_3:Other "pota:
*********************** / myindented: consuming GoDeeper                                              :3_3:Other "pota:
myindented: consuming GoDeeper> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=8:
myindented: consuming GoDeeper> unexpected Other "potato"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected Other "potato"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected Other "potato"
term p/2:someIndentation expr p> expecting GoDeeper

********************* / term p/3:plain p                                                                :3_3:Other "pota:
********************** / pRelPred                                                                      :3_3:Other "pota:
*********************** / slRelPred                                                                   :3_3:Other "pota:
************************ / nested simpleHorn                                                         :3_3:Other "pota:
************************* > |^|                                                                     :3_3:Other "pota:
************************* / $*|                                                                     :3_3:Other "pota:
************************** / slMultiTerm                                                           :3_3:Other "pota:
*************************** / someSL                                                              :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

*************************** \ someSL has returned (["potato"],0)                                   :4_3:UnDeeper:
slMultiTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

************************** \ slMultiTerm has returned (["potato"],0)                                :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

************************* \ $*| has returned (["potato"],0)                                          :4_3:UnDeeper:
************************* / |^| deeps                                                                :4_3:UnDeeper:
|^| deeps> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|^| deeps> MATCH (COK): UnDeeper
|^| deeps> VALUE: (([()],-1),[])

************************* \ |^| deeps has returned ([()],-1)                                      :4_2:Or:
nested simpleHorn> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
nested simpleHorn> MATCH (CERR): Other "potato" UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************ / RPConstraint                                                              :3_3:Other "pota:
************************* / $*|                                                                     :3_3:Other "pota:
************************** / slMultiTerm                                                           :3_3:Other "pota:
*************************** / someSL                                                              :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

*************************** \ someSL has returned (["potato"],0)                                   :4_3:UnDeeper:
slMultiTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

************************** \ slMultiTerm has returned (["potato"],0)                                :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

************************* \ $*| has returned (["potato"],0)                                          :4_3:UnDeeper:
************************* / |>| calling $>>                                                          :4_3:UnDeeper:
************************** / |>>/recurse                                                            :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************** / |>>/base                                                               :4_3:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
RPConstraint> MATCH (CERR): Other "potato"
RPConstraint> ERROR:
RPConstraint> offset=9:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************ / RPBoolStructR                                                             :3_3:Other "pota:
************************* / $*|                                                                     :3_3:Other "pota:
************************** / slMultiTerm                                                           :3_3:Other "pota:
*************************** / someSL                                                              :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

*************************** \ someSL has returned (["potato"],0)                                   :4_3:UnDeeper:
slMultiTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

************************** \ slMultiTerm has returned (["potato"],0)                                :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

************************* \ $*| has returned (["potato"],0)                                          :4_3:UnDeeper:
************************* / |>| calling $>>                                                          :4_3:UnDeeper:
************************** / |>>/recurse                                                            :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************** / |>>/base                                                               :4_3:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
RPBoolStructR> MATCH (CERR): Other "potato"
RPBoolStructR> ERROR:
RPBoolStructR> offset=9:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************ / RPMT                                                                      :3_3:Other "pota:
************************* / $*|                                                                     :3_3:Other "pota:
************************** / slAKA                                                                 :3_3:Other "pota:
*************************** / $*|                                                                 :3_3:Other "pota:
**************************** / slAKA base                                                        :3_3:Other "pota:
***************************** / slMultiTerm                                                     :3_3:Other "pota:
****************************** / someSL                                                        :3_3:Other "pota:
someSL> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "potato"
someSL> VALUE: ((["potato"],0),[])

****************************** \ someSL has returned (["potato"],0)                             :4_3:UnDeeper:
slMultiTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "potato"
slMultiTerm> VALUE: ((["potato"],0),[])

***************************** \ slMultiTerm has returned (["potato"],0)                          :4_3:UnDeeper:
slAKA base> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slAKA base> MATCH (COK): Other "potato"
slAKA base> VALUE: ((["potato"],0),[])

**************************** \ slAKA base has returned (["potato"],0)                             :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

*************************** \ $*| has returned (["potato"],0)                                      :4_3:UnDeeper:
*************************** / |>>/recurse                                                          :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                             :4_3:UnDeeper:
**************************** / slAKA optional akapart                                             :4_3:UnDeeper:
***************************** / |?| optional something                                           :4_3:UnDeeper:
****************************** / |>>/recurse                                                    :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                       :4_3:UnDeeper:
******************************* / PAKA/akapart                                                 :4_3:UnDeeper:
******************************** / $>|                                                        :4_3:UnDeeper:
********************************* / Aka Token                                                :4_3:UnDeeper:
Aka Token> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=9:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=9:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                  :4_3:UnDeeper:
slAKA optional akapart> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                    :4_3:UnDeeper:
**************************** > |>>/base got Nothing                                               :4_3:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                    :4_3:UnDeeper:
*************************** / |>>/recurse                                                          :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                             :4_3:UnDeeper:
**************************** / slAKA optional typically                                           :4_3:UnDeeper:
***************************** / |?| optional something                                           :4_3:UnDeeper:
****************************** / |>>/recurse                                                    :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                       :4_3:UnDeeper:
******************************* / typically                                                    :4_3:UnDeeper:
******************************** / $>|                                                        :4_3:UnDeeper:
$>|> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=9:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=9:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                  :4_3:UnDeeper:
slAKA optional typically> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                  :4_3:UnDeeper:
**************************** > |>>/base got Nothing                                               :4_3:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                    :4_3:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...       :4_3:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                          :4_3:UnDeeper:
slAKA> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slAKA> MATCH (COK): Other "potato"
slAKA> VALUE: ((["potato"],0),[])

************************** \ slAKA has returned (["potato"],0)                                      :4_3:UnDeeper:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "potato"
$*|> VALUE: ((["potato"],0),[])

************************* \ $*| has returned (["potato"],0)                                          :4_3:UnDeeper:
RPMT> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
RPMT> MATCH (COK): Other "potato"
RPMT> VALUE: ((RPMT ["potato"],0),[])

************************ \ RPMT has returned (RPMT ["potato"],0)                                      :4_3:UnDeeper:
slRelPred> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
slRelPred> MATCH (COK): Other "potato"
slRelPred> VALUE: ((RPMT ["potato"],0),[])

*********************** \ slRelPred has returned (RPMT ["potato"],0)                                   :4_3:UnDeeper:
*********************** / undeepers                                                                    :4_3:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :4_3:UnDeeper:
************************ > sameLine: success!                                                         :4_3:UnDeeper:
undeepers> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                    :4_3:UnDeeper:
pRelPred> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
pRelPred> MATCH (COK): Other "potato"
pRelPred> VALUE: (RPMT ["potato"],[])

********************** \ pRelPred has returned RPMT ["potato"]                                          :4_3:UnDeeper:
term p/3:plain p> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/3:plain p> MATCH (COK): Other "potato"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["potato"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["potato"])                           :4_3:UnDeeper:
term p/notLabelTerm> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p/notLabelTerm> MATCH (COK): Other "potato"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["potato"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["potato"])                          :4_3:UnDeeper:
term p> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
term p> MATCH (COK): Other "potato"
term p> VALUE: (MyLeaf (RPMT ["potato"]),[])

******************* \ term p has returned MyLeaf (RPMT ["potato"])                                         :4_3:UnDeeper:
******************* / binary(Or)                                                                           :4_3:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=9:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************* / binary(And)                                                                          :4_3:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=9:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************* / binary(SetLess)                                                                      :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=9:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************* / binary(SetPlus)                                                                      :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=9:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "nightshades" Other "potato" UnDee <…>
expression> MATCH (COK): Other "nightshades" Other "potato"
expression> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

****************** \ expression has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))             :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "nightshades" Other "potato" UnDee <…>
manyIndentation/leaf?> MATCH (COK): Other "nightshades" Other "potato"
manyIndentation/leaf?> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

***************** \ manyIndentation/leaf? has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))    :4_3:UnDeeper:
***************** / myindented: consuming UnDeeper                                                           :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_2:Or:
someIndentation> IN: GoDeeper Other "nightshades" Other "pota <…>
someIndentation> MATCH (COK): GoDeeper Other "nightshades" Other "pota <…>
someIndentation> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

**************** \ someIndentation has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))         :4_2:Or:
term p/2:someIndentation expr p> IN: GoDeeper Other "nightshades" Other "pota <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "nightshades" Other "pota <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

*************** \ term p/2:someIndentation expr p has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])) :4_2:Or:
term p/notLabelTerm> IN: GoDeeper Other "nightshades" Other "pota <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "nightshades" Other "pota <…>
term p/notLabelTerm> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

************** \ term p/notLabelTerm has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))         :4_2:Or:
term p> IN: GoDeeper Other "nightshades" Other "pota <…>
term p> MATCH (COK): GoDeeper Other "nightshades" Other "pota <…>
term p> VALUE: (MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"])),[])

************* \ term p has returned MyLabel ["nightshades"] (MyLeaf (RPMT ["potato"]))                        :4_2:Or:
************* / binary(Or)                                                                                    :4_2:Or:
binary(Or)> IN: Or GoDeeper Other "tomato" UnDeeper UnDe <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

************* \ binary(Or) has returned Or                                                                     :4_3:GoDeeper:
************* / term p                                                                                         :4_3:GoDeeper:
************** / term p/1a:label directly above                                                               :4_3:GoDeeper:
*************** / $*|                                                                                        :4_3:GoDeeper:
**************** / someSL                                                                                   :4_3:GoDeeper:
***************** / pNumAsText                                                                             :4_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=11:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************** / term p/b:label to the left of line below, with EOL                                           :4_3:GoDeeper:
*************** / someSL                                                                                     :4_3:GoDeeper:
**************** / pNumAsText                                                                               :4_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=11:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************** / term p/notLabelTerm                                                                          :4_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :4_3:GoDeeper:
**************** / someIndentation                                                                          :4_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :4_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :4_3:Other "toma:
***************** / manyIndentation/leaf?                                                                   :4_3:Other "toma:
****************** / expression                                                                            :4_3:Other "toma:
******************* / labelPrefix                                                                         :4_3:Other "toma:
labelPrefix> IN: Other "tomato" UnDeeper UnDeeper
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected UnDeeper

******************* / term p                                                                              :4_3:Other "toma:
******************** / term p/1a:label directly above                                                    :4_3:Other "toma:
********************* / $*|                                                                             :4_3:Other "toma:
********************** / someSL                                                                        :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************** \ someSL has returned (["tomato"],0)                                           :1_2:UnDeeper:
********************** / pNumAsText                                                                   :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (CERR): Other "tomato"
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "tomato" UnDeeper UnDeeper
term p/1a:label directly above> MATCH (CERR): Other "tomato"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=13:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************** / term p/b:label to the left of line below, with EOL                                :4_3:Other "toma:
********************* / someSL                                                                          :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

********************* \ someSL has returned (["tomato"],0)                                             :1_2:UnDeeper:
********************* / undeepers                                                                      :1_2:UnDeeper:
********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :1_2:UnDeeper:
********************** > sameLine: success!                                                           :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************* \ undeepers has returned ()                                                      :1_2:UnDeeper:
********************* / matching EOL                                                                   :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=13:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "tomato" UnDeeper UnDeeper
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "tomato"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=13:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************** / term p/notLabelTerm                                                               :4_3:Other "toma:
********************* / term p/2:someIndentation expr p                                                 :4_3:Other "toma:
********************** / someIndentation                                                               :4_3:Other "toma:
*********************** / myindented: consuming GoDeeper                                              :4_3:Other "toma:
myindented: consuming GoDeeper> IN: Other "tomato" UnDeeper UnDeeper
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Other "tomato"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "tomato" UnDeeper UnDeeper
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Other "tomato"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "tomato" UnDeeper UnDeeper
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=12:
term p/2:someIndentation expr p> unexpected Other "tomato"
term p/2:someIndentation expr p> expecting GoDeeper

********************* / term p/3:plain p                                                                :4_3:Other "toma:
********************** / pRelPred                                                                      :4_3:Other "toma:
*********************** / slRelPred                                                                   :4_3:Other "toma:
************************ / nested simpleHorn                                                         :4_3:Other "toma:
************************* > |^|                                                                     :4_3:Other "toma:
************************* / $*|                                                                     :4_3:Other "toma:
************************** / slMultiTerm                                                           :4_3:Other "toma:
*************************** / someSL                                                              :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

*************************** \ someSL has returned (["tomato"],0)                                 :1_2:UnDeeper:
slMultiTerm> IN: Other "tomato" UnDeeper UnDeeper
slMultiTerm> MATCH (COK): Other "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

************************** \ slMultiTerm has returned (["tomato"],0)                              :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

************************* \ $*| has returned (["tomato"],0)                                        :1_2:UnDeeper:
************************* / |^| deeps                                                              :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************* \ |^| deeps has returned ([(),()],-2)                               :EOF:
nested simpleHorn> IN: Other "tomato" UnDeeper UnDeeper
nested simpleHorn> MATCH (CERR): Other "tomato" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

************************ / RPConstraint                                                              :4_3:Other "toma:
************************* / $*|                                                                     :4_3:Other "toma:
************************** / slMultiTerm                                                           :4_3:Other "toma:
*************************** / someSL                                                              :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

*************************** \ someSL has returned (["tomato"],0)                                 :1_2:UnDeeper:
slMultiTerm> IN: Other "tomato" UnDeeper UnDeeper
slMultiTerm> MATCH (COK): Other "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

************************** \ slMultiTerm has returned (["tomato"],0)                              :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

************************* \ $*| has returned (["tomato"],0)                                        :1_2:UnDeeper:
************************* / |>| calling $>>                                                        :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************** / |>>/base                                                             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "tomato" UnDeeper UnDeeper
RPConstraint> MATCH (CERR): Other "tomato"
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************ / RPBoolStructR                                                             :4_3:Other "toma:
************************* / $*|                                                                     :4_3:Other "toma:
************************** / slMultiTerm                                                           :4_3:Other "toma:
*************************** / someSL                                                              :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

*************************** \ someSL has returned (["tomato"],0)                                 :1_2:UnDeeper:
slMultiTerm> IN: Other "tomato" UnDeeper UnDeeper
slMultiTerm> MATCH (COK): Other "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

************************** \ slMultiTerm has returned (["tomato"],0)                              :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

************************* \ $*| has returned (["tomato"],0)                                        :1_2:UnDeeper:
************************* / |>| calling $>>                                                        :1_2:UnDeeper:
************************** / |>>/recurse                                                          :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************** / |>>/base                                                             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "tomato" UnDeeper UnDeeper
RPBoolStructR> MATCH (CERR): Other "tomato"
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************ / RPMT                                                                      :4_3:Other "toma:
************************* / $*|                                                                     :4_3:Other "toma:
************************** / slAKA                                                                 :4_3:Other "toma:
*************************** / $*|                                                                 :4_3:Other "toma:
**************************** / slAKA base                                                        :4_3:Other "toma:
***************************** / slMultiTerm                                                     :4_3:Other "toma:
****************************** / someSL                                                        :4_3:Other "toma:
someSL> IN: Other "tomato" UnDeeper UnDeeper
someSL> MATCH (COK): Other "tomato"
someSL> VALUE: ((["tomato"],0),[])

****************************** \ someSL has returned (["tomato"],0)                           :1_2:UnDeeper:
slMultiTerm> IN: Other "tomato" UnDeeper UnDeeper
slMultiTerm> MATCH (COK): Other "tomato"
slMultiTerm> VALUE: ((["tomato"],0),[])

***************************** \ slMultiTerm has returned (["tomato"],0)                        :1_2:UnDeeper:
slAKA base> IN: Other "tomato" UnDeeper UnDeeper
slAKA base> MATCH (COK): Other "tomato"
slAKA base> VALUE: ((["tomato"],0),[])

**************************** \ slAKA base has returned (["tomato"],0)                           :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

*************************** \ $*| has returned (["tomato"],0)                                    :1_2:UnDeeper:
*************************** / |>>/recurse                                                        :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                           :1_2:UnDeeper:
**************************** / slAKA optional akapart                                           :1_2:UnDeeper:
***************************** / |?| optional something                                         :1_2:UnDeeper:
****************************** / |>>/recurse                                                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :1_2:UnDeeper:
******************************* / PAKA/akapart                                               :1_2:UnDeeper:
******************************** / $>|                                                      :1_2:UnDeeper:
********************************* / Aka Token                                              :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=13:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=13:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :1_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :1_2:UnDeeper:
*************************** / |>>/recurse                                                        :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                           :1_2:UnDeeper:
**************************** / slAKA optional typically                                         :1_2:UnDeeper:
***************************** / |?| optional something                                         :1_2:UnDeeper:
****************************** / |>>/recurse                                                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :1_2:UnDeeper:
******************************* / typically                                                  :1_2:UnDeeper:
******************************** / $>|                                                      :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :1_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :1_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :1_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :1_2:UnDeeper:
slAKA> IN: Other "tomato" UnDeeper UnDeeper
slAKA> MATCH (COK): Other "tomato"
slAKA> VALUE: ((["tomato"],0),[])

************************** \ slAKA has returned (["tomato"],0)                                    :1_2:UnDeeper:
$*|> IN: Other "tomato" UnDeeper UnDeeper
$*|> MATCH (COK): Other "tomato"
$*|> VALUE: ((["tomato"],0),[])

************************* \ $*| has returned (["tomato"],0)                                        :1_2:UnDeeper:
RPMT> IN: Other "tomato" UnDeeper UnDeeper
RPMT> MATCH (COK): Other "tomato"
RPMT> VALUE: ((RPMT ["tomato"],0),[])

************************ \ RPMT has returned (RPMT ["tomato"],0)                                    :1_2:UnDeeper:
slRelPred> IN: Other "tomato" UnDeeper UnDeeper
slRelPred> MATCH (COK): Other "tomato"
slRelPred> VALUE: ((RPMT ["tomato"],0),[])

*********************** \ slRelPred has returned (RPMT ["tomato"],0)                                 :1_2:UnDeeper:
*********************** / undeepers                                                                  :1_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers   :1_2:UnDeeper:
************************ > sameLine: success!                                                       :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                  :1_2:UnDeeper:
pRelPred> IN: Other "tomato" UnDeeper UnDeeper
pRelPred> MATCH (COK): Other "tomato"
pRelPred> VALUE: (RPMT ["tomato"],[])

********************** \ pRelPred has returned RPMT ["tomato"]                                        :1_2:UnDeeper:
term p/3:plain p> IN: Other "tomato" UnDeeper UnDeeper
term p/3:plain p> MATCH (COK): Other "tomato"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["tomato"])                         :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "tomato" UnDeeper UnDeeper
term p/notLabelTerm> MATCH (COK): Other "tomato"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["tomato"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["tomato"])                        :1_2:UnDeeper:
term p> IN: Other "tomato" UnDeeper UnDeeper
term p> MATCH (COK): Other "tomato"
term p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

******************* \ term p has returned MyLeaf (RPMT ["tomato"])                                       :1_2:UnDeeper:
******************* / binary(Or)                                                                         :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************* / binary(And)                                                                        :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************* / binary(SetLess)                                                                    :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************* / binary(SetPlus)                                                                    :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "tomato" UnDeeper UnDeeper
expression> MATCH (COK): Other "tomato"
expression> VALUE: (MyLeaf (RPMT ["tomato"]),[])

****************** \ expression has returned MyLeaf (RPMT ["tomato"])                                     :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "tomato" UnDeeper UnDeeper
manyIndentation/leaf?> MATCH (COK): Other "tomato"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["tomato"]),[])

***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["tomato"])                            :1_2:UnDeeper:
***************** / myindented: consuming UnDeeper                                                         :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented: consuming UnDeeper has returned UnDeeper                                     :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "tomato" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["tomato"]),[])

**************** \ someIndentation has returned MyLeaf (RPMT ["tomato"])                                      :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "tomato" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["tomato"])                        :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "tomato" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["tomato"])                                      :1_3:UnDeeper:
term p> IN: GoDeeper Other "tomato" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "tomato" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["tomato"]),[])

************* \ term p has returned MyLeaf (RPMT ["tomato"])                                                     :1_3:UnDeeper:
************* / binary(Or)                                                                                       :1_3:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************* / binary(And)                                                                                      :1_3:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************* / binary(SetLess)                                                                                  :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************* / binary(SetPlus)                                                                                  :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "yummy" GoDeeper Other "nightshade <…>
expression> MATCH (COK): Other "yummy" GoDeeper Other "nightshade <…>
expression> VALUE: (MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])),[])

************ \ expression has returned MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])) :1_3:UnDeeper:
manyIndentation/leaf?> IN: Other "yummy" GoDeeper Other "nightshade <…>
manyIndentation/leaf?> MATCH (COK): Other "yummy" GoDeeper Other "nightshade <…>
manyIndentation/leaf?> VALUE: (MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])),[])

*********** \ manyIndentation/leaf? has returned MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])) :1_3:UnDeeper:
*********** / myindented: consuming UnDeeper                                                                       :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*********** \ myindented: consuming UnDeeper has returned UnDeeper                                          :EOF:
someIndentation> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
someIndentation> MATCH (COK): GoDeeper Other "yummy" GoDeeper Other "n <…>
someIndentation> VALUE: (MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])),[])

********** \ someIndentation has returned MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "yummy" GoDeeper Other "n <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])),[])

********* \ term p/2:someIndentation expr p has returned MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])) :EOF:
term p/notLabelTerm> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "yummy" GoDeeper Other "n <…>
term p/notLabelTerm> VALUE: (MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])),[])

******** \ term p/notLabelTerm has returned MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])) :EOF:
term p> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
term p> MATCH (COK): GoDeeper Other "yummy" GoDeeper Other "n <…>
term p> VALUE: (MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])),[])

******* \ term p has returned MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])) :EOF:
******* / binary(Or)                                                                                            :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=15:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

******* / binary(And)                                                                                           :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=15:
binary(And)> unexpected end of input
binary(And)> expecting And

******* / binary(SetLess)                                                                                       :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=15:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

******* / binary(SetPlus)                                                                                       :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=15:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
expression> MATCH (COK): GoDeeper Other "yummy" GoDeeper Other "n <…>
expression> VALUE: (MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])),[])

****** \ expression has returned MyLabel ["yummy"] (MyLabel ["nightshades"] (MyAny [MyLeaf (RPMT ["potato"]),MyLeaf (RPMT ["tomato"])])) :EOF:
ppp inner> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
ppp inner> MATCH (CERR): GoDeeper Other "yummy" GoDeeper Other "n <…>
ppp inner> ERROR:
ppp inner> offset=15:
ppp inner> Label (["yummy"]) followed by label (["nightshades"]) is not allowed

***** / withPrePost                                                                                                  :2_2:GoDeeper:
****** > |<* starting                                                                                               :2_2:GoDeeper:
****** / $*|                                                                                                        :2_2:GoDeeper:
******* / pre part                                                                                                 :2_2:GoDeeper:
******** / aboveNextLineKeyword                                                                                    :2_2:Other "yumm:
********* / expectUnDeepers                                                                                       :2_2:Other "yumm:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********** > ignoring ["yummy","GD","nightshades","potato"]                                                         :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: Other "yummy" GoDeeper Other "nightshade <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                        :2_2:Other "yumm:
********* > aNLK: determined undp_count = 1                                                                       :2_2:Other "yumm:
********* > ->| trying to consume 1 GoDeepers                                                                     :2_2:Other "yumm:
********* / $*|                                                                                                   :2_2:Other "yumm:
$*|> IN: Other "yummy" GoDeeper Other "nightshade <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                               :2_2:Other "yumm:
aboveNextLineKeyword> IN: Other "yummy" GoDeeper Other "nightshade <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected Other "yummy"
aboveNextLineKeyword> expecting GoDeeper

******** > /*= lookAhead failed, delegating to plain /+=                                                           :2_2:Other "yumm:
******** / aboveNextLineKeyword                                                                                     :2_3:GoDeeper:
********* / expectUnDeepers                                                                                        :2_3:GoDeeper:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********** > ignoring ["GD","nightshades","potato"]                                                                 :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: GoDeeper Other "nightshades" Other "pota <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                         :2_3:GoDeeper:
********* > aNLK: determined undp_count = 1                                                                        :2_3:GoDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                      :2_3:GoDeeper:
********* / $*|                                                                                                    :2_3:GoDeeper:
$*|> IN: GoDeeper Other "nightshades" Other "pota <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                :2_3:GoDeeper:
********* > ->| success                                                                                             :2_3:Other "nigh:
********* / |>>/recurse                                                                                             :2_3:Other "nigh:
|>>/recurse> IN: Other "nightshades" Other "potato" UnDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "nightshades"
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                                :2_3:Other "nigh:
********** / slMultiTerm                                                                                           :2_3:Other "nigh:
*********** / someSL                                                                                              :2_3:Other "nigh:
someSL> IN: Other "nightshades" Other "potato" UnDee <…>
someSL> MATCH (COK): Other "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

*********** \ someSL has returned (["nightshades"],0)                                                             :3_3:Other "pota:
slMultiTerm> IN: Other "nightshades" Other "potato" UnDee <…>
slMultiTerm> MATCH (COK): Other "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

********** \ slMultiTerm has returned (["nightshades"],0)                                                          :3_3:Other "pota:
********** > |>>/base got ["nightshades"]                                                                          :3_3:Other "pota:
|>>/base> IN: Other "nightshades" Other "potato" UnDee <…>
|>>/base> MATCH (COK): Other "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********* \ |>>/base has returned (["nightshades"],0)                                                               :3_3:Other "pota:
********* > aNLK: current depth is 1                                                                                :3_3:Other "pota:
********* > |<|                                                                                                     :3_3:Other "pota:
********* > |<* starting                                                                                            :3_3:Other "pota:
********* / |<*/parent                                                                                              :3_3:Other "pota:
********** > |<*/recurse                                                                                           :3_3:Other "pota:
********** / |<*/base                                                                                              :3_3:Other "pota:
|<*/base> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected Other "potato"
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected Other "potato"
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "nightshades" Other "pota <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected Other "potato"
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

******** > /*= lookAhead failed, delegating to plain /+=                                                            :2_3:GoDeeper:
******** / aboveNextLineKeyword                                                                                      :2_3:Other "nigh:
********* / expectUnDeepers                                                                                         :2_3:Other "nigh:
********** > ignoring ["nightshades","potato"]                                                                      :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: Other "nightshades" Other "potato" UnDee <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :2_3:Other "nigh:
********* > aNLK: determined undp_count = 1                                                                         :2_3:Other "nigh:
********* > ->| trying to consume 1 GoDeepers                                                                       :2_3:Other "nigh:
********* / $*|                                                                                                     :2_3:Other "nigh:
$*|> IN: Other "nightshades" Other "potato" UnDee <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :2_3:Other "nigh:
aboveNextLineKeyword> IN: Other "nightshades" Other "potato" UnDee <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "nightshades"
aboveNextLineKeyword> expecting GoDeeper

******** > /*= lookAhead failed, delegating to plain /+=                                                             :2_3:Other "nigh:
******** / aboveNextLineKeyword                                                                                      :3_3:Other "pota:
********* / expectUnDeepers                                                                                         :3_3:Other "pota:
********** > ignoring ["potato"]                                                                                    :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :3_3:Other "pota:
********* > aNLK: determined undp_count = 1                                                                         :3_3:Other "pota:
********* > ->| trying to consume 1 GoDeepers                                                                       :3_3:Other "pota:
********* / $*|                                                                                                     :3_3:Other "pota:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :3_3:Other "pota:
aboveNextLineKeyword> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected Other "potato"
aboveNextLineKeyword> expecting GoDeeper

******** > /*= lookAhead failed, delegating to plain /+=                                                             :3_3:Other "pota:
******** / aboveNextLineKeyword                                                                                       :4_3:UnDeeper:
********* / expectUnDeepers                                                                                          :4_3:UnDeeper:
********** > ignoring []                                                                                            :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                           :4_3:UnDeeper:
********* > aNLK: determined undp_count = 1                                                                          :4_3:UnDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                        :4_3:UnDeeper:
********* / $*|                                                                                                      :4_3:UnDeeper:
$*|> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                  :4_3:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

******** > /*= lookAhead failed, delegating to plain /+=                                                              :4_3:UnDeeper:
pre part> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=9:
pre part> unexpected UnDeeper
pre part> expecting GoDeeper or Other text

$*|> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=9:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper or Other text

withPrePost> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=9:
withPrePost> unexpected UnDeeper
withPrePost> expecting GoDeeper or Other text

***** / withPreOnly                                                                                                  :2_2:GoDeeper:
****** / $*|                                                                                                        :2_2:GoDeeper:
******* / pre part                                                                                                 :2_2:GoDeeper:
******** / aboveNextLineKeyword                                                                                    :2_2:Other "yumm:
********* / expectUnDeepers                                                                                       :2_2:Other "yumm:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********** > ignoring ["yummy","GD","nightshades","potato"]                                                         :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: Other "yummy" GoDeeper Other "nightshade <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                        :2_2:Other "yumm:
********* > aNLK: determined undp_count = 1                                                                       :2_2:Other "yumm:
********* > ->| trying to consume 1 GoDeepers                                                                     :2_2:Other "yumm:
********* / $*|                                                                                                   :2_2:Other "yumm:
$*|> IN: Other "yummy" GoDeeper Other "nightshade <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                               :2_2:Other "yumm:
aboveNextLineKeyword> IN: Other "yummy" GoDeeper Other "nightshade <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected Other "yummy"
aboveNextLineKeyword> expecting GoDeeper

******** > /*= lookAhead failed, delegating to plain /+=                                                           :2_2:Other "yumm:
******** / aboveNextLineKeyword                                                                                     :2_3:GoDeeper:
********* / expectUnDeepers                                                                                        :2_3:GoDeeper:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "nightshades" Other "pota <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********** > ignoring ["GD","nightshades","potato"]                                                                 :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: GoDeeper Other "nightshades" Other "pota <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                         :2_3:GoDeeper:
********* > aNLK: determined undp_count = 1                                                                        :2_3:GoDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                      :2_3:GoDeeper:
********* / $*|                                                                                                    :2_3:GoDeeper:
$*|> IN: GoDeeper Other "nightshades" Other "pota <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                :2_3:GoDeeper:
********* > ->| success                                                                                             :2_3:Other "nigh:
********* / |>>/recurse                                                                                             :2_3:Other "nigh:
|>>/recurse> IN: Other "nightshades" Other "potato" UnDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "nightshades"
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                                :2_3:Other "nigh:
********** / slMultiTerm                                                                                           :2_3:Other "nigh:
*********** / someSL                                                                                              :2_3:Other "nigh:
someSL> IN: Other "nightshades" Other "potato" UnDee <…>
someSL> MATCH (COK): Other "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

*********** \ someSL has returned (["nightshades"],0)                                                             :3_3:Other "pota:
slMultiTerm> IN: Other "nightshades" Other "potato" UnDee <…>
slMultiTerm> MATCH (COK): Other "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

********** \ slMultiTerm has returned (["nightshades"],0)                                                          :3_3:Other "pota:
********** > |>>/base got ["nightshades"]                                                                          :3_3:Other "pota:
|>>/base> IN: Other "nightshades" Other "potato" UnDee <…>
|>>/base> MATCH (COK): Other "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********* \ |>>/base has returned (["nightshades"],0)                                                               :3_3:Other "pota:
********* > aNLK: current depth is 1                                                                                :3_3:Other "pota:
********* > |<|                                                                                                     :3_3:Other "pota:
********* > |<* starting                                                                                            :3_3:Other "pota:
********* / |<*/parent                                                                                              :3_3:Other "pota:
********** > |<*/recurse                                                                                           :3_3:Other "pota:
********** / |<*/base                                                                                              :3_3:Other "pota:
|<*/base> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected Other "potato"
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected Other "potato"
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "nightshades" Other "pota <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected Other "potato"
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

******** > /*= lookAhead failed, delegating to plain /+=                                                            :2_3:GoDeeper:
******** / aboveNextLineKeyword                                                                                      :2_3:Other "nigh:
********* / expectUnDeepers                                                                                         :2_3:Other "nigh:
********** > ignoring ["nightshades","potato"]                                                                      :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: Other "nightshades" Other "potato" UnDee <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :2_3:Other "nigh:
********* > aNLK: determined undp_count = 1                                                                         :2_3:Other "nigh:
********* > ->| trying to consume 1 GoDeepers                                                                       :2_3:Other "nigh:
********* / $*|                                                                                                     :2_3:Other "nigh:
$*|> IN: Other "nightshades" Other "potato" UnDee <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :2_3:Other "nigh:
aboveNextLineKeyword> IN: Other "nightshades" Other "potato" UnDee <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected Other "nightshades"
aboveNextLineKeyword> expecting GoDeeper

******** > /*= lookAhead failed, delegating to plain /+=                                                             :2_3:Other "nigh:
******** / aboveNextLineKeyword                                                                                      :3_3:Other "pota:
********* / expectUnDeepers                                                                                         :3_3:Other "pota:
********** > ignoring ["potato"]                                                                                    :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :3_3:Other "pota:
********* > aNLK: determined undp_count = 1                                                                         :3_3:Other "pota:
********* > ->| trying to consume 1 GoDeepers                                                                       :3_3:Other "pota:
********* / $*|                                                                                                     :3_3:Other "pota:
$*|> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :3_3:Other "pota:
aboveNextLineKeyword> IN: Other "potato" UnDeeper Or GoDeeper Othe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected Other "potato"
aboveNextLineKeyword> expecting GoDeeper

******** > /*= lookAhead failed, delegating to plain /+=                                                             :3_3:Other "pota:
******** / aboveNextLineKeyword                                                                                       :4_3:UnDeeper:
********* / expectUnDeepers                                                                                          :4_3:UnDeeper:
********** > ignoring []                                                                                            :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                           :4_3:UnDeeper:
********* > aNLK: determined undp_count = 1                                                                          :4_3:UnDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                        :4_3:UnDeeper:
********* / $*|                                                                                                      :4_3:UnDeeper:
$*|> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                  :4_3:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper Or GoDeeper Other "tomato" UnDe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

******** > /*= lookAhead failed, delegating to plain /+=                                                              :4_3:UnDeeper:
pre part> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=9:
pre part> unexpected UnDeeper
pre part> expecting GoDeeper or Other text

$*|> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=9:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper or Other text

withPreOnly> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=9:
withPreOnly> unexpected UnDeeper
withPreOnly> expecting GoDeeper or Other text

pBSR> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=15:
pBSR> Label (["yummy"]) followed by label (["nightshades"]) is not allowed

|>>/base> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
|>>/base> MATCH (CERR): GoDeeper
|>>/base> ERROR:
|>>/base> offset=15:
|>>/base> Label (["yummy"]) followed by label (["nightshades"]) is not allowed

|>| calling $>>> IN: GoDeeper Other "yummy" GoDeeper Other "n <…>
|>| calling $>>> MATCH (CERR): GoDeeper
|>| calling $>>> ERROR:
|>| calling $>>> offset=15:
|>| calling $>>> Label (["yummy"]) followed by label (["nightshades"]) is not allowed


PDPA
  inline-1-a FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA inline-1-a
       expected: [((["Food"],Means,Any (Just (Pre "yummy nightshades")) [Leaf (RPMT ["potato"]),Leaf (RPMT ["tomato"])]),[])]
       but parsing failed with error:
       1:3:
       Label (["yummy"]) followed by label (["nightshades"]) is not allowed
                   Food        ✳                      
       MEANS       yummy       nightshades            
                               potato                 
                   OR          tomato                 
       

  To rerun use: --match "/PDPA/inline-1-a/"

Randomized with seed 945696328

Finished in 0.0245 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

