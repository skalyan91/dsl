* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/inline-1-a/)

* Tokens
( "Food" ) MEANS
    ( "yummy"
        ( "nightshades" "potato" ) OR ( "tomato" )
    )
1_2:GoDeeper   > |<|
1_2:GoDeeper   > |<* starting
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / $*|                                                                                                                :1_2:GoDeeper:
*** / |>>/recurse                                                                                                      :1_2:GoDeeper:
**** / |>>/recurse                                                                                                     :1_2:Other "Food:
|>>/recurse> IN: "Food" ) MEANS ( "yummy" ( "nightshades" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=1:
|>>/recurse> unexpected "Food"
|>>/recurse> expecting (

**** \ !Unconsumed Error: |>>/recurse: Unexpected "Food" Expecting: (                                                  :1_2:Other "Food:
**** / |>>/base                                                                                                        :1_2:Other "Food:
***** / slMultiTerm                                                                                                   :1_2:Other "Food:
****** / someSL                                                                                                      :1_2:Other "Food:
someSL> IN: "Food" ) MEANS ( "yummy" ( "nightshades" <…>
someSL> MATCH (COK): "Food"
someSL> VALUE: ((["Food"],0),[])

****** \ someSL has returned (["Food"],0)                                                                             :2_2:UnDeeper:
slMultiTerm> IN: "Food" ) MEANS ( "yummy" ( "nightshades" <…>
slMultiTerm> MATCH (COK): "Food"
slMultiTerm> VALUE: ((["Food"],0),[])

***** \ slMultiTerm has returned (["Food"],0)                                                                          :2_2:UnDeeper:
***** > |>>/base got ["Food"]                                                                                          :2_2:UnDeeper:
|>>/base> IN: "Food" ) MEANS ( "yummy" ( "nightshades" <…>
|>>/base> MATCH (COK): "Food"
|>>/base> VALUE: ((["Food"],0),[])

**** \ |>>/base has returned (["Food"],0)                                                                               :2_2:UnDeeper:
|>>/recurse> IN: ( "Food" ) MEANS ( "yummy" ( "nightshade <…>
|>>/recurse> MATCH (COK): ( "Food"
|>>/recurse> VALUE: ((["Food"],1),[])

*** \ |>>/recurse has returned (["Food"],1)                                                                              :2_2:UnDeeper:
$*|> IN: ( "Food" ) MEANS ( "yummy" ( "nightshade <…>
$*|> MATCH (COK): ( "Food"
$*|> VALUE: ((["Food"],1),[])

** \ $*| has returned (["Food"],1)                                                                                        :2_2:UnDeeper:
** / |<*/parent                                                                                                           :2_2:UnDeeper:
*** > |<*/recurse                                                                                                        :2_2:UnDeeper:
*** > |<*/recurse matched 1 UnDeepers                                                                                  :2_2:GoDeeper:
|<*/parent> IN: ) MEANS ( "yummy" ( "nightshades" "potat <…>
|<*/parent> MATCH (COK): ) MEANS
|<*/parent> VALUE: ((Means,-1),[])

** \ |<*/parent has returned (Means,-1)                                                                                 :2_2:GoDeeper:
** / |>| calling $>>                                                                                                    :2_2:GoDeeper:
*** / |>>/recurse                                                                                                      :2_2:GoDeeper:
**** / |>>/recurse                                                                                                     :2_2:Other "yumm:
|>>/recurse> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected "yummy"
|>>/recurse> expecting (

**** \ !Unconsumed Error: |>>/recurse: Unexpected "yummy" Expecting: (                                                 :2_2:Other "yumm:
**** / |>>/base                                                                                                        :2_2:Other "yumm:
***** / pBSR                                                                                                          :2_2:Other "yumm:
****** / ppp inner                                                                                                   :2_2:Other "yumm:
******* / expression                                                                                                :2_2:Other "yumm:
******** / term p                                                                                                  :2_2:Other "yumm:
********* / term p/notLabelTerm                                                                                   :2_2:Other "yumm:
********** / term p/2:someIndentation expr p                                                                     :2_2:Other "yumm:
*********** / someIndentation                                                                                   :2_2:Other "yumm:
************ / myindented: consuming GoDeeper                                                                  :2_2:Other "yumm:
myindented: consuming GoDeeper> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected "yummy"
myindented: consuming GoDeeper> expecting (

************ \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "yummy" Expecting: (              :2_2:Other "yumm:
someIndentation> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected "yummy"
someIndentation> expecting (

*********** \ !Unconsumed Error: someIndentation: Unexpected "yummy" Expecting: (                               :2_2:Other "yumm:
term p/2:someIndentation expr p> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=5:
term p/2:someIndentation expr p> unexpected "yummy"
term p/2:someIndentation expr p> expecting (

********** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "yummy" Expecting: (                 :2_2:Other "yumm:
********** / term p/3:plain p                                                                                    :2_2:Other "yumm:
*********** / pRelPred                                                                                          :2_2:Other "yumm:
************ / slRelPred                                                                                       :2_2:Other "yumm:
************* / nested simpleHorn                                                                             :2_2:Other "yumm:
************** > |^|                                                                                         :2_2:Other "yumm:
************** / $*|                                                                                         :2_2:Other "yumm:
*************** / slMultiTerm                                                                               :2_2:Other "yumm:
**************** / someSL                                                                                  :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

**************** \ someSL has returned (["yummy","nightshades"],1)                                           :3_3:Other "pota:
slMultiTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slMultiTerm> MATCH (COK): "yummy" ( "nightshades"
slMultiTerm> VALUE: ((["yummy","nightshades"],1),[])

*************** \ slMultiTerm has returned (["yummy","nightshades"],1)                                        :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

************** \ $*| has returned (["yummy","nightshades"],1)                                                  :3_3:Other "pota:
************** / |^| deeps                                                                                     :3_3:Other "pota:
|^| deeps> IN: "potato" ) OR ( "tomato" ) )
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

************** \ |^| deeps has returned ([],0)                                                                 :3_3:Other "pota:
nested simpleHorn> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
nested simpleHorn> MATCH (CERR): "yummy" ( "nightshades"
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected "potato"
nested simpleHorn> expecting (, ), or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected "potato" Expecting: MEANS ( )                    :3_3:Other "pota:
************* / RPConstraint                                                                                  :2_2:Other "yumm:
************** / $*|                                                                                         :2_2:Other "yumm:
*************** / slMultiTerm                                                                               :2_2:Other "yumm:
**************** / someSL                                                                                  :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

**************** \ someSL has returned (["yummy","nightshades"],1)                                           :3_3:Other "pota:
slMultiTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slMultiTerm> MATCH (COK): "yummy" ( "nightshades"
slMultiTerm> VALUE: ((["yummy","nightshades"],1),[])

*************** \ slMultiTerm has returned (["yummy","nightshades"],1)                                        :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

************** \ $*| has returned (["yummy","nightshades"],1)                                                  :3_3:Other "pota:
************** / |>| calling $>>                                                                               :3_3:Other "pota:
*************** / |>>/recurse                                                                                 :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                            :3_3:Other "pota:
*************** / |>>/base                                                                                    :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected "potato"
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN ==       :3_3:Other "pota:
|>| calling $>>> IN: "potato" ) OR ( "tomato" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=8:
|>| calling $>>> unexpected "potato"
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == ( :3_3:Other "pota:
RPConstraint> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
RPConstraint> MATCH (CERR): "yummy" ( "nightshades"
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected "potato"
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == (       :3_3:Other "pota:
************* / RPBoolStructR                                                                                 :2_2:Other "yumm:
************** / $*|                                                                                         :2_2:Other "yumm:
*************** / slMultiTerm                                                                               :2_2:Other "yumm:
**************** / someSL                                                                                  :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

**************** \ someSL has returned (["yummy","nightshades"],1)                                           :3_3:Other "pota:
slMultiTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slMultiTerm> MATCH (COK): "yummy" ( "nightshades"
slMultiTerm> VALUE: ((["yummy","nightshades"],1),[])

*************** \ slMultiTerm has returned (["yummy","nightshades"],1)                                        :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

************** \ $*| has returned (["yummy","nightshades"],1)                                                  :3_3:Other "pota:
************** / |>| calling $>>                                                                               :3_3:Other "pota:
*************** / |>>/recurse                                                                                 :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                            :3_3:Other "pota:
*************** / |>>/base                                                                                    :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected "potato"
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN ==       :3_3:Other "pota:
|>| calling $>>> IN: "potato" ) OR ( "tomato" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=8:
|>| calling $>>> unexpected "potato"
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == ( :3_3:Other "pota:
RPBoolStructR> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
RPBoolStructR> MATCH (CERR): "yummy" ( "nightshades"
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected "potato"
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == (      :3_3:Other "pota:
************* / RPMT                                                                                          :2_2:Other "yumm:
************** / $*|                                                                                         :2_2:Other "yumm:
*************** / slAKA                                                                                     :2_2:Other "yumm:
**************** / $*|                                                                                     :2_2:Other "yumm:
***************** / slAKA base                                                                            :2_2:Other "yumm:
****************** / slMultiTerm                                                                         :2_2:Other "yumm:
******************* / someSL                                                                            :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

******************* \ someSL has returned (["yummy","nightshades"],1)                                     :3_3:Other "pota:
slMultiTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slMultiTerm> MATCH (COK): "yummy" ( "nightshades"
slMultiTerm> VALUE: ((["yummy","nightshades"],1),[])

****************** \ slMultiTerm has returned (["yummy","nightshades"],1)                                  :3_3:Other "pota:
slAKA base> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slAKA base> MATCH (COK): "yummy" ( "nightshades"
slAKA base> VALUE: ((["yummy","nightshades"],1),[])

***************** \ slAKA base has returned (["yummy","nightshades"],1)                                     :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

**************** \ $*| has returned (["yummy","nightshades"],1)                                              :3_3:Other "pota:
**************** / |>>/recurse                                                                               :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                          :3_3:Other "pota:
**************** / |>>/base                                                                                  :3_3:Other "pota:
***************** / slAKA optional akapart                                                                  :3_3:Other "pota:
****************** / |?| optional something                                                                :3_3:Other "pota:
******************* / |>>/recurse                                                                         :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                    :3_3:Other "pota:
******************* / |>>/base                                                                            :3_3:Other "pota:
******************** / PAKA/akapart                                                                      :3_3:Other "pota:
********************* / $>|                                                                             :3_3:Other "pota:
********************** / Aka Token                                                                     :3_3:Other "pota:
Aka Token> IN: "potato" ) OR ( "tomato" ) )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=8:
Aka Token> unexpected "potato"
Aka Token> expecting AKA

********************** \ !Unconsumed Error: Aka Token: Unexpected "potato" Expecting: AKA              :3_3:Other "pota:
$>|> IN: "potato" ) OR ( "tomato" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected "potato"
$>|> expecting AKA

********************* \ !Unconsumed Error: $>|: Unexpected "potato" Expecting: AKA                      :3_3:Other "pota:
PAKA/akapart> IN: "potato" ) OR ( "tomato" ) )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=8:
PAKA/akapart> unexpected "potato"
PAKA/akapart> expecting AKA

******************** \ !Unconsumed Error: PAKA/akapart: Unexpected "potato" Expecting: AKA               :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected "potato"
|>>/base> expecting AKA

******************* \ !Unconsumed Error: |>>/base: Unexpected "potato" Expecting: AKA                     :3_3:Other "pota:
|?| optional something> IN: "potato" ) OR ( "tomato" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                       :3_3:Other "pota:
slAKA optional akapart> IN: "potato" ) OR ( "tomato" ) )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************** \ slAKA optional akapart has returned (Nothing,0)                                         :3_3:Other "pota:
***************** > |>>/base got Nothing                                                                    :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                         :3_3:Other "pota:
**************** / |>>/recurse                                                                               :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                          :3_3:Other "pota:
**************** / |>>/base                                                                                  :3_3:Other "pota:
***************** / slAKA optional typically                                                                :3_3:Other "pota:
****************** / |?| optional something                                                                :3_3:Other "pota:
******************* / |>>/recurse                                                                         :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                    :3_3:Other "pota:
******************* / |>>/base                                                                            :3_3:Other "pota:
******************** / typically                                                                         :3_3:Other "pota:
********************* / $>|                                                                             :3_3:Other "pota:
$>|> IN: "potato" ) OR ( "tomato" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected "potato"
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected "potato" Expecting: TYPICALLY                :3_3:Other "pota:
typically> IN: "potato" ) OR ( "tomato" ) )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected "potato"
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected "potato" Expecting: TYPICALLY            :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected "potato"
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected "potato" Expecting: TYPICALLY               :3_3:Other "pota:
|?| optional something> IN: "potato" ) OR ( "tomato" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                       :3_3:Other "pota:
slAKA optional typically> IN: "potato" ) OR ( "tomato" ) )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                       :3_3:Other "pota:
***************** > |>>/base got Nothing                                                                    :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                         :3_3:Other "pota:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                            :3_3:Other "pota:
**************** > pAKA: entityalias = Nothing                                                               :3_3:Other "pota:
slAKA> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slAKA> MATCH (COK): "yummy" ( "nightshades"
slAKA> VALUE: ((["yummy","nightshades"],1),[])

*************** \ slAKA has returned (["yummy","nightshades"],1)                                              :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

************** \ $*| has returned (["yummy","nightshades"],1)                                                  :3_3:Other "pota:
RPMT> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
RPMT> MATCH (COK): "yummy" ( "nightshades"
RPMT> VALUE: ((RPMT ["yummy","nightshades"],1),[])

************* \ RPMT has returned (RPMT ["yummy","nightshades"],1)                                              :3_3:Other "pota:
slRelPred> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slRelPred> MATCH (COK): "yummy" ( "nightshades"
slRelPred> VALUE: ((RPMT ["yummy","nightshades"],1),[])

************ \ slRelPred has returned (RPMT ["yummy","nightshades"],1)                                           :3_3:Other "pota:
************ / undeepers                                                                                         :3_3:Other "pota:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                          :3_3:Other "pota:
undeepers> IN: "potato" ) OR ( "tomato" ) )
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=8:
undeepers> unexpected "potato"
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected "potato" Expecting: )                                    :3_3:Other "pota:
pRelPred> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
pRelPred> MATCH (CERR): "yummy" ( "nightshades"
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected "potato"
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected "potato" Expecting: AKA TYPICALLY ( )                         :3_3:Other "pota:
term p/3:plain p> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p/3:plain p> MATCH (CERR): "yummy" ( "nightshades"
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected "potato"
term p/3:plain p> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: term p/3:plain p: Unexpected "potato" Expecting: AKA TYPICALLY ( )                   :3_3:Other "pota:
term p/notLabelTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected "potato"
term p/notLabelTerm> expecting (, ), AKA, or TYPICALLY

********* \ !Unconsumed Error: term p/notLabelTerm: Unexpected "potato" Expecting: AKA TYPICALLY ( )              :2_2:Other "yumm:
term p> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected "potato"
term p> expecting (, ), AKA, or TYPICALLY

******** \ !Unconsumed Error: term p: Unexpected "potato" Expecting: AKA TYPICALLY ( )                             :2_2:Other "yumm:
expression> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected "potato"
expression> expecting expression

******* \ !Unconsumed Error: expression: Unexpected "potato" Expecting: expression                                  :2_2:Other "yumm:
ppp inner> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected "potato"
ppp inner> expecting expression

****** \ !Unconsumed Error: ppp inner: Unexpected "potato" Expecting: expression                                     :2_2:Other "yumm:
****** / withPrePost                                                                                                 :2_2:Other "yumm:
******* > |<* starting                                                                                              :2_2:Other "yumm:
******* / $*|                                                                                                       :2_2:Other "yumm:
******** / pre part                                                                                                :2_2:Other "yumm:
********* / aboveNextLineKeyword                                                                                   :2_3:GoDeeper:
********** / expectUnDeepers                                                                                      :2_3:GoDeeper:
*********** / pNumAsText                                                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                      :2_3:GoDeeper:
*********** > ignoring ["GD","nightshades","potato"]                                                               :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                       :2_3:GoDeeper:
********** > aNLK: determined undp_count = 1                                                                      :2_3:GoDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                    :2_3:GoDeeper:
********** / $*|                                                                                                  :2_3:GoDeeper:
$*|> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                              :2_3:GoDeeper:
********** > ->| success                                                                                           :2_3:Other "nigh:
********** / |>>/recurse                                                                                           :2_3:Other "nigh:
|>>/recurse> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "nightshades"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "nightshades" Expecting: (                                 :2_3:Other "nigh:
********** / |>>/base                                                                                              :2_3:Other "nigh:
*********** / slMultiTerm                                                                                         :2_3:Other "nigh:
************ / someSL                                                                                            :2_3:Other "nigh:
someSL> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
someSL> MATCH (COK): "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

************ \ someSL has returned (["nightshades"],0)                                                           :3_3:Other "pota:
slMultiTerm> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
slMultiTerm> MATCH (COK): "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

*********** \ slMultiTerm has returned (["nightshades"],0)                                                        :3_3:Other "pota:
*********** > |>>/base got ["nightshades"]                                                                        :3_3:Other "pota:
|>>/base> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/base> MATCH (COK): "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********** \ |>>/base has returned (["nightshades"],0)                                                             :3_3:Other "pota:
********** > aNLK: current depth is 1                                                                              :3_3:Other "pota:
********** > |<|                                                                                                   :3_3:Other "pota:
********** > |<* starting                                                                                          :3_3:Other "pota:
********** / |<*/parent                                                                                            :3_3:Other "pota:
*********** > |<*/recurse                                                                                         :3_3:Other "pota:
*********** / |<*/base                                                                                            :3_3:Other "pota:
|<*/base> IN: "potato" ) OR ( "tomato" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected "potato"
|<*/base> expecting AND, OR, or UNLESS

*********** \ !Unconsumed Error: |<*/base: Unexpected "potato" Expecting: OR AND UNLESS                           :3_3:Other "pota:
|<*/parent> IN: "potato" ) OR ( "tomato" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected "potato"
|<*/parent> expecting ), AND, OR, or UNLESS

********** \ !Unconsumed Error: |<*/parent: Unexpected "potato" Expecting: OR AND UNLESS )                         :3_3:Other "pota:
aboveNextLineKeyword> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
aboveNextLineKeyword> MATCH (CERR): ( "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (, ), AND, OR, or UNLESS

********* \ !Consumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: OR AND UNLESS ( )                 :3_3:Other "pota:
********* > /*= lookAhead failed, delegating to plain /+=                                                          :2_3:GoDeeper:
********* / aboveNextLineKeyword                                                                                    :2_3:Other "nigh:
********** / expectUnDeepers                                                                                       :2_3:Other "nigh:
*********** > ignoring ["nightshades","potato"]                                                                    :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :2_3:Other "nigh:
********** > aNLK: determined undp_count = 1                                                                       :2_3:Other "nigh:
********** > ->| trying to consume 1 GoDeepers                                                                     :2_3:Other "nigh:
********** / $*|                                                                                                   :2_3:Other "nigh:
$*|> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :2_3:Other "nigh:
aboveNextLineKeyword> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected "nightshades"
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "nightshades" Expecting: (                          :2_3:Other "nigh:
********* > /*= lookAhead failed, delegating to plain /+=                                                           :2_3:Other "nigh:
********* / aboveNextLineKeyword                                                                                    :3_3:Other "pota:
********** / expectUnDeepers                                                                                       :3_3:Other "pota:
*********** > ignoring ["potato"]                                                                                  :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: "potato" ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :3_3:Other "pota:
********** > aNLK: determined undp_count = 1                                                                       :3_3:Other "pota:
********** > ->| trying to consume 1 GoDeepers                                                                     :3_3:Other "pota:
********** / $*|                                                                                                   :3_3:Other "pota:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :3_3:Other "pota:
aboveNextLineKeyword> IN: "potato" ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: (                               :3_3:Other "pota:
********* > /*= lookAhead failed, delegating to plain /+=                                                           :3_3:Other "pota:
********* / aboveNextLineKeyword                                                                                     :4_3:UnDeeper:
********** / expectUnDeepers                                                                                        :4_3:UnDeeper:
*********** > ignoring []                                                                                          :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                         :4_3:UnDeeper:
********** > aNLK: determined undp_count = 1                                                                        :4_3:UnDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                      :4_3:UnDeeper:
********** / $*|                                                                                                    :4_3:UnDeeper:
$*|> IN: ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                                :4_3:UnDeeper:
aboveNextLineKeyword> IN: ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected ) Expecting: (                                       :4_3:UnDeeper:
********* > /*= lookAhead failed, delegating to plain /+=                                                            :4_3:UnDeeper:
pre part> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
pre part> MATCH (CERR): "yummy"
pre part> ERROR:
pre part> offset=9:
pre part> unexpected )
pre part> expecting ( or Other text

******** \ !Consumed Error: pre part: Unexpected ) Expecting: ( Other text                                          :2_3:GoDeeper:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (CERR): "yummy"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or Other text

******* \ !Consumed Error: $*|: Unexpected ) Expecting: ( Other text                                                 :2_3:GoDeeper:
withPrePost> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
withPrePost> MATCH (CERR): "yummy"
withPrePost> ERROR:
withPrePost> offset=9:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****** \ !Consumed Error: withPrePost: Unexpected ) Expecting: ( Other text                                           :2_3:GoDeeper:
****** / withPreOnly                                                                                                 :2_2:Other "yumm:
******* / $*|                                                                                                       :2_2:Other "yumm:
******** / pre part                                                                                                :2_2:Other "yumm:
********* / aboveNextLineKeyword                                                                                   :2_3:GoDeeper:
********** / expectUnDeepers                                                                                      :2_3:GoDeeper:
*********** / pNumAsText                                                                                         :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                      :2_3:GoDeeper:
*********** > ignoring ["GD","nightshades","potato"]                                                               :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                       :2_3:GoDeeper:
********** > aNLK: determined undp_count = 1                                                                      :2_3:GoDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                    :2_3:GoDeeper:
********** / $*|                                                                                                  :2_3:GoDeeper:
$*|> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                              :2_3:GoDeeper:
********** > ->| success                                                                                           :2_3:Other "nigh:
********** / |>>/recurse                                                                                           :2_3:Other "nigh:
|>>/recurse> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "nightshades"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "nightshades" Expecting: (                                 :2_3:Other "nigh:
********** / |>>/base                                                                                              :2_3:Other "nigh:
*********** / slMultiTerm                                                                                         :2_3:Other "nigh:
************ / someSL                                                                                            :2_3:Other "nigh:
someSL> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
someSL> MATCH (COK): "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

************ \ someSL has returned (["nightshades"],0)                                                           :3_3:Other "pota:
slMultiTerm> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
slMultiTerm> MATCH (COK): "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

*********** \ slMultiTerm has returned (["nightshades"],0)                                                        :3_3:Other "pota:
*********** > |>>/base got ["nightshades"]                                                                        :3_3:Other "pota:
|>>/base> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/base> MATCH (COK): "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********** \ |>>/base has returned (["nightshades"],0)                                                             :3_3:Other "pota:
********** > aNLK: current depth is 1                                                                              :3_3:Other "pota:
********** > |<|                                                                                                   :3_3:Other "pota:
********** > |<* starting                                                                                          :3_3:Other "pota:
********** / |<*/parent                                                                                            :3_3:Other "pota:
*********** > |<*/recurse                                                                                         :3_3:Other "pota:
*********** / |<*/base                                                                                            :3_3:Other "pota:
|<*/base> IN: "potato" ) OR ( "tomato" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected "potato"
|<*/base> expecting AND, OR, or UNLESS

*********** \ !Unconsumed Error: |<*/base: Unexpected "potato" Expecting: OR AND UNLESS                           :3_3:Other "pota:
|<*/parent> IN: "potato" ) OR ( "tomato" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected "potato"
|<*/parent> expecting ), AND, OR, or UNLESS

********** \ !Unconsumed Error: |<*/parent: Unexpected "potato" Expecting: OR AND UNLESS )                         :3_3:Other "pota:
aboveNextLineKeyword> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
aboveNextLineKeyword> MATCH (CERR): ( "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (, ), AND, OR, or UNLESS

********* \ !Consumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: OR AND UNLESS ( )                 :3_3:Other "pota:
********* > /*= lookAhead failed, delegating to plain /+=                                                          :2_3:GoDeeper:
********* / aboveNextLineKeyword                                                                                    :2_3:Other "nigh:
********** / expectUnDeepers                                                                                       :2_3:Other "nigh:
*********** > ignoring ["nightshades","potato"]                                                                    :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :2_3:Other "nigh:
********** > aNLK: determined undp_count = 1                                                                       :2_3:Other "nigh:
********** > ->| trying to consume 1 GoDeepers                                                                     :2_3:Other "nigh:
********** / $*|                                                                                                   :2_3:Other "nigh:
$*|> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :2_3:Other "nigh:
aboveNextLineKeyword> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected "nightshades"
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "nightshades" Expecting: (                          :2_3:Other "nigh:
********* > /*= lookAhead failed, delegating to plain /+=                                                           :2_3:Other "nigh:
********* / aboveNextLineKeyword                                                                                    :3_3:Other "pota:
********** / expectUnDeepers                                                                                       :3_3:Other "pota:
*********** > ignoring ["potato"]                                                                                  :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: "potato" ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                        :3_3:Other "pota:
********** > aNLK: determined undp_count = 1                                                                       :3_3:Other "pota:
********** > ->| trying to consume 1 GoDeepers                                                                     :3_3:Other "pota:
********** / $*|                                                                                                   :3_3:Other "pota:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                               :3_3:Other "pota:
aboveNextLineKeyword> IN: "potato" ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: (                               :3_3:Other "pota:
********* > /*= lookAhead failed, delegating to plain /+=                                                           :3_3:Other "pota:
********* / aboveNextLineKeyword                                                                                     :4_3:UnDeeper:
********** / expectUnDeepers                                                                                        :4_3:UnDeeper:
*********** > ignoring []                                                                                          :4_3:UnDeeper:
*********** > matched undeepers [UnDeeper]                                                                      :4_2:Or:
expectUnDeepers> IN: ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********** \ expectUnDeepers has returned 1                                                                         :4_3:UnDeeper:
********** > aNLK: determined undp_count = 1                                                                        :4_3:UnDeeper:
********** > ->| trying to consume 1 GoDeepers                                                                      :4_3:UnDeeper:
********** / $*|                                                                                                    :4_3:UnDeeper:
$*|> IN: ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********** \ $*| has returned ((),0)                                                                                :4_3:UnDeeper:
aboveNextLineKeyword> IN: ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

********* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected ) Expecting: (                                       :4_3:UnDeeper:
********* > /*= lookAhead failed, delegating to plain /+=                                                            :4_3:UnDeeper:
pre part> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
pre part> MATCH (CERR): "yummy"
pre part> ERROR:
pre part> offset=9:
pre part> unexpected )
pre part> expecting ( or Other text

******** \ !Consumed Error: pre part: Unexpected ) Expecting: ( Other text                                          :2_3:GoDeeper:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (CERR): "yummy"
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or Other text

******* \ !Consumed Error: $*|: Unexpected ) Expecting: ( Other text                                                 :2_3:GoDeeper:
withPreOnly> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
withPreOnly> MATCH (CERR): "yummy"
withPreOnly> ERROR:
withPreOnly> offset=9:
withPreOnly> unexpected )
withPreOnly> expecting ( or Other text

****** \ !Consumed Error: withPreOnly: Unexpected ) Expecting: ( Other text                                           :2_3:GoDeeper:
pBSR> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
pBSR> MATCH (CERR): "yummy"
pBSR> ERROR:
pBSR> offset=9:
pBSR> unexpected )
pBSR> expecting ( or Other text

***** \ !Consumed Error: pBSR: Unexpected ) Expecting: ( Other text                                                    :2_3:GoDeeper:
|>>/base> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
|>>/base> MATCH (CERR): "yummy"
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting ( or Other text

**** \ !Consumed Error: |>>/base: Unexpected ) Expecting: ( Other text                                                  :2_3:GoDeeper:
|>>/recurse> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
|>>/recurse> MATCH (CERR): ( "yummy"
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected )
|>>/recurse> expecting ( or Other text

*** \ !Consumed Error: |>>/recurse: Unexpected ) Expecting: ( Other text                                                 :2_3:GoDeeper:
*** / |>>/base                                                                                                         :2_2:GoDeeper:
**** / pBSR                                                                                                           :2_2:GoDeeper:
***** / ppp inner                                                                                                    :2_2:GoDeeper:
****** / expression                                                                                                 :2_2:GoDeeper:
******* / term p                                                                                                   :2_2:GoDeeper:
******** / term p/notLabelTerm                                                                                    :2_2:GoDeeper:
********* / term p/2:someIndentation expr p                                                                      :2_2:GoDeeper:
********** / someIndentation                                                                                    :2_2:GoDeeper:
*********** / myindented: consuming GoDeeper                                                                   :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********** \ myindented: consuming GoDeeper has returned GoDeeper                                              :2_2:Other "yumm:
*********** / manyIndentation/leaf?                                                                             :2_2:Other "yumm:
************ / expression                                                                                      :2_2:Other "yumm:
************* / term p                                                                                        :2_2:Other "yumm:
************** / term p/notLabelTerm                                                                         :2_2:Other "yumm:
*************** / term p/2:someIndentation expr p                                                           :2_2:Other "yumm:
**************** / someIndentation                                                                         :2_2:Other "yumm:
***************** / myindented: consuming GoDeeper                                                        :2_2:Other "yumm:
myindented: consuming GoDeeper> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected "yummy"
myindented: consuming GoDeeper> expecting (

***************** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "yummy" Expecting: (    :2_2:Other "yumm:
someIndentation> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected "yummy"
someIndentation> expecting (

**************** \ !Unconsumed Error: someIndentation: Unexpected "yummy" Expecting: (                     :2_2:Other "yumm:
term p/2:someIndentation expr p> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=5:
term p/2:someIndentation expr p> unexpected "yummy"
term p/2:someIndentation expr p> expecting (

*************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "yummy" Expecting: (       :2_2:Other "yumm:
*************** / term p/3:plain p                                                                          :2_2:Other "yumm:
**************** / pRelPred                                                                                :2_2:Other "yumm:
***************** / slRelPred                                                                             :2_2:Other "yumm:
****************** / nested simpleHorn                                                                   :2_2:Other "yumm:
******************* > |^|                                                                               :2_2:Other "yumm:
******************* / $*|                                                                               :2_2:Other "yumm:
******************** / slMultiTerm                                                                     :2_2:Other "yumm:
********************* / someSL                                                                        :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

********************* \ someSL has returned (["yummy","nightshades"],1)                                 :3_3:Other "pota:
slMultiTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slMultiTerm> MATCH (COK): "yummy" ( "nightshades"
slMultiTerm> VALUE: ((["yummy","nightshades"],1),[])

******************** \ slMultiTerm has returned (["yummy","nightshades"],1)                              :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

******************* \ $*| has returned (["yummy","nightshades"],1)                                        :3_3:Other "pota:
******************* / |^| deeps                                                                           :3_3:Other "pota:
|^| deeps> IN: "potato" ) OR ( "tomato" ) )
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

******************* \ |^| deeps has returned ([],0)                                                       :3_3:Other "pota:
nested simpleHorn> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
nested simpleHorn> MATCH (CERR): "yummy" ( "nightshades"
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected "potato"
nested simpleHorn> expecting (, ), or MEANS

****************** \ !Consumed Error: nested simpleHorn: Unexpected "potato" Expecting: MEANS ( )          :3_3:Other "pota:
****************** / RPConstraint                                                                        :2_2:Other "yumm:
******************* / $*|                                                                               :2_2:Other "yumm:
******************** / slMultiTerm                                                                     :2_2:Other "yumm:
********************* / someSL                                                                        :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

********************* \ someSL has returned (["yummy","nightshades"],1)                                 :3_3:Other "pota:
slMultiTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slMultiTerm> MATCH (COK): "yummy" ( "nightshades"
slMultiTerm> VALUE: ((["yummy","nightshades"],1),[])

******************** \ slMultiTerm has returned (["yummy","nightshades"],1)                              :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

******************* \ $*| has returned (["yummy","nightshades"],1)                                        :3_3:Other "pota:
******************* / |>| calling $>>                                                                     :3_3:Other "pota:
******************** / |>>/recurse                                                                       :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                  :3_3:Other "pota:
******************** / |>>/base                                                                          :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected "potato"
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************** \ !Unconsumed Error: |>>/base: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == :3_3:Other "pota:
|>| calling $>>> IN: "potato" ) OR ( "tomato" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=8:
|>| calling $>>> unexpected "potato"
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************* \ !Unconsumed Error: |>| calling $>>: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == ( :3_3:Other "pota:
RPConstraint> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
RPConstraint> MATCH (CERR): "yummy" ( "nightshades"
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected "potato"
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************** \ !Consumed Error: RPConstraint: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == ( :3_3:Other "pota:
****************** / RPBoolStructR                                                                       :2_2:Other "yumm:
******************* / $*|                                                                               :2_2:Other "yumm:
******************** / slMultiTerm                                                                     :2_2:Other "yumm:
********************* / someSL                                                                        :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

********************* \ someSL has returned (["yummy","nightshades"],1)                                 :3_3:Other "pota:
slMultiTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slMultiTerm> MATCH (COK): "yummy" ( "nightshades"
slMultiTerm> VALUE: ((["yummy","nightshades"],1),[])

******************** \ slMultiTerm has returned (["yummy","nightshades"],1)                              :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

******************* \ $*| has returned (["yummy","nightshades"],1)                                        :3_3:Other "pota:
******************* / |>| calling $>>                                                                     :3_3:Other "pota:
******************** / |>>/recurse                                                                       :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                  :3_3:Other "pota:
******************** / |>>/base                                                                          :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected "potato"
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************** \ !Unconsumed Error: |>>/base: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == :3_3:Other "pota:
|>| calling $>>> IN: "potato" ) OR ( "tomato" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=8:
|>| calling $>>> unexpected "potato"
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************* \ !Unconsumed Error: |>| calling $>>: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == ( :3_3:Other "pota:
RPBoolStructR> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
RPBoolStructR> MATCH (CERR): "yummy" ( "nightshades"
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected "potato"
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************** \ !Consumed Error: RPBoolStructR: Unexpected "potato" Expecting: IS < <= > >= IN NOT IN == ( :3_3:Other "pota:
****************** / RPMT                                                                                :2_2:Other "yumm:
******************* / $*|                                                                               :2_2:Other "yumm:
******************** / slAKA                                                                           :2_2:Other "yumm:
********************* / $*|                                                                           :2_2:Other "yumm:
********************** / slAKA base                                                                  :2_2:Other "yumm:
*********************** / slMultiTerm                                                               :2_2:Other "yumm:
************************ / someSL                                                                  :2_2:Other "yumm:
someSL> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someSL> MATCH (COK): "yummy" ( "nightshades"
someSL> VALUE: ((["yummy","nightshades"],1),[])

************************ \ someSL has returned (["yummy","nightshades"],1)                           :3_3:Other "pota:
slMultiTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slMultiTerm> MATCH (COK): "yummy" ( "nightshades"
slMultiTerm> VALUE: ((["yummy","nightshades"],1),[])

*********************** \ slMultiTerm has returned (["yummy","nightshades"],1)                        :3_3:Other "pota:
slAKA base> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slAKA base> MATCH (COK): "yummy" ( "nightshades"
slAKA base> VALUE: ((["yummy","nightshades"],1),[])

********************** \ slAKA base has returned (["yummy","nightshades"],1)                           :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

********************* \ $*| has returned (["yummy","nightshades"],1)                                    :3_3:Other "pota:
********************* / |>>/recurse                                                                     :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                :3_3:Other "pota:
********************* / |>>/base                                                                        :3_3:Other "pota:
********************** / slAKA optional akapart                                                        :3_3:Other "pota:
*********************** / |?| optional something                                                      :3_3:Other "pota:
************************ / |>>/recurse                                                               :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (          :3_3:Other "pota:
************************ / |>>/base                                                                  :3_3:Other "pota:
************************* / PAKA/akapart                                                            :3_3:Other "pota:
************************** / $>|                                                                   :3_3:Other "pota:
*************************** / Aka Token                                                           :3_3:Other "pota:
Aka Token> IN: "potato" ) OR ( "tomato" ) )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=8:
Aka Token> unexpected "potato"
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected "potato" Expecting: AKA    :3_3:Other "pota:
$>|> IN: "potato" ) OR ( "tomato" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected "potato"
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected "potato" Expecting: AKA            :3_3:Other "pota:
PAKA/akapart> IN: "potato" ) OR ( "tomato" ) )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=8:
PAKA/akapart> unexpected "potato"
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected "potato" Expecting: AKA     :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected "potato"
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected "potato" Expecting: AKA           :3_3:Other "pota:
|?| optional something> IN: "potato" ) OR ( "tomato" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                             :3_3:Other "pota:
slAKA optional akapart> IN: "potato" ) OR ( "tomato" ) )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                               :3_3:Other "pota:
********************** > |>>/base got Nothing                                                          :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                               :3_3:Other "pota:
********************* / |>>/recurse                                                                     :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (                :3_3:Other "pota:
********************* / |>>/base                                                                        :3_3:Other "pota:
********************** / slAKA optional typically                                                      :3_3:Other "pota:
*********************** / |?| optional something                                                      :3_3:Other "pota:
************************ / |>>/recurse                                                               :3_3:Other "pota:
|>>/recurse> IN: "potato" ) OR ( "tomato" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected "potato"
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected "potato" Expecting: (          :3_3:Other "pota:
************************ / |>>/base                                                                  :3_3:Other "pota:
************************* / typically                                                               :3_3:Other "pota:
************************** / $>|                                                                   :3_3:Other "pota:
$>|> IN: "potato" ) OR ( "tomato" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected "potato"
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected "potato" Expecting: TYPICALLY      :3_3:Other "pota:
typically> IN: "potato" ) OR ( "tomato" ) )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected "potato"
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected "potato" Expecting: TYPICALLY  :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected "potato"
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected "potato" Expecting: TYPICALLY     :3_3:Other "pota:
|?| optional something> IN: "potato" ) OR ( "tomato" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                             :3_3:Other "pota:
slAKA optional typically> IN: "potato" ) OR ( "tomato" ) )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                             :3_3:Other "pota:
********************** > |>>/base got Nothing                                                          :3_3:Other "pota:
|>>/base> IN: "potato" ) OR ( "tomato" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                               :3_3:Other "pota:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                  :3_3:Other "pota:
********************* > pAKA: entityalias = Nothing                                                     :3_3:Other "pota:
slAKA> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slAKA> MATCH (COK): "yummy" ( "nightshades"
slAKA> VALUE: ((["yummy","nightshades"],1),[])

******************** \ slAKA has returned (["yummy","nightshades"],1)                                    :3_3:Other "pota:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (COK): "yummy" ( "nightshades"
$*|> VALUE: ((["yummy","nightshades"],1),[])

******************* \ $*| has returned (["yummy","nightshades"],1)                                        :3_3:Other "pota:
RPMT> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
RPMT> MATCH (COK): "yummy" ( "nightshades"
RPMT> VALUE: ((RPMT ["yummy","nightshades"],1),[])

****************** \ RPMT has returned (RPMT ["yummy","nightshades"],1)                                    :3_3:Other "pota:
slRelPred> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
slRelPred> MATCH (COK): "yummy" ( "nightshades"
slRelPred> VALUE: ((RPMT ["yummy","nightshades"],1),[])

***************** \ slRelPred has returned (RPMT ["yummy","nightshades"],1)                                 :3_3:Other "pota:
***************** / undeepers                                                                               :3_3:Other "pota:
****************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                :3_3:Other "pota:
undeepers> IN: "potato" ) OR ( "tomato" ) )
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=8:
undeepers> unexpected "potato"
undeepers> expecting )

***************** \ !Unconsumed Error: undeepers: Unexpected "potato" Expecting: )                          :3_3:Other "pota:
pRelPred> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
pRelPred> MATCH (CERR): "yummy" ( "nightshades"
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected "potato"
pRelPred> expecting (, ), AKA, or TYPICALLY

**************** \ !Consumed Error: pRelPred: Unexpected "potato" Expecting: AKA TYPICALLY ( )               :3_3:Other "pota:
term p/3:plain p> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p/3:plain p> MATCH (CERR): "yummy" ( "nightshades"
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected "potato"
term p/3:plain p> expecting (, ), AKA, or TYPICALLY

*************** \ !Consumed Error: term p/3:plain p: Unexpected "potato" Expecting: AKA TYPICALLY ( )         :3_3:Other "pota:
term p/notLabelTerm> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected "potato"
term p/notLabelTerm> expecting (, ), AKA, or TYPICALLY

************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected "potato" Expecting: AKA TYPICALLY ( )    :2_2:Other "yumm:
term p> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected "potato"
term p> expecting (, ), AKA, or TYPICALLY

************* \ !Unconsumed Error: term p: Unexpected "potato" Expecting: AKA TYPICALLY ( )                   :2_2:Other "yumm:
expression> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected "potato"
expression> expecting expression

************ \ !Unconsumed Error: expression: Unexpected "potato" Expecting: expression                        :2_2:Other "yumm:
manyIndentation/leaf?> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=8:
manyIndentation/leaf?> unexpected "potato"
manyIndentation/leaf?> expecting expression

*********** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected "potato" Expecting: expression               :2_2:Other "yumm:
*********** / manyIndentation/deeper; calling someIndentation                                                   :2_2:Other "yumm:
************ / someIndentation                                                                                 :2_2:Other "yumm:
************* / myindented: consuming GoDeeper                                                                :2_2:Other "yumm:
myindented: consuming GoDeeper> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected "yummy"
myindented: consuming GoDeeper> expecting (

************* \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "yummy" Expecting: (            :2_2:Other "yumm:
someIndentation> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected "yummy"
someIndentation> expecting (

************ \ !Unconsumed Error: someIndentation: Unexpected "yummy" Expecting: (                             :2_2:Other "yumm:
manyIndentation/deeper; calling someIndentation> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=5:
manyIndentation/deeper; calling someIndentation> unexpected "yummy"
manyIndentation/deeper; calling someIndentation> expecting (

*********** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "yummy" Expecting: ( :2_2:Other "yumm:
someIndentation> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected "potato"
someIndentation> expecting expression

********** \ !Consumed Error: someIndentation: Unexpected "potato" Expecting: expression                         :2_2:Other "yumm:
term p/2:someIndentation expr p> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected "potato"
term p/2:someIndentation expr p> expecting expression

********* \ !Consumed Error: term p/2:someIndentation expr p: Unexpected "potato" Expecting: expression           :2_2:Other "yumm:
********* / term p/3:plain p                                                                                     :2_2:GoDeeper:
********** / pRelPred                                                                                           :2_2:GoDeeper:
*********** / slRelPred                                                                                        :2_2:GoDeeper:
************ / nested simpleHorn                                                                              :2_2:GoDeeper:
************* > |^|                                                                                          :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / slMultiTerm                                                                                :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
slMultiTerm> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number               :2_2:GoDeeper:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
nested simpleHorn> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number             :2_2:GoDeeper:
************ / RPConstraint                                                                                   :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / slMultiTerm                                                                                :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
slMultiTerm> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number               :2_2:GoDeeper:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
RPConstraint> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
************ / RPBoolStructR                                                                                  :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / slMultiTerm                                                                                :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
slMultiTerm> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number               :2_2:GoDeeper:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
RPBoolStructR> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                 :2_2:GoDeeper:
************ / RPMT                                                                                           :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / slAKA                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA base                                                                             :2_2:GoDeeper:
***************** / slMultiTerm                                                                          :2_2:GoDeeper:
****************** / someSL                                                                             :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
pNumAsText> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                    :2_2:GoDeeper:
someSL> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected (
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number            :2_2:GoDeeper:
slMultiTerm> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number         :2_2:GoDeeper:
slAKA base> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected (
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number            :2_2:GoDeeper:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :2_2:GoDeeper:
slAKA> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected (
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                     :2_2:GoDeeper:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
RPMT> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected (
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                          :2_2:GoDeeper:
slRelPred> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected (
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
pRelPred> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected (
pRelPred> expecting other text or number

********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                          :2_2:GoDeeper:
term p/3:plain p> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

********* \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
term p/notLabelTerm> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected "potato"
term p/notLabelTerm> expecting expression

******** \ !Unconsumed Error: term p/notLabelTerm: Unexpected "potato" Expecting: expression                      :2_2:GoDeeper:
term p> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=8:
term p> unexpected "potato"
term p> expecting expression

******* \ !Unconsumed Error: term p: Unexpected "potato" Expecting: expression                                     :2_2:GoDeeper:
expression> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected "potato"
expression> expecting expression

****** \ !Unconsumed Error: expression: Unexpected "potato" Expecting: expression                                   :2_2:GoDeeper:
ppp inner> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected "potato"
ppp inner> expecting expression

***** \ !Unconsumed Error: ppp inner: Unexpected "potato" Expecting: expression                                      :2_2:GoDeeper:
***** / withPrePost                                                                                                  :2_2:GoDeeper:
****** > |<* starting                                                                                               :2_2:GoDeeper:
****** / $*|                                                                                                        :2_2:GoDeeper:
******* / pre part                                                                                                 :2_2:GoDeeper:
******** / aboveNextLineKeyword                                                                                    :2_2:Other "yumm:
********* / expectUnDeepers                                                                                       :2_2:Other "yumm:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                        :2_3:GoDeeper:
********** > ignoring ["yummy","GD","nightshades","potato"]                                                         :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                        :2_2:Other "yumm:
********* > aNLK: determined undp_count = 1                                                                       :2_2:Other "yumm:
********* > ->| trying to consume 1 GoDeepers                                                                     :2_2:Other "yumm:
********* / $*|                                                                                                   :2_2:Other "yumm:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                               :2_2:Other "yumm:
aboveNextLineKeyword> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected "yummy"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "yummy" Expecting: (                                :2_2:Other "yumm:
******** > /*= lookAhead failed, delegating to plain /+=                                                           :2_2:Other "yumm:
******** / aboveNextLineKeyword                                                                                     :2_3:GoDeeper:
********* / expectUnDeepers                                                                                        :2_3:GoDeeper:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                        :2_3:GoDeeper:
********** > ignoring ["GD","nightshades","potato"]                                                                 :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                         :2_3:GoDeeper:
********* > aNLK: determined undp_count = 1                                                                        :2_3:GoDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                      :2_3:GoDeeper:
********* / $*|                                                                                                    :2_3:GoDeeper:
$*|> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                :2_3:GoDeeper:
********* > ->| success                                                                                             :2_3:Other "nigh:
********* / |>>/recurse                                                                                             :2_3:Other "nigh:
|>>/recurse> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "nightshades"
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected "nightshades" Expecting: (                                   :2_3:Other "nigh:
********* / |>>/base                                                                                                :2_3:Other "nigh:
********** / slMultiTerm                                                                                           :2_3:Other "nigh:
*********** / someSL                                                                                              :2_3:Other "nigh:
someSL> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
someSL> MATCH (COK): "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

*********** \ someSL has returned (["nightshades"],0)                                                             :3_3:Other "pota:
slMultiTerm> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
slMultiTerm> MATCH (COK): "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

********** \ slMultiTerm has returned (["nightshades"],0)                                                          :3_3:Other "pota:
********** > |>>/base got ["nightshades"]                                                                          :3_3:Other "pota:
|>>/base> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/base> MATCH (COK): "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********* \ |>>/base has returned (["nightshades"],0)                                                               :3_3:Other "pota:
********* > aNLK: current depth is 1                                                                                :3_3:Other "pota:
********* > |<|                                                                                                     :3_3:Other "pota:
********* > |<* starting                                                                                            :3_3:Other "pota:
********* / |<*/parent                                                                                              :3_3:Other "pota:
********** > |<*/recurse                                                                                           :3_3:Other "pota:
********** / |<*/base                                                                                              :3_3:Other "pota:
|<*/base> IN: "potato" ) OR ( "tomato" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected "potato"
|<*/base> expecting AND, OR, or UNLESS

********** \ !Unconsumed Error: |<*/base: Unexpected "potato" Expecting: OR AND UNLESS                             :3_3:Other "pota:
|<*/parent> IN: "potato" ) OR ( "tomato" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected "potato"
|<*/parent> expecting ), AND, OR, or UNLESS

********* \ !Unconsumed Error: |<*/parent: Unexpected "potato" Expecting: OR AND UNLESS )                           :3_3:Other "pota:
aboveNextLineKeyword> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
aboveNextLineKeyword> MATCH (CERR): ( "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (, ), AND, OR, or UNLESS

******** \ !Consumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: OR AND UNLESS ( )                   :3_3:Other "pota:
******** > /*= lookAhead failed, delegating to plain /+=                                                            :2_3:GoDeeper:
******** / aboveNextLineKeyword                                                                                      :2_3:Other "nigh:
********* / expectUnDeepers                                                                                         :2_3:Other "nigh:
********** > ignoring ["nightshades","potato"]                                                                      :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :2_3:Other "nigh:
********* > aNLK: determined undp_count = 1                                                                         :2_3:Other "nigh:
********* > ->| trying to consume 1 GoDeepers                                                                       :2_3:Other "nigh:
********* / $*|                                                                                                     :2_3:Other "nigh:
$*|> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :2_3:Other "nigh:
aboveNextLineKeyword> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected "nightshades"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "nightshades" Expecting: (                            :2_3:Other "nigh:
******** > /*= lookAhead failed, delegating to plain /+=                                                             :2_3:Other "nigh:
******** / aboveNextLineKeyword                                                                                      :3_3:Other "pota:
********* / expectUnDeepers                                                                                         :3_3:Other "pota:
********** > ignoring ["potato"]                                                                                    :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "potato" ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :3_3:Other "pota:
********* > aNLK: determined undp_count = 1                                                                         :3_3:Other "pota:
********* > ->| trying to consume 1 GoDeepers                                                                       :3_3:Other "pota:
********* / $*|                                                                                                     :3_3:Other "pota:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :3_3:Other "pota:
aboveNextLineKeyword> IN: "potato" ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: (                                 :3_3:Other "pota:
******** > /*= lookAhead failed, delegating to plain /+=                                                             :3_3:Other "pota:
******** / aboveNextLineKeyword                                                                                       :4_3:UnDeeper:
********* / expectUnDeepers                                                                                          :4_3:UnDeeper:
********** > ignoring []                                                                                            :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                           :4_3:UnDeeper:
********* > aNLK: determined undp_count = 1                                                                          :4_3:UnDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                        :4_3:UnDeeper:
********* / $*|                                                                                                      :4_3:UnDeeper:
$*|> IN: ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                  :4_3:UnDeeper:
aboveNextLineKeyword> IN: ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected ) Expecting: (                                         :4_3:UnDeeper:
******** > /*= lookAhead failed, delegating to plain /+=                                                              :4_3:UnDeeper:
pre part> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=9:
pre part> unexpected )
pre part> expecting ( or Other text

******* \ !Consumed Error: pre part: Unexpected ) Expecting: ( Other text                                           :2_2:Other "yumm:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or Other text

****** \ !Consumed Error: $*|: Unexpected ) Expecting: ( Other text                                                  :2_2:Other "yumm:
withPrePost> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=9:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

***** \ !Consumed Error: withPrePost: Unexpected ) Expecting: ( Other text                                            :2_2:Other "yumm:
***** / withPreOnly                                                                                                  :2_2:GoDeeper:
****** / $*|                                                                                                        :2_2:GoDeeper:
******* / pre part                                                                                                 :2_2:GoDeeper:
******** / aboveNextLineKeyword                                                                                    :2_2:Other "yumm:
********* / expectUnDeepers                                                                                       :2_2:Other "yumm:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                        :2_3:GoDeeper:
********** > ignoring ["yummy","GD","nightshades","potato"]                                                         :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                        :2_2:Other "yumm:
********* > aNLK: determined undp_count = 1                                                                       :2_2:Other "yumm:
********* > ->| trying to consume 1 GoDeepers                                                                     :2_2:Other "yumm:
********* / $*|                                                                                                   :2_2:Other "yumm:
$*|> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                               :2_2:Other "yumm:
aboveNextLineKeyword> IN: "yummy" ( "nightshades" "potato" ) OR (  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected "yummy"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "yummy" Expecting: (                                :2_2:Other "yumm:
******** > /*= lookAhead failed, delegating to plain /+=                                                           :2_2:Other "yumm:
******** / aboveNextLineKeyword                                                                                     :2_3:GoDeeper:
********* / expectUnDeepers                                                                                        :2_3:GoDeeper:
********** / pNumAsText                                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                        :2_3:GoDeeper:
********** > ignoring ["GD","nightshades","potato"]                                                                 :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                         :2_3:GoDeeper:
********* > aNLK: determined undp_count = 1                                                                        :2_3:GoDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                      :2_3:GoDeeper:
********* / $*|                                                                                                    :2_3:GoDeeper:
$*|> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                :2_3:GoDeeper:
********* > ->| success                                                                                             :2_3:Other "nigh:
********* / |>>/recurse                                                                                             :2_3:Other "nigh:
|>>/recurse> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "nightshades"
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected "nightshades" Expecting: (                                   :2_3:Other "nigh:
********* / |>>/base                                                                                                :2_3:Other "nigh:
********** / slMultiTerm                                                                                           :2_3:Other "nigh:
*********** / someSL                                                                                              :2_3:Other "nigh:
someSL> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
someSL> MATCH (COK): "nightshades"
someSL> VALUE: ((["nightshades"],0),[])

*********** \ someSL has returned (["nightshades"],0)                                                             :3_3:Other "pota:
slMultiTerm> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
slMultiTerm> MATCH (COK): "nightshades"
slMultiTerm> VALUE: ((["nightshades"],0),[])

********** \ slMultiTerm has returned (["nightshades"],0)                                                          :3_3:Other "pota:
********** > |>>/base got ["nightshades"]                                                                          :3_3:Other "pota:
|>>/base> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
|>>/base> MATCH (COK): "nightshades"
|>>/base> VALUE: ((["nightshades"],0),[])

********* \ |>>/base has returned (["nightshades"],0)                                                               :3_3:Other "pota:
********* > aNLK: current depth is 1                                                                                :3_3:Other "pota:
********* > |<|                                                                                                     :3_3:Other "pota:
********* > |<* starting                                                                                            :3_3:Other "pota:
********* / |<*/parent                                                                                              :3_3:Other "pota:
********** > |<*/recurse                                                                                           :3_3:Other "pota:
********** / |<*/base                                                                                              :3_3:Other "pota:
|<*/base> IN: "potato" ) OR ( "tomato" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected "potato"
|<*/base> expecting AND, OR, or UNLESS

********** \ !Unconsumed Error: |<*/base: Unexpected "potato" Expecting: OR AND UNLESS                             :3_3:Other "pota:
|<*/parent> IN: "potato" ) OR ( "tomato" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected "potato"
|<*/parent> expecting ), AND, OR, or UNLESS

********* \ !Unconsumed Error: |<*/parent: Unexpected "potato" Expecting: OR AND UNLESS )                           :3_3:Other "pota:
aboveNextLineKeyword> IN: ( "nightshades" "potato" ) OR ( "tomato" <…>
aboveNextLineKeyword> MATCH (CERR): ( "nightshades"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (, ), AND, OR, or UNLESS

******** \ !Consumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: OR AND UNLESS ( )                   :3_3:Other "pota:
******** > /*= lookAhead failed, delegating to plain /+=                                                            :2_3:GoDeeper:
******** / aboveNextLineKeyword                                                                                      :2_3:Other "nigh:
********* / expectUnDeepers                                                                                         :2_3:Other "nigh:
********** > ignoring ["nightshades","potato"]                                                                      :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :2_3:Other "nigh:
********* > aNLK: determined undp_count = 1                                                                         :2_3:Other "nigh:
********* > ->| trying to consume 1 GoDeepers                                                                       :2_3:Other "nigh:
********* / $*|                                                                                                     :2_3:Other "nigh:
$*|> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :2_3:Other "nigh:
aboveNextLineKeyword> IN: "nightshades" "potato" ) OR ( "tomato" ) <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=7:
aboveNextLineKeyword> unexpected "nightshades"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "nightshades" Expecting: (                            :2_3:Other "nigh:
******** > /*= lookAhead failed, delegating to plain /+=                                                             :2_3:Other "nigh:
******** / aboveNextLineKeyword                                                                                      :3_3:Other "pota:
********* / expectUnDeepers                                                                                         :3_3:Other "pota:
********** > ignoring ["potato"]                                                                                    :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: "potato" ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                          :3_3:Other "pota:
********* > aNLK: determined undp_count = 1                                                                         :3_3:Other "pota:
********* > ->| trying to consume 1 GoDeepers                                                                       :3_3:Other "pota:
********* / $*|                                                                                                     :3_3:Other "pota:
$*|> IN: "potato" ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                 :3_3:Other "pota:
aboveNextLineKeyword> IN: "potato" ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=8:
aboveNextLineKeyword> unexpected "potato"
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "potato" Expecting: (                                 :3_3:Other "pota:
******** > /*= lookAhead failed, delegating to plain /+=                                                             :3_3:Other "pota:
******** / aboveNextLineKeyword                                                                                       :4_3:UnDeeper:
********* / expectUnDeepers                                                                                          :4_3:UnDeeper:
********** > ignoring []                                                                                            :4_3:UnDeeper:
********** > matched undeepers [UnDeeper]                                                                        :4_2:Or:
expectUnDeepers> IN: ) OR ( "tomato" ) )
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (1,[])

********* \ expectUnDeepers has returned 1                                                                           :4_3:UnDeeper:
********* > aNLK: determined undp_count = 1                                                                          :4_3:UnDeeper:
********* > ->| trying to consume 1 GoDeepers                                                                        :4_3:UnDeeper:
********* / $*|                                                                                                      :4_3:UnDeeper:
$*|> IN: ) OR ( "tomato" ) )
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

********* \ $*| has returned ((),0)                                                                                  :4_3:UnDeeper:
aboveNextLineKeyword> IN: ) OR ( "tomato" ) )
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=9:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

******** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected ) Expecting: (                                         :4_3:UnDeeper:
******** > /*= lookAhead failed, delegating to plain /+=                                                              :4_3:UnDeeper:
pre part> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=9:
pre part> unexpected )
pre part> expecting ( or Other text

******* \ !Consumed Error: pre part: Unexpected ) Expecting: ( Other text                                           :2_2:Other "yumm:
$*|> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=9:
$*|> unexpected )
$*|> expecting ( or Other text

****** \ !Consumed Error: $*|: Unexpected ) Expecting: ( Other text                                                  :2_2:Other "yumm:
withPreOnly> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
withPreOnly> MATCH (CERR): (
withPreOnly> ERROR:
withPreOnly> offset=9:
withPreOnly> unexpected )
withPreOnly> expecting ( or Other text

***** \ !Consumed Error: withPreOnly: Unexpected ) Expecting: ( Other text                                            :2_2:Other "yumm:
pBSR> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
pBSR> MATCH (CERR): (
pBSR> ERROR:
pBSR> offset=9:
pBSR> unexpected )
pBSR> expecting ( or Other text

**** \ !Consumed Error: pBSR: Unexpected ) Expecting: ( Other text                                                     :2_2:Other "yumm:
|>>/base> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
|>>/base> MATCH (CERR): (
|>>/base> ERROR:
|>>/base> offset=9:
|>>/base> unexpected )
|>>/base> expecting ( or Other text

*** \ !Consumed Error: |>>/base: Unexpected ) Expecting: ( Other text                                                   :2_2:Other "yumm:
|>| calling $>>> IN: ( "yummy" ( "nightshades" "potato" ) OR  <…>
|>| calling $>>> MATCH (CERR): (
|>| calling $>>> ERROR:
|>| calling $>>> offset=9:
|>| calling $>>> unexpected )
|>| calling $>>> expecting ( or Other text

** \ !Consumed Error: |>| calling $>>: Unexpected ) Expecting: ( Other text                                              :2_2:Other "yumm:

PDPA
  inline-1-a FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA inline-1-a
       expected: [((["Food"],Means,Any (Just (Pre "yummy nightshades")) [Leaf (RPMT ["potato"]),Leaf (RPMT ["tomato"])]),[])]
       but parsing failed with error:
       4:3:
       unexpected )
       expecting ( or Other text
       
               Food                  
       MEANS   yummy   nightshades   
                       potato        
               OR      ✳ tomato      
       

  To rerun use: --match "/PDPA/inline-1-a/"

Randomized with seed 1986391754

Finished in 0.0166 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

