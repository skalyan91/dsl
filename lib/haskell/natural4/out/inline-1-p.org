* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                              :1_2:GoDeeper:
*** / pRegRule                                                                                                         :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
**** / pRegRuleSugary                                                                                                 :1_2:GoDeeper:
***** / someDeep                                                                                                     :1_2:GoDeeper:
****** / someDeep first part calls base directly                                                                    :1_2:GoDeeper:
**** / pRegRuleNormal                                                                                                 :1_2:GoDeeper:
***** / permutationsReg                                                                                              :1_2:GoDeeper:
****** / regulative permutation with deontic-temporal                                                               :1_2:GoDeeper:
******* / WHERE                                                                                                    :1_2:GoDeeper:
******* / preambleParamText:[Having]                                                                               :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
******* / preambleParamText:[Given]                                                                                :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
******* / preambleParamText:[Upon]                                                                                 :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
******* / preambleBoolStructR [Unless]                                                                             :1_2:GoDeeper:
******* / preambleBoolStructR [When,If]                                                                            :1_2:GoDeeper:
******* / pDT                                                                                                      :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
******* / pActor [Every,Party,TokAll]                                                                              :1_2:GoDeeper:
******* / pDoAction/Do                                                                                             :1_2:GoDeeper:
****** / regulative permutation with deontic-action                                                                 :1_2:GoDeeper:
******* / WHERE                                                                                                    :1_2:GoDeeper:
******* / preambleParamText:[Having]                                                                               :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
******* / preambleParamText:[Given]                                                                                :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
******* / preambleParamText:[Upon]                                                                                 :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
******* / preambleBoolStructR [Unless]                                                                             :1_2:GoDeeper:
******* / preambleBoolStructR [When,If]                                                                            :1_2:GoDeeper:
******* / pTemporal/eventually                                                                                     :1_2:GoDeeper:
******* / pTemporal/specifically                                                                                   :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
******* / pTemporal/vaguely                                                                                        :1_2:GoDeeper:
******* / pActor [Every,Party,TokAll]                                                                              :1_2:GoDeeper:
******* / pDA                                                                                                      :1_2:GoDeeper:
*** / pTypeDefinition                                                                                                  :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
**** / pHornlike/uponLimb                                                                                             :1_2:GoDeeper:
***** / preambleParamText:[Upon]                                                                                     :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
**** / pHornlike/givenLimb                                                                                            :1_2:GoDeeper:
***** / preambleParamText:[Given]                                                                                    :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
*** / pConstitutiveRule                                                                                                :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
**** / calling myindented pNameParens                                                                                 :1_2:GoDeeper:
***** / manyIndentation/leaf?                                                                                        :1_2:GoDeeper:
****** / pMultiTermAka                                                                                              :1_2:GoDeeper:
******* / pAKA                                                                                                     :1_2:GoDeeper:
******** / slAKA                                                                                                  :1_2:GoDeeper:
********* / $*|                                                                                                  :1_2:GoDeeper:
********** / slAKA base                                                                                         :1_2:GoDeeper:
*********** / slMultiTerm                                                                                      :1_2:GoDeeper:
************ / |:| some                                                                                       :1_2:GoDeeper:
************* / |:| base parser                                                                              :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
***** / manyIndentation/deeper; calling someIndentation                                                              :1_2:GoDeeper:
****** / someIndentation                                                                                            :1_2:GoDeeper:
******* / myindented: consuming GoDeeper                                                                           :1_2:GoDeeper:
******* \ myindented: consuming GoDeeper has returned GoDeeper                                                      :1_2:Other "wonk:
******* / manyIndentation/leaf?                                                                                     :1_2:Other "wonk:
******** / pMultiTermAka                                                                                           :1_2:Other "wonk:
********* / pAKA                                                                                                  :1_2:Other "wonk:
********** / slAKA                                                                                               :1_2:Other "wonk:
*********** / $*|                                                                                               :1_2:Other "wonk:
************ / slAKA base                                                                                      :1_2:Other "wonk:
************* / slMultiTerm                                                                                   :1_2:Other "wonk:
************** / |:| some                                                                                    :1_2:Other "wonk:
*************** / |:| base parser                                                                           :1_2:Other "wonk:
*************** \ |:| base parser has returned ("wonk",0)                                                    :2_2:UnDeeper:
*************** / |:| deeper                                                                                 :2_2:UnDeeper:
**************** / |:| some GoDeeper                                                                        :2_2:UnDeeper:
*************** / |:| noMore                                                                                 :2_2:UnDeeper:
*************** \ |:| noMore has returned ([],0)                                                             :2_2:UnDeeper:
************** \ |:| some has returned (["wonk"],0)                                                           :2_2:UnDeeper:
************* \ slMultiTerm has returned (["wonk"],0)                                                          :2_2:UnDeeper:
************ \ slAKA base has returned (["wonk"],0)                                                             :2_2:UnDeeper:
*********** \ $*| has returned (["wonk"],0)                                                                      :2_2:UnDeeper:
*********** / |>>                                                                                                :2_2:UnDeeper:
************ / |>>/recurse                                                                                      :2_2:UnDeeper:
************ / |>>/base                                                                                         :2_2:UnDeeper:
************* / slAKA optional akapart                                                                         :2_2:UnDeeper:
************** / |?| optional something                                                                       :2_2:UnDeeper:
*************** / |>>                                                                                        :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
************** \ |?| optional something has returned (Nothing,0)                                              :2_2:UnDeeper:
************* \ slAKA optional akapart has returned (Nothing,0)                                                :2_2:UnDeeper:
************* / |>>/base got Nothing                                                                           :2_2:UnDeeper:
************ \ |>>/base has returned (Nothing,0)                                                                :2_2:UnDeeper:
*********** \ |>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
*********** / |>>                                                                                                :2_2:UnDeeper:
************ / |>>/recurse                                                                                      :2_2:UnDeeper:
************ / |>>/base                                                                                         :2_2:UnDeeper:
************* / slAKA optional typically                                                                       :2_2:UnDeeper:
************** / |?| optional something                                                                       :2_2:UnDeeper:
*************** / |>>                                                                                        :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
************** \ |?| optional something has returned (Nothing,0)                                              :2_2:UnDeeper:
************* \ slAKA optional typically has returned (Nothing,0)                                              :2_2:UnDeeper:
************* / |>>/base got Nothing                                                                           :2_2:UnDeeper:
************ \ |>>/base has returned (Nothing,0)                                                                :2_2:UnDeeper:
*********** \ |>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
*********** / slAKA: proceeding after base and entityalias are retrieved ...                                     :2_2:UnDeeper:
*********** / pAKA: entityalias = Nothing                                                                        :2_2:UnDeeper:
********** \ slAKA has returned (["wonk"],0)                                                                      :2_2:UnDeeper:
********** / undeepers                                                                                            :2_2:UnDeeper:
*********** / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                             :2_2:UnDeeper:
*********** / sameLine: success!                                                                                 :2_2:UnDeeper:
********** \ undeepers has returned ()                                                                            :2_2:UnDeeper:
********* \ pAKA has returned ["wonk"]                                                                             :2_2:UnDeeper:
******** \ pMultiTermAka has returned ["wonk"]                                                                      :2_2:UnDeeper:
******* \ manyIndentation/leaf? has returned ["wonk"]                                                                :2_2:UnDeeper:
******* / myindented: consuming UnDeeper                                                                             :2_2:UnDeeper:
******* \ myindented: consuming UnDeeper has returned UnDeeper                                                    :2_1:Means:
****** \ someIndentation has returned ["wonk"]                                                                     :2_1:Means:
***** \ manyIndentation/deeper; calling someIndentation has returned ["wonk"]                                       :2_1:Means:
**** \ calling myindented pNameParens has returned ["wonk"]                                                          :2_1:Means:
**** / manyIndentation/leaf?                                                                                         :2_1:Means:
***** / permutationsCon: copula=[Means,Includes,Is], positive=[When,If], negative=[Unless], given=[Given]           :2_1:Means:
****** / preambleParamText:[Given]                                                                                 :2_1:Means:
******* / $>|                                                                                                     :2_1:Means:
****** / preambleBoolStructR [Unless]                                                                              :2_1:Means:
****** / preambleBoolStructR [When,If]                                                                             :2_1:Means:
****** / preambleBoolStructR [Means,Includes,Is]                                                                   :2_1:Means:
******* / pBSR                                                                                                     :2_2:GoDeeper:
******** / ppp inner                                                                                              :2_2:GoDeeper:
********* / term p                                                                                               :2_2:GoDeeper:
********** / term p/1a:label directly above                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / |:| some                                                                                       :2_2:GoDeeper:
************* / |:| base parser                                                                              :2_2:GoDeeper:
************** / pNumAsText                                                                                 :2_2:GoDeeper:
********** / term p/b:label to the left of line below, with EOL                                                 :2_2:GoDeeper:
*********** / |:| some                                                                                         :2_2:GoDeeper:
************ / |:| base parser                                                                                :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented: consuming GoDeeper                                                               :2_2:GoDeeper:
************* \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_2:Other "a":
************* / manyIndentation/leaf?                                                                         :2_2:Other "a":
************** / term p                                                                                      :2_2:Other "a":
*************** / term p/1a:label directly above                                                            :2_2:Other "a":
**************** / $*|                                                                                     :2_2:Other "a":
***************** / |:| some                                                                              :2_2:Other "a":
****************** / |:| base parser                                                                     :2_2:Other "a":
****************** \ |:| base parser has returned ("a",0)                                                 :2_3:GoDeeper:
****************** / |:| deeper                                                                           :2_3:GoDeeper:
******************* / |:| some GoDeeper                                                                  :2_3:GoDeeper:
******************* \ |:| some GoDeeper has returned [GoDeeper,GoDeeper,GoDeeper]                             :2_5:Other "honk:
******************* / |:| some                                                                                :2_5:Other "honk:
******************** / |:| base parser                                                                       :2_5:Other "honk:
******************** \ |:| base parser has returned ("honk",0)                                                :3_5:UnDeeper:
******************** / |:| deeper                                                                             :3_5:UnDeeper:
********************* / |:| some GoDeeper                                                                    :3_5:UnDeeper:
******************** / |:| noMore                                                                             :3_5:UnDeeper:
******************** \ |:| noMore has returned ([],0)                                                         :3_5:UnDeeper:
******************* \ |:| some has returned (["honk"],0)                                                       :3_5:UnDeeper:
****************** \ |:| deeper has returned (["honk"],3)                                                       :3_5:UnDeeper:
***************** \ |:| some has returned (["a","honk"],3)                                                       :3_5:UnDeeper:
***************** / pNumAsText                                                                                   :3_5:UnDeeper:
*************** / term p/b:label to the left of line below, with EOL                                        :2_2:Other "a":
**************** / |:| some                                                                                :2_2:Other "a":
***************** / |:| base parser                                                                       :2_2:Other "a":
***************** \ |:| base parser has returned ("a",0)                                                   :2_3:GoDeeper:
***************** / |:| deeper                                                                             :2_3:GoDeeper:
****************** / |:| some GoDeeper                                                                    :2_3:GoDeeper:
****************** \ |:| some GoDeeper has returned [GoDeeper,GoDeeper,GoDeeper]                               :2_5:Other "honk:
****************** / |:| some                                                                                  :2_5:Other "honk:
******************* / |:| base parser                                                                         :2_5:Other "honk:
******************* \ |:| base parser has returned ("honk",0)                                                  :3_5:UnDeeper:
******************* / |:| deeper                                                                               :3_5:UnDeeper:
******************** / |:| some GoDeeper                                                                      :3_5:UnDeeper:
******************* / |:| noMore                                                                               :3_5:UnDeeper:
******************* \ |:| noMore has returned ([],0)                                                           :3_5:UnDeeper:
****************** \ |:| some has returned (["honk"],0)                                                         :3_5:UnDeeper:
***************** \ |:| deeper has returned (["honk"],3)                                                         :3_5:UnDeeper:
**************** \ |:| some has returned (["a","honk"],3)                                                         :3_5:UnDeeper:
**************** / undeepers                                                                                      :3_5:UnDeeper:
***************** / sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                       :3_5:UnDeeper:
*************** / term p/notLabelTerm                                                                       :2_2:Other "a":
**************** / term p/2:someIndentation expr p                                                         :2_2:Other "a":
***************** / someIndentation                                                                       :2_2:Other "a":
****************** / myindented: consuming GoDeeper                                                      :2_2:Other "a":
**************** / term p/3:plain p                                                                        :2_2:Other "a":
***************** / pRelPred                                                                              :2_2:Other "a":
****************** / slRelPred                                                                           :2_2:Other "a":
******************* / nested simpleHorn                                                                 :2_2:Other "a":
******************** / |^|                                                                             :2_2:Other "a":
******************** / $*|                                                                             :2_2:Other "a":
********************* / slMultiTerm                                                                   :2_2:Other "a":
********************** / |:| some                                                                    :2_2:Other "a":
*********************** / |:| base parser                                                           :2_2:Other "a":
*********************** \ |:| base parser has returned ("a",0)                                       :2_3:GoDeeper:
*********************** / |:| deeper                                                                 :2_3:GoDeeper:
************************ / |:| some GoDeeper                                                        :2_3:GoDeeper:
************************ \ |:| some GoDeeper has returned [GoDeeper,GoDeeper,GoDeeper]                   :2_5:Other "honk:
************************ / |:| some                                                                      :2_5:Other "honk:
************************* / |:| base parser                                                             :2_5:Other "honk:
************************* \ |:| base parser has returned ("honk",0)                                      :3_5:UnDeeper:
************************* / |:| deeper                                                                   :3_5:UnDeeper:
************************** / |:| some GoDeeper                                                          :3_5:UnDeeper:
************************* / |:| noMore                                                                   :3_5:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                               :3_5:UnDeeper:
************************ \ |:| some has returned (["honk"],0)                                             :3_5:UnDeeper:
*********************** \ |:| deeper has returned (["honk"],3)                                             :3_5:UnDeeper:
********************** \ |:| some has returned (["a","honk"],3)                                             :3_5:UnDeeper:
********************* \ slMultiTerm has returned (["a","honk"],3)                                            :3_5:UnDeeper:
******************** \ $*| has returned (["a","honk"],3)                                                      :3_5:UnDeeper:
******************** / |^| deeps                                                                              :3_5:UnDeeper:
******************** \ |^| deeps has returned [UnDeeper]                                                   :3_4:Or:
******************* / RPConstraint                                                                      :2_2:Other "a":
******************** / $*|                                                                             :2_2:Other "a":
********************* / slMultiTerm                                                                   :2_2:Other "a":
********************** / |:| some                                                                    :2_2:Other "a":
*********************** / |:| base parser                                                           :2_2:Other "a":
*********************** \ |:| base parser has returned ("a",0)                                       :2_3:GoDeeper:
*********************** / |:| deeper                                                                 :2_3:GoDeeper:
************************ / |:| some GoDeeper                                                        :2_3:GoDeeper:
************************ \ |:| some GoDeeper has returned [GoDeeper,GoDeeper,GoDeeper]                   :2_5:Other "honk:
************************ / |:| some                                                                      :2_5:Other "honk:
************************* / |:| base parser                                                             :2_5:Other "honk:
************************* \ |:| base parser has returned ("honk",0)                                      :3_5:UnDeeper:
************************* / |:| deeper                                                                   :3_5:UnDeeper:
************************** / |:| some GoDeeper                                                          :3_5:UnDeeper:
************************* / |:| noMore                                                                   :3_5:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                               :3_5:UnDeeper:
************************ \ |:| some has returned (["honk"],0)                                             :3_5:UnDeeper:
*********************** \ |:| deeper has returned (["honk"],3)                                             :3_5:UnDeeper:
********************** \ |:| some has returned (["a","honk"],3)                                             :3_5:UnDeeper:
********************* \ slMultiTerm has returned (["a","honk"],3)                                            :3_5:UnDeeper:
******************** \ $*| has returned (["a","honk"],3)                                                      :3_5:UnDeeper:
******************** / |>| calling $>>                                                                        :3_5:UnDeeper:
********************* / $>>                                                                                  :3_5:UnDeeper:
********************** / $>>/recurse                                                                        :3_5:UnDeeper:
********************** / $>>/base                                                                           :3_5:UnDeeper:
******************* / RPBoolStructR                                                                     :2_2:Other "a":
******************** / $*|                                                                             :2_2:Other "a":
********************* / slMultiTerm                                                                   :2_2:Other "a":
********************** / |:| some                                                                    :2_2:Other "a":
*********************** / |:| base parser                                                           :2_2:Other "a":
*********************** \ |:| base parser has returned ("a",0)                                       :2_3:GoDeeper:
*********************** / |:| deeper                                                                 :2_3:GoDeeper:
************************ / |:| some GoDeeper                                                        :2_3:GoDeeper:
************************ \ |:| some GoDeeper has returned [GoDeeper,GoDeeper,GoDeeper]                   :2_5:Other "honk:
************************ / |:| some                                                                      :2_5:Other "honk:
************************* / |:| base parser                                                             :2_5:Other "honk:
************************* \ |:| base parser has returned ("honk",0)                                      :3_5:UnDeeper:
************************* / |:| deeper                                                                   :3_5:UnDeeper:
************************** / |:| some GoDeeper                                                          :3_5:UnDeeper:
************************* / |:| noMore                                                                   :3_5:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                               :3_5:UnDeeper:
************************ \ |:| some has returned (["honk"],0)                                             :3_5:UnDeeper:
*********************** \ |:| deeper has returned (["honk"],3)                                             :3_5:UnDeeper:
********************** \ |:| some has returned (["a","honk"],3)                                             :3_5:UnDeeper:
********************* \ slMultiTerm has returned (["a","honk"],3)                                            :3_5:UnDeeper:
******************** \ $*| has returned (["a","honk"],3)                                                      :3_5:UnDeeper:
******************** / |>| calling $>>                                                                        :3_5:UnDeeper:
********************* / $>>                                                                                  :3_5:UnDeeper:
********************** / $>>/recurse                                                                        :3_5:UnDeeper:
********************** / $>>/base                                                                           :3_5:UnDeeper:
******************* / RPMT                                                                              :2_2:Other "a":
******************** / $*|                                                                             :2_2:Other "a":
********************* / slAKA                                                                         :2_2:Other "a":
********************** / $*|                                                                         :2_2:Other "a":
*********************** / slAKA base                                                                :2_2:Other "a":
************************ / slMultiTerm                                                             :2_2:Other "a":
************************* / |:| some                                                              :2_2:Other "a":
************************** / |:| base parser                                                     :2_2:Other "a":
************************** \ |:| base parser has returned ("a",0)                                 :2_3:GoDeeper:
************************** / |:| deeper                                                           :2_3:GoDeeper:
*************************** / |:| some GoDeeper                                                  :2_3:GoDeeper:
*************************** \ |:| some GoDeeper has returned [GoDeeper,GoDeeper,GoDeeper]             :2_5:Other "honk:
*************************** / |:| some                                                                :2_5:Other "honk:
**************************** / |:| base parser                                                       :2_5:Other "honk:
**************************** \ |:| base parser has returned ("honk",0)                                :3_5:UnDeeper:
**************************** / |:| deeper                                                             :3_5:UnDeeper:
***************************** / |:| some GoDeeper                                                    :3_5:UnDeeper:
**************************** / |:| noMore                                                             :3_5:UnDeeper:
**************************** \ |:| noMore has returned ([],0)                                         :3_5:UnDeeper:
*************************** \ |:| some has returned (["honk"],0)                                       :3_5:UnDeeper:
************************** \ |:| deeper has returned (["honk"],3)                                       :3_5:UnDeeper:
************************* \ |:| some has returned (["a","honk"],3)                                       :3_5:UnDeeper:
************************ \ slMultiTerm has returned (["a","honk"],3)                                      :3_5:UnDeeper:
*********************** \ slAKA base has returned (["a","honk"],3)                                         :3_5:UnDeeper:
********************** \ $*| has returned (["a","honk"],3)                                                  :3_5:UnDeeper:
********************** / |>>                                                                                :3_5:UnDeeper:
*********************** / |>>/recurse                                                                      :3_5:UnDeeper:
*********************** / |>>/base                                                                         :3_5:UnDeeper:
************************ / slAKA optional akapart                                                         :3_5:UnDeeper:
************************* / |?| optional something                                                       :3_5:UnDeeper:
************************** / |>>                                                                        :3_5:UnDeeper:
*************************** / |>>/recurse                                                              :3_5:UnDeeper:
*************************** / |>>/base                                                                 :3_5:UnDeeper:
**************************** / PAKA/akapart                                                           :3_5:UnDeeper:
***************************** / $>|                                                                  :3_5:UnDeeper:
****************************** / Aka Token                                                          :3_5:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                              :3_5:UnDeeper:
************************ \ slAKA optional akapart has returned (Nothing,0)                                :3_5:UnDeeper:
************************ / |>>/base got Nothing                                                           :3_5:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                                :3_5:UnDeeper:
********************** \ |>> has returned (Nothing,0)                                                       :3_5:UnDeeper:
********************** / |>>                                                                                :3_5:UnDeeper:
*********************** / |>>/recurse                                                                      :3_5:UnDeeper:
*********************** / |>>/base                                                                         :3_5:UnDeeper:
************************ / slAKA optional typically                                                       :3_5:UnDeeper:
************************* / |?| optional something                                                       :3_5:UnDeeper:
************************** / |>>                                                                        :3_5:UnDeeper:
*************************** / |>>/recurse                                                              :3_5:UnDeeper:
*************************** / |>>/base                                                                 :3_5:UnDeeper:
**************************** / typically                                                              :3_5:UnDeeper:
***************************** / $>|                                                                  :3_5:UnDeeper:
************************* \ |?| optional something has returned (Nothing,0)                              :3_5:UnDeeper:
************************ \ slAKA optional typically has returned (Nothing,0)                              :3_5:UnDeeper:
************************ / |>>/base got Nothing                                                           :3_5:UnDeeper:
*********************** \ |>>/base has returned (Nothing,0)                                                :3_5:UnDeeper:
********************** \ |>> has returned (Nothing,0)                                                       :3_5:UnDeeper:
********************** / slAKA: proceeding after base and entityalias are retrieved ...                     :3_5:UnDeeper:
********************** / pAKA: entityalias = Nothing                                                        :3_5:UnDeeper:
********************* \ slAKA has returned (["a","honk"],3)                                                  :3_5:UnDeeper:
******************** \ $*| has returned (["a","honk"],3)                                                      :3_5:UnDeeper:
******************* \ RPMT has returned (RPMT ["a","honk"],3)                                                  :3_5:UnDeeper:
****************** \ slRelPred has returned (RPMT ["a","honk"],3)                                               :3_5:UnDeeper:
****************** / undeepers                                                                                  :3_5:UnDeeper:
******************* / sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                   :3_5:UnDeeper:
************* / manyIndentation/deeper; calling someIndentation                                               :2_2:Other "a":
************** / someIndentation                                                                             :2_2:Other "a":
*************** / myindented: consuming GoDeeper                                                            :2_2:Other "a":
*********** / term p/3:plain p                                                                                 :2_2:GoDeeper:
************ / pRelPred                                                                                       :2_2:GoDeeper:
************* / slRelPred                                                                                    :2_2:GoDeeper:
************** / nested simpleHorn                                                                          :2_2:GoDeeper:
*************** / |^|                                                                                      :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / |:| some                                                                             :2_2:GoDeeper:
****************** / |:| base parser                                                                    :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
************** / RPConstraint                                                                               :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / |:| some                                                                             :2_2:GoDeeper:
****************** / |:| base parser                                                                    :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
************** / RPBoolStructR                                                                              :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / |:| some                                                                             :2_2:GoDeeper:
****************** / |:| base parser                                                                    :2_2:GoDeeper:
******************* / pNumAsText                                                                       :2_2:GoDeeper:
************** / RPMT                                                                                       :2_2:GoDeeper:
*************** / $*|                                                                                      :2_2:GoDeeper:
**************** / slAKA                                                                                  :2_2:GoDeeper:
***************** / $*|                                                                                  :2_2:GoDeeper:
****************** / slAKA base                                                                         :2_2:GoDeeper:
******************* / slMultiTerm                                                                      :2_2:GoDeeper:
******************** / |:| some                                                                       :2_2:GoDeeper:
********************* / |:| base parser                                                              :2_2:GoDeeper:
********************** / pNumAsText                                                                 :2_2:GoDeeper:
******** / withPrePost                                                                                            :2_2:GoDeeper:
********* / |<* starting                                                                                         :2_2:GoDeeper:
********* / $*|                                                                                                  :2_2:GoDeeper:
********** / pre part                                                                                           :2_2:GoDeeper:
*********** / aboveNextLineKeyword                                                                              :2_2:Other "a":
************ / expectUnDeepers                                                                                 :2_2:Other "a":
************* / pNumAsText                                                                                     :2_3:GoDeeper:
************* / pNumAsText                                                                                       :2_4:GoDeeper:
************* / pNumAsText                                                                                         :2_5:GoDeeper:
************* / ignoring ["a","GD","GD","GD","honk"]                                                                 :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                  :2_2:Other "a":
************ / aNLK: determined undp_count = 1                                                                 :2_2:Other "a":
************ / ->| trying to consume 1 GoDeepers                                                               :2_2:Other "a":
************ / $*|                                                                                             :2_2:Other "a":
************ \ $*| has returned ((),0)                                                                         :2_2:Other "a":
*********** / /*= lookAhead failed, delegating to plain /+=                                                     :2_2:Other "a":
*********** / aboveNextLineKeyword                                                                               :2_3:GoDeeper:
************ / expectUnDeepers                                                                                  :2_3:GoDeeper:
************* / pNumAsText                                                                                     :2_3:GoDeeper:
************* / pNumAsText                                                                                       :2_4:GoDeeper:
************* / pNumAsText                                                                                         :2_5:GoDeeper:
************* / ignoring ["GD","GD","GD","honk"]                                                                     :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                   :2_3:GoDeeper:
************ / aNLK: determined undp_count = 1                                                                  :2_3:GoDeeper:
************ / ->| trying to consume 1 GoDeepers                                                                :2_3:GoDeeper:
************ / $*|                                                                                              :2_3:GoDeeper:
************ \ $*| has returned ((),0)                                                                          :2_3:GoDeeper:
************ / ->| success                                                                                        :2_4:GoDeeper:
************ / |>>                                                                                                :2_4:GoDeeper:
************* / |>>/recurse                                                                                      :2_4:GoDeeper:
************** / |>>                                                                                              :2_5:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>                                                                                           :2_5:Other "honk:
***************** / |>>/recurse                                                                                 :2_5:Other "honk:
***************** / |>>/base                                                                                    :2_5:Other "honk:
****************** / slMultiTerm                                                                               :2_5:Other "honk:
******************* / |:| some                                                                                :2_5:Other "honk:
******************** / |:| base parser                                                                       :2_5:Other "honk:
******************** \ |:| base parser has returned ("honk",0)                                                :3_5:UnDeeper:
******************** / |:| deeper                                                                             :3_5:UnDeeper:
********************* / |:| some GoDeeper                                                                    :3_5:UnDeeper:
******************** / |:| noMore                                                                             :3_5:UnDeeper:
******************** \ |:| noMore has returned ([],0)                                                         :3_5:UnDeeper:
******************* \ |:| some has returned (["honk"],0)                                                       :3_5:UnDeeper:
****************** \ slMultiTerm has returned (["honk"],0)                                                      :3_5:UnDeeper:
****************** / |>>/base got ["honk"]                                                                      :3_5:UnDeeper:
***************** \ |>>/base has returned (["honk"],0)                                                           :3_5:UnDeeper:
**************** \ |>> has returned (["honk"],0)                                                                  :3_5:UnDeeper:
*************** \ |>>/recurse has returned (["honk"],1)                                                            :3_5:UnDeeper:
************** \ |>> has returned (["honk"],1)                                                                      :3_5:UnDeeper:
************* \ |>>/recurse has returned (["honk"],2)                                                                :3_5:UnDeeper:
************ \ |>> has returned (["honk"],2)                                                                          :3_5:UnDeeper:
************ / aNLK: current depth is 3                                                                               :3_5:UnDeeper:
************ / |<|                                                                                                    :3_5:UnDeeper:
************ / |<* starting                                                                                           :3_5:UnDeeper:
************ / |<*/recurse                                                                                            :3_5:UnDeeper:
************ / |<*/recurse matched 1 UnDeepers, then got Or with -1 UnDeepers pending                               :3_5:GoDeeper:
************ / |<*/parent returning Or with 2 UnDeepers pending                                                     :3_5:GoDeeper:
************ / aNLK: slMultiTerm is ["honk"]                                                                        :3_5:GoDeeper:
*********** / /*= lookAhead failed, delegating to plain /+=                                                      :2_3:GoDeeper:
*********** / aboveNextLineKeyword                                                                                 :2_4:GoDeeper:
************ / expectUnDeepers                                                                                    :2_4:GoDeeper:
************* / pNumAsText                                                                                       :2_4:GoDeeper:
************* / pNumAsText                                                                                         :2_5:GoDeeper:
************* / ignoring ["GD","GD","honk"]                                                                          :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                     :2_4:GoDeeper:
************ / aNLK: determined undp_count = 1                                                                    :2_4:GoDeeper:
************ / ->| trying to consume 1 GoDeepers                                                                  :2_4:GoDeeper:
************ / $*|                                                                                                :2_4:GoDeeper:
************ \ $*| has returned ((),0)                                                                            :2_4:GoDeeper:
************ / ->| success                                                                                          :2_5:GoDeeper:
************ / |>>                                                                                                  :2_5:GoDeeper:
************* / |>>/recurse                                                                                        :2_5:GoDeeper:
************** / |>>                                                                                               :2_5:Other "honk:
*************** / |>>/recurse                                                                                     :2_5:Other "honk:
*************** / |>>/base                                                                                        :2_5:Other "honk:
**************** / slMultiTerm                                                                                   :2_5:Other "honk:
***************** / |:| some                                                                                    :2_5:Other "honk:
****************** / |:| base parser                                                                           :2_5:Other "honk:
****************** \ |:| base parser has returned ("honk",0)                                                    :3_5:UnDeeper:
****************** / |:| deeper                                                                                 :3_5:UnDeeper:
******************* / |:| some GoDeeper                                                                        :3_5:UnDeeper:
****************** / |:| noMore                                                                                 :3_5:UnDeeper:
****************** \ |:| noMore has returned ([],0)                                                             :3_5:UnDeeper:
***************** \ |:| some has returned (["honk"],0)                                                           :3_5:UnDeeper:
**************** \ slMultiTerm has returned (["honk"],0)                                                          :3_5:UnDeeper:
**************** / |>>/base got ["honk"]                                                                          :3_5:UnDeeper:
*************** \ |>>/base has returned (["honk"],0)                                                               :3_5:UnDeeper:
************** \ |>> has returned (["honk"],0)                                                                      :3_5:UnDeeper:
************* \ |>>/recurse has returned (["honk"],1)                                                                :3_5:UnDeeper:
************ \ |>> has returned (["honk"],1)                                                                          :3_5:UnDeeper:
************ / aNLK: current depth is 2                                                                               :3_5:UnDeeper:
************ / |<|                                                                                                    :3_5:UnDeeper:
************ / |<* starting                                                                                           :3_5:UnDeeper:
************ / |<*/recurse                                                                                            :3_5:UnDeeper:
************ / |<*/recurse matched 1 UnDeepers, then got Or with -1 UnDeepers pending                               :3_5:GoDeeper:
************ / |<*/parent returning Or with 1 UnDeepers pending                                                     :3_5:GoDeeper:
************ / aNLK: slMultiTerm is ["honk"]                                                                        :3_5:GoDeeper:
*********** / /*= lookAhead failed, delegating to plain /+=                                                        :2_4:GoDeeper:
*********** / aboveNextLineKeyword                                                                                   :2_5:GoDeeper:
************ / expectUnDeepers                                                                                      :2_5:GoDeeper:
************* / pNumAsText                                                                                         :2_5:GoDeeper:
************* / ignoring ["GD","honk"]                                                                               :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                       :2_5:GoDeeper:
************ / aNLK: determined undp_count = 1                                                                      :2_5:GoDeeper:
************ / ->| trying to consume 1 GoDeepers                                                                    :2_5:GoDeeper:
************ / $*|                                                                                                  :2_5:GoDeeper:
************ \ $*| has returned ((),0)                                                                              :2_5:GoDeeper:
************ / ->| success                                                                                           :2_5:Other "honk:
************ / |>>                                                                                                   :2_5:Other "honk:
************* / |>>/recurse                                                                                         :2_5:Other "honk:
************* / |>>/base                                                                                            :2_5:Other "honk:
************** / slMultiTerm                                                                                       :2_5:Other "honk:
*************** / |:| some                                                                                        :2_5:Other "honk:
**************** / |:| base parser                                                                               :2_5:Other "honk:
**************** \ |:| base parser has returned ("honk",0)                                                        :3_5:UnDeeper:
**************** / |:| deeper                                                                                     :3_5:UnDeeper:
***************** / |:| some GoDeeper                                                                            :3_5:UnDeeper:
**************** / |:| noMore                                                                                     :3_5:UnDeeper:
**************** \ |:| noMore has returned ([],0)                                                                 :3_5:UnDeeper:
*************** \ |:| some has returned (["honk"],0)                                                               :3_5:UnDeeper:
************** \ slMultiTerm has returned (["honk"],0)                                                              :3_5:UnDeeper:
************** / |>>/base got ["honk"]                                                                              :3_5:UnDeeper:
************* \ |>>/base has returned (["honk"],0)                                                                   :3_5:UnDeeper:
************ \ |>> has returned (["honk"],0)                                                                          :3_5:UnDeeper:
************ / aNLK: current depth is 1                                                                               :3_5:UnDeeper:
************ / |<|                                                                                                    :3_5:UnDeeper:
************ / |<* starting                                                                                           :3_5:UnDeeper:
************ / |<*/recurse                                                                                            :3_5:UnDeeper:
************ / |<*/recurse matched 1 UnDeepers, then got Or with -1 UnDeepers pending                               :3_5:GoDeeper:
************ / |<*/parent returning Or with 0 UnDeepers pending                                                     :3_5:GoDeeper:
************ / aNLK: slMultiTerm is ["honk"]                                                                        :3_5:GoDeeper:
*********** \ aboveNextLineKeyword has returned ((["honk"],Or),0)                                                    :3_5:GoDeeper:
*********** / /*= lookAhead succeeded, recursing greedily                                                            :2_5:GoDeeper:
*********** / aboveNextLineKeyword                                                                                    :2_5:Other "honk:
************ / expectUnDeepers                                                                                       :2_5:Other "honk:
************* / ignoring ["honk"]                                                                                    :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                        :2_5:Other "honk:
************ / aNLK: determined undp_count = 1                                                                       :2_5:Other "honk:
************ / ->| trying to consume 1 GoDeepers                                                                     :2_5:Other "honk:
************ / $*|                                                                                                   :2_5:Other "honk:
************ \ $*| has returned ((),0)                                                                               :2_5:Other "honk:
*********** / /*= lookAhead failed, delegating to plain /+=                                                           :2_5:Other "honk:
*********** / aboveNextLineKeyword                                                                                     :3_5:UnDeeper:
************ / expectUnDeepers                                                                                        :3_5:UnDeeper:
************* / ignoring []                                                                                          :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                         :3_5:UnDeeper:
************ / aNLK: determined undp_count = 1                                                                        :3_5:UnDeeper:
************ / ->| trying to consume 1 GoDeepers                                                                      :3_5:UnDeeper:
************ / $*|                                                                                                    :3_5:UnDeeper:
************ \ $*| has returned ((),0)                                                                                :3_5:UnDeeper:
*********** / /*= lookAhead failed, delegating to plain /+=                                                            :3_5:UnDeeper:
*********** / /*= lookAhead succeeded, greedy recursion failed (no p1); returning p2.                                :2_5:GoDeeper:
********** \ pre part has returned (["a"],3)                                                                          :2_5:GoDeeper:
********* \ $*| has returned (["a"],3)                                                                                 :2_5:GoDeeper:
********* / made it to inner base parser                                                                               :2_5:GoDeeper:
********** / ppp inner                                                                                                :2_5:GoDeeper:
*********** / term p                                                                                                 :2_5:GoDeeper:
************ / term p/1a:label directly above                                                                       :2_5:GoDeeper:
************* / $*|                                                                                                :2_5:GoDeeper:
************** / |:| some                                                                                         :2_5:GoDeeper:
*************** / |:| base parser                                                                                :2_5:GoDeeper:
**************** / pNumAsText                                                                                   :2_5:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                                   :2_5:GoDeeper:
************* / |:| some                                                                                           :2_5:GoDeeper:
************** / |:| base parser                                                                                  :2_5:GoDeeper:
*************** / pNumAsText                                                                                     :2_5:GoDeeper:
************ / term p/notLabelTerm                                                                                  :2_5:GoDeeper:
************* / term p/2:someIndentation expr p                                                                    :2_5:GoDeeper:
************** / someIndentation                                                                                  :2_5:GoDeeper:
*************** / myindented: consuming GoDeeper                                                                 :2_5:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                            :2_5:Other "honk:
*************** / manyIndentation/leaf?                                                                           :2_5:Other "honk:
**************** / term p                                                                                        :2_5:Other "honk:
***************** / term p/1a:label directly above                                                              :2_5:Other "honk:
****************** / $*|                                                                                       :2_5:Other "honk:
******************* / |:| some                                                                                :2_5:Other "honk:
******************** / |:| base parser                                                                       :2_5:Other "honk:
******************** \ |:| base parser has returned ("honk",0)                                                :3_5:UnDeeper:
******************** / |:| deeper                                                                             :3_5:UnDeeper:
********************* / |:| some GoDeeper                                                                    :3_5:UnDeeper:
******************** / |:| noMore                                                                             :3_5:UnDeeper:
******************** \ |:| noMore has returned ([],0)                                                         :3_5:UnDeeper:
******************* \ |:| some has returned (["honk"],0)                                                       :3_5:UnDeeper:
******************* / pNumAsText                                                                               :3_5:UnDeeper:
***************** / term p/b:label to the left of line below, with EOL                                          :2_5:Other "honk:
****************** / |:| some                                                                                  :2_5:Other "honk:
******************* / |:| base parser                                                                         :2_5:Other "honk:
******************* \ |:| base parser has returned ("honk",0)                                                  :3_5:UnDeeper:
******************* / |:| deeper                                                                               :3_5:UnDeeper:
******************** / |:| some GoDeeper                                                                      :3_5:UnDeeper:
******************* / |:| noMore                                                                               :3_5:UnDeeper:
******************* \ |:| noMore has returned ([],0)                                                           :3_5:UnDeeper:
****************** \ |:| some has returned (["honk"],0)                                                         :3_5:UnDeeper:
****************** / undeepers                                                                                  :3_5:UnDeeper:
******************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                   :3_5:UnDeeper:
******************* / sameLine: success!                                                                       :3_5:UnDeeper:
****************** \ undeepers has returned ()                                                                  :3_5:UnDeeper:
****************** / matching EOL                                                                               :3_5:UnDeeper:
***************** / term p/notLabelTerm                                                                         :2_5:Other "honk:
****************** / term p/2:someIndentation expr p                                                           :2_5:Other "honk:
******************* / someIndentation                                                                         :2_5:Other "honk:
******************** / myindented: consuming GoDeeper                                                        :2_5:Other "honk:
****************** / term p/3:plain p                                                                          :2_5:Other "honk:
******************* / pRelPred                                                                                :2_5:Other "honk:
******************** / slRelPred                                                                             :2_5:Other "honk:
********************* / nested simpleHorn                                                                   :2_5:Other "honk:
********************** / |^|                                                                               :2_5:Other "honk:
********************** / $*|                                                                               :2_5:Other "honk:
*********************** / slMultiTerm                                                                     :2_5:Other "honk:
************************ / |:| some                                                                      :2_5:Other "honk:
************************* / |:| base parser                                                             :2_5:Other "honk:
************************* \ |:| base parser has returned ("honk",0)                                      :3_5:UnDeeper:
************************* / |:| deeper                                                                   :3_5:UnDeeper:
************************** / |:| some GoDeeper                                                          :3_5:UnDeeper:
************************* / |:| noMore                                                                   :3_5:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                               :3_5:UnDeeper:
************************ \ |:| some has returned (["honk"],0)                                             :3_5:UnDeeper:
*********************** \ slMultiTerm has returned (["honk"],0)                                            :3_5:UnDeeper:
********************** \ $*| has returned (["honk"],0)                                                      :3_5:UnDeeper:
********************** / |^| deeps                                                                          :3_5:UnDeeper:
********************** \ |^| deeps has returned [UnDeeper]                                               :3_4:Or:
********************* / RPConstraint                                                                        :2_5:Other "honk:
********************** / $*|                                                                               :2_5:Other "honk:
*********************** / slMultiTerm                                                                     :2_5:Other "honk:
************************ / |:| some                                                                      :2_5:Other "honk:
************************* / |:| base parser                                                             :2_5:Other "honk:
************************* \ |:| base parser has returned ("honk",0)                                      :3_5:UnDeeper:
************************* / |:| deeper                                                                   :3_5:UnDeeper:
************************** / |:| some GoDeeper                                                          :3_5:UnDeeper:
************************* / |:| noMore                                                                   :3_5:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                               :3_5:UnDeeper:
************************ \ |:| some has returned (["honk"],0)                                             :3_5:UnDeeper:
*********************** \ slMultiTerm has returned (["honk"],0)                                            :3_5:UnDeeper:
********************** \ $*| has returned (["honk"],0)                                                      :3_5:UnDeeper:
********************** / |>| calling $>>                                                                    :3_5:UnDeeper:
*********************** / $>>                                                                              :3_5:UnDeeper:
************************ / $>>/recurse                                                                    :3_5:UnDeeper:
************************ / $>>/base                                                                       :3_5:UnDeeper:
********************* / RPBoolStructR                                                                       :2_5:Other "honk:
********************** / $*|                                                                               :2_5:Other "honk:
*********************** / slMultiTerm                                                                     :2_5:Other "honk:
************************ / |:| some                                                                      :2_5:Other "honk:
************************* / |:| base parser                                                             :2_5:Other "honk:
************************* \ |:| base parser has returned ("honk",0)                                      :3_5:UnDeeper:
************************* / |:| deeper                                                                   :3_5:UnDeeper:
************************** / |:| some GoDeeper                                                          :3_5:UnDeeper:
************************* / |:| noMore                                                                   :3_5:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                               :3_5:UnDeeper:
************************ \ |:| some has returned (["honk"],0)                                             :3_5:UnDeeper:
*********************** \ slMultiTerm has returned (["honk"],0)                                            :3_5:UnDeeper:
********************** \ $*| has returned (["honk"],0)                                                      :3_5:UnDeeper:
********************** / |>| calling $>>                                                                    :3_5:UnDeeper:
*********************** / $>>                                                                              :3_5:UnDeeper:
************************ / $>>/recurse                                                                    :3_5:UnDeeper:
************************ / $>>/base                                                                       :3_5:UnDeeper:
********************* / RPMT                                                                                :2_5:Other "honk:
********************** / $*|                                                                               :2_5:Other "honk:
*********************** / slAKA                                                                           :2_5:Other "honk:
************************ / $*|                                                                           :2_5:Other "honk:
************************* / slAKA base                                                                  :2_5:Other "honk:
************************** / slMultiTerm                                                               :2_5:Other "honk:
*************************** / |:| some                                                                :2_5:Other "honk:
**************************** / |:| base parser                                                       :2_5:Other "honk:
**************************** \ |:| base parser has returned ("honk",0)                                :3_5:UnDeeper:
**************************** / |:| deeper                                                             :3_5:UnDeeper:
***************************** / |:| some GoDeeper                                                    :3_5:UnDeeper:
**************************** / |:| noMore                                                             :3_5:UnDeeper:
**************************** \ |:| noMore has returned ([],0)                                         :3_5:UnDeeper:
*************************** \ |:| some has returned (["honk"],0)                                       :3_5:UnDeeper:
************************** \ slMultiTerm has returned (["honk"],0)                                      :3_5:UnDeeper:
************************* \ slAKA base has returned (["honk"],0)                                         :3_5:UnDeeper:
************************ \ $*| has returned (["honk"],0)                                                  :3_5:UnDeeper:
************************ / |>>                                                                            :3_5:UnDeeper:
************************* / |>>/recurse                                                                  :3_5:UnDeeper:
************************* / |>>/base                                                                     :3_5:UnDeeper:
************************** / slAKA optional akapart                                                     :3_5:UnDeeper:
*************************** / |?| optional something                                                   :3_5:UnDeeper:
**************************** / |>>                                                                    :3_5:UnDeeper:
***************************** / |>>/recurse                                                          :3_5:UnDeeper:
***************************** / |>>/base                                                             :3_5:UnDeeper:
****************************** / PAKA/akapart                                                       :3_5:UnDeeper:
******************************* / $>|                                                              :3_5:UnDeeper:
******************************** / Aka Token                                                      :3_5:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                          :3_5:UnDeeper:
************************** \ slAKA optional akapart has returned (Nothing,0)                            :3_5:UnDeeper:
************************** / |>>/base got Nothing                                                       :3_5:UnDeeper:
************************* \ |>>/base has returned (Nothing,0)                                            :3_5:UnDeeper:
************************ \ |>> has returned (Nothing,0)                                                   :3_5:UnDeeper:
************************ / |>>                                                                            :3_5:UnDeeper:
************************* / |>>/recurse                                                                  :3_5:UnDeeper:
************************* / |>>/base                                                                     :3_5:UnDeeper:
************************** / slAKA optional typically                                                   :3_5:UnDeeper:
*************************** / |?| optional something                                                   :3_5:UnDeeper:
**************************** / |>>                                                                    :3_5:UnDeeper:
***************************** / |>>/recurse                                                          :3_5:UnDeeper:
***************************** / |>>/base                                                             :3_5:UnDeeper:
****************************** / typically                                                          :3_5:UnDeeper:
******************************* / $>|                                                              :3_5:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                          :3_5:UnDeeper:
************************** \ slAKA optional typically has returned (Nothing,0)                          :3_5:UnDeeper:
************************** / |>>/base got Nothing                                                       :3_5:UnDeeper:
************************* \ |>>/base has returned (Nothing,0)                                            :3_5:UnDeeper:
************************ \ |>> has returned (Nothing,0)                                                   :3_5:UnDeeper:
************************ / slAKA: proceeding after base and entityalias are retrieved ...                 :3_5:UnDeeper:
************************ / pAKA: entityalias = Nothing                                                    :3_5:UnDeeper:
*********************** \ slAKA has returned (["honk"],0)                                                  :3_5:UnDeeper:
********************** \ $*| has returned (["honk"],0)                                                      :3_5:UnDeeper:
********************* \ RPMT has returned (RPMT ["honk"],0)                                                  :3_5:UnDeeper:
******************** \ slRelPred has returned (RPMT ["honk"],0)                                               :3_5:UnDeeper:
******************** / undeepers                                                                              :3_5:UnDeeper:
********************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers               :3_5:UnDeeper:
********************* / sameLine: success!                                                                   :3_5:UnDeeper:
******************** \ undeepers has returned ()                                                              :3_5:UnDeeper:
******************* \ pRelPred has returned RPMT ["honk"]                                                      :3_5:UnDeeper:
****************** \ term p/3:plain p has returned MyLeaf (RPMT ["honk"])                                       :3_5:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["honk"])                                      :3_5:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["honk"])                                                     :3_5:UnDeeper:
**************** / binary(Or)                                                                                     :3_5:UnDeeper:
**************** / binary(And)                                                                                    :3_5:UnDeeper:
**************** / binary(SetLess)                                                                                :3_5:UnDeeper:
**************** / binary(SetPlus)                                                                                :3_5:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["honk"])                                        :3_5:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                   :3_5:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                          :3_4:Or:
************** \ someIndentation has returned MyLeaf (RPMT ["honk"])                                             :3_4:Or:
************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["honk"])                               :3_4:Or:
************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["honk"])                                             :3_4:Or:
*********** \ term p has returned MyLeaf (RPMT ["honk"])                                                            :3_4:Or:
*********** / binary(Or)                                                                                            :3_4:Or:
*********** \ binary(Or) has returned Or                                                                             :3_5:GoDeeper:
*********** / term p                                                                                                 :3_5:GoDeeper:
************ / term p/1a:label directly above                                                                       :3_5:GoDeeper:
************* / $*|                                                                                                :3_5:GoDeeper:
************** / |:| some                                                                                         :3_5:GoDeeper:
*************** / |:| base parser                                                                                :3_5:GoDeeper:
**************** / pNumAsText                                                                                   :3_5:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                                   :3_5:GoDeeper:
************* / |:| some                                                                                           :3_5:GoDeeper:
************** / |:| base parser                                                                                  :3_5:GoDeeper:
*************** / pNumAsText                                                                                     :3_5:GoDeeper:
************ / term p/notLabelTerm                                                                                  :3_5:GoDeeper:
************* / term p/2:someIndentation expr p                                                                    :3_5:GoDeeper:
************** / someIndentation                                                                                  :3_5:GoDeeper:
*************** / myindented: consuming GoDeeper                                                                 :3_5:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                            :3_5:Other "ponk:
*************** / manyIndentation/leaf?                                                                           :3_5:Other "ponk:
**************** / term p                                                                                        :3_5:Other "ponk:
***************** / term p/1a:label directly above                                                              :3_5:Other "ponk:
****************** / $*|                                                                                       :3_5:Other "ponk:
******************* / |:| some                                                                                :3_5:Other "ponk:
******************** / |:| base parser                                                                       :3_5:Other "ponk:
******************** \ |:| base parser has returned ("ponk",0)                                          :1_2:UnDeeper:
******************** / |:| deeper                                                                       :1_2:UnDeeper:
********************* / |:| some GoDeeper                                                              :1_2:UnDeeper:
******************** / |:| noMore                                                                       :1_2:UnDeeper:
******************** \ |:| noMore has returned ([],0)                                                   :1_2:UnDeeper:
******************* \ |:| some has returned (["ponk"],0)                                                 :1_2:UnDeeper:
******************* / pNumAsText                                                                         :1_2:UnDeeper:
***************** / term p/b:label to the left of line below, with EOL                                          :3_5:Other "ponk:
****************** / |:| some                                                                                  :3_5:Other "ponk:
******************* / |:| base parser                                                                         :3_5:Other "ponk:
******************* \ |:| base parser has returned ("ponk",0)                                            :1_2:UnDeeper:
******************* / |:| deeper                                                                         :1_2:UnDeeper:
******************** / |:| some GoDeeper                                                                :1_2:UnDeeper:
******************* / |:| noMore                                                                         :1_2:UnDeeper:
******************* \ |:| noMore has returned ([],0)                                                     :1_2:UnDeeper:
****************** \ |:| some has returned (["ponk"],0)                                                   :1_2:UnDeeper:
****************** / undeepers                                                                            :1_2:UnDeeper:
******************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :1_2:UnDeeper:
******************* / sameLine: success!                                                                 :1_2:UnDeeper:
****************** \ undeepers has returned ()                                                            :1_2:UnDeeper:
****************** / matching EOL                                                                         :1_2:UnDeeper:
***************** / term p/notLabelTerm                                                                         :3_5:Other "ponk:
****************** / term p/2:someIndentation expr p                                                           :3_5:Other "ponk:
******************* / someIndentation                                                                         :3_5:Other "ponk:
******************** / myindented: consuming GoDeeper                                                        :3_5:Other "ponk:
****************** / term p/3:plain p                                                                          :3_5:Other "ponk:
******************* / pRelPred                                                                                :3_5:Other "ponk:
******************** / slRelPred                                                                             :3_5:Other "ponk:
********************* / nested simpleHorn                                                                   :3_5:Other "ponk:
********************** / |^|                                                                               :3_5:Other "ponk:
********************** / $*|                                                                               :3_5:Other "ponk:
*********************** / slMultiTerm                                                                     :3_5:Other "ponk:
************************ / |:| some                                                                      :3_5:Other "ponk:
************************* / |:| base parser                                                             :3_5:Other "ponk:
************************* \ |:| base parser has returned ("ponk",0)                                :1_2:UnDeeper:
************************* / |:| deeper                                                             :1_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :1_2:UnDeeper:
************************* / |:| noMore                                                             :1_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :1_2:UnDeeper:
************************ \ |:| some has returned (["ponk"],0)                                       :1_2:UnDeeper:
*********************** \ slMultiTerm has returned (["ponk"],0)                                      :1_2:UnDeeper:
********************** \ $*| has returned (["ponk"],0)                                                :1_2:UnDeeper:
********************** / |^| deeps                                                                    :1_2:UnDeeper:
********************** \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper,UnDeeper]            :EOF:
********************* / RPConstraint                                                                        :3_5:Other "ponk:
********************** / $*|                                                                               :3_5:Other "ponk:
*********************** / slMultiTerm                                                                     :3_5:Other "ponk:
************************ / |:| some                                                                      :3_5:Other "ponk:
************************* / |:| base parser                                                             :3_5:Other "ponk:
************************* \ |:| base parser has returned ("ponk",0)                                :1_2:UnDeeper:
************************* / |:| deeper                                                             :1_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :1_2:UnDeeper:
************************* / |:| noMore                                                             :1_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :1_2:UnDeeper:
************************ \ |:| some has returned (["ponk"],0)                                       :1_2:UnDeeper:
*********************** \ slMultiTerm has returned (["ponk"],0)                                      :1_2:UnDeeper:
********************** \ $*| has returned (["ponk"],0)                                                :1_2:UnDeeper:
********************** / |>| calling $>>                                                              :1_2:UnDeeper:
*********************** / $>>                                                                        :1_2:UnDeeper:
************************ / $>>/recurse                                                              :1_2:UnDeeper:
************************ / $>>/base                                                                 :1_2:UnDeeper:
********************* / RPBoolStructR                                                                       :3_5:Other "ponk:
********************** / $*|                                                                               :3_5:Other "ponk:
*********************** / slMultiTerm                                                                     :3_5:Other "ponk:
************************ / |:| some                                                                      :3_5:Other "ponk:
************************* / |:| base parser                                                             :3_5:Other "ponk:
************************* \ |:| base parser has returned ("ponk",0)                                :1_2:UnDeeper:
************************* / |:| deeper                                                             :1_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :1_2:UnDeeper:
************************* / |:| noMore                                                             :1_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :1_2:UnDeeper:
************************ \ |:| some has returned (["ponk"],0)                                       :1_2:UnDeeper:
*********************** \ slMultiTerm has returned (["ponk"],0)                                      :1_2:UnDeeper:
********************** \ $*| has returned (["ponk"],0)                                                :1_2:UnDeeper:
********************** / |>| calling $>>                                                              :1_2:UnDeeper:
*********************** / $>>                                                                        :1_2:UnDeeper:
************************ / $>>/recurse                                                              :1_2:UnDeeper:
************************ / $>>/base                                                                 :1_2:UnDeeper:
********************* / RPMT                                                                                :3_5:Other "ponk:
********************** / $*|                                                                               :3_5:Other "ponk:
*********************** / slAKA                                                                           :3_5:Other "ponk:
************************ / $*|                                                                           :3_5:Other "ponk:
************************* / slAKA base                                                                  :3_5:Other "ponk:
************************** / slMultiTerm                                                               :3_5:Other "ponk:
*************************** / |:| some                                                                :3_5:Other "ponk:
**************************** / |:| base parser                                                       :3_5:Other "ponk:
**************************** \ |:| base parser has returned ("ponk",0)                          :1_2:UnDeeper:
**************************** / |:| deeper                                                       :1_2:UnDeeper:
***************************** / |:| some GoDeeper                                              :1_2:UnDeeper:
**************************** / |:| noMore                                                       :1_2:UnDeeper:
**************************** \ |:| noMore has returned ([],0)                                   :1_2:UnDeeper:
*************************** \ |:| some has returned (["ponk"],0)                                 :1_2:UnDeeper:
************************** \ slMultiTerm has returned (["ponk"],0)                                :1_2:UnDeeper:
************************* \ slAKA base has returned (["ponk"],0)                                   :1_2:UnDeeper:
************************ \ $*| has returned (["ponk"],0)                                            :1_2:UnDeeper:
************************ / |>>                                                                      :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional akapart                                               :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>                                                              :1_2:UnDeeper:
***************************** / |>>/recurse                                                    :1_2:UnDeeper:
***************************** / |>>/base                                                       :1_2:UnDeeper:
****************************** / PAKA/akapart                                                 :1_2:UnDeeper:
******************************* / $>|                                                        :1_2:UnDeeper:
******************************** / Aka Token                                                :1_2:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
************************** \ slAKA optional akapart has returned (Nothing,0)                      :1_2:UnDeeper:
************************** / |>>/base got Nothing                                                 :1_2:UnDeeper:
************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************ \ |>> has returned (Nothing,0)                                             :1_2:UnDeeper:
************************ / |>>                                                                      :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional typically                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>                                                              :1_2:UnDeeper:
***************************** / |>>/recurse                                                    :1_2:UnDeeper:
***************************** / |>>/base                                                       :1_2:UnDeeper:
****************************** / typically                                                    :1_2:UnDeeper:
******************************* / $>|                                                        :1_2:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
************************** \ slAKA optional typically has returned (Nothing,0)                    :1_2:UnDeeper:
************************** / |>>/base got Nothing                                                 :1_2:UnDeeper:
************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************ \ |>> has returned (Nothing,0)                                             :1_2:UnDeeper:
************************ / slAKA: proceeding after base and entityalias are retrieved ...           :1_2:UnDeeper:
************************ / pAKA: entityalias = Nothing                                              :1_2:UnDeeper:
*********************** \ slAKA has returned (["ponk"],0)                                            :1_2:UnDeeper:
********************** \ $*| has returned (["ponk"],0)                                                :1_2:UnDeeper:
********************* \ RPMT has returned (RPMT ["ponk"],0)                                            :1_2:UnDeeper:
******************** \ slRelPred has returned (RPMT ["ponk"],0)                                         :1_2:UnDeeper:
******************** / undeepers                                                                        :1_2:UnDeeper:
********************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :1_2:UnDeeper:
********************* / sameLine: success!                                                             :1_2:UnDeeper:
******************** \ undeepers has returned ()                                                        :1_2:UnDeeper:
******************* \ pRelPred has returned RPMT ["ponk"]                                                :1_2:UnDeeper:
****************** \ term p/3:plain p has returned MyLeaf (RPMT ["ponk"])                                 :1_2:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["ponk"])                                :1_2:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["ponk"])                                               :1_2:UnDeeper:
**************** / binary(Or)                                                                               :1_2:UnDeeper:
**************** / binary(And)                                                                              :1_2:UnDeeper:
**************** / binary(SetLess)                                                                          :1_2:UnDeeper:
**************** / binary(SetPlus)                                                                          :1_2:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["ponk"])                                  :1_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :1_2:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                         :1_3:UnDeeper:
************** \ someIndentation has returned MyLeaf (RPMT ["ponk"])                                            :1_3:UnDeeper:
************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["ponk"])                              :1_3:UnDeeper:
************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["ponk"])                                            :1_3:UnDeeper:
*********** \ term p has returned MyLeaf (RPMT ["ponk"])                                                           :1_3:UnDeeper:
*********** / binary(Or)                                                                                           :1_3:UnDeeper:
*********** / binary(And)                                                                                          :1_3:UnDeeper:
*********** / binary(SetLess)                                                                                      :1_3:UnDeeper:
*********** / binary(SetPlus)                                                                                      :1_3:UnDeeper:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]                         :1_3:UnDeeper:
********* \ made it to inner base parser has returned Any Nothing [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]        :1_3:UnDeeper:
********* / |<*/recurse                                                                                              :1_3:UnDeeper:
********* / post part                                                                                         :EOF:
********** / slMultiTerm                                                                                     :EOF:
*********** / |:| some                                                                                      :EOF:
************ / |:| base parser                                                                             :EOF:
************* / pNumAsText                                                                                :EOF:
********* / |<*/base                                                                                                 :1_3:UnDeeper:
********** / post part                                                                                              :1_3:UnDeeper:
*********** / slMultiTerm                                                                                          :1_3:UnDeeper:
************ / |:| some                                                                                           :1_3:UnDeeper:
************* / |:| base parser                                                                                  :1_3:UnDeeper:
************** / pNumAsText                                                                                     :1_3:UnDeeper:
******* / withPreOnly                                          :2_2:GoDeeper:
********* / $*|                                                                                                  :2_2:GoDeeper:
********** / pre part                                                                                           :2_2:GoDeeper:
*********** / aboveNextLineKeyword                                                                              :2_2:Other "a":
************ / expectUnDeepers                                                                                 :2_2:Other "a":
************* / pNumAsText                                                                                     :2_3:GoDeeper:
************* / pNumAsText                                                                                       :2_4:GoDeeper:
************* / pNumAsText                                                                                         :2_5:GoDeeper:
************* / ignoring ["a","GD","GD","GD","honk"]                                                                 :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                  :2_2:Other "a":
************ / aNLK: determined undp_count = 1                                                                 :2_2:Other "a":
************ / ->| trying to consume 1 GoDeepers                                                               :2_2:Other "a":
************ / $*|                                                                                             :2_2:Other "a":
************ \ $*| has returned ((),0)                                                                         :2_2:Other "a":
*********** / /*= lookAhead failed, delegating to plain /+=                                                     :2_2:Other "a":
*********** / aboveNextLineKeyword                                                                               :2_3:GoDeeper:
************ / expectUnDeepers                                                                                  :2_3:GoDeeper:
************* / pNumAsText                                                                                     :2_3:GoDeeper:
************* / pNumAsText                                                                                       :2_4:GoDeeper:
************* / pNumAsText                                                                                         :2_5:GoDeeper:
************* / ignoring ["GD","GD","GD","honk"]                                                                     :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                   :2_3:GoDeeper:
************ / aNLK: determined undp_count = 1                                                                  :2_3:GoDeeper:
************ / ->| trying to consume 1 GoDeepers                                                                :2_3:GoDeeper:
************ / $*|                                                                                              :2_3:GoDeeper:
************ \ $*| has returned ((),0)                                                                          :2_3:GoDeeper:
************ / ->| success                                                                                        :2_4:GoDeeper:
************ / |>>                                                                                                :2_4:GoDeeper:
************* / |>>/recurse                                                                                      :2_4:GoDeeper:
************** / |>>                                                                                              :2_5:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>                                                                                           :2_5:Other "honk:
***************** / |>>/recurse                                                                                 :2_5:Other "honk:
***************** / |>>/base                                                                                    :2_5:Other "honk:
****************** / slMultiTerm                                                                               :2_5:Other "honk:
******************* / |:| some                                                                                :2_5:Other "honk:
******************** / |:| base parser                                                                       :2_5:Other "honk:
******************** \ |:| base parser has returned ("honk",0)                                                :3_5:UnDeeper:
******************** / |:| deeper                                                                             :3_5:UnDeeper:
********************* / |:| some GoDeeper                                                                    :3_5:UnDeeper:
******************** / |:| noMore                                                                             :3_5:UnDeeper:
******************** \ |:| noMore has returned ([],0)                                                         :3_5:UnDeeper:
******************* \ |:| some has returned (["honk"],0)                                                       :3_5:UnDeeper:
****************** \ slMultiTerm has returned (["honk"],0)                                                      :3_5:UnDeeper:
****************** / |>>/base got ["honk"]                                                                      :3_5:UnDeeper:
***************** \ |>>/base has returned (["honk"],0)                                                           :3_5:UnDeeper:
**************** \ |>> has returned (["honk"],0)                                                                  :3_5:UnDeeper:
*************** \ |>>/recurse has returned (["honk"],1)                                                            :3_5:UnDeeper:
************** \ |>> has returned (["honk"],1)                                                                      :3_5:UnDeeper:
************* \ |>>/recurse has returned (["honk"],2)                                                                :3_5:UnDeeper:
************ \ |>> has returned (["honk"],2)                                                                          :3_5:UnDeeper:
************ / aNLK: current depth is 3                                                                               :3_5:UnDeeper:
************ / |<|                                                                                                    :3_5:UnDeeper:
************ / |<* starting                                                                                           :3_5:UnDeeper:
************ / |<*/recurse                                                                                            :3_5:UnDeeper:
************ / |<*/recurse matched 1 UnDeepers, then got Or with -1 UnDeepers pending                               :3_5:GoDeeper:
************ / |<*/parent returning Or with 2 UnDeepers pending                                                     :3_5:GoDeeper:
************ / aNLK: slMultiTerm is ["honk"]                                                                        :3_5:GoDeeper:
*********** / /*= lookAhead failed, delegating to plain /+=                                                      :2_3:GoDeeper:
*********** / aboveNextLineKeyword                                                                                 :2_4:GoDeeper:
************ / expectUnDeepers                                                                                    :2_4:GoDeeper:
************* / pNumAsText                                                                                       :2_4:GoDeeper:
************* / pNumAsText                                                                                         :2_5:GoDeeper:
************* / ignoring ["GD","GD","honk"]                                                                          :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                     :2_4:GoDeeper:
************ / aNLK: determined undp_count = 1                                                                    :2_4:GoDeeper:
************ / ->| trying to consume 1 GoDeepers                                                                  :2_4:GoDeeper:
************ / $*|                                                                                                :2_4:GoDeeper:
************ \ $*| has returned ((),0)                                                                            :2_4:GoDeeper:
************ / ->| success                                                                                          :2_5:GoDeeper:
************ / |>>                                                                                                  :2_5:GoDeeper:
************* / |>>/recurse                                                                                        :2_5:GoDeeper:
************** / |>>                                                                                               :2_5:Other "honk:
*************** / |>>/recurse                                                                                     :2_5:Other "honk:
*************** / |>>/base                                                                                        :2_5:Other "honk:
**************** / slMultiTerm                                                                                   :2_5:Other "honk:
***************** / |:| some                                                                                    :2_5:Other "honk:
****************** / |:| base parser                                                                           :2_5:Other "honk:
****************** \ |:| base parser has returned ("honk",0)                                                    :3_5:UnDeeper:
****************** / |:| deeper                                                                                 :3_5:UnDeeper:
******************* / |:| some GoDeeper                                                                        :3_5:UnDeeper:
****************** / |:| noMore                                                                                 :3_5:UnDeeper:
****************** \ |:| noMore has returned ([],0)                                                             :3_5:UnDeeper:
***************** \ |:| some has returned (["honk"],0)                                                           :3_5:UnDeeper:
**************** \ slMultiTerm has returned (["honk"],0)                                                          :3_5:UnDeeper:
**************** / |>>/base got ["honk"]                                                                          :3_5:UnDeeper:
*************** \ |>>/base has returned (["honk"],0)                                                               :3_5:UnDeeper:
************** \ |>> has returned (["honk"],0)                                                                      :3_5:UnDeeper:
************* \ |>>/recurse has returned (["honk"],1)                                                                :3_5:UnDeeper:
************ \ |>> has returned (["honk"],1)                                                                          :3_5:UnDeeper:
************ / aNLK: current depth is 2                                                                               :3_5:UnDeeper:
************ / |<|                                                                                                    :3_5:UnDeeper:
************ / |<* starting                                                                                           :3_5:UnDeeper:
************ / |<*/recurse                                                                                            :3_5:UnDeeper:
************ / |<*/recurse matched 1 UnDeepers, then got Or with -1 UnDeepers pending                               :3_5:GoDeeper:
************ / |<*/parent returning Or with 1 UnDeepers pending                                                     :3_5:GoDeeper:
************ / aNLK: slMultiTerm is ["honk"]                                                                        :3_5:GoDeeper:
*********** / /*= lookAhead failed, delegating to plain /+=                                                        :2_4:GoDeeper:
*********** / aboveNextLineKeyword                                                                                   :2_5:GoDeeper:
************ / expectUnDeepers                                                                                      :2_5:GoDeeper:
************* / pNumAsText                                                                                         :2_5:GoDeeper:
************* / ignoring ["GD","honk"]                                                                               :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                       :2_5:GoDeeper:
************ / aNLK: determined undp_count = 1                                                                      :2_5:GoDeeper:
************ / ->| trying to consume 1 GoDeepers                                                                    :2_5:GoDeeper:
************ / $*|                                                                                                  :2_5:GoDeeper:
************ \ $*| has returned ((),0)                                                                              :2_5:GoDeeper:
************ / ->| success                                                                                           :2_5:Other "honk:
************ / |>>                                                                                                   :2_5:Other "honk:
************* / |>>/recurse                                                                                         :2_5:Other "honk:
************* / |>>/base                                                                                            :2_5:Other "honk:
************** / slMultiTerm                                                                                       :2_5:Other "honk:
*************** / |:| some                                                                                        :2_5:Other "honk:
**************** / |:| base parser                                                                               :2_5:Other "honk:
**************** \ |:| base parser has returned ("honk",0)                                                        :3_5:UnDeeper:
**************** / |:| deeper                                                                                     :3_5:UnDeeper:
***************** / |:| some GoDeeper                                                                            :3_5:UnDeeper:
**************** / |:| noMore                                                                                     :3_5:UnDeeper:
**************** \ |:| noMore has returned ([],0)                                                                 :3_5:UnDeeper:
*************** \ |:| some has returned (["honk"],0)                                                               :3_5:UnDeeper:
************** \ slMultiTerm has returned (["honk"],0)                                                              :3_5:UnDeeper:
************** / |>>/base got ["honk"]                                                                              :3_5:UnDeeper:
************* \ |>>/base has returned (["honk"],0)                                                                   :3_5:UnDeeper:
************ \ |>> has returned (["honk"],0)                                                                          :3_5:UnDeeper:
************ / aNLK: current depth is 1                                                                               :3_5:UnDeeper:
************ / |<|                                                                                                    :3_5:UnDeeper:
************ / |<* starting                                                                                           :3_5:UnDeeper:
************ / |<*/recurse                                                                                            :3_5:UnDeeper:
************ / |<*/recurse matched 1 UnDeepers, then got Or with -1 UnDeepers pending                               :3_5:GoDeeper:
************ / |<*/parent returning Or with 0 UnDeepers pending                                                     :3_5:GoDeeper:
************ / aNLK: slMultiTerm is ["honk"]                                                                        :3_5:GoDeeper:
*********** \ aboveNextLineKeyword has returned ((["honk"],Or),0)                                                    :3_5:GoDeeper:
*********** / /*= lookAhead succeeded, recursing greedily                                                            :2_5:GoDeeper:
*********** / aboveNextLineKeyword                                                                                    :2_5:Other "honk:
************ / expectUnDeepers                                                                                       :2_5:Other "honk:
************* / ignoring ["honk"]                                                                                    :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                        :2_5:Other "honk:
************ / aNLK: determined undp_count = 1                                                                       :2_5:Other "honk:
************ / ->| trying to consume 1 GoDeepers                                                                     :2_5:Other "honk:
************ / $*|                                                                                                   :2_5:Other "honk:
************ \ $*| has returned ((),0)                                                                               :2_5:Other "honk:
*********** / /*= lookAhead failed, delegating to plain /+=                                                           :2_5:Other "honk:
*********** / aboveNextLineKeyword                                                                                     :3_5:UnDeeper:
************ / expectUnDeepers                                                                                        :3_5:UnDeeper:
************* / ignoring []                                                                                          :3_5:UnDeeper:
************* / matched undeepers [UnDeeper]                                                                      :3_4:Or:
************ \ expectUnDeepers has returned 1                                                                         :3_5:UnDeeper:
************ / aNLK: determined undp_count = 1                                                                        :3_5:UnDeeper:
************ / ->| trying to consume 1 GoDeepers                                                                      :3_5:UnDeeper:
************ / $*|                                                                                                    :3_5:UnDeeper:
************ \ $*| has returned ((),0)                                                                                :3_5:UnDeeper:
*********** / /*= lookAhead failed, delegating to plain /+=                                                            :3_5:UnDeeper:
*********** / /*= lookAhead succeeded, greedy recursion failed (no p1); returning p2.                                :2_5:GoDeeper:
********** \ pre part has returned (["a"],3)                                                                          :2_5:GoDeeper:
********* \ $*| has returned (["a"],3)                                                                                 :2_5:GoDeeper:
********* / made it to inner parser                                                                                    :2_5:GoDeeper:
********** / ppp inner                                                                                                :2_5:GoDeeper:
*********** / term p                                                                                                 :2_5:GoDeeper:
************ / term p/1a:label directly above                                                                       :2_5:GoDeeper:
************* / $*|                                                                                                :2_5:GoDeeper:
************** / |:| some                                                                                         :2_5:GoDeeper:
*************** / |:| base parser                                                                                :2_5:GoDeeper:
**************** / pNumAsText                                                                                   :2_5:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                                   :2_5:GoDeeper:
************* / |:| some                                                                                           :2_5:GoDeeper:
************** / |:| base parser                                                                                  :2_5:GoDeeper:
*************** / pNumAsText                                                                                     :2_5:GoDeeper:
************ / term p/notLabelTerm                                                                                  :2_5:GoDeeper:
************* / term p/2:someIndentation expr p                                                                    :2_5:GoDeeper:
************** / someIndentation                                                                                  :2_5:GoDeeper:
*************** / myindented: consuming GoDeeper                                                                 :2_5:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                            :2_5:Other "honk:
*************** / manyIndentation/leaf?                                                                           :2_5:Other "honk:
**************** / term p                                                                                        :2_5:Other "honk:
***************** / term p/1a:label directly above                                                              :2_5:Other "honk:
****************** / $*|                                                                                       :2_5:Other "honk:
******************* / |:| some                                                                                :2_5:Other "honk:
******************** / |:| base parser                                                                       :2_5:Other "honk:
******************** \ |:| base parser has returned ("honk",0)                                                :3_5:UnDeeper:
******************** / |:| deeper                                                                             :3_5:UnDeeper:
********************* / |:| some GoDeeper                                                                    :3_5:UnDeeper:
******************** / |:| noMore                                                                             :3_5:UnDeeper:
******************** \ |:| noMore has returned ([],0)                                                         :3_5:UnDeeper:
******************* \ |:| some has returned (["honk"],0)                                                       :3_5:UnDeeper:
******************* / pNumAsText                                                                               :3_5:UnDeeper:
***************** / term p/b:label to the left of line below, with EOL                                          :2_5:Other "honk:
****************** / |:| some                                                                                  :2_5:Other "honk:
******************* / |:| base parser                                                                         :2_5:Other "honk:
******************* \ |:| base parser has returned ("honk",0)                                                  :3_5:UnDeeper:
******************* / |:| deeper                                                                               :3_5:UnDeeper:
******************** / |:| some GoDeeper                                                                      :3_5:UnDeeper:
******************* / |:| noMore                                                                               :3_5:UnDeeper:
******************* \ |:| noMore has returned ([],0)                                                           :3_5:UnDeeper:
****************** \ |:| some has returned (["honk"],0)                                                         :3_5:UnDeeper:
****************** / undeepers                                                                                  :3_5:UnDeeper:
******************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                   :3_5:UnDeeper:
******************* / sameLine: success!                                                                       :3_5:UnDeeper:
****************** \ undeepers has returned ()                                                                  :3_5:UnDeeper:
****************** / matching EOL                                                                               :3_5:UnDeeper:
***************** / term p/notLabelTerm                                                                         :2_5:Other "honk:
****************** / term p/2:someIndentation expr p                                                           :2_5:Other "honk:
******************* / someIndentation                                                                         :2_5:Other "honk:
******************** / myindented: consuming GoDeeper                                                        :2_5:Other "honk:
****************** / term p/3:plain p                                                                          :2_5:Other "honk:
******************* / pRelPred                                                                                :2_5:Other "honk:
******************** / slRelPred                                                                             :2_5:Other "honk:
********************* / nested simpleHorn                                                                   :2_5:Other "honk:
********************** / |^|                                                                               :2_5:Other "honk:
********************** / $*|                                                                               :2_5:Other "honk:
*********************** / slMultiTerm                                                                     :2_5:Other "honk:
************************ / |:| some                                                                      :2_5:Other "honk:
************************* / |:| base parser                                                             :2_5:Other "honk:
************************* \ |:| base parser has returned ("honk",0)                                      :3_5:UnDeeper:
************************* / |:| deeper                                                                   :3_5:UnDeeper:
************************** / |:| some GoDeeper                                                          :3_5:UnDeeper:
************************* / |:| noMore                                                                   :3_5:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                               :3_5:UnDeeper:
************************ \ |:| some has returned (["honk"],0)                                             :3_5:UnDeeper:
*********************** \ slMultiTerm has returned (["honk"],0)                                            :3_5:UnDeeper:
********************** \ $*| has returned (["honk"],0)                                                      :3_5:UnDeeper:
********************** / |^| deeps                                                                          :3_5:UnDeeper:
********************** \ |^| deeps has returned [UnDeeper]                                               :3_4:Or:
********************* / RPConstraint                                                                        :2_5:Other "honk:
********************** / $*|                                                                               :2_5:Other "honk:
*********************** / slMultiTerm                                                                     :2_5:Other "honk:
************************ / |:| some                                                                      :2_5:Other "honk:
************************* / |:| base parser                                                             :2_5:Other "honk:
************************* \ |:| base parser has returned ("honk",0)                                      :3_5:UnDeeper:
************************* / |:| deeper                                                                   :3_5:UnDeeper:
************************** / |:| some GoDeeper                                                          :3_5:UnDeeper:
************************* / |:| noMore                                                                   :3_5:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                               :3_5:UnDeeper:
************************ \ |:| some has returned (["honk"],0)                                             :3_5:UnDeeper:
*********************** \ slMultiTerm has returned (["honk"],0)                                            :3_5:UnDeeper:
********************** \ $*| has returned (["honk"],0)                                                      :3_5:UnDeeper:
********************** / |>| calling $>>                                                                    :3_5:UnDeeper:
*********************** / $>>                                                                              :3_5:UnDeeper:
************************ / $>>/recurse                                                                    :3_5:UnDeeper:
************************ / $>>/base                                                                       :3_5:UnDeeper:
********************* / RPBoolStructR                                                                       :2_5:Other "honk:
********************** / $*|                                                                               :2_5:Other "honk:
*********************** / slMultiTerm                                                                     :2_5:Other "honk:
************************ / |:| some                                                                      :2_5:Other "honk:
************************* / |:| base parser                                                             :2_5:Other "honk:
************************* \ |:| base parser has returned ("honk",0)                                      :3_5:UnDeeper:
************************* / |:| deeper                                                                   :3_5:UnDeeper:
************************** / |:| some GoDeeper                                                          :3_5:UnDeeper:
************************* / |:| noMore                                                                   :3_5:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                               :3_5:UnDeeper:
************************ \ |:| some has returned (["honk"],0)                                             :3_5:UnDeeper:
*********************** \ slMultiTerm has returned (["honk"],0)                                            :3_5:UnDeeper:
********************** \ $*| has returned (["honk"],0)                                                      :3_5:UnDeeper:
********************** / |>| calling $>>                                                                    :3_5:UnDeeper:
*********************** / $>>                                                                              :3_5:UnDeeper:
************************ / $>>/recurse                                                                    :3_5:UnDeeper:
************************ / $>>/base                                                                       :3_5:UnDeeper:
********************* / RPMT                                                                                :2_5:Other "honk:
********************** / $*|                                                                               :2_5:Other "honk:
*********************** / slAKA                                                                           :2_5:Other "honk:
************************ / $*|                                                                           :2_5:Other "honk:
************************* / slAKA base                                                                  :2_5:Other "honk:
************************** / slMultiTerm                                                               :2_5:Other "honk:
*************************** / |:| some                                                                :2_5:Other "honk:
**************************** / |:| base parser                                                       :2_5:Other "honk:
**************************** \ |:| base parser has returned ("honk",0)                                :3_5:UnDeeper:
**************************** / |:| deeper                                                             :3_5:UnDeeper:
***************************** / |:| some GoDeeper                                                    :3_5:UnDeeper:
**************************** / |:| noMore                                                             :3_5:UnDeeper:
**************************** \ |:| noMore has returned ([],0)                                         :3_5:UnDeeper:
*************************** \ |:| some has returned (["honk"],0)                                       :3_5:UnDeeper:
************************** \ slMultiTerm has returned (["honk"],0)                                      :3_5:UnDeeper:
************************* \ slAKA base has returned (["honk"],0)                                         :3_5:UnDeeper:
************************ \ $*| has returned (["honk"],0)                                                  :3_5:UnDeeper:
************************ / |>>                                                                            :3_5:UnDeeper:
************************* / |>>/recurse                                                                  :3_5:UnDeeper:
************************* / |>>/base                                                                     :3_5:UnDeeper:
************************** / slAKA optional akapart                                                     :3_5:UnDeeper:
*************************** / |?| optional something                                                   :3_5:UnDeeper:
**************************** / |>>                                                                    :3_5:UnDeeper:
***************************** / |>>/recurse                                                          :3_5:UnDeeper:
***************************** / |>>/base                                                             :3_5:UnDeeper:
****************************** / PAKA/akapart                                                       :3_5:UnDeeper:
******************************* / $>|                                                              :3_5:UnDeeper:
******************************** / Aka Token                                                      :3_5:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                          :3_5:UnDeeper:
************************** \ slAKA optional akapart has returned (Nothing,0)                            :3_5:UnDeeper:
************************** / |>>/base got Nothing                                                       :3_5:UnDeeper:
************************* \ |>>/base has returned (Nothing,0)                                            :3_5:UnDeeper:
************************ \ |>> has returned (Nothing,0)                                                   :3_5:UnDeeper:
************************ / |>>                                                                            :3_5:UnDeeper:
************************* / |>>/recurse                                                                  :3_5:UnDeeper:
************************* / |>>/base                                                                     :3_5:UnDeeper:
************************** / slAKA optional typically                                                   :3_5:UnDeeper:
*************************** / |?| optional something                                                   :3_5:UnDeeper:
**************************** / |>>                                                                    :3_5:UnDeeper:
***************************** / |>>/recurse                                                          :3_5:UnDeeper:
***************************** / |>>/base                                                             :3_5:UnDeeper:
****************************** / typically                                                          :3_5:UnDeeper:
******************************* / $>|                                                              :3_5:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                          :3_5:UnDeeper:
************************** \ slAKA optional typically has returned (Nothing,0)                          :3_5:UnDeeper:
************************** / |>>/base got Nothing                                                       :3_5:UnDeeper:
************************* \ |>>/base has returned (Nothing,0)                                            :3_5:UnDeeper:
************************ \ |>> has returned (Nothing,0)                                                   :3_5:UnDeeper:
************************ / slAKA: proceeding after base and entityalias are retrieved ...                 :3_5:UnDeeper:
************************ / pAKA: entityalias = Nothing                                                    :3_5:UnDeeper:
*********************** \ slAKA has returned (["honk"],0)                                                  :3_5:UnDeeper:
********************** \ $*| has returned (["honk"],0)                                                      :3_5:UnDeeper:
********************* \ RPMT has returned (RPMT ["honk"],0)                                                  :3_5:UnDeeper:
******************** \ slRelPred has returned (RPMT ["honk"],0)                                               :3_5:UnDeeper:
******************** / undeepers                                                                              :3_5:UnDeeper:
********************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers               :3_5:UnDeeper:
********************* / sameLine: success!                                                                   :3_5:UnDeeper:
******************** \ undeepers has returned ()                                                              :3_5:UnDeeper:
******************* \ pRelPred has returned RPMT ["honk"]                                                      :3_5:UnDeeper:
****************** \ term p/3:plain p has returned MyLeaf (RPMT ["honk"])                                       :3_5:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["honk"])                                      :3_5:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["honk"])                                                     :3_5:UnDeeper:
**************** / binary(Or)                                                                                     :3_5:UnDeeper:
**************** / binary(And)                                                                                    :3_5:UnDeeper:
**************** / binary(SetLess)                                                                                :3_5:UnDeeper:
**************** / binary(SetPlus)                                                                                :3_5:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["honk"])                                        :3_5:UnDeeper:
*************** / myindented: consuming UnDeeper                                                                   :3_5:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                          :3_4:Or:
************** \ someIndentation has returned MyLeaf (RPMT ["honk"])                                             :3_4:Or:
************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["honk"])                               :3_4:Or:
************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["honk"])                                             :3_4:Or:
*********** \ term p has returned MyLeaf (RPMT ["honk"])                                                            :3_4:Or:
*********** / binary(Or)                                                                                            :3_4:Or:
*********** \ binary(Or) has returned Or                                                                             :3_5:GoDeeper:
*********** / term p                                                                                                 :3_5:GoDeeper:
************ / term p/1a:label directly above                                                                       :3_5:GoDeeper:
************* / $*|                                                                                                :3_5:GoDeeper:
************** / |:| some                                                                                         :3_5:GoDeeper:
*************** / |:| base parser                                                                                :3_5:GoDeeper:
**************** / pNumAsText                                                                                   :3_5:GoDeeper:
************ / term p/b:label to the left of line below, with EOL                                                   :3_5:GoDeeper:
************* / |:| some                                                                                           :3_5:GoDeeper:
************** / |:| base parser                                                                                  :3_5:GoDeeper:
*************** / pNumAsText                                                                                     :3_5:GoDeeper:
************ / term p/notLabelTerm                                                                                  :3_5:GoDeeper:
************* / term p/2:someIndentation expr p                                                                    :3_5:GoDeeper:
************** / someIndentation                                                                                  :3_5:GoDeeper:
*************** / myindented: consuming GoDeeper                                                                 :3_5:GoDeeper:
*************** \ myindented: consuming GoDeeper has returned GoDeeper                                            :3_5:Other "ponk:
*************** / manyIndentation/leaf?                                                                           :3_5:Other "ponk:
**************** / term p                                                                                        :3_5:Other "ponk:
***************** / term p/1a:label directly above                                                              :3_5:Other "ponk:
****************** / $*|                                                                                       :3_5:Other "ponk:
******************* / |:| some                                                                                :3_5:Other "ponk:
******************** / |:| base parser                                                                       :3_5:Other "ponk:
******************** \ |:| base parser has returned ("ponk",0)                                          :1_2:UnDeeper:
******************** / |:| deeper                                                                       :1_2:UnDeeper:
********************* / |:| some GoDeeper                                                              :1_2:UnDeeper:
******************** / |:| noMore                                                                       :1_2:UnDeeper:
******************** \ |:| noMore has returned ([],0)                                                   :1_2:UnDeeper:
******************* \ |:| some has returned (["ponk"],0)                                                 :1_2:UnDeeper:
******************* / pNumAsText                                                                         :1_2:UnDeeper:
***************** / term p/b:label to the left of line below, with EOL                                          :3_5:Other "ponk:
****************** / |:| some                                                                                  :3_5:Other "ponk:
******************* / |:| base parser                                                                         :3_5:Other "ponk:
******************* \ |:| base parser has returned ("ponk",0)                                            :1_2:UnDeeper:
******************* / |:| deeper                                                                         :1_2:UnDeeper:
******************** / |:| some GoDeeper                                                                :1_2:UnDeeper:
******************* / |:| noMore                                                                         :1_2:UnDeeper:
******************* \ |:| noMore has returned ([],0)                                                     :1_2:UnDeeper:
****************** \ |:| some has returned (["ponk"],0)                                                   :1_2:UnDeeper:
****************** / undeepers                                                                            :1_2:UnDeeper:
******************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :1_2:UnDeeper:
******************* / sameLine: success!                                                                 :1_2:UnDeeper:
****************** \ undeepers has returned ()                                                            :1_2:UnDeeper:
****************** / matching EOL                                                                         :1_2:UnDeeper:
***************** / term p/notLabelTerm                                                                         :3_5:Other "ponk:
****************** / term p/2:someIndentation expr p                                                           :3_5:Other "ponk:
******************* / someIndentation                                                                         :3_5:Other "ponk:
******************** / myindented: consuming GoDeeper                                                        :3_5:Other "ponk:
****************** / term p/3:plain p                                                                          :3_5:Other "ponk:
******************* / pRelPred                                                                                :3_5:Other "ponk:
******************** / slRelPred                                                                             :3_5:Other "ponk:
********************* / nested simpleHorn                                                                   :3_5:Other "ponk:
********************** / |^|                                                                               :3_5:Other "ponk:
********************** / $*|                                                                               :3_5:Other "ponk:
*********************** / slMultiTerm                                                                     :3_5:Other "ponk:
************************ / |:| some                                                                      :3_5:Other "ponk:
************************* / |:| base parser                                                             :3_5:Other "ponk:
************************* \ |:| base parser has returned ("ponk",0)                                :1_2:UnDeeper:
************************* / |:| deeper                                                             :1_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :1_2:UnDeeper:
************************* / |:| noMore                                                             :1_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :1_2:UnDeeper:
************************ \ |:| some has returned (["ponk"],0)                                       :1_2:UnDeeper:
*********************** \ slMultiTerm has returned (["ponk"],0)                                      :1_2:UnDeeper:
********************** \ $*| has returned (["ponk"],0)                                                :1_2:UnDeeper:
********************** / |^| deeps                                                                    :1_2:UnDeeper:
********************** \ |^| deeps has returned [UnDeeper,UnDeeper,UnDeeper,UnDeeper]            :EOF:
********************* / RPConstraint                                                                        :3_5:Other "ponk:
********************** / $*|                                                                               :3_5:Other "ponk:
*********************** / slMultiTerm                                                                     :3_5:Other "ponk:
************************ / |:| some                                                                      :3_5:Other "ponk:
************************* / |:| base parser                                                             :3_5:Other "ponk:
************************* \ |:| base parser has returned ("ponk",0)                                :1_2:UnDeeper:
************************* / |:| deeper                                                             :1_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :1_2:UnDeeper:
************************* / |:| noMore                                                             :1_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :1_2:UnDeeper:
************************ \ |:| some has returned (["ponk"],0)                                       :1_2:UnDeeper:
*********************** \ slMultiTerm has returned (["ponk"],0)                                      :1_2:UnDeeper:
********************** \ $*| has returned (["ponk"],0)                                                :1_2:UnDeeper:
********************** / |>| calling $>>                                                              :1_2:UnDeeper:
*********************** / $>>                                                                        :1_2:UnDeeper:
************************ / $>>/recurse                                                              :1_2:UnDeeper:
************************ / $>>/base                                                                 :1_2:UnDeeper:
********************* / RPBoolStructR                                                                       :3_5:Other "ponk:
********************** / $*|                                                                               :3_5:Other "ponk:
*********************** / slMultiTerm                                                                     :3_5:Other "ponk:
************************ / |:| some                                                                      :3_5:Other "ponk:
************************* / |:| base parser                                                             :3_5:Other "ponk:
************************* \ |:| base parser has returned ("ponk",0)                                :1_2:UnDeeper:
************************* / |:| deeper                                                             :1_2:UnDeeper:
************************** / |:| some GoDeeper                                                    :1_2:UnDeeper:
************************* / |:| noMore                                                             :1_2:UnDeeper:
************************* \ |:| noMore has returned ([],0)                                         :1_2:UnDeeper:
************************ \ |:| some has returned (["ponk"],0)                                       :1_2:UnDeeper:
*********************** \ slMultiTerm has returned (["ponk"],0)                                      :1_2:UnDeeper:
********************** \ $*| has returned (["ponk"],0)                                                :1_2:UnDeeper:
********************** / |>| calling $>>                                                              :1_2:UnDeeper:
*********************** / $>>                                                                        :1_2:UnDeeper:
************************ / $>>/recurse                                                              :1_2:UnDeeper:
************************ / $>>/base                                                                 :1_2:UnDeeper:
********************* / RPMT                                                                                :3_5:Other "ponk:
********************** / $*|                                                                               :3_5:Other "ponk:
*********************** / slAKA                                                                           :3_5:Other "ponk:
************************ / $*|                                                                           :3_5:Other "ponk:
************************* / slAKA base                                                                  :3_5:Other "ponk:
************************** / slMultiTerm                                                               :3_5:Other "ponk:
*************************** / |:| some                                                                :3_5:Other "ponk:
**************************** / |:| base parser                                                       :3_5:Other "ponk:
**************************** \ |:| base parser has returned ("ponk",0)                          :1_2:UnDeeper:
**************************** / |:| deeper                                                       :1_2:UnDeeper:
***************************** / |:| some GoDeeper                                              :1_2:UnDeeper:
**************************** / |:| noMore                                                       :1_2:UnDeeper:
**************************** \ |:| noMore has returned ([],0)                                   :1_2:UnDeeper:
*************************** \ |:| some has returned (["ponk"],0)                                 :1_2:UnDeeper:
************************** \ slMultiTerm has returned (["ponk"],0)                                :1_2:UnDeeper:
************************* \ slAKA base has returned (["ponk"],0)                                   :1_2:UnDeeper:
************************ \ $*| has returned (["ponk"],0)                                            :1_2:UnDeeper:
************************ / |>>                                                                      :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional akapart                                               :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>                                                              :1_2:UnDeeper:
***************************** / |>>/recurse                                                    :1_2:UnDeeper:
***************************** / |>>/base                                                       :1_2:UnDeeper:
****************************** / PAKA/akapart                                                 :1_2:UnDeeper:
******************************* / $>|                                                        :1_2:UnDeeper:
******************************** / Aka Token                                                :1_2:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
************************** \ slAKA optional akapart has returned (Nothing,0)                      :1_2:UnDeeper:
************************** / |>>/base got Nothing                                                 :1_2:UnDeeper:
************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************ \ |>> has returned (Nothing,0)                                             :1_2:UnDeeper:
************************ / |>>                                                                      :1_2:UnDeeper:
************************* / |>>/recurse                                                            :1_2:UnDeeper:
************************* / |>>/base                                                               :1_2:UnDeeper:
************************** / slAKA optional typically                                             :1_2:UnDeeper:
*************************** / |?| optional something                                             :1_2:UnDeeper:
**************************** / |>>                                                              :1_2:UnDeeper:
***************************** / |>>/recurse                                                    :1_2:UnDeeper:
***************************** / |>>/base                                                       :1_2:UnDeeper:
****************************** / typically                                                    :1_2:UnDeeper:
******************************* / $>|                                                        :1_2:UnDeeper:
*************************** \ |?| optional something has returned (Nothing,0)                    :1_2:UnDeeper:
************************** \ slAKA optional typically has returned (Nothing,0)                    :1_2:UnDeeper:
************************** / |>>/base got Nothing                                                 :1_2:UnDeeper:
************************* \ |>>/base has returned (Nothing,0)                                      :1_2:UnDeeper:
************************ \ |>> has returned (Nothing,0)                                             :1_2:UnDeeper:
************************ / slAKA: proceeding after base and entityalias are retrieved ...           :1_2:UnDeeper:
************************ / pAKA: entityalias = Nothing                                              :1_2:UnDeeper:
*********************** \ slAKA has returned (["ponk"],0)                                            :1_2:UnDeeper:
********************** \ $*| has returned (["ponk"],0)                                                :1_2:UnDeeper:
********************* \ RPMT has returned (RPMT ["ponk"],0)                                            :1_2:UnDeeper:
******************** \ slRelPred has returned (RPMT ["ponk"],0)                                         :1_2:UnDeeper:
******************** / undeepers                                                                        :1_2:UnDeeper:
********************* / sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :1_2:UnDeeper:
********************* / sameLine: success!                                                             :1_2:UnDeeper:
******************** \ undeepers has returned ()                                                        :1_2:UnDeeper:
******************* \ pRelPred has returned RPMT ["ponk"]                                                :1_2:UnDeeper:
****************** \ term p/3:plain p has returned MyLeaf (RPMT ["ponk"])                                 :1_2:UnDeeper:
***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["ponk"])                                :1_2:UnDeeper:
**************** \ term p has returned MyLeaf (RPMT ["ponk"])                                               :1_2:UnDeeper:
**************** / binary(Or)                                                                               :1_2:UnDeeper:
**************** / binary(And)                                                                              :1_2:UnDeeper:
**************** / binary(SetLess)                                                                          :1_2:UnDeeper:
**************** / binary(SetPlus)                                                                          :1_2:UnDeeper:
*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["ponk"])                                  :1_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :1_2:UnDeeper:
*************** \ myindented: consuming UnDeeper has returned UnDeeper                                         :1_3:UnDeeper:
************** \ someIndentation has returned MyLeaf (RPMT ["ponk"])                                            :1_3:UnDeeper:
************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["ponk"])                              :1_3:UnDeeper:
************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["ponk"])                                            :1_3:UnDeeper:
*********** \ term p has returned MyLeaf (RPMT ["ponk"])                                                           :1_3:UnDeeper:
*********** / binary(Or)                                                                                           :1_3:UnDeeper:
*********** / binary(And)                                                                                          :1_3:UnDeeper:
*********** / binary(SetLess)                                                                                      :1_3:UnDeeper:
*********** / binary(SetPlus)                                                                                      :1_3:UnDeeper:
********** \ ppp inner has returned Any Nothing [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]                         :1_3:UnDeeper:
********* \ made it to inner parser has returned Any Nothing [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]             :1_3:UnDeeper:
********* / undeepers                                                                                                :1_3:UnDeeper:
********** / sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                                 :1_3:UnDeeper:
********** / sameLine: success!                                                                              :EOF:
********* \ undeepers has returned ()                                                                         :EOF:
******** \ withPreOnly has returned Any (Just (Pre "a")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]           :EOF:
******* \ pBSR has returned Any (Just (Pre "a")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]                    :EOF:
****** \ preambleBoolStructR [Means,Includes,Is] has returned (Means,Any (Just (Pre "a")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]) :EOF:
****** / preambleParamText:[Given]                                                                               :EOF:
******* / $>|                                                                                                   :EOF:
****** / preambleBoolStructR [Unless]                                                                            :EOF:
****** / preambleBoolStructR [When,If]                                                                           :EOF:
***** \ permutationsCon: copula=[Means,Includes,Is], positive=[When,If], negative=[Unless], given=[Given] has returned ((Means,Any (Just (Pre "a")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]),[],[],[]) :EOF:
**** \ manyIndentation/leaf? has returned ((Means,Any (Just (Pre "a")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]),[],[],[]) :EOF:
*** \ pConstitutiveRule has returned Constitutive {name = ["wonk"], keyword = Means, letbind = Any (Just (Pre "a")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])], cond = Nothing, given = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/inline-1-p.csv", short = "test/inline-1-p.csv", srcrow = 1, srccol = 1, version = Nothing}), defaults = [], symtab = []} :EOF:
** \ pRule has returned Hornlike {name = ["wonk"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["wonk"] RPis (Any (Just (Pre "a")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/inline-1-p.csv", short = "test/inline-1-p.csv", srcrow = 2, srccol = 1, version = Nothing}), defaults = [], symtab = []} :EOF:
** / pRule                                                                                                           :EOF:
* final
:PROPERTIES:
:VISIBILITY: all
:END:

[ Hornlike
    { name = [ "wonk" ]
    , keyword = Means
    , given = Nothing
    , upon = Nothing
    , clauses =
        [ HC2
            { hHead = RPBoolStructR [ "wonk" ] RPis
                ( Any
                    ( Just
                        ( Pre "a" )
                    )
                    [ Leaf
                        ( RPMT [ "honk" ] )
                    , Leaf
                        ( RPMT [ "ponk" ] )
                    ]
                )
            , hBody = Nothing
            }
        ]
    , rlabel = Nothing
    , lsource = Nothing
    , srcref = Just
        ( SrcRef
            { url = "test/inline-1-p.csv"
            , short = "test/inline-1-p.csv"
            , srcrow = 2
            , srccol = 1
            , version = Nothing
            }
        )
    , defaults = []
    , symtab = []
    }
]
