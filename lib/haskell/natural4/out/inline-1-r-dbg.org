* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /inline-1-r/)

* Tokens
[GoDeeper,Other "multiwonk",UnDeeper,Means,GoDeeper,Other "poopoo",UnDeeper,Or,GoDeeper,Other "the",GoDeeper,GoDeeper,GoDeeper,Other "honk",UnDeeper,Or,GoDeeper,Other "ponk",UnDeeper,UnDeeper,UnDeeper,UnDeeper]
1_2:GoDeeper   > |<|
1_2:GoDeeper   > |<* starting
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / $*|                                                                                                                :1_2:GoDeeper:
*** / |>>/recurse                                                                                                      :1_2:GoDeeper:
**** / |>>/recurse                                                                                                     :1_2:Other "mult:
|>>/recurse> IN: Other "multiwonk" UnDeeper Means GoDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=1:
|>>/recurse> unexpected Other "multiwonk"
|>>/recurse> expecting GoDeeper

**** / |>>/base                                                                                                        :1_2:Other "mult:
***** / subject slMultiTerm                                                                                           :1_2:Other "mult:
****** / slMultiTerm                                                                                                 :1_2:Other "mult:
******* / someSL                                                                                                    :1_2:Other "mult:
someSL> IN: Other "multiwonk" UnDeeper Means GoDeepe <…>
someSL> MATCH (COK): Other "multiwonk"
someSL> VALUE: ((["multiwonk"],0),[])

******* \ someSL has returned (["multiwonk"],0)                                                                      :2_2:UnDeeper:
slMultiTerm> IN: Other "multiwonk" UnDeeper Means GoDeepe <…>
slMultiTerm> MATCH (COK): Other "multiwonk"
slMultiTerm> VALUE: ((["multiwonk"],0),[])

****** \ slMultiTerm has returned (["multiwonk"],0)                                                                   :2_2:UnDeeper:
subject slMultiTerm> IN: Other "multiwonk" UnDeeper Means GoDeepe <…>
subject slMultiTerm> MATCH (COK): Other "multiwonk"
subject slMultiTerm> VALUE: ((["multiwonk"],0),[])

***** \ subject slMultiTerm has returned (["multiwonk"],0)                                                             :2_2:UnDeeper:
***** > |>>/base got ["multiwonk"]                                                                                     :2_2:UnDeeper:
|>>/base> IN: Other "multiwonk" UnDeeper Means GoDeepe <…>
|>>/base> MATCH (COK): Other "multiwonk"
|>>/base> VALUE: ((["multiwonk"],0),[])

**** \ |>>/base has returned (["multiwonk"],0)                                                                          :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "multiwonk" UnDeeper Mean <…>
|>>/recurse> MATCH (COK): GoDeeper Other "multiwonk"
|>>/recurse> VALUE: ((["multiwonk"],1),[])

*** \ |>>/recurse has returned (["multiwonk"],1)                                                                         :2_2:UnDeeper:
$*|> IN: GoDeeper Other "multiwonk" UnDeeper Mean <…>
$*|> MATCH (COK): GoDeeper Other "multiwonk"
$*|> VALUE: ((["multiwonk"],1),[])

** \ $*| has returned (["multiwonk"],1)                                                                                   :2_2:UnDeeper:
** / |<*/parent                                                                                                           :2_2:UnDeeper:
*** > |<*/recurse                                                                                                        :2_2:UnDeeper:
*** > |<*/recurse matched 1 UnDeepers                                                                                  :2_2:GoDeeper:
|<*/parent> IN: UnDeeper Means GoDeeper Other "poopoo" U <…>
|<*/parent> MATCH (COK): UnDeeper Means
|<*/parent> VALUE: ((Means,-1),[])

** \ |<*/parent has returned (Means,-1)                                                                                 :2_2:GoDeeper:
** / made it to pBSR                                                                                                    :2_2:GoDeeper:
*** / pBSR                                                                                                             :2_2:GoDeeper:
**** / ppp inner                                                                                                      :2_2:GoDeeper:
***** / expression                                                                                                   :2_2:GoDeeper:
****** / labelPrefix                                                                                                :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=4:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

****** / term p                                                                                                     :2_2:GoDeeper:
******* / term p/1a:label directly above                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / someSL                                                                                               :2_2:GoDeeper:
********** / pNumAsText                                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=4:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******* / term p/b:label to the left of line below, with EOL                                                       :2_2:GoDeeper:
******** / someSL                                                                                                 :2_2:GoDeeper:
********* / pNumAsText                                                                                           :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=4:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******* / term p/notLabelTerm                                                                                      :2_2:GoDeeper:
******** / term p/2:someIndentation expr p                                                                        :2_2:GoDeeper:
********* / someIndentation                                                                                      :2_2:GoDeeper:
********** / myindented: consuming GoDeeper                                                                     :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********** \ myindented: consuming GoDeeper has returned GoDeeper                                                :2_2:Other "poop:
********** / manyIndentation/leaf?                                                                               :2_2:Other "poop:
*********** / expression                                                                                        :2_2:Other "poop:
************ / labelPrefix                                                                                     :2_2:Other "poop:
labelPrefix> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=6:
labelPrefix> unexpected UnDeeper

************ / term p                                                                                          :2_2:Other "poop:
************* / term p/1a:label directly above                                                                :2_2:Other "poop:
************** / $*|                                                                                         :2_2:Other "poop:
*************** / someSL                                                                                    :2_2:Other "poop:
someSL> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "poopoo"
someSL> VALUE: ((["poopoo"],0),[])

*************** \ someSL has returned (["poopoo"],0)                                                         :3_2:UnDeeper:
*************** / pNumAsText                                                                                 :3_2:UnDeeper:
pNumAsText> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (CERR): Other "poopoo"
$*|> ERROR:
$*|> offset=6:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
term p/1a:label directly above> MATCH (CERR): Other "poopoo"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

************* / term p/b:label to the left of line below, with EOL                                            :2_2:Other "poop:
************** / someSL                                                                                      :2_2:Other "poop:
someSL> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "poopoo"
someSL> VALUE: ((["poopoo"],0),[])

************** \ someSL has returned (["poopoo"],0)                                                           :3_2:UnDeeper:
************** / undeepers                                                                                    :3_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :3_2:UnDeeper:
*************** > sameLine: success!                                                                         :3_2:UnDeeper:
undeepers> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :3_2:UnDeeper:
************** / matching EOL                                                                                 :3_2:UnDeeper:
matching EOL> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=6:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "poopoo"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

************* / term p/notLabelTerm                                                                           :2_2:Other "poop:
************** / term p/2:someIndentation expr p                                                             :2_2:Other "poop:
*************** / someIndentation                                                                           :2_2:Other "poop:
**************** / myindented: consuming GoDeeper                                                          :2_2:Other "poop:
myindented: consuming GoDeeper> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=5:
myindented: consuming GoDeeper> unexpected Other "poopoo"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=5:
someIndentation> unexpected Other "poopoo"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=5:
term p/2:someIndentation expr p> unexpected Other "poopoo"
term p/2:someIndentation expr p> expecting GoDeeper

************** / term p/3:plain p                                                                            :2_2:Other "poop:
*************** / pRelPred                                                                                  :2_2:Other "poop:
**************** / slRelPred                                                                               :2_2:Other "poop:
***************** / nested simpleHorn                                                                     :2_2:Other "poop:
****************** > |^|                                                                                 :2_2:Other "poop:
****************** / $*|                                                                                 :2_2:Other "poop:
******************* / slMultiTerm                                                                       :2_2:Other "poop:
******************** / someSL                                                                          :2_2:Other "poop:
someSL> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "poopoo"
someSL> VALUE: ((["poopoo"],0),[])

******************** \ someSL has returned (["poopoo"],0)                                               :3_2:UnDeeper:
slMultiTerm> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "poopoo"
slMultiTerm> VALUE: ((["poopoo"],0),[])

******************* \ slMultiTerm has returned (["poopoo"],0)                                            :3_2:UnDeeper:
$*|> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "poopoo"
$*|> VALUE: ((["poopoo"],0),[])

****************** \ $*| has returned (["poopoo"],0)                                                      :3_2:UnDeeper:
****************** / |^| deeps                                                                            :3_2:UnDeeper:
|^| deeps> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|^| deeps> MATCH (COK): UnDeeper
|^| deeps> VALUE: (([()],-1),[])

****************** \ |^| deeps has returned ([()],-1)                                                  :3_1:Or:
nested simpleHorn> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
nested simpleHorn> MATCH (CERR): Other "poopoo" UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=7:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

***************** / RPConstraint                                                                          :2_2:Other "poop:
****************** / $*|                                                                                 :2_2:Other "poop:
******************* / slMultiTerm                                                                       :2_2:Other "poop:
******************** / someSL                                                                          :2_2:Other "poop:
someSL> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "poopoo"
someSL> VALUE: ((["poopoo"],0),[])

******************** \ someSL has returned (["poopoo"],0)                                               :3_2:UnDeeper:
slMultiTerm> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "poopoo"
slMultiTerm> VALUE: ((["poopoo"],0),[])

******************* \ slMultiTerm has returned (["poopoo"],0)                                            :3_2:UnDeeper:
$*|> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "poopoo"
$*|> VALUE: ((["poopoo"],0),[])

****************** \ $*| has returned (["poopoo"],0)                                                      :3_2:UnDeeper:
****************** / |>| calling $>>                                                                      :3_2:UnDeeper:
******************* / |>>/recurse                                                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                           :3_2:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
RPConstraint> MATCH (CERR): Other "poopoo"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************** / RPBoolStructR                                                                         :2_2:Other "poop:
****************** / $*|                                                                                 :2_2:Other "poop:
******************* / slMultiTerm                                                                       :2_2:Other "poop:
******************** / someSL                                                                          :2_2:Other "poop:
someSL> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "poopoo"
someSL> VALUE: ((["poopoo"],0),[])

******************** \ someSL has returned (["poopoo"],0)                                               :3_2:UnDeeper:
slMultiTerm> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "poopoo"
slMultiTerm> VALUE: ((["poopoo"],0),[])

******************* \ slMultiTerm has returned (["poopoo"],0)                                            :3_2:UnDeeper:
$*|> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "poopoo"
$*|> VALUE: ((["poopoo"],0),[])

****************** \ $*| has returned (["poopoo"],0)                                                      :3_2:UnDeeper:
****************** / |>| calling $>>                                                                      :3_2:UnDeeper:
******************* / |>>/recurse                                                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                           :3_2:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
RPBoolStructR> MATCH (CERR): Other "poopoo"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************** / RPMT                                                                                  :2_2:Other "poop:
****************** / $*|                                                                                 :2_2:Other "poop:
******************* / slAKA                                                                             :2_2:Other "poop:
******************** / $*|                                                                             :2_2:Other "poop:
********************* / slAKA base                                                                    :2_2:Other "poop:
********************** / slMultiTerm                                                                 :2_2:Other "poop:
*********************** / someSL                                                                    :2_2:Other "poop:
someSL> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
someSL> MATCH (COK): Other "poopoo"
someSL> VALUE: ((["poopoo"],0),[])

*********************** \ someSL has returned (["poopoo"],0)                                         :3_2:UnDeeper:
slMultiTerm> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
slMultiTerm> MATCH (COK): Other "poopoo"
slMultiTerm> VALUE: ((["poopoo"],0),[])

********************** \ slMultiTerm has returned (["poopoo"],0)                                      :3_2:UnDeeper:
slAKA base> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
slAKA base> MATCH (COK): Other "poopoo"
slAKA base> VALUE: ((["poopoo"],0),[])

********************* \ slAKA base has returned (["poopoo"],0)                                         :3_2:UnDeeper:
$*|> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "poopoo"
$*|> VALUE: ((["poopoo"],0),[])

******************** \ $*| has returned (["poopoo"],0)                                                  :3_2:UnDeeper:
******************** / |>>/recurse                                                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :3_2:UnDeeper:
********************* / slAKA optional akapart                                                         :3_2:UnDeeper:
********************** / |?| optional something                                                       :3_2:UnDeeper:
*********************** / |>>/recurse                                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************** / |>>/base                                                                   :3_2:UnDeeper:
************************ / PAKA/akapart                                                             :3_2:UnDeeper:
************************* / $>|                                                                    :3_2:UnDeeper:
************************** / Aka Token                                                            :3_2:UnDeeper:
Aka Token> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************** \ |?| optional something has returned (Nothing,0)                              :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************* \ slAKA optional akapart has returned (Nothing,0)                                :3_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :3_2:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :3_2:UnDeeper:
******************** / |>>/recurse                                                                      :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :3_2:UnDeeper:
********************* / slAKA optional typically                                                       :3_2:UnDeeper:
********************** / |?| optional something                                                       :3_2:UnDeeper:
*********************** / |>>/recurse                                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************** / |>>/base                                                                   :3_2:UnDeeper:
************************ / typically                                                                :3_2:UnDeeper:
************************* / $>|                                                                    :3_2:UnDeeper:
$>|> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************** \ |?| optional something has returned (Nothing,0)                              :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************* \ slAKA optional typically has returned (Nothing,0)                              :3_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :3_2:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :3_2:UnDeeper:
******************** > slAKA: proceeding after base and entityalias are retrieved ...                   :3_2:UnDeeper:
******************** > pAKA: entityalias = Nothing                                                      :3_2:UnDeeper:
slAKA> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
slAKA> MATCH (COK): Other "poopoo"
slAKA> VALUE: ((["poopoo"],0),[])

******************* \ slAKA has returned (["poopoo"],0)                                                  :3_2:UnDeeper:
$*|> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
$*|> MATCH (COK): Other "poopoo"
$*|> VALUE: ((["poopoo"],0),[])

****************** \ $*| has returned (["poopoo"],0)                                                      :3_2:UnDeeper:
RPMT> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
RPMT> MATCH (COK): Other "poopoo"
RPMT> VALUE: ((RPMT ["poopoo"],0),[])

***************** \ RPMT has returned (RPMT ["poopoo"],0)                                                  :3_2:UnDeeper:
slRelPred> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
slRelPred> MATCH (COK): Other "poopoo"
slRelPred> VALUE: ((RPMT ["poopoo"],0),[])

**************** \ slRelPred has returned (RPMT ["poopoo"],0)                                               :3_2:UnDeeper:
**************** / undeepers                                                                                :3_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                 :3_2:UnDeeper:
***************** > sameLine: success!                                                                     :3_2:UnDeeper:
undeepers> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                :3_2:UnDeeper:
pRelPred> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
pRelPred> MATCH (COK): Other "poopoo"
pRelPred> VALUE: (RPMT ["poopoo"],[])

*************** \ pRelPred has returned RPMT ["poopoo"]                                                      :3_2:UnDeeper:
term p/3:plain p> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
term p/3:plain p> MATCH (COK): Other "poopoo"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["poopoo"]),[])

************** \ term p/3:plain p has returned MyLeaf (RPMT ["poopoo"])                                       :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
term p/notLabelTerm> MATCH (COK): Other "poopoo"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["poopoo"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["poopoo"])                                      :3_2:UnDeeper:
term p> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
term p> MATCH (COK): Other "poopoo"
term p> VALUE: (MyLeaf (RPMT ["poopoo"]),[])

************ \ term p has returned MyLeaf (RPMT ["poopoo"])                                                     :3_2:UnDeeper:
************ / binary(Or)                                                                                       :3_2:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=6:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************ / binary(And)                                                                                      :3_2:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=6:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************ / binary(SetLess)                                                                                  :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=6:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                                  :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=6:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
expression> MATCH (COK): Other "poopoo"
expression> VALUE: (MyLeaf (RPMT ["poopoo"]),[])

*********** \ expression has returned MyLeaf (RPMT ["poopoo"])                                                   :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "poopoo" UnDeeper Or GoDeeper Othe <…>
manyIndentation/leaf?> MATCH (COK): Other "poopoo"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["poopoo"]),[])

********** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["poopoo"])                                          :3_2:UnDeeper:
********** / myindented: consuming UnDeeper                                                                       :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper Other "the" GoDeepe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********** \ myindented: consuming UnDeeper has returned UnDeeper                                              :3_1:Or:
someIndentation> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
someIndentation> MATCH (COK): GoDeeper Other "poopoo" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["poopoo"]),[])

********* \ someIndentation has returned MyLeaf (RPMT ["poopoo"])                                               :3_1:Or:
term p/2:someIndentation expr p> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "poopoo" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["poopoo"]),[])

******** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["poopoo"])                                 :3_1:Or:
term p/notLabelTerm> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "poopoo" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["poopoo"]),[])

******* \ term p/notLabelTerm has returned MyLeaf (RPMT ["poopoo"])                                               :3_1:Or:
term p> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
term p> MATCH (COK): GoDeeper Other "poopoo" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["poopoo"]),[])

****** \ term p has returned MyLeaf (RPMT ["poopoo"])                                                              :3_1:Or:
****** / binary(Or)                                                                                                :3_1:Or:
binary(Or)> IN: Or GoDeeper Other "the" GoDeeper GoDeepe <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

****** \ binary(Or) has returned Or                                                                                 :3_2:GoDeeper:
****** / term p                                                                                                     :3_2:GoDeeper:
******* / term p/1a:label directly above                                                                           :3_2:GoDeeper:
******** / $*|                                                                                                    :3_2:GoDeeper:
********* / someSL                                                                                               :3_2:GoDeeper:
********** / pNumAsText                                                                                         :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******* / term p/b:label to the left of line below, with EOL                                                       :3_2:GoDeeper:
******** / someSL                                                                                                 :3_2:GoDeeper:
********* / pNumAsText                                                                                           :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******* / term p/notLabelTerm                                                                                      :3_2:GoDeeper:
******** / term p/2:someIndentation expr p                                                                        :3_2:GoDeeper:
********* / someIndentation                                                                                      :3_2:GoDeeper:
********** / myindented: consuming GoDeeper                                                                     :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********** \ myindented: consuming GoDeeper has returned GoDeeper                                                :3_2:Other "the":
********** / manyIndentation/leaf?                                                                               :3_2:Other "the":
*********** / expression                                                                                        :3_2:Other "the":
************ / labelPrefix                                                                                     :3_2:Other "the":
labelPrefix> IN: Other "the" GoDeeper GoDeeper GoDeeper O <…>
labelPrefix> MATCH (COK): Other "the"
labelPrefix> VALUE: ("the",[])

************ \ labelPrefix has returned "the"                                                                   :3_3:GoDeeper:
************ / term p                                                                                           :3_3:GoDeeper:
************* / term p/1a:label directly above                                                                 :3_3:GoDeeper:
************** / $*|                                                                                          :3_3:GoDeeper:
*************** / someSL                                                                                     :3_3:GoDeeper:
**************** / pNumAsText                                                                               :3_3:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=10:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************* / term p/b:label to the left of line below, with EOL                                             :3_3:GoDeeper:
************** / someSL                                                                                       :3_3:GoDeeper:
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=10:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************* / term p/notLabelTerm                                                                            :3_3:GoDeeper:
************** / term p/2:someIndentation expr p                                                              :3_3:GoDeeper:
*************** / someIndentation                                                                            :3_3:GoDeeper:
**************** / myindented: consuming GoDeeper                                                           :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                       :3_4:GoDeeper:
**************** / manyIndentation/leaf?                                                                      :3_4:GoDeeper:
***************** / expression                                                                               :3_4:GoDeeper:
****************** / labelPrefix                                                                            :3_4:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

****************** / term p                                                                                 :3_4:GoDeeper:
******************* / term p/1a:label directly above                                                       :3_4:GoDeeper:
******************** / $*|                                                                                :3_4:GoDeeper:
********************* / someSL                                                                           :3_4:GoDeeper:
********************** / pNumAsText                                                                     :3_4:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=11:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************* / term p/b:label to the left of line below, with EOL                                   :3_4:GoDeeper:
******************** / someSL                                                                             :3_4:GoDeeper:
********************* / pNumAsText                                                                       :3_4:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=11:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************* / term p/notLabelTerm                                                                  :3_4:GoDeeper:
******************** / term p/2:someIndentation expr p                                                    :3_4:GoDeeper:
********************* / someIndentation                                                                  :3_4:GoDeeper:
********************** / myindented: consuming GoDeeper                                                 :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                             :3_5:GoDeeper:
********************** / manyIndentation/leaf?                                                            :3_5:GoDeeper:
*********************** / expression                                                                     :3_5:GoDeeper:
************************ / labelPrefix                                                                  :3_5:GoDeeper:
labelPrefix> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=12:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************************ / term p                                                                       :3_5:GoDeeper:
************************* / term p/1a:label directly above                                             :3_5:GoDeeper:
************************** / $*|                                                                      :3_5:GoDeeper:
*************************** / someSL                                                                 :3_5:GoDeeper:
**************************** / pNumAsText                                                           :3_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=12:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************* / term p/b:label to the left of line below, with EOL                         :3_5:GoDeeper:
************************** / someSL                                                                   :3_5:GoDeeper:
*************************** / pNumAsText                                                             :3_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=12:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************* / term p/notLabelTerm                                                        :3_5:GoDeeper:
************************** / term p/2:someIndentation expr p                                          :3_5:GoDeeper:
*************************** / someIndentation                                                        :3_5:GoDeeper:
**************************** / myindented: consuming GoDeeper                                       :3_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :3_5:Other "honk:
**************************** / manyIndentation/leaf?                                                 :3_5:Other "honk:
***************************** / expression                                                          :3_5:Other "honk:
****************************** / labelPrefix                                                       :3_5:Other "honk:
labelPrefix> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=14:
labelPrefix> unexpected UnDeeper

****************************** / term p                                                            :3_5:Other "honk:
******************************* / term p/1a:label directly above                                  :3_5:Other "honk:
******************************** / $*|                                                           :3_5:Other "honk:
********************************* / someSL                                                      :3_5:Other "honk:
someSL> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
someSL> MATCH (COK): Other "honk"
someSL> VALUE: ((["honk"],0),[])

********************************* \ someSL has returned (["honk"],0)                             :4_5:UnDeeper:
********************************* / pNumAsText                                                   :4_5:UnDeeper:
pNumAsText> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
$*|> MATCH (CERR): Other "honk"
$*|> ERROR:
$*|> offset=14:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
term p/1a:label directly above> MATCH (CERR): Other "honk"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=14:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL              :3_5:Other "honk:
******************************** / someSL                                                        :3_5:Other "honk:
someSL> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
someSL> MATCH (COK): Other "honk"
someSL> VALUE: ((["honk"],0),[])

******************************** \ someSL has returned (["honk"],0)                               :4_5:UnDeeper:
******************************** / undeepers                                                      :4_5:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_5:UnDeeper:
********************************* > sameLine: success!                                           :4_5:UnDeeper:
undeepers> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                      :4_5:UnDeeper:
******************************** / matching EOL                                                   :4_5:UnDeeper:
matching EOL> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=14:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "honk"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=14:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************* / term p/notLabelTerm                                             :3_5:Other "honk:
******************************** / term p/2:someIndentation expr p                               :3_5:Other "honk:
********************************* / someIndentation                                             :3_5:Other "honk:
********************************** / myindented: consuming GoDeeper                            :3_5:Other "honk:
myindented: consuming GoDeeper> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=13:
myindented: consuming GoDeeper> unexpected Other "honk"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected Other "honk"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected Other "honk"
term p/2:someIndentation expr p> expecting GoDeeper

******************************** / term p/3:plain p                                              :3_5:Other "honk:
********************************* / pRelPred                                                    :3_5:Other "honk:
********************************** / slRelPred                                                 :3_5:Other "honk:
*********************************** / nested simpleHorn                                       :3_5:Other "honk:
************************************ > |^|                                                   :3_5:Other "honk:
************************************ / $*|                                                   :3_5:Other "honk:
************************************* / slMultiTerm                                         :3_5:Other "honk:
************************************** / someSL                                            :3_5:Other "honk:
someSL> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
someSL> MATCH (COK): Other "honk"
someSL> VALUE: ((["honk"],0),[])

************************************** \ someSL has returned (["honk"],0)                   :4_5:UnDeeper:
slMultiTerm> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
slMultiTerm> MATCH (COK): Other "honk"
slMultiTerm> VALUE: ((["honk"],0),[])

************************************* \ slMultiTerm has returned (["honk"],0)                :4_5:UnDeeper:
$*|> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
$*|> MATCH (COK): Other "honk"
$*|> VALUE: ((["honk"],0),[])

************************************ \ $*| has returned (["honk"],0)                          :4_5:UnDeeper:
************************************ / |^| deeps                                              :4_5:UnDeeper:
|^| deeps> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|^| deeps> MATCH (COK): UnDeeper
|^| deeps> VALUE: (([()],-1),[])

************************************ \ |^| deeps has returned ([()],-1)                    :4_4:Or:
nested simpleHorn> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
nested simpleHorn> MATCH (CERR): Other "honk" UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

*********************************** / RPConstraint                                            :3_5:Other "honk:
************************************ / $*|                                                   :3_5:Other "honk:
************************************* / slMultiTerm                                         :3_5:Other "honk:
************************************** / someSL                                            :3_5:Other "honk:
someSL> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
someSL> MATCH (COK): Other "honk"
someSL> VALUE: ((["honk"],0),[])

************************************** \ someSL has returned (["honk"],0)                   :4_5:UnDeeper:
slMultiTerm> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
slMultiTerm> MATCH (COK): Other "honk"
slMultiTerm> VALUE: ((["honk"],0),[])

************************************* \ slMultiTerm has returned (["honk"],0)                :4_5:UnDeeper:
$*|> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
$*|> MATCH (COK): Other "honk"
$*|> VALUE: ((["honk"],0),[])

************************************ \ $*| has returned (["honk"],0)                          :4_5:UnDeeper:
************************************ / |>| calling $>>                                        :4_5:UnDeeper:
************************************* / |>>/recurse                                          :4_5:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                             :4_5:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
RPConstraint> MATCH (CERR): Other "honk"
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPBoolStructR                                           :3_5:Other "honk:
************************************ / $*|                                                   :3_5:Other "honk:
************************************* / slMultiTerm                                         :3_5:Other "honk:
************************************** / someSL                                            :3_5:Other "honk:
someSL> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
someSL> MATCH (COK): Other "honk"
someSL> VALUE: ((["honk"],0),[])

************************************** \ someSL has returned (["honk"],0)                   :4_5:UnDeeper:
slMultiTerm> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
slMultiTerm> MATCH (COK): Other "honk"
slMultiTerm> VALUE: ((["honk"],0),[])

************************************* \ slMultiTerm has returned (["honk"],0)                :4_5:UnDeeper:
$*|> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
$*|> MATCH (COK): Other "honk"
$*|> VALUE: ((["honk"],0),[])

************************************ \ $*| has returned (["honk"],0)                          :4_5:UnDeeper:
************************************ / |>| calling $>>                                        :4_5:UnDeeper:
************************************* / |>>/recurse                                          :4_5:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                             :4_5:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
RPBoolStructR> MATCH (CERR): Other "honk"
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPMT                                                    :3_5:Other "honk:
************************************ / $*|                                                   :3_5:Other "honk:
************************************* / slAKA                                               :3_5:Other "honk:
************************************** / $*|                                               :3_5:Other "honk:
*************************************** / slAKA base                                      :3_5:Other "honk:
**************************************** / slMultiTerm                                   :3_5:Other "honk:
***************************************** / someSL                                      :3_5:Other "honk:
someSL> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
someSL> MATCH (COK): Other "honk"
someSL> VALUE: ((["honk"],0),[])

***************************************** \ someSL has returned (["honk"],0)             :4_5:UnDeeper:
slMultiTerm> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
slMultiTerm> MATCH (COK): Other "honk"
slMultiTerm> VALUE: ((["honk"],0),[])

**************************************** \ slMultiTerm has returned (["honk"],0)          :4_5:UnDeeper:
slAKA base> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
slAKA base> MATCH (COK): Other "honk"
slAKA base> VALUE: ((["honk"],0),[])

*************************************** \ slAKA base has returned (["honk"],0)             :4_5:UnDeeper:
$*|> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
$*|> MATCH (COK): Other "honk"
$*|> VALUE: ((["honk"],0),[])

************************************** \ $*| has returned (["honk"],0)                      :4_5:UnDeeper:
************************************** / |>>/recurse                                        :4_5:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                           :4_5:UnDeeper:
*************************************** / slAKA optional akapart                           :4_5:UnDeeper:
**************************************** / |?| optional something                         :4_5:UnDeeper:
***************************************** / |>>/recurse                                  :4_5:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                                     :4_5:UnDeeper:
****************************************** / PAKA/akapart                               :4_5:UnDeeper:
******************************************* / $>|                                      :4_5:UnDeeper:
******************************************** / Aka Token                              :4_5:UnDeeper:
Aka Token> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=14:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=14:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_5:UnDeeper:
slAKA optional akapart> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0)  :4_5:UnDeeper:
*************************************** > |>>/base got Nothing                             :4_5:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)                  :4_5:UnDeeper:
************************************** / |>>/recurse                                        :4_5:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                           :4_5:UnDeeper:
*************************************** / slAKA optional typically                         :4_5:UnDeeper:
**************************************** / |?| optional something                         :4_5:UnDeeper:
***************************************** / |>>/recurse                                  :4_5:UnDeeper:
|>>/recurse> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                                     :4_5:UnDeeper:
****************************************** / typically                                  :4_5:UnDeeper:
******************************************* / $>|                                      :4_5:UnDeeper:
$>|> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=14:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_5:UnDeeper:
slAKA optional typically> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_5:UnDeeper:
*************************************** > |>>/base got Nothing                             :4_5:UnDeeper:
|>>/base> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)                  :4_5:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_5:UnDeeper:
************************************** > pAKA: entityalias = Nothing                        :4_5:UnDeeper:
slAKA> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
slAKA> MATCH (COK): Other "honk"
slAKA> VALUE: ((["honk"],0),[])

************************************* \ slAKA has returned (["honk"],0)                      :4_5:UnDeeper:
$*|> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
$*|> MATCH (COK): Other "honk"
$*|> VALUE: ((["honk"],0),[])

************************************ \ $*| has returned (["honk"],0)                          :4_5:UnDeeper:
RPMT> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
RPMT> MATCH (COK): Other "honk"
RPMT> VALUE: ((RPMT ["honk"],0),[])

*********************************** \ RPMT has returned (RPMT ["honk"],0)                      :4_5:UnDeeper:
slRelPred> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
slRelPred> MATCH (COK): Other "honk"
slRelPred> VALUE: ((RPMT ["honk"],0),[])

********************************** \ slRelPred has returned (RPMT ["honk"],0)                   :4_5:UnDeeper:
********************************** / undeepers                                                  :4_5:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_5:UnDeeper:
*********************************** > sameLine: success!                                       :4_5:UnDeeper:
undeepers> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :4_5:UnDeeper:
pRelPred> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
pRelPred> MATCH (COK): Other "honk"
pRelPred> VALUE: (RPMT ["honk"],[])

********************************* \ pRelPred has returned RPMT ["honk"]                          :4_5:UnDeeper:
term p/3:plain p> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
term p/3:plain p> MATCH (COK): Other "honk"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["honk"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["honk"])           :4_5:UnDeeper:
term p/notLabelTerm> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
term p/notLabelTerm> MATCH (COK): Other "honk"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["honk"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["honk"])          :4_5:UnDeeper:
term p> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
term p> MATCH (COK): Other "honk"
term p> VALUE: (MyLeaf (RPMT ["honk"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["honk"])                         :4_5:UnDeeper:
****************************** / binary(Or)                                                         :4_5:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************** / binary(And)                                                        :4_5:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************** / binary(SetLess)                                                    :4_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************** / binary(SetPlus)                                                    :4_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
expression> MATCH (COK): Other "honk"
expression> VALUE: (MyLeaf (RPMT ["honk"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["honk"])                       :4_5:UnDeeper:
manyIndentation/leaf?> IN: Other "honk" UnDeeper Or GoDeeper Other  <…>
manyIndentation/leaf?> MATCH (COK): Other "honk"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["honk"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["honk"])              :4_5:UnDeeper:
**************************** / myindented: consuming UnDeeper                                         :4_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper Other "ponk" UnDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                :4_4:Or:
someIndentation> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
someIndentation> MATCH (COK): GoDeeper Other "honk" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["honk"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["honk"])                   :4_4:Or:
term p/2:someIndentation expr p> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "honk" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["honk"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["honk"])     :4_4:Or:
term p/notLabelTerm> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "honk" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["honk"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["honk"])                   :4_4:Or:
term p> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
term p> MATCH (COK): GoDeeper Other "honk" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["honk"]),[])

************************ \ term p has returned MyLeaf (RPMT ["honk"])                                  :4_4:Or:
************************ / binary(Or)                                                                  :4_4:Or:
binary(Or)> IN: Or GoDeeper Other "ponk" UnDeeper UnDeep <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

************************ \ binary(Or) has returned Or                                                   :4_5:GoDeeper:
************************ / term p                                                                       :4_5:GoDeeper:
************************* / term p/1a:label directly above                                             :4_5:GoDeeper:
************************** / $*|                                                                      :4_5:GoDeeper:
*************************** / someSL                                                                 :4_5:GoDeeper:
**************************** / pNumAsText                                                           :4_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=16:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************* / term p/b:label to the left of line below, with EOL                         :4_5:GoDeeper:
************************** / someSL                                                                   :4_5:GoDeeper:
*************************** / pNumAsText                                                             :4_5:GoDeeper:
pNumAsText> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=16:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************* / term p/notLabelTerm                                                        :4_5:GoDeeper:
************************** / term p/2:someIndentation expr p                                          :4_5:GoDeeper:
*************************** / someIndentation                                                        :4_5:GoDeeper:
**************************** / myindented: consuming GoDeeper                                       :4_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                  :4_5:Other "ponk:
**************************** / manyIndentation/leaf?                                                 :4_5:Other "ponk:
***************************** / expression                                                          :4_5:Other "ponk:
****************************** / labelPrefix                                                       :4_5:Other "ponk:
labelPrefix> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=18:
labelPrefix> unexpected UnDeeper

****************************** / term p                                                            :4_5:Other "ponk:
******************************* / term p/1a:label directly above                                  :4_5:Other "ponk:
******************************** / $*|                                                           :4_5:Other "ponk:
********************************* / someSL                                                      :4_5:Other "ponk:
someSL> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
someSL> MATCH (COK): Other "ponk"
someSL> VALUE: ((["ponk"],0),[])

********************************* \ someSL has returned (["ponk"],0)                       :1_2:UnDeeper:
********************************* / pNumAsText                                             :1_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
$*|> MATCH (CERR): Other "ponk"
$*|> ERROR:
$*|> offset=18:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
term p/1a:label directly above> MATCH (CERR): Other "ponk"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=18:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL              :4_5:Other "ponk:
******************************** / someSL                                                        :4_5:Other "ponk:
someSL> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
someSL> MATCH (COK): Other "ponk"
someSL> VALUE: ((["ponk"],0),[])

******************************** \ someSL has returned (["ponk"],0)                         :1_2:UnDeeper:
******************************** / undeepers                                                :1_2:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
********************************* > sameLine: success!                                     :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                :1_2:UnDeeper:
******************************** / matching EOL                                             :1_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=18:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "ponk"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=18:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************* / term p/notLabelTerm                                             :4_5:Other "ponk:
******************************** / term p/2:someIndentation expr p                               :4_5:Other "ponk:
********************************* / someIndentation                                             :4_5:Other "ponk:
********************************** / myindented: consuming GoDeeper                            :4_5:Other "ponk:
myindented: consuming GoDeeper> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=17:
myindented: consuming GoDeeper> unexpected Other "ponk"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected Other "ponk"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected Other "ponk"
term p/2:someIndentation expr p> expecting GoDeeper

******************************** / term p/3:plain p                                              :4_5:Other "ponk:
********************************* / pRelPred                                                    :4_5:Other "ponk:
********************************** / slRelPred                                                 :4_5:Other "ponk:
*********************************** / nested simpleHorn                                       :4_5:Other "ponk:
************************************ > |^|                                                   :4_5:Other "ponk:
************************************ / $*|                                                   :4_5:Other "ponk:
************************************* / slMultiTerm                                         :4_5:Other "ponk:
************************************** / someSL                                            :4_5:Other "ponk:
someSL> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
someSL> MATCH (COK): Other "ponk"
someSL> VALUE: ((["ponk"],0),[])

************************************** \ someSL has returned (["ponk"],0)             :1_2:UnDeeper:
slMultiTerm> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (COK): Other "ponk"
slMultiTerm> VALUE: ((["ponk"],0),[])

************************************* \ slMultiTerm has returned (["ponk"],0)          :1_2:UnDeeper:
$*|> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
$*|> MATCH (COK): Other "ponk"
$*|> VALUE: ((["ponk"],0),[])

************************************ \ $*| has returned (["ponk"],0)                    :1_2:UnDeeper:
************************************ / |^| deeps                                        :1_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

************************************ \ |^| deeps has returned ([(),(),(),()],-4)   :EOF:
nested simpleHorn> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
nested simpleHorn> MATCH (CERR): Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected end of input
nested simpleHorn> expecting Means, UnDeeper, or any token

*********************************** / RPConstraint                                            :4_5:Other "ponk:
************************************ / $*|                                                   :4_5:Other "ponk:
************************************* / slMultiTerm                                         :4_5:Other "ponk:
************************************** / someSL                                            :4_5:Other "ponk:
someSL> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
someSL> MATCH (COK): Other "ponk"
someSL> VALUE: ((["ponk"],0),[])

************************************** \ someSL has returned (["ponk"],0)             :1_2:UnDeeper:
slMultiTerm> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (COK): Other "ponk"
slMultiTerm> VALUE: ((["ponk"],0),[])

************************************* \ slMultiTerm has returned (["ponk"],0)          :1_2:UnDeeper:
$*|> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
$*|> MATCH (COK): Other "ponk"
$*|> VALUE: ((["ponk"],0),[])

************************************ \ $*| has returned (["ponk"],0)                    :1_2:UnDeeper:
************************************ / |>| calling $>>                                  :1_2:UnDeeper:
************************************* / |>>/recurse                                    :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=18:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
RPConstraint> MATCH (CERR): Other "ponk"
RPConstraint> ERROR:
RPConstraint> offset=18:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPBoolStructR                                           :4_5:Other "ponk:
************************************ / $*|                                                   :4_5:Other "ponk:
************************************* / slMultiTerm                                         :4_5:Other "ponk:
************************************** / someSL                                            :4_5:Other "ponk:
someSL> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
someSL> MATCH (COK): Other "ponk"
someSL> VALUE: ((["ponk"],0),[])

************************************** \ someSL has returned (["ponk"],0)             :1_2:UnDeeper:
slMultiTerm> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (COK): Other "ponk"
slMultiTerm> VALUE: ((["ponk"],0),[])

************************************* \ slMultiTerm has returned (["ponk"],0)          :1_2:UnDeeper:
$*|> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
$*|> MATCH (COK): Other "ponk"
$*|> VALUE: ((["ponk"],0),[])

************************************ \ $*| has returned (["ponk"],0)                    :1_2:UnDeeper:
************************************ / |>| calling $>>                                  :1_2:UnDeeper:
************************************* / |>>/recurse                                    :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=18:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
RPBoolStructR> MATCH (CERR): Other "ponk"
RPBoolStructR> ERROR:
RPBoolStructR> offset=18:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPMT                                                    :4_5:Other "ponk:
************************************ / $*|                                                   :4_5:Other "ponk:
************************************* / slAKA                                               :4_5:Other "ponk:
************************************** / $*|                                               :4_5:Other "ponk:
*************************************** / slAKA base                                      :4_5:Other "ponk:
**************************************** / slMultiTerm                                   :4_5:Other "ponk:
***************************************** / someSL                                      :4_5:Other "ponk:
someSL> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
someSL> MATCH (COK): Other "ponk"
someSL> VALUE: ((["ponk"],0),[])

***************************************** \ someSL has returned (["ponk"],0)       :1_2:UnDeeper:
slMultiTerm> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
slMultiTerm> MATCH (COK): Other "ponk"
slMultiTerm> VALUE: ((["ponk"],0),[])

**************************************** \ slMultiTerm has returned (["ponk"],0)    :1_2:UnDeeper:
slAKA base> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
slAKA base> MATCH (COK): Other "ponk"
slAKA base> VALUE: ((["ponk"],0),[])

*************************************** \ slAKA base has returned (["ponk"],0)       :1_2:UnDeeper:
$*|> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
$*|> MATCH (COK): Other "ponk"
$*|> VALUE: ((["ponk"],0),[])

************************************** \ $*| has returned (["ponk"],0)                :1_2:UnDeeper:
************************************** / |>>/recurse                                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :1_2:UnDeeper:
*************************************** / slAKA optional akapart                     :1_2:UnDeeper:
**************************************** / |?| optional something                   :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / PAKA/akapart                         :1_2:UnDeeper:
******************************************* / $>|                                :1_2:UnDeeper:
******************************************** / Aka Token                        :1_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=18:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=18:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :1_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :1_2:UnDeeper:
************************************** / |>>/recurse                                  :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :1_2:UnDeeper:
*************************************** / slAKA optional typically                   :1_2:UnDeeper:
**************************************** / |?| optional something                   :1_2:UnDeeper:
***************************************** / |>>/recurse                            :1_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :1_2:UnDeeper:
****************************************** / typically                            :1_2:UnDeeper:
******************************************* / $>|                                :1_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=18:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :1_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :1_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :1_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :1_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :1_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :1_2:UnDeeper:
slAKA> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
slAKA> MATCH (COK): Other "ponk"
slAKA> VALUE: ((["ponk"],0),[])

************************************* \ slAKA has returned (["ponk"],0)                :1_2:UnDeeper:
$*|> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
$*|> MATCH (COK): Other "ponk"
$*|> VALUE: ((["ponk"],0),[])

************************************ \ $*| has returned (["ponk"],0)                    :1_2:UnDeeper:
RPMT> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
RPMT> MATCH (COK): Other "ponk"
RPMT> VALUE: ((RPMT ["ponk"],0),[])

*********************************** \ RPMT has returned (RPMT ["ponk"],0)                :1_2:UnDeeper:
slRelPred> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
slRelPred> MATCH (COK): Other "ponk"
slRelPred> VALUE: ((RPMT ["ponk"],0),[])

********************************** \ slRelPred has returned (RPMT ["ponk"],0)             :1_2:UnDeeper:
********************************** / undeepers                                            :1_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :1_2:UnDeeper:
*********************************** > sameLine: success!                                 :1_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :1_2:UnDeeper:
pRelPred> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
pRelPred> MATCH (COK): Other "ponk"
pRelPred> VALUE: (RPMT ["ponk"],[])

********************************* \ pRelPred has returned RPMT ["ponk"]                    :1_2:UnDeeper:
term p/3:plain p> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
term p/3:plain p> MATCH (COK): Other "ponk"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["ponk"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["ponk"])     :1_2:UnDeeper:
term p/notLabelTerm> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (COK): Other "ponk"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["ponk"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["ponk"])    :1_2:UnDeeper:
term p> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
term p> MATCH (COK): Other "ponk"
term p> VALUE: (MyLeaf (RPMT ["ponk"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["ponk"])                   :1_2:UnDeeper:
****************************** / binary(Or)                                                   :1_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************** / binary(And)                                                  :1_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************** / binary(SetLess)                                              :1_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************** / binary(SetPlus)                                              :1_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
expression> MATCH (COK): Other "ponk"
expression> VALUE: (MyLeaf (RPMT ["ponk"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["ponk"])                 :1_2:UnDeeper:
manyIndentation/leaf?> IN: Other "ponk" UnDeeper UnDeeper UnDeeper  <…>
manyIndentation/leaf?> MATCH (COK): Other "ponk"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["ponk"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["ponk"])        :1_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :1_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :1_3:UnDeeper:
someIndentation> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
someIndentation> MATCH (COK): GoDeeper Other "ponk" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["ponk"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["ponk"])                  :1_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "ponk" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["ponk"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["ponk"])    :1_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "ponk" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["ponk"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["ponk"])                  :1_3:UnDeeper:
term p> IN: GoDeeper Other "ponk" UnDeeper UnDeeper  <…>
term p> MATCH (COK): GoDeeper Other "ponk" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["ponk"]),[])

************************ \ term p has returned MyLeaf (RPMT ["ponk"])                                 :1_3:UnDeeper:
************************ / binary(Or)                                                                 :1_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                                :1_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                            :1_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                            :1_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
expression> MATCH (COK): GoDeeper Other "honk" UnDeeper Or GoDeep <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

*********************** \ expression has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])] :1_3:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "honk" UnDeeper Or GoDeep <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "honk" UnDeeper Or GoDeep <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

********************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])] :1_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :1_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :1_4:UnDeeper:
someIndentation> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "honk" UnDeeper  <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

********************* \ someIndentation has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])] :1_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "honk" UnDeeper  <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

******************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])] :1_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "honk" UnDeeper  <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

******************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])] :1_4:UnDeeper:
term p> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "honk" UnDeeper  <…>
term p> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

****************** \ term p has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]                :1_4:UnDeeper:
****************** / binary(Or)                                                                               :1_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=20:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                              :1_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=20:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                          :1_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=20:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                          :1_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=20:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "honk" UnDeeper  <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

***************** \ expression has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]              :1_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper GoDeeper Other "honk" UnDeeper  <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper GoDeeper Other "honk" UnDeeper  <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

**************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]     :1_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :1_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :1_5:UnDeeper:
someIndentation> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "honk"  <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

*************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]               :1_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "honk"  <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])] :1_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "honk"  <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]               :1_5:UnDeeper:
term p> IN: GoDeeper GoDeeper GoDeeper Other "honk"  <…>
term p> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "honk"  <…>
term p> VALUE: (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])],[])

************ \ term p has returned MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]                              :1_5:UnDeeper:
************ / binary(Or)                                                                                             :1_5:UnDeeper:
binary(Or)> IN: UnDeeper
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=21:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************ / binary(And)                                                                                            :1_5:UnDeeper:
binary(And)> IN: UnDeeper
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=21:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************ / binary(SetLess)                                                                                        :1_5:UnDeeper:
binary(SetLess)> IN: UnDeeper
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=21:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                                        :1_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=21:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the" GoDeeper GoDeeper GoDeeper O <…>
expression> MATCH (COK): Other "the" GoDeeper GoDeeper GoDeeper O <…>
expression> VALUE: (MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]),[])

*********** \ expression has returned MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])])          :1_5:UnDeeper:
manyIndentation/leaf?> IN: Other "the" GoDeeper GoDeeper GoDeeper O <…>
manyIndentation/leaf?> MATCH (COK): Other "the" GoDeeper GoDeeper GoDeeper O <…>
manyIndentation/leaf?> VALUE: (MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]),[])

********** \ manyIndentation/leaf? has returned MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]) :1_5:UnDeeper:
********** / myindented: consuming UnDeeper                                                                             :1_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********** \ myindented: consuming UnDeeper has returned UnDeeper                                            :EOF:
someIndentation> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
someIndentation> MATCH (COK): GoDeeper Other "the" GoDeeper GoDeeper G <…>
someIndentation> VALUE: (MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]),[])

********* \ someIndentation has returned MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]) :EOF:
term p/2:someIndentation expr p> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the" GoDeeper GoDeeper G <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]),[])

******** \ term p/2:someIndentation expr p has returned MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]) :EOF:
term p/notLabelTerm> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the" GoDeeper GoDeeper G <…>
term p/notLabelTerm> VALUE: (MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]),[])

******* \ term p/notLabelTerm has returned MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]) :EOF:
term p> IN: GoDeeper Other "the" GoDeeper GoDeeper G <…>
term p> MATCH (COK): GoDeeper Other "the" GoDeeper GoDeeper G <…>
term p> VALUE: (MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])]),[])

****** \ term p has returned MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])])             :EOF:
****** / binary(Or)                                                                                              :EOF:
binary(Or)> IN: <EMPTY>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=22:
binary(Or)> unexpected end of input
binary(Or)> expecting Or

****** / binary(And)                                                                                             :EOF:
binary(And)> IN: <EMPTY>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=22:
binary(And)> unexpected end of input
binary(And)> expecting And

****** / binary(SetLess)                                                                                         :EOF:
binary(SetLess)> IN: <EMPTY>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=22:
binary(SetLess)> unexpected end of input
binary(SetLess)> expecting SetLess

****** / binary(SetPlus)                                                                                         :EOF:
binary(SetPlus)> IN: <EMPTY>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=22:
binary(SetPlus)> unexpected end of input
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
expression> MATCH (COK): GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["poopoo"]),MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])])],[])

***** \ expression has returned MyAny [MyLeaf (RPMT ["poopoo"]),MyLabel ["the"] (MyAny [MyLeaf (RPMT ["honk"]),MyLeaf (RPMT ["ponk"])])] :EOF:
ppp inner> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
ppp inner> MATCH (COK): GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["poopoo"]),Any (Just (Pre "the")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]],[])

**** \ ppp inner has returned Any Nothing [Leaf (RPMT ["poopoo"]),Any (Just (Pre "the")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]] :EOF:
pBSR> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
pBSR> MATCH (COK): GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["poopoo"]),Any (Just (Pre "the")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]],[])

*** \ pBSR has returned Any Nothing [Leaf (RPMT ["poopoo"]),Any (Just (Pre "the")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]] :EOF:
made it to pBSR> IN: GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
made it to pBSR> MATCH (COK): GoDeeper Other "poopoo" UnDeeper Or GoDe <…>
made it to pBSR> VALUE: (Any Nothing [Leaf (RPMT ["poopoo"]),Any (Just (Pre "the")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]],[])

** \ made it to pBSR has returned Any Nothing [Leaf (RPMT ["poopoo"]),Any (Just (Pre "the")) [Leaf (RPMT ["honk"]),Leaf (RPMT ["ponk"])]] :EOF:
** / undeepers                                                                                                       :EOF:
*** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                                        :EOF:
*** > sameLine: success!                                                                                            :EOF:
undeepers> IN: <EMPTY>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

** \ undeepers has returned ()                                                                                       :EOF:

PDPA
  inline-1-r

Finished in 0.0197 seconds
1 example, 0 failures

natural4> Test suite natural4-test passed
