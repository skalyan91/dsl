* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/inline-1-s/)

* Tokens
"a data breach occurred" MEANS
    ( "any"
        ( "unauthorised"
            (
                ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( "disclosure" ) ) OR ( ( "copying" ) ) OR ( ( "modification" ) ) OR ( ( "disposal" ) ) )
            ) "of personal data"
        )
    ) OR
    ( "loss of storage medium on which personal data is stored in circumstances where the unauthorised"
        (
            (
                ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( "disclosure" ) ) OR ( ( "copying" ) ) OR ( ( "modification" ) ) OR ( ( "disposal" ) ) )
            ) "of the personal data is likely to occur"
        )
    )
1_1:Other "a da> |<|
1_1:Other "a da> |<* starting
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / $*|                                                                                                               :1_1:Other "a da:
*** / |>>/recurse                                                                                                     :1_1:Other "a da:
|>>/recurse> IN: "a data breach occurred" MEANS ( "any" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=0:
|>>/recurse> unexpected "a data breach occurred"
|>>/recurse> expecting (

*** \ !Unconsumed Error: |>>/recurse: Unexpected "a data breach occurred" Expecting: (                                :1_1:Other "a da:
*** / |>>/base                                                                                                        :1_1:Other "a da:
**** / subject slMultiTerm                                                                                           :1_1:Other "a da:
***** / slMultiTerm                                                                                                 :1_1:Other "a da:
****** / someSL                                                                                                    :1_1:Other "a da:
someSL> IN: "a data breach occurred" MEANS ( "any" ( <…>
someSL> MATCH (COK): "a data breach occurred"
someSL> VALUE: ((["a data breach occurred"],0),[])

****** \ someSL has returned (["a data breach occurred"],0)                                                        :2_1:Means:
slMultiTerm> IN: "a data breach occurred" MEANS ( "any" ( <…>
slMultiTerm> MATCH (COK): "a data breach occurred"
slMultiTerm> VALUE: ((["a data breach occurred"],0),[])

***** \ slMultiTerm has returned (["a data breach occurred"],0)                                                     :2_1:Means:
subject slMultiTerm> IN: "a data breach occurred" MEANS ( "any" ( <…>
subject slMultiTerm> MATCH (COK): "a data breach occurred"
subject slMultiTerm> VALUE: ((["a data breach occurred"],0),[])

**** \ subject slMultiTerm has returned (["a data breach occurred"],0)                                               :2_1:Means:
**** > |>>/base got ["a data breach occurred"]                                                                       :2_1:Means:
|>>/base> IN: "a data breach occurred" MEANS ( "any" ( <…>
|>>/base> MATCH (COK): "a data breach occurred"
|>>/base> VALUE: ((["a data breach occurred"],0),[])

*** \ |>>/base has returned (["a data breach occurred"],0)                                                            :2_1:Means:
$*|> IN: "a data breach occurred" MEANS ( "any" ( <…>
$*|> MATCH (COK): "a data breach occurred"
$*|> VALUE: ((["a data breach occurred"],0),[])

** \ $*| has returned (["a data breach occurred"],0)                                                                   :2_1:Means:
** / |<*/parent                                                                                                        :2_1:Means:
*** > |<*/recurse                                                                                                     :2_1:Means:
*** / |<*/base                                                                                                        :2_1:Means:
|<*/base> IN: MEANS ( "any" ( "unauthorised" ( ( ( ( " <…>
|<*/base> MATCH (COK): MEANS
|<*/base> VALUE: ((Means,0),[])

*** \ |<*/base has returned (Means,0)                                                                                  :2_2:GoDeeper:
|<*/parent> IN: MEANS ( "any" ( "unauthorised" ( ( ( ( " <…>
|<*/parent> MATCH (COK): MEANS
|<*/parent> VALUE: ((Means,0),[])

** \ |<*/parent has returned (Means,0)                                                                                  :2_2:GoDeeper:
** / made it to pBSR                                                                                                    :2_2:GoDeeper:
*** / pBSR                                                                                                             :2_2:GoDeeper:
**** / ppp inner                                                                                                      :2_2:GoDeeper:
***** / expression                                                                                                   :2_2:GoDeeper:
****** / term p                                                                                                     :2_2:GoDeeper:
******* / term p/1a:label directly above                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / someSL                                                                                               :2_2:GoDeeper:
********** / pNumAsText                                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected (
pNumAsText> expecting number

********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                      :2_2:GoDeeper:
someSL> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected (
someSL> expecting other text or number

********* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                              :2_2:GoDeeper:
$*|> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :2_2:GoDeeper:
term p/1a:label directly above> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=2:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

******* \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number          :2_2:GoDeeper:
******* / term p/b:label to the left of line below, with EOL                                                       :2_2:GoDeeper:
******** / someSL                                                                                                 :2_2:GoDeeper:
********* / pNumAsText                                                                                           :2_2:GoDeeper:
pNumAsText> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                        :2_2:GoDeeper:
someSL> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected (
someSL> expecting other text or number

******** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                :2_2:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=2:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

******* \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
******* / term p/notLabelTerm                                                                                      :2_2:GoDeeper:
******** / term p/2:someIndentation expr p                                                                        :2_2:GoDeeper:
********* / someIndentation                                                                                      :2_2:GoDeeper:
********** / myindented: consuming GoDeeper                                                                     :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********** \ myindented: consuming GoDeeper has returned GoDeeper                                                :2_2:Other "any":
********** / manyIndentation/leaf?                                                                               :2_2:Other "any":
*********** / expression                                                                                        :2_2:Other "any":
************ / term p                                                                                          :2_2:Other "any":
************* / term p/1a:label directly above                                                                :2_2:Other "any":
************** / $*|                                                                                         :2_2:Other "any":
*************** / someSL                                                                                    :2_2:Other "any":
someSL> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
someSL> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
someSL> VALUE: ((["any","unauthorised","access"],5),[])

*************** \ someSL has returned (["any","unauthorised","access"],5)                                            :3_6:UnDeeper:
*************** / pNumAsText                                                                                         :3_6:UnDeeper:
pNumAsText> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected )
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                                      :3_6:UnDeeper:
$*|> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
$*|> MATCH (CERR): "any" ( "unauthorised" ( ( ( ( "access"
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting ( or other text or number

************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number                                 :3_6:UnDeeper:
term p/1a:label directly above> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
term p/1a:label directly above> MATCH (CERR): "any" ( "unauthorised" ( ( ( ( "access"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=11:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

************* \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number        :3_6:UnDeeper:
************* / term p/b:label to the left of line below, with EOL                                            :2_2:Other "any":
************** / someSL                                                                                      :2_2:Other "any":
someSL> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
someSL> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
someSL> VALUE: ((["any","unauthorised","access"],5),[])

************** \ someSL has returned (["any","unauthorised","access"],5)                                              :3_6:UnDeeper:
************** / undeepers                                                                                            :3_6:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 5 UnDeepers                             :3_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
undeepers> MATCH (CERR): ) )
undeepers> ERROR:
undeepers> offset=13:
undeepers> unexpected OR
undeepers> expecting )

************** \ !Consumed Error: undeepers: Unexpected OR Expecting: )                                            :3_5:Or:
term p/b:label to the left of line below, with EOL> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): "any" ( "unauthorised" ( ( ( ( "access"  <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=13:
term p/b:label to the left of line below, with EOL> unexpected OR
term p/b:label to the left of line below, with EOL> expecting )

************* \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected OR Expecting: )     :3_5:Or:
************* / term p/notLabelTerm                                                                           :2_2:Other "any":
************** / term p/2:someIndentation expr p                                                             :2_2:Other "any":
*************** / someIndentation                                                                           :2_2:Other "any":
**************** / myindented: consuming GoDeeper                                                          :2_2:Other "any":
myindented: consuming GoDeeper> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected "any"
myindented: consuming GoDeeper> expecting (

**************** \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "any" Expecting: (        :2_2:Other "any":
someIndentation> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected "any"
someIndentation> expecting (

*************** \ !Unconsumed Error: someIndentation: Unexpected "any" Expecting: (                         :2_2:Other "any":
term p/2:someIndentation expr p> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=3:
term p/2:someIndentation expr p> unexpected "any"
term p/2:someIndentation expr p> expecting (

************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "any" Expecting: (           :2_2:Other "any":
************** / term p/3:plain p                                                                            :2_2:Other "any":
*************** / pRelPred                                                                                  :2_2:Other "any":
**************** / slRelPred                                                                               :2_2:Other "any":
***************** / nested simpleHorn                                                                     :2_2:Other "any":
****************** > |^|                                                                                 :2_2:Other "any":
****************** / $*|                                                                                 :2_2:Other "any":
******************* / slMultiTerm                                                                       :2_2:Other "any":
******************** / someSL                                                                          :2_2:Other "any":
someSL> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
someSL> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
someSL> VALUE: ((["any","unauthorised","access"],5),[])

******************** \ someSL has returned (["any","unauthorised","access"],5)                                  :3_6:UnDeeper:
slMultiTerm> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
slMultiTerm> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
slMultiTerm> VALUE: ((["any","unauthorised","access"],5),[])

******************* \ slMultiTerm has returned (["any","unauthorised","access"],5)                               :3_6:UnDeeper:
$*|> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
$*|> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
$*|> VALUE: ((["any","unauthorised","access"],5),[])

****************** \ $*| has returned (["any","unauthorised","access"],5)                                         :3_6:UnDeeper:
****************** / |^| deeps                                                                                    :3_6:UnDeeper:
|^| deeps> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

****************** \ |^| deeps has returned ([(),()],-2)                                                       :3_5:Or:
nested simpleHorn> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
nested simpleHorn> MATCH (CERR): "any" ( "unauthorised" ( ( ( ( "access"  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

***************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS )                        :3_5:Or:
***************** / RPConstraint                                                                          :2_2:Other "any":
****************** / $*|                                                                                 :2_2:Other "any":
******************* / slMultiTerm                                                                       :2_2:Other "any":
******************** / someSL                                                                          :2_2:Other "any":
someSL> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
someSL> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
someSL> VALUE: ((["any","unauthorised","access"],5),[])

******************** \ someSL has returned (["any","unauthorised","access"],5)                                  :3_6:UnDeeper:
slMultiTerm> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
slMultiTerm> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
slMultiTerm> VALUE: ((["any","unauthorised","access"],5),[])

******************* \ slMultiTerm has returned (["any","unauthorised","access"],5)                               :3_6:UnDeeper:
$*|> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
$*|> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
$*|> VALUE: ((["any","unauthorised","access"],5),[])

****************** \ $*| has returned (["any","unauthorised","access"],5)                                         :3_6:UnDeeper:
****************** / |>| calling $>>                                                                              :3_6:UnDeeper:
******************* / |>>/recurse                                                                                :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :3_6:UnDeeper:
******************* / |>>/base                                                                                   :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN ==             :3_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (      :3_6:UnDeeper:
RPConstraint> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
RPConstraint> MATCH (CERR): "any" ( "unauthorised" ( ( ( ( "access"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (             :3_6:UnDeeper:
***************** / RPBoolStructR                                                                         :2_2:Other "any":
****************** / $*|                                                                                 :2_2:Other "any":
******************* / slMultiTerm                                                                       :2_2:Other "any":
******************** / someSL                                                                          :2_2:Other "any":
someSL> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
someSL> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
someSL> VALUE: ((["any","unauthorised","access"],5),[])

******************** \ someSL has returned (["any","unauthorised","access"],5)                                  :3_6:UnDeeper:
slMultiTerm> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
slMultiTerm> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
slMultiTerm> VALUE: ((["any","unauthorised","access"],5),[])

******************* \ slMultiTerm has returned (["any","unauthorised","access"],5)                               :3_6:UnDeeper:
$*|> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
$*|> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
$*|> VALUE: ((["any","unauthorised","access"],5),[])

****************** \ $*| has returned (["any","unauthorised","access"],5)                                         :3_6:UnDeeper:
****************** / |>| calling $>>                                                                              :3_6:UnDeeper:
******************* / |>>/recurse                                                                                :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :3_6:UnDeeper:
******************* / |>>/base                                                                                   :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN ==             :3_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (      :3_6:UnDeeper:
RPBoolStructR> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
RPBoolStructR> MATCH (CERR): "any" ( "unauthorised" ( ( ( ( "access"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == (            :3_6:UnDeeper:
***************** / RPMT                                                                                  :2_2:Other "any":
****************** / $*|                                                                                 :2_2:Other "any":
******************* / slAKA                                                                             :2_2:Other "any":
******************** / $*|                                                                             :2_2:Other "any":
********************* / slAKA base                                                                    :2_2:Other "any":
********************** / slMultiTerm                                                                 :2_2:Other "any":
*********************** / someSL                                                                    :2_2:Other "any":
someSL> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
someSL> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
someSL> VALUE: ((["any","unauthorised","access"],5),[])

*********************** \ someSL has returned (["any","unauthorised","access"],5)                            :3_6:UnDeeper:
slMultiTerm> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
slMultiTerm> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
slMultiTerm> VALUE: ((["any","unauthorised","access"],5),[])

********************** \ slMultiTerm has returned (["any","unauthorised","access"],5)                         :3_6:UnDeeper:
slAKA base> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
slAKA base> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
slAKA base> VALUE: ((["any","unauthorised","access"],5),[])

********************* \ slAKA base has returned (["any","unauthorised","access"],5)                            :3_6:UnDeeper:
$*|> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
$*|> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
$*|> VALUE: ((["any","unauthorised","access"],5),[])

******************** \ $*| has returned (["any","unauthorised","access"],5)                                     :3_6:UnDeeper:
******************** / |>>/recurse                                                                              :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :3_6:UnDeeper:
******************** / |>>/base                                                                                 :3_6:UnDeeper:
********************* / slAKA optional akapart                                                                 :3_6:UnDeeper:
********************** / |?| optional something                                                               :3_6:UnDeeper:
*********************** / |>>/recurse                                                                        :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :3_6:UnDeeper:
*********************** / |>>/base                                                                           :3_6:UnDeeper:
************************ / PAKA/akapart                                                                     :3_6:UnDeeper:
************************* / $>|                                                                            :3_6:UnDeeper:
************************** / Aka Token                                                                    :3_6:UnDeeper:
Aka Token> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected )
Aka Token> expecting AKA

************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                    :3_6:UnDeeper:
$>|> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected )
$>|> expecting AKA

************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                            :3_6:UnDeeper:
PAKA/akapart> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************ \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                     :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected )
|>>/base> expecting AKA

*********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                           :3_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************** \ |?| optional something has returned (Nothing,0)                                      :3_6:UnDeeper:
slAKA optional akapart> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************* \ slAKA optional akapart has returned (Nothing,0)                                        :3_6:UnDeeper:
********************* > |>>/base got Nothing                                                                   :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                        :3_6:UnDeeper:
******************** / |>>/recurse                                                                              :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :3_6:UnDeeper:
******************** / |>>/base                                                                                 :3_6:UnDeeper:
********************* / slAKA optional typically                                                               :3_6:UnDeeper:
********************** / |?| optional something                                                               :3_6:UnDeeper:
*********************** / |>>/recurse                                                                        :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :3_6:UnDeeper:
*********************** / |>>/base                                                                           :3_6:UnDeeper:
************************ / typically                                                                        :3_6:UnDeeper:
************************* / $>|                                                                            :3_6:UnDeeper:
$>|> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected )
$>|> expecting TYPICALLY

************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                      :3_6:UnDeeper:
typically> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=11:
typically> unexpected )
typically> expecting TYPICALLY

************************ \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                  :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

*********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                     :3_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************** \ |?| optional something has returned (Nothing,0)                                      :3_6:UnDeeper:
slAKA optional typically> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************* \ slAKA optional typically has returned (Nothing,0)                                      :3_6:UnDeeper:
********************* > |>>/base got Nothing                                                                   :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                        :3_6:UnDeeper:
******************** > slAKA: proceeding after base and entityalias are retrieved ...                           :3_6:UnDeeper:
******************** > pAKA: entityalias = Nothing                                                              :3_6:UnDeeper:
slAKA> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
slAKA> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
slAKA> VALUE: ((["any","unauthorised","access"],5),[])

******************* \ slAKA has returned (["any","unauthorised","access"],5)                                     :3_6:UnDeeper:
$*|> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
$*|> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
$*|> VALUE: ((["any","unauthorised","access"],5),[])

****************** \ $*| has returned (["any","unauthorised","access"],5)                                         :3_6:UnDeeper:
RPMT> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
RPMT> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
RPMT> VALUE: ((RPMT ["any","unauthorised","access"],5),[])

***************** \ RPMT has returned (RPMT ["any","unauthorised","access"],5)                                     :3_6:UnDeeper:
slRelPred> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
slRelPred> MATCH (COK): "any" ( "unauthorised" ( ( ( ( "access"
slRelPred> VALUE: ((RPMT ["any","unauthorised","access"],5),[])

**************** \ slRelPred has returned (RPMT ["any","unauthorised","access"],5)                                  :3_6:UnDeeper:
**************** / undeepers                                                                                        :3_6:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 5 UnDeepers                         :3_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
undeepers> MATCH (CERR): ) )
undeepers> ERROR:
undeepers> offset=13:
undeepers> unexpected OR
undeepers> expecting )

**************** \ !Consumed Error: undeepers: Unexpected OR Expecting: )                                        :3_5:Or:
pRelPred> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
pRelPred> MATCH (CERR): "any" ( "unauthorised" ( ( ( ( "access"  <…>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected OR
pRelPred> expecting )

*************** \ !Consumed Error: pRelPred: Unexpected OR Expecting: )                                           :3_5:Or:
term p/3:plain p> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
term p/3:plain p> MATCH (CERR): "any" ( "unauthorised" ( ( ( ( "access"  <…>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting )

************** \ !Consumed Error: term p/3:plain p: Unexpected OR Expecting: )                                     :3_5:Or:
term p/notLabelTerm> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=13:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting )

************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: )                            :2_2:Other "any":
term p> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=13:
term p> unexpected OR
term p> expecting )

************ \ !Unconsumed Error: term p: Unexpected OR Expecting: )                                           :2_2:Other "any":
expression> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=13:
expression> unexpected OR
expression> expecting expression

*********** \ !Unconsumed Error: expression: Unexpected OR Expecting: expression                                :2_2:Other "any":
manyIndentation/leaf?> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected OR
manyIndentation/leaf?> expecting expression

********** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected OR Expecting: expression                       :2_2:Other "any":
********** / manyIndentation/deeper; calling someIndentation                                                     :2_2:Other "any":
*********** / someIndentation                                                                                   :2_2:Other "any":
************ / myindented: consuming GoDeeper                                                                  :2_2:Other "any":
myindented: consuming GoDeeper> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected "any"
myindented: consuming GoDeeper> expecting (

************ \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "any" Expecting: (                :2_2:Other "any":
someIndentation> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected "any"
someIndentation> expecting (

*********** \ !Unconsumed Error: someIndentation: Unexpected "any" Expecting: (                                 :2_2:Other "any":
manyIndentation/deeper; calling someIndentation> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=3:
manyIndentation/deeper; calling someIndentation> unexpected "any"
manyIndentation/deeper; calling someIndentation> expecting (

********** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "any" Expecting: (   :2_2:Other "any":
someIndentation> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected OR
someIndentation> expecting expression

********* \ !Consumed Error: someIndentation: Unexpected OR Expecting: expression                                 :2_2:Other "any":
term p/2:someIndentation expr p> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting expression

******** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: expression                   :2_2:Other "any":
******** / term p/3:plain p                                                                                       :2_2:GoDeeper:
********* / pRelPred                                                                                             :2_2:GoDeeper:
********** / slRelPred                                                                                          :2_2:GoDeeper:
*********** / nested simpleHorn                                                                                :2_2:GoDeeper:
************ > |^|                                                                                            :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slMultiTerm                                                                                  :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :2_2:GoDeeper:
someSL> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
slMultiTerm> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************* \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                 :2_2:GoDeeper:
$*|> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected (
$*|> expecting other text or number

************ \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                           :2_2:GoDeeper:
nested simpleHorn> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=2:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

*********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number               :2_2:GoDeeper:
*********** / RPConstraint                                                                                     :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slMultiTerm                                                                                  :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :2_2:GoDeeper:
someSL> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
slMultiTerm> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************* \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                 :2_2:GoDeeper:
$*|> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected (
$*|> expecting other text or number

************ \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                           :2_2:GoDeeper:
RPConstraint> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=2:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

*********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
*********** / RPBoolStructR                                                                                    :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slMultiTerm                                                                                  :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :2_2:GoDeeper:
someSL> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
slMultiTerm> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************* \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                 :2_2:GoDeeper:
$*|> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected (
$*|> expecting other text or number

************ \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                           :2_2:GoDeeper:
RPBoolStructR> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=2:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

*********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                   :2_2:GoDeeper:
*********** / RPMT                                                                                             :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slAKA                                                                                        :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / slAKA base                                                                               :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :2_2:GoDeeper:
someSL> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :2_2:GoDeeper:
slMultiTerm> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

**************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number           :2_2:GoDeeper:
slAKA base> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=2:
slAKA base> unexpected (
slAKA base> expecting other text or number

*************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number              :2_2:GoDeeper:
$*|> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
slAKA> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=2:
slAKA> unexpected (
slAKA> expecting other text or number

************* \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
$*|> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected (
$*|> expecting other text or number

************ \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                           :2_2:GoDeeper:
RPMT> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=2:
RPMT> unexpected (
RPMT> expecting other text or number

*********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                            :2_2:GoDeeper:
slRelPred> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=2:
slRelPred> unexpected (
slRelPred> expecting other text or number

********** \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
pRelPred> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=2:
pRelPred> unexpected (
pRelPred> expecting other text or number

********* \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                            :2_2:GoDeeper:
term p/3:plain p> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=2:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

******** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number                      :2_2:GoDeeper:
term p/notLabelTerm> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=13:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting expression

******* \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: expression                              :2_2:GoDeeper:
term p> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=13:
term p> unexpected OR
term p> expecting expression

****** \ !Unconsumed Error: term p: Unexpected OR Expecting: expression                                             :2_2:GoDeeper:
expression> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=13:
expression> unexpected OR
expression> expecting expression

***** \ !Unconsumed Error: expression: Unexpected OR Expecting: expression                                           :2_2:GoDeeper:
ppp inner> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> unexpected OR
ppp inner> expecting expression

**** \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression                                              :2_2:GoDeeper:
**** / withPrePost                                                                                                    :2_2:GoDeeper:
***** > |<* starting                                                                                                 :2_2:GoDeeper:
***** / $*|                                                                                                          :2_2:GoDeeper:
****** / pre part                                                                                                   :2_2:GoDeeper:
******* / aboveNextLineKeyword                                                                                      :2_2:Other "any":
******** / expectUnDeepers                                                                                         :2_2:Other "any":
********* / pNumAsText                                                                                             :2_3:GoDeeper:
pNumAsText> IN: ( "unauthorised" ( ( ( ( "access" ) ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                          :2_3:GoDeeper:
********* / pNumAsText                                                                                               :2_4:GoDeeper:
pNumAsText> IN: ( ( ( ( "access" ) ) OR ( ( "use" ) ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :2_4:GoDeeper:
********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                              :2_5:GoDeeper:
********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                :2_6:GoDeeper:
********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                  :2_7:GoDeeper:
********* > ignoring ["any","GD","unauthorised","GD","GD","GD","GD","access"]                                              :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                          :2_2:Other "any":
******** > aNLK: determined undp_count = 2                                                                         :2_2:Other "any":
******** > ->| trying to consume 1 GoDeepers                                                                       :2_2:Other "any":
******** / $*|                                                                                                     :2_2:Other "any":
$*|> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                 :2_2:Other "any":
aboveNextLineKeyword> IN: "any" ( "unauthorised" ( ( ( ( "access"  <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=3:
aboveNextLineKeyword> unexpected "any"
aboveNextLineKeyword> expecting (

******* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "any" Expecting: (                                    :2_2:Other "any":
******* > /*= lookAhead failed, delegating to plain /+=                                                             :2_2:Other "any":
******* / aboveNextLineKeyword                                                                                       :2_3:GoDeeper:
******** / expectUnDeepers                                                                                          :2_3:GoDeeper:
********* / pNumAsText                                                                                             :2_3:GoDeeper:
pNumAsText> IN: ( "unauthorised" ( ( ( ( "access" ) ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                          :2_3:GoDeeper:
********* / pNumAsText                                                                                               :2_4:GoDeeper:
pNumAsText> IN: ( ( ( ( "access" ) ) OR ( ( "use" ) ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :2_4:GoDeeper:
********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                              :2_5:GoDeeper:
********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                :2_6:GoDeeper:
********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                  :2_7:GoDeeper:
********* > ignoring ["GD","unauthorised","GD","GD","GD","GD","access"]                                                    :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: ( "unauthorised" ( ( ( ( "access" ) ) OR <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                           :2_3:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                          :2_3:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                        :2_3:GoDeeper:
******** / $*|                                                                                                      :2_3:GoDeeper:
$*|> IN: ( "unauthorised" ( ( ( ( "access" ) ) OR <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                  :2_3:GoDeeper:
******** > ->| success                                                                                               :2_3:Other "unau:
******** / |>>/recurse                                                                                               :2_3:Other "unau:
|>>/recurse> IN: "unauthorised" ( ( ( ( "access" ) ) OR ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected "unauthorised"
|>>/recurse> expecting (

******** \ !Unconsumed Error: |>>/recurse: Unexpected "unauthorised" Expecting: (                                    :2_3:Other "unau:
******** / |>>/base                                                                                                  :2_3:Other "unau:
********* / slMultiTerm                                                                                             :2_3:Other "unau:
********** / someSL                                                                                                :2_3:Other "unau:
someSL> IN: "unauthorised" ( ( ( ( "access" ) ) OR ( <…>
someSL> MATCH (COK): "unauthorised" ( ( ( ( "access"
someSL> VALUE: ((["unauthorised","access"],4),[])

********** \ someSL has returned (["unauthorised","access"],4)                                                            :3_6:UnDeeper:
slMultiTerm> IN: "unauthorised" ( ( ( ( "access" ) ) OR ( <…>
slMultiTerm> MATCH (COK): "unauthorised" ( ( ( ( "access"
slMultiTerm> VALUE: ((["unauthorised","access"],4),[])

********* \ slMultiTerm has returned (["unauthorised","access"],4)                                                         :3_6:UnDeeper:
********* > |>>/base got ["unauthorised","access"]                                                                         :3_6:UnDeeper:
|>>/base> IN: "unauthorised" ( ( ( ( "access" ) ) OR ( <…>
|>>/base> MATCH (COK): "unauthorised" ( ( ( ( "access"
|>>/base> VALUE: ((["unauthorised","access"],4),[])

******** \ |>>/base has returned (["unauthorised","access"],4)                                                              :3_6:UnDeeper:
******** > aNLK: current depth is 5                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|<*/parent> MATCH (COK): ) ) OR
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["unauthorised","access"]                                                                 :3_6:GoDeeper:
aboveNextLineKeyword> IN: ( "unauthorised" ( ( ( ( "access" ) ) OR <…>
aboveNextLineKeyword> MATCH (CERR): ( "unauthorised" ( ( ( ( "access" ) ) OR
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 2 but the cursor seems to be placed such that we have 5; a different backtrack will probably fare better

******* \ !Consumed Error: aboveNextLineKeyword: Fail: aNLK: expecting depth 2 but the cursor seems to be placed such that we have 5; a different backtrack will probably fare better :3_6:GoDeeper:
******* > /*= lookAhead failed, delegating to plain /+=                                                              :2_3:GoDeeper:
******* / aboveNextLineKeyword                                                                                        :2_3:Other "unau:
******** / expectUnDeepers                                                                                           :2_3:Other "unau:
********* / pNumAsText                                                                                               :2_4:GoDeeper:
pNumAsText> IN: ( ( ( ( "access" ) ) OR ( ( "use" ) ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :2_4:GoDeeper:
********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                              :2_5:GoDeeper:
********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                :2_6:GoDeeper:
********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                  :2_7:GoDeeper:
********* > ignoring ["unauthorised","GD","GD","GD","GD","access"]                                                         :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: "unauthorised" ( ( ( ( "access" ) ) OR ( <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                            :2_3:Other "unau:
******** > aNLK: determined undp_count = 2                                                                           :2_3:Other "unau:
******** > ->| trying to consume 1 GoDeepers                                                                         :2_3:Other "unau:
******** / $*|                                                                                                       :2_3:Other "unau:
$*|> IN: "unauthorised" ( ( ( ( "access" ) ) OR ( <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                   :2_3:Other "unau:
aboveNextLineKeyword> IN: "unauthorised" ( ( ( ( "access" ) ) OR ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected "unauthorised"
aboveNextLineKeyword> expecting (

******* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "unauthorised" Expecting: (                             :2_3:Other "unau:
******* > /*= lookAhead failed, delegating to plain /+=                                                               :2_3:Other "unau:
******* / aboveNextLineKeyword                                                                                         :2_4:GoDeeper:
******** / expectUnDeepers                                                                                            :2_4:GoDeeper:
********* / pNumAsText                                                                                               :2_4:GoDeeper:
pNumAsText> IN: ( ( ( ( "access" ) ) OR ( ( "use" ) ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :2_4:GoDeeper:
********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                              :2_5:GoDeeper:
********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                :2_6:GoDeeper:
********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                  :2_7:GoDeeper:
********* > ignoring ["GD","GD","GD","GD","access"]                                                                        :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: ( ( ( ( "access" ) ) OR ( ( "use" ) ) OR <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                             :2_4:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                            :2_4:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                          :2_4:GoDeeper:
******** / $*|                                                                                                        :2_4:GoDeeper:
$*|> IN: ( ( ( ( "access" ) ) OR ( ( "use" ) ) OR <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                    :2_4:GoDeeper:
******** > ->| success                                                                                                  :2_5:GoDeeper:
******** / |>>/recurse                                                                                                  :2_5:GoDeeper:
********* / |>>/recurse                                                                                                  :2_6:GoDeeper:
********** / |>>/recurse                                                                                                  :2_7:GoDeeper:
*********** / |>>/recurse                                                                                                 :2_7:Other "acce:
|>>/recurse> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected "access"
|>>/recurse> expecting (

*********** \ !Unconsumed Error: |>>/recurse: Unexpected "access" Expecting: (                                            :2_7:Other "acce:
*********** / |>>/base                                                                                                    :2_7:Other "acce:
************ / slMultiTerm                                                                                               :2_7:Other "acce:
************* / someSL                                                                                                  :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

************* \ someSL has returned (["access"],0)                                                                     :3_6:UnDeeper:
slMultiTerm> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slMultiTerm> MATCH (COK): "access"
slMultiTerm> VALUE: ((["access"],0),[])

************ \ slMultiTerm has returned (["access"],0)                                                                  :3_6:UnDeeper:
************ > |>>/base got ["access"]                                                                                  :3_6:UnDeeper:
|>>/base> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
|>>/base> MATCH (COK): "access"
|>>/base> VALUE: ((["access"],0),[])

*********** \ |>>/base has returned (["access"],0)                                                                       :3_6:UnDeeper:
|>>/recurse> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
|>>/recurse> MATCH (COK): ( "access"
|>>/recurse> VALUE: ((["access"],1),[])

********** \ |>>/recurse has returned (["access"],1)                                                                      :3_6:UnDeeper:
|>>/recurse> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
|>>/recurse> MATCH (COK): ( ( "access"
|>>/recurse> VALUE: ((["access"],2),[])

********* \ |>>/recurse has returned (["access"],2)                                                                        :3_6:UnDeeper:
|>>/recurse> IN: ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( <…>
|>>/recurse> MATCH (COK): ( ( ( "access"
|>>/recurse> VALUE: ((["access"],3),[])

******** \ |>>/recurse has returned (["access"],3)                                                                          :3_6:UnDeeper:
******** > aNLK: current depth is 4                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|<*/parent> MATCH (COK): ) ) OR
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["access"]                                                                                :3_6:GoDeeper:
aboveNextLineKeyword> IN: ( ( ( ( "access" ) ) OR ( ( "use" ) ) OR <…>
aboveNextLineKeyword> MATCH (CERR): ( ( ( ( "access" ) ) OR
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 2 but the cursor seems to be placed such that we have 4; a different backtrack will probably fare better

******* \ !Consumed Error: aboveNextLineKeyword: Fail: aNLK: expecting depth 2 but the cursor seems to be placed such that we have 4; a different backtrack will probably fare better :3_6:GoDeeper:
******* > /*= lookAhead failed, delegating to plain /+=                                                                :2_4:GoDeeper:
******* / aboveNextLineKeyword                                                                                           :2_5:GoDeeper:
******** / expectUnDeepers                                                                                              :2_5:GoDeeper:
********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                              :2_5:GoDeeper:
********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                :2_6:GoDeeper:
********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                  :2_7:GoDeeper:
********* > ignoring ["GD","GD","GD","access"]                                                                             :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                               :2_5:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                              :2_5:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                            :2_5:GoDeeper:
******** / $*|                                                                                                          :2_5:GoDeeper:
$*|> IN: ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                      :2_5:GoDeeper:
******** > ->| success                                                                                                    :2_6:GoDeeper:
******** / |>>/recurse                                                                                                    :2_6:GoDeeper:
********* / |>>/recurse                                                                                                    :2_7:GoDeeper:
********** / |>>/recurse                                                                                                   :2_7:Other "acce:
|>>/recurse> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected "access"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "access" Expecting: (                                              :2_7:Other "acce:
********** / |>>/base                                                                                                      :2_7:Other "acce:
*********** / slMultiTerm                                                                                                 :2_7:Other "acce:
************ / someSL                                                                                                    :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

************ \ someSL has returned (["access"],0)                                                                       :3_6:UnDeeper:
slMultiTerm> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slMultiTerm> MATCH (COK): "access"
slMultiTerm> VALUE: ((["access"],0),[])

*********** \ slMultiTerm has returned (["access"],0)                                                                    :3_6:UnDeeper:
*********** > |>>/base got ["access"]                                                                                    :3_6:UnDeeper:
|>>/base> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
|>>/base> MATCH (COK): "access"
|>>/base> VALUE: ((["access"],0),[])

********** \ |>>/base has returned (["access"],0)                                                                         :3_6:UnDeeper:
|>>/recurse> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
|>>/recurse> MATCH (COK): ( "access"
|>>/recurse> VALUE: ((["access"],1),[])

********* \ |>>/recurse has returned (["access"],1)                                                                        :3_6:UnDeeper:
|>>/recurse> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
|>>/recurse> MATCH (COK): ( ( "access"
|>>/recurse> VALUE: ((["access"],2),[])

******** \ |>>/recurse has returned (["access"],2)                                                                          :3_6:UnDeeper:
******** > aNLK: current depth is 3                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|<*/parent> MATCH (COK): ) ) OR
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["access"]                                                                                :3_6:GoDeeper:
aboveNextLineKeyword> IN: ( ( ( "access" ) ) OR ( ( "use" ) ) OR ( <…>
aboveNextLineKeyword> MATCH (CERR): ( ( ( "access" ) ) OR
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 2 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

******* \ !Consumed Error: aboveNextLineKeyword: Fail: aNLK: expecting depth 2 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better :3_6:GoDeeper:
******* > /*= lookAhead failed, delegating to plain /+=                                                                  :2_5:GoDeeper:
******* / aboveNextLineKeyword                                                                                             :2_6:GoDeeper:
******** / expectUnDeepers                                                                                                :2_6:GoDeeper:
********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                :2_6:GoDeeper:
********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                  :2_7:GoDeeper:
********* > ignoring ["GD","GD","access"]                                                                                  :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                                 :2_6:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                                :2_6:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                              :2_6:GoDeeper:
******** / $*|                                                                                                            :2_6:GoDeeper:
$*|> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                        :2_6:GoDeeper:
******** > ->| success                                                                                                      :2_7:GoDeeper:
******** / |>>/recurse                                                                                                      :2_7:GoDeeper:
********* / |>>/recurse                                                                                                     :2_7:Other "acce:
|>>/recurse> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected "access"
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected "access" Expecting: (                                                :2_7:Other "acce:
********* / |>>/base                                                                                                        :2_7:Other "acce:
********** / slMultiTerm                                                                                                   :2_7:Other "acce:
*********** / someSL                                                                                                      :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

*********** \ someSL has returned (["access"],0)                                                                         :3_6:UnDeeper:
slMultiTerm> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slMultiTerm> MATCH (COK): "access"
slMultiTerm> VALUE: ((["access"],0),[])

********** \ slMultiTerm has returned (["access"],0)                                                                      :3_6:UnDeeper:
********** > |>>/base got ["access"]                                                                                      :3_6:UnDeeper:
|>>/base> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
|>>/base> MATCH (COK): "access"
|>>/base> VALUE: ((["access"],0),[])

********* \ |>>/base has returned (["access"],0)                                                                           :3_6:UnDeeper:
|>>/recurse> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
|>>/recurse> MATCH (COK): ( "access"
|>>/recurse> VALUE: ((["access"],1),[])

******** \ |>>/recurse has returned (["access"],1)                                                                          :3_6:UnDeeper:
******** > aNLK: current depth is 2                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|<*/parent> MATCH (COK): ) ) OR
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["access"]                                                                                :3_6:GoDeeper:
aboveNextLineKeyword> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
aboveNextLineKeyword> MATCH (COK): ( ( "access" ) ) OR
aboveNextLineKeyword> VALUE: (((["access"],Or),0),[])

******* \ aboveNextLineKeyword has returned ((["access"],Or),0)                                                            :3_6:GoDeeper:
******* > /*= lookAhead succeeded, recursing greedily                                                                      :2_6:GoDeeper:
******* / aboveNextLineKeyword                                                                                               :2_7:GoDeeper:
******** / expectUnDeepers                                                                                                  :2_7:GoDeeper:
********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

********* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                                  :2_7:GoDeeper:
********* > ignoring ["GD","access"]                                                                                       :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                                   :2_7:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                                  :2_7:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                                :2_7:GoDeeper:
******** / $*|                                                                                                              :2_7:GoDeeper:
$*|> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                          :2_7:GoDeeper:
******** > ->| success                                                                                                       :2_7:Other "acce:
******** / |>>/recurse                                                                                                       :2_7:Other "acce:
|>>/recurse> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected "access"
|>>/recurse> expecting (

******** \ !Unconsumed Error: |>>/recurse: Unexpected "access" Expecting: (                                                  :2_7:Other "acce:
******** / |>>/base                                                                                                          :2_7:Other "acce:
********* / slMultiTerm                                                                                                     :2_7:Other "acce:
********** / someSL                                                                                                        :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

********** \ someSL has returned (["access"],0)                                                                           :3_6:UnDeeper:
slMultiTerm> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slMultiTerm> MATCH (COK): "access"
slMultiTerm> VALUE: ((["access"],0),[])

********* \ slMultiTerm has returned (["access"],0)                                                                        :3_6:UnDeeper:
********* > |>>/base got ["access"]                                                                                        :3_6:UnDeeper:
|>>/base> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
|>>/base> MATCH (COK): "access"
|>>/base> VALUE: ((["access"],0),[])

******** \ |>>/base has returned (["access"],0)                                                                             :3_6:UnDeeper:
******** > aNLK: current depth is 1                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|<*/parent> MATCH (COK): ) ) OR
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["access"]                                                                                :3_6:GoDeeper:
aboveNextLineKeyword> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
aboveNextLineKeyword> MATCH (CERR): ( "access" ) ) OR
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 2 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

******* \ !Consumed Error: aboveNextLineKeyword: Fail: aNLK: expecting depth 2 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better :3_6:GoDeeper:
******* > /*= lookAhead failed, delegating to plain /+=                                                                      :2_7:GoDeeper:
******* / aboveNextLineKeyword                                                                                                :2_7:Other "acce:
******** / expectUnDeepers                                                                                                   :2_7:Other "acce:
********* > ignoring ["access"]                                                                                            :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                                    :2_7:Other "acce:
******** > aNLK: determined undp_count = 2                                                                                   :2_7:Other "acce:
******** > ->| trying to consume 1 GoDeepers                                                                                 :2_7:Other "acce:
******** / $*|                                                                                                               :2_7:Other "acce:
$*|> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                           :2_7:Other "acce:
aboveNextLineKeyword> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected "access"
aboveNextLineKeyword> expecting (

******* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected "access" Expecting: (                                           :2_7:Other "acce:
******* > /*= lookAhead failed, delegating to plain /+=                                                                       :2_7:Other "acce:
******* / aboveNextLineKeyword                                                                                               :3_6:UnDeeper:
******** / expectUnDeepers                                                                                                  :3_6:UnDeeper:
********* > ignoring []                                                                                                    :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                                   :3_6:UnDeeper:
******** > aNLK: determined undp_count = 2                                                                                  :3_6:UnDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                                :3_6:UnDeeper:
******** / $*|                                                                                                              :3_6:UnDeeper:
$*|> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                          :3_6:UnDeeper:
aboveNextLineKeyword> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected )
aboveNextLineKeyword> expecting (

******* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected ) Expecting: (                                                 :3_6:UnDeeper:
******* > /*= lookAhead failed, delegating to plain /+=                                                                      :3_6:UnDeeper:
******* > /*= lookAhead succeeded, greedy recursion failed (no p1); returning p2.                                          :2_6:GoDeeper:
pre part> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
pre part> MATCH (COK): ( "any" ( "unauthorised" ( (
pre part> VALUE: ((["any","unauthorised"],4),[])

****** \ pre part has returned (["any","unauthorised"],4)                                                                   :2_6:GoDeeper:
$*|> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
$*|> MATCH (COK): ( "any" ( "unauthorised" ( (
$*|> VALUE: ((["any","unauthorised"],4),[])

***** \ $*| has returned (["any","unauthorised"],4)                                                                          :2_6:GoDeeper:
***** / made it to inner base parser                                                                                         :2_6:GoDeeper:
****** / ppp inner                                                                                                          :2_6:GoDeeper:
******* / expression                                                                                                       :2_6:GoDeeper:
******** / term p                                                                                                         :2_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :2_6:GoDeeper:
********** / $*|                                                                                                        :2_6:GoDeeper:
*********** / someSL                                                                                                   :2_6:GoDeeper:
************ / pNumAsText                                                                                             :2_6:GoDeeper:
pNumAsText> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected (
pNumAsText> expecting number

************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                          :2_6:GoDeeper:
someSL> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected (
someSL> expecting other text or number

*********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                  :2_6:GoDeeper:
$*|> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected (
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                       :2_6:GoDeeper:
term p/1a:label directly above> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

********* \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number              :2_6:GoDeeper:
********* / term p/b:label to the left of line below, with EOL                                                           :2_6:GoDeeper:
********** / someSL                                                                                                     :2_6:GoDeeper:
*********** / pNumAsText                                                                                               :2_6:GoDeeper:
pNumAsText> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :2_6:GoDeeper:
someSL> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected (
someSL> expecting other text or number

********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                    :2_6:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

********* \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_6:GoDeeper:
********* / term p/notLabelTerm                                                                                          :2_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :2_6:GoDeeper:
*********** / someIndentation                                                                                          :2_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :2_6:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :2_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :2_7:GoDeeper:
************* / expression                                                                                             :2_7:GoDeeper:
************** / term p                                                                                               :2_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :2_7:GoDeeper:
**************** / $*|                                                                                              :2_7:GoDeeper:
***************** / someSL                                                                                         :2_7:GoDeeper:
****************** / pNumAsText                                                                                   :2_7:GoDeeper:
pNumAsText> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :2_7:GoDeeper:
someSL> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :2_7:GoDeeper:
$*|> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :2_7:GoDeeper:
term p/1a:label directly above> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=9:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number    :2_7:GoDeeper:
*************** / term p/b:label to the left of line below, with EOL                                                 :2_7:GoDeeper:
**************** / someSL                                                                                           :2_7:GoDeeper:
***************** / pNumAsText                                                                                     :2_7:GoDeeper:
pNumAsText> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                  :2_7:GoDeeper:
someSL> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                          :2_7:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=9:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_7:GoDeeper:
*************** / term p/notLabelTerm                                                                                :2_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :2_7:GoDeeper:
***************** / someIndentation                                                                                :2_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :2_7:GoDeeper:
myindented: consuming GoDeeper> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_7:Other "acce:
****************** / manyIndentation/leaf?                                                                         :2_7:Other "acce:
******************* / expression                                                                                  :2_7:Other "acce:
******************** / term p                                                                                    :2_7:Other "acce:
********************* / term p/1a:label directly above                                                          :2_7:Other "acce:
********************** / $*|                                                                                   :2_7:Other "acce:
*********************** / someSL                                                                              :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

*********************** \ someSL has returned (["access"],0)                                                 :3_6:UnDeeper:
*********************** / pNumAsText                                                                         :3_6:UnDeeper:
pNumAsText> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                      :3_6:UnDeeper:
$*|> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
$*|> MATCH (CERR): "access"
$*|> ERROR:
$*|> offset=11:
$*|> unexpected )
$*|> expecting ( or other text or number

********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number                 :3_6:UnDeeper:
term p/1a:label directly above> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
term p/1a:label directly above> MATCH (CERR): "access"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=11:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

********************* \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :3_6:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                                      :2_7:Other "acce:
********************** / someSL                                                                                :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

********************** \ someSL has returned (["access"],0)                                                   :3_6:UnDeeper:
********************** / undeepers                                                                            :3_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :3_6:UnDeeper:
*********************** > sameLine: success!                                                                 :3_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :3_6:UnDeeper:
********************** / matching EOL                                                                         :3_6:UnDeeper:
matching EOL> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=11:
matching EOL> unexpected )
matching EOL> expecting EOL

********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                         :3_6:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): "access"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=11:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

********************* \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_6:UnDeeper:
********************* / term p/notLabelTerm                                                                     :2_7:Other "acce:
********************** / term p/2:someIndentation expr p                                                       :2_7:Other "acce:
*********************** / someIndentation                                                                     :2_7:Other "acce:
************************ / myindented: consuming GoDeeper                                                    :2_7:Other "acce:
myindented: consuming GoDeeper> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected "access"
myindented: consuming GoDeeper> expecting (

************************ \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "access" Expecting: ( :2_7:Other "acce:
someIndentation> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected "access"
someIndentation> expecting (

*********************** \ !Unconsumed Error: someIndentation: Unexpected "access" Expecting: (                :2_7:Other "acce:
term p/2:someIndentation expr p> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected "access"
term p/2:someIndentation expr p> expecting (

********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "access" Expecting: (  :2_7:Other "acce:
********************** / term p/3:plain p                                                                      :2_7:Other "acce:
*********************** / pRelPred                                                                            :2_7:Other "acce:
************************ / slRelPred                                                                         :2_7:Other "acce:
************************* / nested simpleHorn                                                               :2_7:Other "acce:
************************** > |^|                                                                           :2_7:Other "acce:
************************** / $*|                                                                           :2_7:Other "acce:
*************************** / slMultiTerm                                                                 :2_7:Other "acce:
**************************** / someSL                                                                    :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

**************************** \ someSL has returned (["access"],0)                                       :3_6:UnDeeper:
slMultiTerm> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slMultiTerm> MATCH (COK): "access"
slMultiTerm> VALUE: ((["access"],0),[])

*************************** \ slMultiTerm has returned (["access"],0)                                    :3_6:UnDeeper:
$*|> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
$*|> MATCH (COK): "access"
$*|> VALUE: ((["access"],0),[])

************************** \ $*| has returned (["access"],0)                                              :3_6:UnDeeper:
************************** / |^| deeps                                                                    :3_6:UnDeeper:
|^| deeps> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :3_5:Or:
nested simpleHorn> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
nested simpleHorn> MATCH (CERR): "access" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************* \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS )        :3_5:Or:
************************* / RPConstraint                                                                    :2_7:Other "acce:
************************** / $*|                                                                           :2_7:Other "acce:
*************************** / slMultiTerm                                                                 :2_7:Other "acce:
**************************** / someSL                                                                    :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

**************************** \ someSL has returned (["access"],0)                                       :3_6:UnDeeper:
slMultiTerm> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slMultiTerm> MATCH (COK): "access"
slMultiTerm> VALUE: ((["access"],0),[])

*************************** \ slMultiTerm has returned (["access"],0)                                    :3_6:UnDeeper:
$*|> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
$*|> MATCH (COK): "access"
$*|> VALUE: ((["access"],0),[])

************************** \ $*| has returned (["access"],0)                                              :3_6:UnDeeper:
************************** / |>| calling $>>                                                              :3_6:UnDeeper:
*************************** / |>>/recurse                                                                :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :3_6:UnDeeper:
*************************** / |>>/base                                                                   :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_6:UnDeeper:
RPConstraint> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
RPConstraint> MATCH (CERR): "access"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_6:UnDeeper:
************************* / RPBoolStructR                                                                   :2_7:Other "acce:
************************** / $*|                                                                           :2_7:Other "acce:
*************************** / slMultiTerm                                                                 :2_7:Other "acce:
**************************** / someSL                                                                    :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

**************************** \ someSL has returned (["access"],0)                                       :3_6:UnDeeper:
slMultiTerm> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slMultiTerm> MATCH (COK): "access"
slMultiTerm> VALUE: ((["access"],0),[])

*************************** \ slMultiTerm has returned (["access"],0)                                    :3_6:UnDeeper:
$*|> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
$*|> MATCH (COK): "access"
$*|> VALUE: ((["access"],0),[])

************************** \ $*| has returned (["access"],0)                                              :3_6:UnDeeper:
************************** / |>| calling $>>                                                              :3_6:UnDeeper:
*************************** / |>>/recurse                                                                :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :3_6:UnDeeper:
*************************** / |>>/base                                                                   :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_6:UnDeeper:
RPBoolStructR> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
RPBoolStructR> MATCH (CERR): "access"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_6:UnDeeper:
************************* / RPMT                                                                            :2_7:Other "acce:
************************** / $*|                                                                           :2_7:Other "acce:
*************************** / slAKA                                                                       :2_7:Other "acce:
**************************** / $*|                                                                       :2_7:Other "acce:
***************************** / slAKA base                                                              :2_7:Other "acce:
****************************** / slMultiTerm                                                           :2_7:Other "acce:
******************************* / someSL                                                              :2_7:Other "acce:
someSL> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
someSL> MATCH (COK): "access"
someSL> VALUE: ((["access"],0),[])

******************************* \ someSL has returned (["access"],0)                                 :3_6:UnDeeper:
slMultiTerm> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slMultiTerm> MATCH (COK): "access"
slMultiTerm> VALUE: ((["access"],0),[])

****************************** \ slMultiTerm has returned (["access"],0)                              :3_6:UnDeeper:
slAKA base> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slAKA base> MATCH (COK): "access"
slAKA base> VALUE: ((["access"],0),[])

***************************** \ slAKA base has returned (["access"],0)                                 :3_6:UnDeeper:
$*|> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
$*|> MATCH (COK): "access"
$*|> VALUE: ((["access"],0),[])

**************************** \ $*| has returned (["access"],0)                                          :3_6:UnDeeper:
**************************** / |>>/recurse                                                              :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :3_6:UnDeeper:
**************************** / |>>/base                                                                 :3_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :3_6:UnDeeper:
****************************** / |?| optional something                                               :3_6:UnDeeper:
******************************* / |>>/recurse                                                        :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_6:UnDeeper:
******************************* / |>>/base                                                           :3_6:UnDeeper:
******************************** / PAKA/akapart                                                     :3_6:UnDeeper:
********************************* / $>|                                                            :3_6:UnDeeper:
********************************** / Aka Token                                                    :3_6:UnDeeper:
Aka Token> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA    :3_6:UnDeeper:
$>|> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected )
$>|> expecting AKA

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA            :3_6:UnDeeper:
PAKA/akapart> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA     :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA           :3_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :3_6:UnDeeper:
slAKA optional akapart> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :3_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :3_6:UnDeeper:
**************************** / |>>/recurse                                                              :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :3_6:UnDeeper:
**************************** / |>>/base                                                                 :3_6:UnDeeper:
***************************** / slAKA optional typically                                               :3_6:UnDeeper:
****************************** / |?| optional something                                               :3_6:UnDeeper:
******************************* / |>>/recurse                                                        :3_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_6:UnDeeper:
******************************* / |>>/base                                                           :3_6:UnDeeper:
******************************** / typically                                                        :3_6:UnDeeper:
********************************* / $>|                                                            :3_6:UnDeeper:
$>|> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY      :3_6:UnDeeper:
typically> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=11:
typically> unexpected )
typically> expecting TYPICALLY

******************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY  :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY     :3_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :3_6:UnDeeper:
slAKA optional typically> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :3_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :3_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :3_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :3_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :3_6:UnDeeper:
slAKA> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slAKA> MATCH (COK): "access"
slAKA> VALUE: ((["access"],0),[])

*************************** \ slAKA has returned (["access"],0)                                          :3_6:UnDeeper:
$*|> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
$*|> MATCH (COK): "access"
$*|> VALUE: ((["access"],0),[])

************************** \ $*| has returned (["access"],0)                                              :3_6:UnDeeper:
RPMT> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
RPMT> MATCH (COK): "access"
RPMT> VALUE: ((RPMT ["access"],0),[])

************************* \ RPMT has returned (RPMT ["access"],0)                                          :3_6:UnDeeper:
slRelPred> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
slRelPred> MATCH (COK): "access"
slRelPred> VALUE: ((RPMT ["access"],0),[])

************************ \ slRelPred has returned (RPMT ["access"],0)                                       :3_6:UnDeeper:
************************ / undeepers                                                                        :3_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :3_6:UnDeeper:
************************* > sameLine: success!                                                             :3_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :3_6:UnDeeper:
pRelPred> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
pRelPred> MATCH (COK): "access"
pRelPred> VALUE: (RPMT ["access"],[])

*********************** \ pRelPred has returned RPMT ["access"]                                              :3_6:UnDeeper:
term p/3:plain p> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
term p/3:plain p> MATCH (COK): "access"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["access"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["access"])                               :3_6:UnDeeper:
term p/notLabelTerm> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
term p/notLabelTerm> MATCH (COK): "access"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["access"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["access"])                              :3_6:UnDeeper:
term p> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
term p> MATCH (COK): "access"
term p> VALUE: (MyLeaf (RPMT ["access"]),[])

******************** \ term p has returned MyLeaf (RPMT ["access"])                                             :3_6:UnDeeper:
******************** / binary(Or)                                                                               :3_6:UnDeeper:
binary(Or)> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                :3_6:UnDeeper:
******************** / binary(And)                                                                              :3_6:UnDeeper:
binary(And)> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                              :3_6:UnDeeper:
******************** / binary(SetLess)                                                                          :3_6:UnDeeper:
binary(SetLess)> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                         :3_6:UnDeeper:
******************** / binary(SetPlus)                                                                          :3_6:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                         :3_6:UnDeeper:
expression> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
expression> MATCH (COK): "access"
expression> VALUE: (MyLeaf (RPMT ["access"]),[])

******************* \ expression has returned MyLeaf (RPMT ["access"])                                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: "access" ) ) OR ( ( "use" ) ) OR ( ( "di <…>
manyIndentation/leaf?> MATCH (COK): "access"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["access"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["access"])                                  :3_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( ( "use" ) ) OR ( ( "disclosure" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :3_7:UnDeeper:
someIndentation> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
someIndentation> MATCH (COK): ( "access" )
someIndentation> VALUE: (MyLeaf (RPMT ["access"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["access"])                                            :3_7:UnDeeper:
term p/2:someIndentation expr p> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
term p/2:someIndentation expr p> MATCH (COK): ( "access" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["access"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["access"])                              :3_7:UnDeeper:
term p/notLabelTerm> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
term p/notLabelTerm> MATCH (COK): ( "access" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["access"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["access"])                                            :3_7:UnDeeper:
term p> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
term p> MATCH (COK): ( "access" )
term p> VALUE: (MyLeaf (RPMT ["access"]),[])

************** \ term p has returned MyLeaf (RPMT ["access"])                                                           :3_7:UnDeeper:
************** / binary(Or)                                                                                             :3_7:UnDeeper:
binary(Or)> IN: ) OR ( ( "use" ) ) OR ( ( "disclosure" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                              :3_7:UnDeeper:
************** / binary(And)                                                                                            :3_7:UnDeeper:
binary(And)> IN: ) OR ( ( "use" ) ) OR ( ( "disclosure" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                            :3_7:UnDeeper:
************** / binary(SetLess)                                                                                        :3_7:UnDeeper:
binary(SetLess)> IN: ) OR ( ( "use" ) ) OR ( ( "disclosure" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                       :3_7:UnDeeper:
************** / binary(SetPlus)                                                                                        :3_7:UnDeeper:
binary(SetPlus)> IN: ) OR ( ( "use" ) ) OR ( ( "disclosure" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                       :3_7:UnDeeper:
expression> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
expression> MATCH (COK): ( "access" )
expression> VALUE: (MyLeaf (RPMT ["access"]),[])

************* \ expression has returned MyLeaf (RPMT ["access"])                                                         :3_7:UnDeeper:
manyIndentation/leaf?> IN: ( "access" ) ) OR ( ( "use" ) ) OR ( ( " <…>
manyIndentation/leaf?> MATCH (COK): ( "access" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["access"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["access"])                                                :3_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :3_7:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( ( "use" ) ) OR ( ( "disclosure" ) <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :3_5:Or:
someIndentation> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
someIndentation> MATCH (COK): ( ( "access" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["access"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["access"])                                                   :3_5:Or:
term p/2:someIndentation expr p> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "access" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["access"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["access"])                                     :3_5:Or:
term p/notLabelTerm> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
term p/notLabelTerm> MATCH (COK): ( ( "access" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["access"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["access"])                                                   :3_5:Or:
term p> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
term p> MATCH (COK): ( ( "access" ) )
term p> VALUE: (MyLeaf (RPMT ["access"]),[])

******** \ term p has returned MyLeaf (RPMT ["access"])                                                                  :3_5:Or:
******** / binary(Or)                                                                                                    :3_5:Or:
binary(Or)> IN: OR ( ( "use" ) ) OR ( ( "disclosure" ) ) <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :3_6:GoDeeper:
******** / term p                                                                                                         :3_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :3_6:GoDeeper:
********** / $*|                                                                                                        :3_6:GoDeeper:
*********** / someSL                                                                                                   :3_6:GoDeeper:
************ / pNumAsText                                                                                             :3_6:GoDeeper:
pNumAsText> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                          :3_6:GoDeeper:
someSL> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

*********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                  :3_6:GoDeeper:
$*|> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                       :3_6:GoDeeper:
term p/1a:label directly above> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=14:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

********* \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number              :3_6:GoDeeper:
********* / term p/b:label to the left of line below, with EOL                                                           :3_6:GoDeeper:
********** / someSL                                                                                                     :3_6:GoDeeper:
*********** / pNumAsText                                                                                               :3_6:GoDeeper:
pNumAsText> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :3_6:GoDeeper:
someSL> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                    :3_6:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=14:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

********* \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_6:GoDeeper:
********* / term p/notLabelTerm                                                                                          :3_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :3_6:GoDeeper:
*********** / someIndentation                                                                                          :3_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :3_6:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :3_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :3_7:GoDeeper:
************* / expression                                                                                             :3_7:GoDeeper:
************** / term p                                                                                               :3_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :3_7:GoDeeper:
**************** / $*|                                                                                              :3_7:GoDeeper:
***************** / someSL                                                                                         :3_7:GoDeeper:
****************** / pNumAsText                                                                                   :3_7:GoDeeper:
pNumAsText> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :3_7:GoDeeper:
someSL> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :3_7:GoDeeper:
$*|> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :3_7:GoDeeper:
term p/1a:label directly above> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=15:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number    :3_7:GoDeeper:
*************** / term p/b:label to the left of line below, with EOL                                                 :3_7:GoDeeper:
**************** / someSL                                                                                           :3_7:GoDeeper:
***************** / pNumAsText                                                                                     :3_7:GoDeeper:
pNumAsText> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                  :3_7:GoDeeper:
someSL> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                          :3_7:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=15:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_7:GoDeeper:
*************** / term p/notLabelTerm                                                                                :3_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :3_7:GoDeeper:
***************** / someIndentation                                                                                :3_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :3_7:GoDeeper:
myindented: consuming GoDeeper> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :3_7:Other "use":
****************** / manyIndentation/leaf?                                                                         :3_7:Other "use":
******************* / expression                                                                                  :3_7:Other "use":
******************** / term p                                                                                    :3_7:Other "use":
********************* / term p/1a:label directly above                                                          :3_7:Other "use":
********************** / $*|                                                                                   :3_7:Other "use":
*********************** / someSL                                                                              :3_7:Other "use":
someSL> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
someSL> MATCH (COK): "use"
someSL> VALUE: ((["use"],0),[])

*********************** \ someSL has returned (["use"],0)                                                    :4_6:UnDeeper:
*********************** / pNumAsText                                                                         :4_6:UnDeeper:
pNumAsText> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                      :4_6:UnDeeper:
$*|> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
$*|> MATCH (CERR): "use"
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or other text or number

********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number                 :4_6:UnDeeper:
term p/1a:label directly above> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
term p/1a:label directly above> MATCH (CERR): "use"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=17:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

********************* \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :4_6:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                                      :3_7:Other "use":
********************** / someSL                                                                                :3_7:Other "use":
someSL> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
someSL> MATCH (COK): "use"
someSL> VALUE: ((["use"],0),[])

********************** \ someSL has returned (["use"],0)                                                      :4_6:UnDeeper:
********************** / undeepers                                                                            :4_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :4_6:UnDeeper:
*********************** > sameLine: success!                                                                 :4_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :4_6:UnDeeper:
********************** / matching EOL                                                                         :4_6:UnDeeper:
matching EOL> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=17:
matching EOL> unexpected )
matching EOL> expecting EOL

********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                         :4_6:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): "use"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=17:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

********************* \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_6:UnDeeper:
********************* / term p/notLabelTerm                                                                     :3_7:Other "use":
********************** / term p/2:someIndentation expr p                                                       :3_7:Other "use":
*********************** / someIndentation                                                                     :3_7:Other "use":
************************ / myindented: consuming GoDeeper                                                    :3_7:Other "use":
myindented: consuming GoDeeper> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected "use"
myindented: consuming GoDeeper> expecting (

************************ \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "use" Expecting: (  :3_7:Other "use":
someIndentation> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "use"
someIndentation> expecting (

*********************** \ !Unconsumed Error: someIndentation: Unexpected "use" Expecting: (                   :3_7:Other "use":
term p/2:someIndentation expr p> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "use"
term p/2:someIndentation expr p> expecting (

********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "use" Expecting: (     :3_7:Other "use":
********************** / term p/3:plain p                                                                      :3_7:Other "use":
*********************** / pRelPred                                                                            :3_7:Other "use":
************************ / slRelPred                                                                         :3_7:Other "use":
************************* / nested simpleHorn                                                               :3_7:Other "use":
************************** > |^|                                                                           :3_7:Other "use":
************************** / $*|                                                                           :3_7:Other "use":
*************************** / slMultiTerm                                                                 :3_7:Other "use":
**************************** / someSL                                                                    :3_7:Other "use":
someSL> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
someSL> MATCH (COK): "use"
someSL> VALUE: ((["use"],0),[])

**************************** \ someSL has returned (["use"],0)                                          :4_6:UnDeeper:
slMultiTerm> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
slMultiTerm> MATCH (COK): "use"
slMultiTerm> VALUE: ((["use"],0),[])

*************************** \ slMultiTerm has returned (["use"],0)                                       :4_6:UnDeeper:
$*|> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
$*|> MATCH (COK): "use"
$*|> VALUE: ((["use"],0),[])

************************** \ $*| has returned (["use"],0)                                                 :4_6:UnDeeper:
************************** / |^| deeps                                                                    :4_6:UnDeeper:
|^| deeps> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :4_5:Or:
nested simpleHorn> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
nested simpleHorn> MATCH (CERR): "use" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************* \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS )        :4_5:Or:
************************* / RPConstraint                                                                    :3_7:Other "use":
************************** / $*|                                                                           :3_7:Other "use":
*************************** / slMultiTerm                                                                 :3_7:Other "use":
**************************** / someSL                                                                    :3_7:Other "use":
someSL> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
someSL> MATCH (COK): "use"
someSL> VALUE: ((["use"],0),[])

**************************** \ someSL has returned (["use"],0)                                          :4_6:UnDeeper:
slMultiTerm> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
slMultiTerm> MATCH (COK): "use"
slMultiTerm> VALUE: ((["use"],0),[])

*************************** \ slMultiTerm has returned (["use"],0)                                       :4_6:UnDeeper:
$*|> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
$*|> MATCH (COK): "use"
$*|> VALUE: ((["use"],0),[])

************************** \ $*| has returned (["use"],0)                                                 :4_6:UnDeeper:
************************** / |>| calling $>>                                                              :4_6:UnDeeper:
*************************** / |>>/recurse                                                                :4_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :4_6:UnDeeper:
*************************** / |>>/base                                                                   :4_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_6:UnDeeper:
RPConstraint> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
RPConstraint> MATCH (CERR): "use"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_6:UnDeeper:
************************* / RPBoolStructR                                                                   :3_7:Other "use":
************************** / $*|                                                                           :3_7:Other "use":
*************************** / slMultiTerm                                                                 :3_7:Other "use":
**************************** / someSL                                                                    :3_7:Other "use":
someSL> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
someSL> MATCH (COK): "use"
someSL> VALUE: ((["use"],0),[])

**************************** \ someSL has returned (["use"],0)                                          :4_6:UnDeeper:
slMultiTerm> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
slMultiTerm> MATCH (COK): "use"
slMultiTerm> VALUE: ((["use"],0),[])

*************************** \ slMultiTerm has returned (["use"],0)                                       :4_6:UnDeeper:
$*|> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
$*|> MATCH (COK): "use"
$*|> VALUE: ((["use"],0),[])

************************** \ $*| has returned (["use"],0)                                                 :4_6:UnDeeper:
************************** / |>| calling $>>                                                              :4_6:UnDeeper:
*************************** / |>>/recurse                                                                :4_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :4_6:UnDeeper:
*************************** / |>>/base                                                                   :4_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_6:UnDeeper:
RPBoolStructR> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
RPBoolStructR> MATCH (CERR): "use"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_6:UnDeeper:
************************* / RPMT                                                                            :3_7:Other "use":
************************** / $*|                                                                           :3_7:Other "use":
*************************** / slAKA                                                                       :3_7:Other "use":
**************************** / $*|                                                                       :3_7:Other "use":
***************************** / slAKA base                                                              :3_7:Other "use":
****************************** / slMultiTerm                                                           :3_7:Other "use":
******************************* / someSL                                                              :3_7:Other "use":
someSL> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
someSL> MATCH (COK): "use"
someSL> VALUE: ((["use"],0),[])

******************************* \ someSL has returned (["use"],0)                                    :4_6:UnDeeper:
slMultiTerm> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
slMultiTerm> MATCH (COK): "use"
slMultiTerm> VALUE: ((["use"],0),[])

****************************** \ slMultiTerm has returned (["use"],0)                                 :4_6:UnDeeper:
slAKA base> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
slAKA base> MATCH (COK): "use"
slAKA base> VALUE: ((["use"],0),[])

***************************** \ slAKA base has returned (["use"],0)                                    :4_6:UnDeeper:
$*|> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
$*|> MATCH (COK): "use"
$*|> VALUE: ((["use"],0),[])

**************************** \ $*| has returned (["use"],0)                                             :4_6:UnDeeper:
**************************** / |>>/recurse                                                              :4_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :4_6:UnDeeper:
**************************** / |>>/base                                                                 :4_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :4_6:UnDeeper:
****************************** / |?| optional something                                               :4_6:UnDeeper:
******************************* / |>>/recurse                                                        :4_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_6:UnDeeper:
******************************* / |>>/base                                                           :4_6:UnDeeper:
******************************** / PAKA/akapart                                                     :4_6:UnDeeper:
********************************* / $>|                                                            :4_6:UnDeeper:
********************************** / Aka Token                                                    :4_6:UnDeeper:
Aka Token> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA    :4_6:UnDeeper:
$>|> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA            :4_6:UnDeeper:
PAKA/akapart> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA     :4_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA           :4_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :4_6:UnDeeper:
slAKA optional akapart> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :4_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :4_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :4_6:UnDeeper:
**************************** / |>>/recurse                                                              :4_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :4_6:UnDeeper:
**************************** / |>>/base                                                                 :4_6:UnDeeper:
***************************** / slAKA optional typically                                               :4_6:UnDeeper:
****************************** / |?| optional something                                               :4_6:UnDeeper:
******************************* / |>>/recurse                                                        :4_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_6:UnDeeper:
******************************* / |>>/base                                                           :4_6:UnDeeper:
******************************** / typically                                                        :4_6:UnDeeper:
********************************* / $>|                                                            :4_6:UnDeeper:
$>|> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY      :4_6:UnDeeper:
typically> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

******************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY  :4_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY     :4_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :4_6:UnDeeper:
slAKA optional typically> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :4_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :4_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :4_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :4_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :4_6:UnDeeper:
slAKA> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
slAKA> MATCH (COK): "use"
slAKA> VALUE: ((["use"],0),[])

*************************** \ slAKA has returned (["use"],0)                                             :4_6:UnDeeper:
$*|> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
$*|> MATCH (COK): "use"
$*|> VALUE: ((["use"],0),[])

************************** \ $*| has returned (["use"],0)                                                 :4_6:UnDeeper:
RPMT> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
RPMT> MATCH (COK): "use"
RPMT> VALUE: ((RPMT ["use"],0),[])

************************* \ RPMT has returned (RPMT ["use"],0)                                             :4_6:UnDeeper:
slRelPred> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
slRelPred> MATCH (COK): "use"
slRelPred> VALUE: ((RPMT ["use"],0),[])

************************ \ slRelPred has returned (RPMT ["use"],0)                                          :4_6:UnDeeper:
************************ / undeepers                                                                        :4_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :4_6:UnDeeper:
************************* > sameLine: success!                                                             :4_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :4_6:UnDeeper:
pRelPred> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
pRelPred> MATCH (COK): "use"
pRelPred> VALUE: (RPMT ["use"],[])

*********************** \ pRelPred has returned RPMT ["use"]                                                 :4_6:UnDeeper:
term p/3:plain p> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
term p/3:plain p> MATCH (COK): "use"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["use"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["use"])                                  :4_6:UnDeeper:
term p/notLabelTerm> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
term p/notLabelTerm> MATCH (COK): "use"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["use"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["use"])                                 :4_6:UnDeeper:
term p> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
term p> MATCH (COK): "use"
term p> VALUE: (MyLeaf (RPMT ["use"]),[])

******************** \ term p has returned MyLeaf (RPMT ["use"])                                                :4_6:UnDeeper:
******************** / binary(Or)                                                                               :4_6:UnDeeper:
binary(Or)> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                :4_6:UnDeeper:
******************** / binary(And)                                                                              :4_6:UnDeeper:
binary(And)> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                              :4_6:UnDeeper:
******************** / binary(SetLess)                                                                          :4_6:UnDeeper:
binary(SetLess)> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                         :4_6:UnDeeper:
******************** / binary(SetPlus)                                                                          :4_6:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                         :4_6:UnDeeper:
expression> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
expression> MATCH (COK): "use"
expression> VALUE: (MyLeaf (RPMT ["use"]),[])

******************* \ expression has returned MyLeaf (RPMT ["use"])                                              :4_6:UnDeeper:
manyIndentation/leaf?> IN: "use" ) ) OR ( ( "disclosure" ) ) OR ( ( <…>
manyIndentation/leaf?> MATCH (COK): "use"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["use"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["use"])                                     :4_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :4_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( ( "disclosure" ) ) OR ( ( "copy <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :4_7:UnDeeper:
someIndentation> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
someIndentation> MATCH (COK): ( "use" )
someIndentation> VALUE: (MyLeaf (RPMT ["use"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["use"])                                               :4_7:UnDeeper:
term p/2:someIndentation expr p> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "use" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["use"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["use"])                                 :4_7:UnDeeper:
term p/notLabelTerm> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
term p/notLabelTerm> MATCH (COK): ( "use" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["use"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["use"])                                               :4_7:UnDeeper:
term p> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
term p> MATCH (COK): ( "use" )
term p> VALUE: (MyLeaf (RPMT ["use"]),[])

************** \ term p has returned MyLeaf (RPMT ["use"])                                                              :4_7:UnDeeper:
************** / binary(Or)                                                                                             :4_7:UnDeeper:
binary(Or)> IN: ) OR ( ( "disclosure" ) ) OR ( ( "copyin <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                              :4_7:UnDeeper:
************** / binary(And)                                                                                            :4_7:UnDeeper:
binary(And)> IN: ) OR ( ( "disclosure" ) ) OR ( ( "copyin <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                            :4_7:UnDeeper:
************** / binary(SetLess)                                                                                        :4_7:UnDeeper:
binary(SetLess)> IN: ) OR ( ( "disclosure" ) ) OR ( ( "copyin <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                       :4_7:UnDeeper:
************** / binary(SetPlus)                                                                                        :4_7:UnDeeper:
binary(SetPlus)> IN: ) OR ( ( "disclosure" ) ) OR ( ( "copyin <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                       :4_7:UnDeeper:
expression> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
expression> MATCH (COK): ( "use" )
expression> VALUE: (MyLeaf (RPMT ["use"]),[])

************* \ expression has returned MyLeaf (RPMT ["use"])                                                            :4_7:UnDeeper:
manyIndentation/leaf?> IN: ( "use" ) ) OR ( ( "disclosure" ) ) OR ( <…>
manyIndentation/leaf?> MATCH (COK): ( "use" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["use"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["use"])                                                   :4_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :4_7:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( ( "disclosure" ) ) OR ( ( "copyin <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :4_5:Or:
someIndentation> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
someIndentation> MATCH (COK): ( ( "use" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["use"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["use"])                                                      :4_5:Or:
term p/2:someIndentation expr p> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "use" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["use"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["use"])                                        :4_5:Or:
term p/notLabelTerm> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
term p/notLabelTerm> MATCH (COK): ( ( "use" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["use"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["use"])                                                      :4_5:Or:
term p> IN: ( ( "use" ) ) OR ( ( "disclosure" ) ) OR <…>
term p> MATCH (COK): ( ( "use" ) )
term p> VALUE: (MyLeaf (RPMT ["use"]),[])

******** \ term p has returned MyLeaf (RPMT ["use"])                                                                     :4_5:Or:
******** / binary(Or)                                                                                                    :4_5:Or:
binary(Or)> IN: OR ( ( "disclosure" ) ) OR ( ( "copying" <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :4_6:GoDeeper:
******** / term p                                                                                                         :4_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :4_6:GoDeeper:
********** / $*|                                                                                                        :4_6:GoDeeper:
*********** / someSL                                                                                                   :4_6:GoDeeper:
************ / pNumAsText                                                                                             :4_6:GoDeeper:
pNumAsText> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected (
pNumAsText> expecting number

************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                          :4_6:GoDeeper:
someSL> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected (
someSL> expecting other text or number

*********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                  :4_6:GoDeeper:
$*|> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected (
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                       :4_6:GoDeeper:
term p/1a:label directly above> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=20:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

********* \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number              :4_6:GoDeeper:
********* / term p/b:label to the left of line below, with EOL                                                           :4_6:GoDeeper:
********** / someSL                                                                                                     :4_6:GoDeeper:
*********** / pNumAsText                                                                                               :4_6:GoDeeper:
pNumAsText> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :4_6:GoDeeper:
someSL> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected (
someSL> expecting other text or number

********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                    :4_6:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=20:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

********* \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_6:GoDeeper:
********* / term p/notLabelTerm                                                                                          :4_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :4_6:GoDeeper:
*********** / someIndentation                                                                                          :4_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :4_6:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :4_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :4_7:GoDeeper:
************* / expression                                                                                             :4_7:GoDeeper:
************** / term p                                                                                               :4_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :4_7:GoDeeper:
**************** / $*|                                                                                              :4_7:GoDeeper:
***************** / someSL                                                                                         :4_7:GoDeeper:
****************** / pNumAsText                                                                                   :4_7:GoDeeper:
pNumAsText> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :4_7:GoDeeper:
someSL> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :4_7:GoDeeper:
$*|> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :4_7:GoDeeper:
term p/1a:label directly above> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=21:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number    :4_7:GoDeeper:
*************** / term p/b:label to the left of line below, with EOL                                                 :4_7:GoDeeper:
**************** / someSL                                                                                           :4_7:GoDeeper:
***************** / pNumAsText                                                                                     :4_7:GoDeeper:
pNumAsText> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                  :4_7:GoDeeper:
someSL> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                          :4_7:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=21:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_7:GoDeeper:
*************** / term p/notLabelTerm                                                                                :4_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :4_7:GoDeeper:
***************** / someIndentation                                                                                :4_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :4_7:GoDeeper:
myindented: consuming GoDeeper> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :4_7:Other "disc:
****************** / manyIndentation/leaf?                                                                         :4_7:Other "disc:
******************* / expression                                                                                  :4_7:Other "disc:
******************** / term p                                                                                    :4_7:Other "disc:
********************* / term p/1a:label directly above                                                          :4_7:Other "disc:
********************** / $*|                                                                                   :4_7:Other "disc:
*********************** / someSL                                                                              :4_7:Other "disc:
someSL> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
someSL> MATCH (COK): "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

*********************** \ someSL has returned (["disclosure"],0)                                             :5_6:UnDeeper:
*********************** / pNumAsText                                                                         :5_6:UnDeeper:
pNumAsText> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                      :5_6:UnDeeper:
$*|> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
$*|> MATCH (CERR): "disclosure"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or other text or number

********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number                 :5_6:UnDeeper:
term p/1a:label directly above> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
term p/1a:label directly above> MATCH (CERR): "disclosure"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=23:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

********************* \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :5_6:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                                      :4_7:Other "disc:
********************** / someSL                                                                                :4_7:Other "disc:
someSL> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
someSL> MATCH (COK): "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

********************** \ someSL has returned (["disclosure"],0)                                               :5_6:UnDeeper:
********************** / undeepers                                                                            :5_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :5_6:UnDeeper:
*********************** > sameLine: success!                                                                 :5_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :5_6:UnDeeper:
********************** / matching EOL                                                                         :5_6:UnDeeper:
matching EOL> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected )
matching EOL> expecting EOL

********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                         :5_6:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): "disclosure"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=23:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

********************* \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :5_6:UnDeeper:
********************* / term p/notLabelTerm                                                                     :4_7:Other "disc:
********************** / term p/2:someIndentation expr p                                                       :4_7:Other "disc:
*********************** / someIndentation                                                                     :4_7:Other "disc:
************************ / myindented: consuming GoDeeper                                                    :4_7:Other "disc:
myindented: consuming GoDeeper> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected "disclosure"
myindented: consuming GoDeeper> expecting (

************************ \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "disclosure" Expecting: ( :4_7:Other "disc:
someIndentation> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected "disclosure"
someIndentation> expecting (

*********************** \ !Unconsumed Error: someIndentation: Unexpected "disclosure" Expecting: (            :4_7:Other "disc:
term p/2:someIndentation expr p> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected "disclosure"
term p/2:someIndentation expr p> expecting (

********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "disclosure" Expecting: ( :4_7:Other "disc:
********************** / term p/3:plain p                                                                      :4_7:Other "disc:
*********************** / pRelPred                                                                            :4_7:Other "disc:
************************ / slRelPred                                                                         :4_7:Other "disc:
************************* / nested simpleHorn                                                               :4_7:Other "disc:
************************** > |^|                                                                           :4_7:Other "disc:
************************** / $*|                                                                           :4_7:Other "disc:
*************************** / slMultiTerm                                                                 :4_7:Other "disc:
**************************** / someSL                                                                    :4_7:Other "disc:
someSL> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
someSL> MATCH (COK): "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

**************************** \ someSL has returned (["disclosure"],0)                                   :5_6:UnDeeper:
slMultiTerm> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
slMultiTerm> MATCH (COK): "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

*************************** \ slMultiTerm has returned (["disclosure"],0)                                :5_6:UnDeeper:
$*|> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
$*|> MATCH (COK): "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************** \ $*| has returned (["disclosure"],0)                                          :5_6:UnDeeper:
************************** / |^| deeps                                                                    :5_6:UnDeeper:
|^| deeps> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :5_5:Or:
nested simpleHorn> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
nested simpleHorn> MATCH (CERR): "disclosure" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************* \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS )        :5_5:Or:
************************* / RPConstraint                                                                    :4_7:Other "disc:
************************** / $*|                                                                           :4_7:Other "disc:
*************************** / slMultiTerm                                                                 :4_7:Other "disc:
**************************** / someSL                                                                    :4_7:Other "disc:
someSL> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
someSL> MATCH (COK): "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

**************************** \ someSL has returned (["disclosure"],0)                                   :5_6:UnDeeper:
slMultiTerm> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
slMultiTerm> MATCH (COK): "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

*************************** \ slMultiTerm has returned (["disclosure"],0)                                :5_6:UnDeeper:
$*|> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
$*|> MATCH (COK): "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************** \ $*| has returned (["disclosure"],0)                                          :5_6:UnDeeper:
************************** / |>| calling $>>                                                              :5_6:UnDeeper:
*************************** / |>>/recurse                                                                :5_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :5_6:UnDeeper:
*************************** / |>>/base                                                                   :5_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_6:UnDeeper:
RPConstraint> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
RPConstraint> MATCH (CERR): "disclosure"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_6:UnDeeper:
************************* / RPBoolStructR                                                                   :4_7:Other "disc:
************************** / $*|                                                                           :4_7:Other "disc:
*************************** / slMultiTerm                                                                 :4_7:Other "disc:
**************************** / someSL                                                                    :4_7:Other "disc:
someSL> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
someSL> MATCH (COK): "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

**************************** \ someSL has returned (["disclosure"],0)                                   :5_6:UnDeeper:
slMultiTerm> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
slMultiTerm> MATCH (COK): "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

*************************** \ slMultiTerm has returned (["disclosure"],0)                                :5_6:UnDeeper:
$*|> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
$*|> MATCH (COK): "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************** \ $*| has returned (["disclosure"],0)                                          :5_6:UnDeeper:
************************** / |>| calling $>>                                                              :5_6:UnDeeper:
*************************** / |>>/recurse                                                                :5_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :5_6:UnDeeper:
*************************** / |>>/base                                                                   :5_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_6:UnDeeper:
RPBoolStructR> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
RPBoolStructR> MATCH (CERR): "disclosure"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_6:UnDeeper:
************************* / RPMT                                                                            :4_7:Other "disc:
************************** / $*|                                                                           :4_7:Other "disc:
*************************** / slAKA                                                                       :4_7:Other "disc:
**************************** / $*|                                                                       :4_7:Other "disc:
***************************** / slAKA base                                                              :4_7:Other "disc:
****************************** / slMultiTerm                                                           :4_7:Other "disc:
******************************* / someSL                                                              :4_7:Other "disc:
someSL> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
someSL> MATCH (COK): "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

******************************* \ someSL has returned (["disclosure"],0)                             :5_6:UnDeeper:
slMultiTerm> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
slMultiTerm> MATCH (COK): "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

****************************** \ slMultiTerm has returned (["disclosure"],0)                          :5_6:UnDeeper:
slAKA base> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
slAKA base> MATCH (COK): "disclosure"
slAKA base> VALUE: ((["disclosure"],0),[])

***************************** \ slAKA base has returned (["disclosure"],0)                             :5_6:UnDeeper:
$*|> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
$*|> MATCH (COK): "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

**************************** \ $*| has returned (["disclosure"],0)                                      :5_6:UnDeeper:
**************************** / |>>/recurse                                                              :5_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :5_6:UnDeeper:
**************************** / |>>/base                                                                 :5_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :5_6:UnDeeper:
****************************** / |?| optional something                                               :5_6:UnDeeper:
******************************* / |>>/recurse                                                        :5_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :5_6:UnDeeper:
******************************* / |>>/base                                                           :5_6:UnDeeper:
******************************** / PAKA/akapart                                                     :5_6:UnDeeper:
********************************* / $>|                                                            :5_6:UnDeeper:
********************************** / Aka Token                                                    :5_6:UnDeeper:
Aka Token> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA    :5_6:UnDeeper:
$>|> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA            :5_6:UnDeeper:
PAKA/akapart> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA     :5_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA           :5_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :5_6:UnDeeper:
slAKA optional akapart> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :5_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :5_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :5_6:UnDeeper:
**************************** / |>>/recurse                                                              :5_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :5_6:UnDeeper:
**************************** / |>>/base                                                                 :5_6:UnDeeper:
***************************** / slAKA optional typically                                               :5_6:UnDeeper:
****************************** / |?| optional something                                               :5_6:UnDeeper:
******************************* / |>>/recurse                                                        :5_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :5_6:UnDeeper:
******************************* / |>>/base                                                           :5_6:UnDeeper:
******************************** / typically                                                        :5_6:UnDeeper:
********************************* / $>|                                                            :5_6:UnDeeper:
$>|> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY      :5_6:UnDeeper:
typically> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

******************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY  :5_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY     :5_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :5_6:UnDeeper:
slAKA optional typically> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :5_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :5_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :5_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :5_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :5_6:UnDeeper:
slAKA> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
slAKA> MATCH (COK): "disclosure"
slAKA> VALUE: ((["disclosure"],0),[])

*************************** \ slAKA has returned (["disclosure"],0)                                      :5_6:UnDeeper:
$*|> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
$*|> MATCH (COK): "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************** \ $*| has returned (["disclosure"],0)                                          :5_6:UnDeeper:
RPMT> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
RPMT> MATCH (COK): "disclosure"
RPMT> VALUE: ((RPMT ["disclosure"],0),[])

************************* \ RPMT has returned (RPMT ["disclosure"],0)                                      :5_6:UnDeeper:
slRelPred> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
slRelPred> MATCH (COK): "disclosure"
slRelPred> VALUE: ((RPMT ["disclosure"],0),[])

************************ \ slRelPred has returned (RPMT ["disclosure"],0)                                   :5_6:UnDeeper:
************************ / undeepers                                                                        :5_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :5_6:UnDeeper:
************************* > sameLine: success!                                                             :5_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :5_6:UnDeeper:
pRelPred> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
pRelPred> MATCH (COK): "disclosure"
pRelPred> VALUE: (RPMT ["disclosure"],[])

*********************** \ pRelPred has returned RPMT ["disclosure"]                                          :5_6:UnDeeper:
term p/3:plain p> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
term p/3:plain p> MATCH (COK): "disclosure"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["disclosure"])                           :5_6:UnDeeper:
term p/notLabelTerm> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
term p/notLabelTerm> MATCH (COK): "disclosure"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disclosure"])                          :5_6:UnDeeper:
term p> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
term p> MATCH (COK): "disclosure"
term p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******************** \ term p has returned MyLeaf (RPMT ["disclosure"])                                         :5_6:UnDeeper:
******************** / binary(Or)                                                                               :5_6:UnDeeper:
binary(Or)> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                :5_6:UnDeeper:
******************** / binary(And)                                                                              :5_6:UnDeeper:
binary(And)> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                              :5_6:UnDeeper:
******************** / binary(SetLess)                                                                          :5_6:UnDeeper:
binary(SetLess)> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                         :5_6:UnDeeper:
******************** / binary(SetPlus)                                                                          :5_6:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                         :5_6:UnDeeper:
expression> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
expression> MATCH (COK): "disclosure"
expression> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******************* \ expression has returned MyLeaf (RPMT ["disclosure"])                                       :5_6:UnDeeper:
manyIndentation/leaf?> IN: "disclosure" ) ) OR ( ( "copying" ) ) OR <…>
manyIndentation/leaf?> MATCH (COK): "disclosure"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disclosure"])                              :5_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :5_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( ( "copying" ) ) OR ( ( "modific <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :5_7:UnDeeper:
someIndentation> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
someIndentation> MATCH (COK): ( "disclosure" )
someIndentation> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["disclosure"])                                        :5_7:UnDeeper:
term p/2:someIndentation expr p> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "disclosure" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disclosure"])                          :5_7:UnDeeper:
term p/notLabelTerm> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
term p/notLabelTerm> MATCH (COK): ( "disclosure" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["disclosure"])                                        :5_7:UnDeeper:
term p> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
term p> MATCH (COK): ( "disclosure" )
term p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

************** \ term p has returned MyLeaf (RPMT ["disclosure"])                                                       :5_7:UnDeeper:
************** / binary(Or)                                                                                             :5_7:UnDeeper:
binary(Or)> IN: ) OR ( ( "copying" ) ) OR ( ( "modificat <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                              :5_7:UnDeeper:
************** / binary(And)                                                                                            :5_7:UnDeeper:
binary(And)> IN: ) OR ( ( "copying" ) ) OR ( ( "modificat <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                            :5_7:UnDeeper:
************** / binary(SetLess)                                                                                        :5_7:UnDeeper:
binary(SetLess)> IN: ) OR ( ( "copying" ) ) OR ( ( "modificat <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                       :5_7:UnDeeper:
************** / binary(SetPlus)                                                                                        :5_7:UnDeeper:
binary(SetPlus)> IN: ) OR ( ( "copying" ) ) OR ( ( "modificat <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                       :5_7:UnDeeper:
expression> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
expression> MATCH (COK): ( "disclosure" )
expression> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

************* \ expression has returned MyLeaf (RPMT ["disclosure"])                                                     :5_7:UnDeeper:
manyIndentation/leaf?> IN: ( "disclosure" ) ) OR ( ( "copying" ) )  <…>
manyIndentation/leaf?> MATCH (COK): ( "disclosure" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disclosure"])                                            :5_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :5_7:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( ( "copying" ) ) OR ( ( "modificat <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :5_5:Or:
someIndentation> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
someIndentation> MATCH (COK): ( ( "disclosure" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["disclosure"])                                               :5_5:Or:
term p/2:someIndentation expr p> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "disclosure" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disclosure"])                                 :5_5:Or:
term p/notLabelTerm> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
term p/notLabelTerm> MATCH (COK): ( ( "disclosure" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disclosure"])                                               :5_5:Or:
term p> IN: ( ( "disclosure" ) ) OR ( ( "copying" )  <…>
term p> MATCH (COK): ( ( "disclosure" ) )
term p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******** \ term p has returned MyLeaf (RPMT ["disclosure"])                                                              :5_5:Or:
******** / binary(Or)                                                                                                    :5_5:Or:
binary(Or)> IN: OR ( ( "copying" ) ) OR ( ( "modificatio <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :5_6:GoDeeper:
******** / term p                                                                                                         :5_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :5_6:GoDeeper:
********** / $*|                                                                                                        :5_6:GoDeeper:
*********** / someSL                                                                                                   :5_6:GoDeeper:
************ / pNumAsText                                                                                             :5_6:GoDeeper:
pNumAsText> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected (
pNumAsText> expecting number

************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                          :5_6:GoDeeper:
someSL> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected (
someSL> expecting other text or number

*********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                  :5_6:GoDeeper:
$*|> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected (
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                       :5_6:GoDeeper:
term p/1a:label directly above> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

********* \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number              :5_6:GoDeeper:
********* / term p/b:label to the left of line below, with EOL                                                           :5_6:GoDeeper:
********** / someSL                                                                                                     :5_6:GoDeeper:
*********** / pNumAsText                                                                                               :5_6:GoDeeper:
pNumAsText> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :5_6:GoDeeper:
someSL> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected (
someSL> expecting other text or number

********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                    :5_6:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

********* \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_6:GoDeeper:
********* / term p/notLabelTerm                                                                                          :5_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :5_6:GoDeeper:
*********** / someIndentation                                                                                          :5_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :5_6:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :5_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :5_7:GoDeeper:
************* / expression                                                                                             :5_7:GoDeeper:
************** / term p                                                                                               :5_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :5_7:GoDeeper:
**************** / $*|                                                                                              :5_7:GoDeeper:
***************** / someSL                                                                                         :5_7:GoDeeper:
****************** / pNumAsText                                                                                   :5_7:GoDeeper:
pNumAsText> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :5_7:GoDeeper:
someSL> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :5_7:GoDeeper:
$*|> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :5_7:GoDeeper:
term p/1a:label directly above> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number    :5_7:GoDeeper:
*************** / term p/b:label to the left of line below, with EOL                                                 :5_7:GoDeeper:
**************** / someSL                                                                                           :5_7:GoDeeper:
***************** / pNumAsText                                                                                     :5_7:GoDeeper:
pNumAsText> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                  :5_7:GoDeeper:
someSL> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                          :5_7:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_7:GoDeeper:
*************** / term p/notLabelTerm                                                                                :5_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :5_7:GoDeeper:
***************** / someIndentation                                                                                :5_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :5_7:GoDeeper:
myindented: consuming GoDeeper> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :5_7:Other "copy:
****************** / manyIndentation/leaf?                                                                         :5_7:Other "copy:
******************* / expression                                                                                  :5_7:Other "copy:
******************** / term p                                                                                    :5_7:Other "copy:
********************* / term p/1a:label directly above                                                          :5_7:Other "copy:
********************** / $*|                                                                                   :5_7:Other "copy:
*********************** / someSL                                                                              :5_7:Other "copy:
someSL> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
someSL> MATCH (COK): "copying"
someSL> VALUE: ((["copying"],0),[])

*********************** \ someSL has returned (["copying"],0)                                                :6_6:UnDeeper:
*********************** / pNumAsText                                                                         :6_6:UnDeeper:
pNumAsText> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                      :6_6:UnDeeper:
$*|> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
$*|> MATCH (CERR): "copying"
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting ( or other text or number

********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number                 :6_6:UnDeeper:
term p/1a:label directly above> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
term p/1a:label directly above> MATCH (CERR): "copying"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

********************* \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :6_6:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                                      :5_7:Other "copy:
********************** / someSL                                                                                :5_7:Other "copy:
someSL> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
someSL> MATCH (COK): "copying"
someSL> VALUE: ((["copying"],0),[])

********************** \ someSL has returned (["copying"],0)                                                  :6_6:UnDeeper:
********************** / undeepers                                                                            :6_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :6_6:UnDeeper:
*********************** > sameLine: success!                                                                 :6_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :6_6:UnDeeper:
********************** / matching EOL                                                                         :6_6:UnDeeper:
matching EOL> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=29:
matching EOL> unexpected )
matching EOL> expecting EOL

********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                         :6_6:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): "copying"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

********************* \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :6_6:UnDeeper:
********************* / term p/notLabelTerm                                                                     :5_7:Other "copy:
********************** / term p/2:someIndentation expr p                                                       :5_7:Other "copy:
*********************** / someIndentation                                                                     :5_7:Other "copy:
************************ / myindented: consuming GoDeeper                                                    :5_7:Other "copy:
myindented: consuming GoDeeper> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=28:
myindented: consuming GoDeeper> unexpected "copying"
myindented: consuming GoDeeper> expecting (

************************ \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "copying" Expecting: ( :5_7:Other "copy:
someIndentation> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected "copying"
someIndentation> expecting (

*********************** \ !Unconsumed Error: someIndentation: Unexpected "copying" Expecting: (               :5_7:Other "copy:
term p/2:someIndentation expr p> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected "copying"
term p/2:someIndentation expr p> expecting (

********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "copying" Expecting: ( :5_7:Other "copy:
********************** / term p/3:plain p                                                                      :5_7:Other "copy:
*********************** / pRelPred                                                                            :5_7:Other "copy:
************************ / slRelPred                                                                         :5_7:Other "copy:
************************* / nested simpleHorn                                                               :5_7:Other "copy:
************************** > |^|                                                                           :5_7:Other "copy:
************************** / $*|                                                                           :5_7:Other "copy:
*************************** / slMultiTerm                                                                 :5_7:Other "copy:
**************************** / someSL                                                                    :5_7:Other "copy:
someSL> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
someSL> MATCH (COK): "copying"
someSL> VALUE: ((["copying"],0),[])

**************************** \ someSL has returned (["copying"],0)                                      :6_6:UnDeeper:
slMultiTerm> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
slMultiTerm> MATCH (COK): "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

*************************** \ slMultiTerm has returned (["copying"],0)                                   :6_6:UnDeeper:
$*|> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
$*|> MATCH (COK): "copying"
$*|> VALUE: ((["copying"],0),[])

************************** \ $*| has returned (["copying"],0)                                             :6_6:UnDeeper:
************************** / |^| deeps                                                                    :6_6:UnDeeper:
|^| deeps> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :6_5:Or:
nested simpleHorn> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
nested simpleHorn> MATCH (CERR): "copying" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************* \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS )        :6_5:Or:
************************* / RPConstraint                                                                    :5_7:Other "copy:
************************** / $*|                                                                           :5_7:Other "copy:
*************************** / slMultiTerm                                                                 :5_7:Other "copy:
**************************** / someSL                                                                    :5_7:Other "copy:
someSL> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
someSL> MATCH (COK): "copying"
someSL> VALUE: ((["copying"],0),[])

**************************** \ someSL has returned (["copying"],0)                                      :6_6:UnDeeper:
slMultiTerm> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
slMultiTerm> MATCH (COK): "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

*************************** \ slMultiTerm has returned (["copying"],0)                                   :6_6:UnDeeper:
$*|> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
$*|> MATCH (COK): "copying"
$*|> VALUE: ((["copying"],0),[])

************************** \ $*| has returned (["copying"],0)                                             :6_6:UnDeeper:
************************** / |>| calling $>>                                                              :6_6:UnDeeper:
*************************** / |>>/recurse                                                                :6_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :6_6:UnDeeper:
*************************** / |>>/base                                                                   :6_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_6:UnDeeper:
RPConstraint> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
RPConstraint> MATCH (CERR): "copying"
RPConstraint> ERROR:
RPConstraint> offset=29:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_6:UnDeeper:
************************* / RPBoolStructR                                                                   :5_7:Other "copy:
************************** / $*|                                                                           :5_7:Other "copy:
*************************** / slMultiTerm                                                                 :5_7:Other "copy:
**************************** / someSL                                                                    :5_7:Other "copy:
someSL> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
someSL> MATCH (COK): "copying"
someSL> VALUE: ((["copying"],0),[])

**************************** \ someSL has returned (["copying"],0)                                      :6_6:UnDeeper:
slMultiTerm> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
slMultiTerm> MATCH (COK): "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

*************************** \ slMultiTerm has returned (["copying"],0)                                   :6_6:UnDeeper:
$*|> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
$*|> MATCH (COK): "copying"
$*|> VALUE: ((["copying"],0),[])

************************** \ $*| has returned (["copying"],0)                                             :6_6:UnDeeper:
************************** / |>| calling $>>                                                              :6_6:UnDeeper:
*************************** / |>>/recurse                                                                :6_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :6_6:UnDeeper:
*************************** / |>>/base                                                                   :6_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_6:UnDeeper:
RPBoolStructR> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
RPBoolStructR> MATCH (CERR): "copying"
RPBoolStructR> ERROR:
RPBoolStructR> offset=29:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_6:UnDeeper:
************************* / RPMT                                                                            :5_7:Other "copy:
************************** / $*|                                                                           :5_7:Other "copy:
*************************** / slAKA                                                                       :5_7:Other "copy:
**************************** / $*|                                                                       :5_7:Other "copy:
***************************** / slAKA base                                                              :5_7:Other "copy:
****************************** / slMultiTerm                                                           :5_7:Other "copy:
******************************* / someSL                                                              :5_7:Other "copy:
someSL> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
someSL> MATCH (COK): "copying"
someSL> VALUE: ((["copying"],0),[])

******************************* \ someSL has returned (["copying"],0)                                :6_6:UnDeeper:
slMultiTerm> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
slMultiTerm> MATCH (COK): "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

****************************** \ slMultiTerm has returned (["copying"],0)                             :6_6:UnDeeper:
slAKA base> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
slAKA base> MATCH (COK): "copying"
slAKA base> VALUE: ((["copying"],0),[])

***************************** \ slAKA base has returned (["copying"],0)                                :6_6:UnDeeper:
$*|> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
$*|> MATCH (COK): "copying"
$*|> VALUE: ((["copying"],0),[])

**************************** \ $*| has returned (["copying"],0)                                         :6_6:UnDeeper:
**************************** / |>>/recurse                                                              :6_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :6_6:UnDeeper:
**************************** / |>>/base                                                                 :6_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :6_6:UnDeeper:
****************************** / |?| optional something                                               :6_6:UnDeeper:
******************************* / |>>/recurse                                                        :6_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :6_6:UnDeeper:
******************************* / |>>/base                                                           :6_6:UnDeeper:
******************************** / PAKA/akapart                                                     :6_6:UnDeeper:
********************************* / $>|                                                            :6_6:UnDeeper:
********************************** / Aka Token                                                    :6_6:UnDeeper:
Aka Token> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=29:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA    :6_6:UnDeeper:
$>|> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting AKA

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA            :6_6:UnDeeper:
PAKA/akapart> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=29:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA     :6_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA           :6_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :6_6:UnDeeper:
slAKA optional akapart> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :6_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :6_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :6_6:UnDeeper:
**************************** / |>>/recurse                                                              :6_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :6_6:UnDeeper:
**************************** / |>>/base                                                                 :6_6:UnDeeper:
***************************** / slAKA optional typically                                               :6_6:UnDeeper:
****************************** / |?| optional something                                               :6_6:UnDeeper:
******************************* / |>>/recurse                                                        :6_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :6_6:UnDeeper:
******************************* / |>>/base                                                           :6_6:UnDeeper:
******************************** / typically                                                        :6_6:UnDeeper:
********************************* / $>|                                                            :6_6:UnDeeper:
$>|> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY      :6_6:UnDeeper:
typically> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=29:
typically> unexpected )
typically> expecting TYPICALLY

******************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY  :6_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY     :6_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :6_6:UnDeeper:
slAKA optional typically> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :6_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :6_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :6_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :6_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :6_6:UnDeeper:
slAKA> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
slAKA> MATCH (COK): "copying"
slAKA> VALUE: ((["copying"],0),[])

*************************** \ slAKA has returned (["copying"],0)                                         :6_6:UnDeeper:
$*|> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
$*|> MATCH (COK): "copying"
$*|> VALUE: ((["copying"],0),[])

************************** \ $*| has returned (["copying"],0)                                             :6_6:UnDeeper:
RPMT> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
RPMT> MATCH (COK): "copying"
RPMT> VALUE: ((RPMT ["copying"],0),[])

************************* \ RPMT has returned (RPMT ["copying"],0)                                         :6_6:UnDeeper:
slRelPred> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
slRelPred> MATCH (COK): "copying"
slRelPred> VALUE: ((RPMT ["copying"],0),[])

************************ \ slRelPred has returned (RPMT ["copying"],0)                                      :6_6:UnDeeper:
************************ / undeepers                                                                        :6_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :6_6:UnDeeper:
************************* > sameLine: success!                                                             :6_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :6_6:UnDeeper:
pRelPred> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
pRelPred> MATCH (COK): "copying"
pRelPred> VALUE: (RPMT ["copying"],[])

*********************** \ pRelPred has returned RPMT ["copying"]                                             :6_6:UnDeeper:
term p/3:plain p> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
term p/3:plain p> MATCH (COK): "copying"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["copying"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["copying"])                              :6_6:UnDeeper:
term p/notLabelTerm> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
term p/notLabelTerm> MATCH (COK): "copying"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["copying"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["copying"])                             :6_6:UnDeeper:
term p> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
term p> MATCH (COK): "copying"
term p> VALUE: (MyLeaf (RPMT ["copying"]),[])

******************** \ term p has returned MyLeaf (RPMT ["copying"])                                            :6_6:UnDeeper:
******************** / binary(Or)                                                                               :6_6:UnDeeper:
binary(Or)> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=29:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                :6_6:UnDeeper:
******************** / binary(And)                                                                              :6_6:UnDeeper:
binary(And)> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=29:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                              :6_6:UnDeeper:
******************** / binary(SetLess)                                                                          :6_6:UnDeeper:
binary(SetLess)> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=29:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                         :6_6:UnDeeper:
******************** / binary(SetPlus)                                                                          :6_6:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=29:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                         :6_6:UnDeeper:
expression> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
expression> MATCH (COK): "copying"
expression> VALUE: (MyLeaf (RPMT ["copying"]),[])

******************* \ expression has returned MyLeaf (RPMT ["copying"])                                          :6_6:UnDeeper:
manyIndentation/leaf?> IN: "copying" ) ) OR ( ( "modification" ) )  <…>
manyIndentation/leaf?> MATCH (COK): "copying"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["copying"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["copying"])                                 :6_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :6_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( ( "modification" ) ) OR ( ( "di <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :6_7:UnDeeper:
someIndentation> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
someIndentation> MATCH (COK): ( "copying" )
someIndentation> VALUE: (MyLeaf (RPMT ["copying"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["copying"])                                           :6_7:UnDeeper:
term p/2:someIndentation expr p> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "copying" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["copying"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["copying"])                             :6_7:UnDeeper:
term p/notLabelTerm> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
term p/notLabelTerm> MATCH (COK): ( "copying" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["copying"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["copying"])                                           :6_7:UnDeeper:
term p> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
term p> MATCH (COK): ( "copying" )
term p> VALUE: (MyLeaf (RPMT ["copying"]),[])

************** \ term p has returned MyLeaf (RPMT ["copying"])                                                          :6_7:UnDeeper:
************** / binary(Or)                                                                                             :6_7:UnDeeper:
binary(Or)> IN: ) OR ( ( "modification" ) ) OR ( ( "disp <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected )
binary(Or)> expecting OR

************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                              :6_7:UnDeeper:
************** / binary(And)                                                                                            :6_7:UnDeeper:
binary(And)> IN: ) OR ( ( "modification" ) ) OR ( ( "disp <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected )
binary(And)> expecting AND

************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                            :6_7:UnDeeper:
************** / binary(SetLess)                                                                                        :6_7:UnDeeper:
binary(SetLess)> IN: ) OR ( ( "modification" ) ) OR ( ( "disp <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                       :6_7:UnDeeper:
************** / binary(SetPlus)                                                                                        :6_7:UnDeeper:
binary(SetPlus)> IN: ) OR ( ( "modification" ) ) OR ( ( "disp <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                       :6_7:UnDeeper:
expression> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
expression> MATCH (COK): ( "copying" )
expression> VALUE: (MyLeaf (RPMT ["copying"]),[])

************* \ expression has returned MyLeaf (RPMT ["copying"])                                                        :6_7:UnDeeper:
manyIndentation/leaf?> IN: ( "copying" ) ) OR ( ( "modification" )  <…>
manyIndentation/leaf?> MATCH (COK): ( "copying" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["copying"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["copying"])                                               :6_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :6_7:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( ( "modification" ) ) OR ( ( "disp <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :6_5:Or:
someIndentation> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
someIndentation> MATCH (COK): ( ( "copying" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["copying"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["copying"])                                                  :6_5:Or:
term p/2:someIndentation expr p> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "copying" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["copying"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["copying"])                                    :6_5:Or:
term p/notLabelTerm> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
term p/notLabelTerm> MATCH (COK): ( ( "copying" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["copying"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["copying"])                                                  :6_5:Or:
term p> IN: ( ( "copying" ) ) OR ( ( "modification"  <…>
term p> MATCH (COK): ( ( "copying" ) )
term p> VALUE: (MyLeaf (RPMT ["copying"]),[])

******** \ term p has returned MyLeaf (RPMT ["copying"])                                                                 :6_5:Or:
******** / binary(Or)                                                                                                    :6_5:Or:
binary(Or)> IN: OR ( ( "modification" ) ) OR ( ( "dispos <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :6_6:GoDeeper:
******** / term p                                                                                                         :6_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :6_6:GoDeeper:
********** / $*|                                                                                                        :6_6:GoDeeper:
*********** / someSL                                                                                                   :6_6:GoDeeper:
************ / pNumAsText                                                                                             :6_6:GoDeeper:
pNumAsText> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected (
pNumAsText> expecting number

************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                          :6_6:GoDeeper:
someSL> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected (
someSL> expecting other text or number

*********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                  :6_6:GoDeeper:
$*|> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected (
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                       :6_6:GoDeeper:
term p/1a:label directly above> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=32:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

********* \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number              :6_6:GoDeeper:
********* / term p/b:label to the left of line below, with EOL                                                           :6_6:GoDeeper:
********** / someSL                                                                                                     :6_6:GoDeeper:
*********** / pNumAsText                                                                                               :6_6:GoDeeper:
pNumAsText> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :6_6:GoDeeper:
someSL> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected (
someSL> expecting other text or number

********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                    :6_6:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=32:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

********* \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :6_6:GoDeeper:
********* / term p/notLabelTerm                                                                                          :6_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :6_6:GoDeeper:
*********** / someIndentation                                                                                          :6_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :6_6:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :6_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :6_7:GoDeeper:
************* / expression                                                                                             :6_7:GoDeeper:
************** / term p                                                                                               :6_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :6_7:GoDeeper:
**************** / $*|                                                                                              :6_7:GoDeeper:
***************** / someSL                                                                                         :6_7:GoDeeper:
****************** / pNumAsText                                                                                   :6_7:GoDeeper:
pNumAsText> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :6_7:GoDeeper:
someSL> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :6_7:GoDeeper:
$*|> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :6_7:GoDeeper:
term p/1a:label directly above> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number    :6_7:GoDeeper:
*************** / term p/b:label to the left of line below, with EOL                                                 :6_7:GoDeeper:
**************** / someSL                                                                                           :6_7:GoDeeper:
***************** / pNumAsText                                                                                     :6_7:GoDeeper:
pNumAsText> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                  :6_7:GoDeeper:
someSL> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                          :6_7:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :6_7:GoDeeper:
*************** / term p/notLabelTerm                                                                                :6_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :6_7:GoDeeper:
***************** / someIndentation                                                                                :6_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :6_7:GoDeeper:
myindented: consuming GoDeeper> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :6_7:Other "modi:
****************** / manyIndentation/leaf?                                                                         :6_7:Other "modi:
******************* / expression                                                                                  :6_7:Other "modi:
******************** / term p                                                                                    :6_7:Other "modi:
********************* / term p/1a:label directly above                                                          :6_7:Other "modi:
********************** / $*|                                                                                   :6_7:Other "modi:
*********************** / someSL                                                                              :6_7:Other "modi:
someSL> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
someSL> MATCH (COK): "modification"
someSL> VALUE: ((["modification"],0),[])

*********************** \ someSL has returned (["modification"],0)                                           :7_6:UnDeeper:
*********************** / pNumAsText                                                                         :7_6:UnDeeper:
pNumAsText> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                      :7_6:UnDeeper:
$*|> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
$*|> MATCH (CERR): "modification"
$*|> ERROR:
$*|> offset=35:
$*|> unexpected )
$*|> expecting ( or other text or number

********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number                 :7_6:UnDeeper:
term p/1a:label directly above> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
term p/1a:label directly above> MATCH (CERR): "modification"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=35:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

********************* \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :7_6:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                                      :6_7:Other "modi:
********************** / someSL                                                                                :6_7:Other "modi:
someSL> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
someSL> MATCH (COK): "modification"
someSL> VALUE: ((["modification"],0),[])

********************** \ someSL has returned (["modification"],0)                                             :7_6:UnDeeper:
********************** / undeepers                                                                            :7_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :7_6:UnDeeper:
*********************** > sameLine: success!                                                                 :7_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :7_6:UnDeeper:
********************** / matching EOL                                                                         :7_6:UnDeeper:
matching EOL> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=35:
matching EOL> unexpected )
matching EOL> expecting EOL

********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                         :7_6:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): "modification"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=35:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

********************* \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :7_6:UnDeeper:
********************* / term p/notLabelTerm                                                                     :6_7:Other "modi:
********************** / term p/2:someIndentation expr p                                                       :6_7:Other "modi:
*********************** / someIndentation                                                                     :6_7:Other "modi:
************************ / myindented: consuming GoDeeper                                                    :6_7:Other "modi:
myindented: consuming GoDeeper> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=34:
myindented: consuming GoDeeper> unexpected "modification"
myindented: consuming GoDeeper> expecting (

************************ \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "modification" Expecting: ( :6_7:Other "modi:
someIndentation> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=34:
someIndentation> unexpected "modification"
someIndentation> expecting (

*********************** \ !Unconsumed Error: someIndentation: Unexpected "modification" Expecting: (          :6_7:Other "modi:
term p/2:someIndentation expr p> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=34:
term p/2:someIndentation expr p> unexpected "modification"
term p/2:someIndentation expr p> expecting (

********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "modification" Expecting: ( :6_7:Other "modi:
********************** / term p/3:plain p                                                                      :6_7:Other "modi:
*********************** / pRelPred                                                                            :6_7:Other "modi:
************************ / slRelPred                                                                         :6_7:Other "modi:
************************* / nested simpleHorn                                                               :6_7:Other "modi:
************************** > |^|                                                                           :6_7:Other "modi:
************************** / $*|                                                                           :6_7:Other "modi:
*************************** / slMultiTerm                                                                 :6_7:Other "modi:
**************************** / someSL                                                                    :6_7:Other "modi:
someSL> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
someSL> MATCH (COK): "modification"
someSL> VALUE: ((["modification"],0),[])

**************************** \ someSL has returned (["modification"],0)                                 :7_6:UnDeeper:
slMultiTerm> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
slMultiTerm> MATCH (COK): "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

*************************** \ slMultiTerm has returned (["modification"],0)                              :7_6:UnDeeper:
$*|> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
$*|> MATCH (COK): "modification"
$*|> VALUE: ((["modification"],0),[])

************************** \ $*| has returned (["modification"],0)                                        :7_6:UnDeeper:
************************** / |^| deeps                                                                    :7_6:UnDeeper:
|^| deeps> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :7_5:Or:
nested simpleHorn> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
nested simpleHorn> MATCH (CERR): "modification" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************* \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS )        :7_5:Or:
************************* / RPConstraint                                                                    :6_7:Other "modi:
************************** / $*|                                                                           :6_7:Other "modi:
*************************** / slMultiTerm                                                                 :6_7:Other "modi:
**************************** / someSL                                                                    :6_7:Other "modi:
someSL> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
someSL> MATCH (COK): "modification"
someSL> VALUE: ((["modification"],0),[])

**************************** \ someSL has returned (["modification"],0)                                 :7_6:UnDeeper:
slMultiTerm> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
slMultiTerm> MATCH (COK): "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

*************************** \ slMultiTerm has returned (["modification"],0)                              :7_6:UnDeeper:
$*|> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
$*|> MATCH (COK): "modification"
$*|> VALUE: ((["modification"],0),[])

************************** \ $*| has returned (["modification"],0)                                        :7_6:UnDeeper:
************************** / |>| calling $>>                                                              :7_6:UnDeeper:
*************************** / |>>/recurse                                                                :7_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :7_6:UnDeeper:
*************************** / |>>/base                                                                   :7_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=35:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_6:UnDeeper:
RPConstraint> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
RPConstraint> MATCH (CERR): "modification"
RPConstraint> ERROR:
RPConstraint> offset=35:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_6:UnDeeper:
************************* / RPBoolStructR                                                                   :6_7:Other "modi:
************************** / $*|                                                                           :6_7:Other "modi:
*************************** / slMultiTerm                                                                 :6_7:Other "modi:
**************************** / someSL                                                                    :6_7:Other "modi:
someSL> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
someSL> MATCH (COK): "modification"
someSL> VALUE: ((["modification"],0),[])

**************************** \ someSL has returned (["modification"],0)                                 :7_6:UnDeeper:
slMultiTerm> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
slMultiTerm> MATCH (COK): "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

*************************** \ slMultiTerm has returned (["modification"],0)                              :7_6:UnDeeper:
$*|> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
$*|> MATCH (COK): "modification"
$*|> VALUE: ((["modification"],0),[])

************************** \ $*| has returned (["modification"],0)                                        :7_6:UnDeeper:
************************** / |>| calling $>>                                                              :7_6:UnDeeper:
*************************** / |>>/recurse                                                                :7_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :7_6:UnDeeper:
*************************** / |>>/base                                                                   :7_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_6:UnDeeper:
|>| calling $>>> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=35:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_6:UnDeeper:
RPBoolStructR> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
RPBoolStructR> MATCH (CERR): "modification"
RPBoolStructR> ERROR:
RPBoolStructR> offset=35:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_6:UnDeeper:
************************* / RPMT                                                                            :6_7:Other "modi:
************************** / $*|                                                                           :6_7:Other "modi:
*************************** / slAKA                                                                       :6_7:Other "modi:
**************************** / $*|                                                                       :6_7:Other "modi:
***************************** / slAKA base                                                              :6_7:Other "modi:
****************************** / slMultiTerm                                                           :6_7:Other "modi:
******************************* / someSL                                                              :6_7:Other "modi:
someSL> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
someSL> MATCH (COK): "modification"
someSL> VALUE: ((["modification"],0),[])

******************************* \ someSL has returned (["modification"],0)                           :7_6:UnDeeper:
slMultiTerm> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
slMultiTerm> MATCH (COK): "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

****************************** \ slMultiTerm has returned (["modification"],0)                        :7_6:UnDeeper:
slAKA base> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
slAKA base> MATCH (COK): "modification"
slAKA base> VALUE: ((["modification"],0),[])

***************************** \ slAKA base has returned (["modification"],0)                           :7_6:UnDeeper:
$*|> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
$*|> MATCH (COK): "modification"
$*|> VALUE: ((["modification"],0),[])

**************************** \ $*| has returned (["modification"],0)                                    :7_6:UnDeeper:
**************************** / |>>/recurse                                                              :7_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :7_6:UnDeeper:
**************************** / |>>/base                                                                 :7_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :7_6:UnDeeper:
****************************** / |?| optional something                                               :7_6:UnDeeper:
******************************* / |>>/recurse                                                        :7_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :7_6:UnDeeper:
******************************* / |>>/base                                                           :7_6:UnDeeper:
******************************** / PAKA/akapart                                                     :7_6:UnDeeper:
********************************* / $>|                                                            :7_6:UnDeeper:
********************************** / Aka Token                                                    :7_6:UnDeeper:
Aka Token> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=35:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA    :7_6:UnDeeper:
$>|> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected )
$>|> expecting AKA

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA            :7_6:UnDeeper:
PAKA/akapart> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=35:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA     :7_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA           :7_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :7_6:UnDeeper:
slAKA optional akapart> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :7_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :7_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :7_6:UnDeeper:
**************************** / |>>/recurse                                                              :7_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                :7_6:UnDeeper:
**************************** / |>>/base                                                                 :7_6:UnDeeper:
***************************** / slAKA optional typically                                               :7_6:UnDeeper:
****************************** / |?| optional something                                               :7_6:UnDeeper:
******************************* / |>>/recurse                                                        :7_6:UnDeeper:
|>>/recurse> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :7_6:UnDeeper:
******************************* / |>>/base                                                           :7_6:UnDeeper:
******************************** / typically                                                        :7_6:UnDeeper:
********************************* / $>|                                                            :7_6:UnDeeper:
$>|> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY      :7_6:UnDeeper:
typically> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=35:
typically> unexpected )
typically> expecting TYPICALLY

******************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY  :7_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY     :7_6:UnDeeper:
|?| optional something> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :7_6:UnDeeper:
slAKA optional typically> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :7_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :7_6:UnDeeper:
|>>/base> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :7_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :7_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :7_6:UnDeeper:
slAKA> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
slAKA> MATCH (COK): "modification"
slAKA> VALUE: ((["modification"],0),[])

*************************** \ slAKA has returned (["modification"],0)                                    :7_6:UnDeeper:
$*|> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
$*|> MATCH (COK): "modification"
$*|> VALUE: ((["modification"],0),[])

************************** \ $*| has returned (["modification"],0)                                        :7_6:UnDeeper:
RPMT> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
RPMT> MATCH (COK): "modification"
RPMT> VALUE: ((RPMT ["modification"],0),[])

************************* \ RPMT has returned (RPMT ["modification"],0)                                    :7_6:UnDeeper:
slRelPred> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
slRelPred> MATCH (COK): "modification"
slRelPred> VALUE: ((RPMT ["modification"],0),[])

************************ \ slRelPred has returned (RPMT ["modification"],0)                                 :7_6:UnDeeper:
************************ / undeepers                                                                        :7_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :7_6:UnDeeper:
************************* > sameLine: success!                                                             :7_6:UnDeeper:
undeepers> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :7_6:UnDeeper:
pRelPred> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
pRelPred> MATCH (COK): "modification"
pRelPred> VALUE: (RPMT ["modification"],[])

*********************** \ pRelPred has returned RPMT ["modification"]                                        :7_6:UnDeeper:
term p/3:plain p> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
term p/3:plain p> MATCH (COK): "modification"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["modification"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["modification"])                         :7_6:UnDeeper:
term p/notLabelTerm> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
term p/notLabelTerm> MATCH (COK): "modification"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["modification"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["modification"])                        :7_6:UnDeeper:
term p> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
term p> MATCH (COK): "modification"
term p> VALUE: (MyLeaf (RPMT ["modification"]),[])

******************** \ term p has returned MyLeaf (RPMT ["modification"])                                       :7_6:UnDeeper:
******************** / binary(Or)                                                                               :7_6:UnDeeper:
binary(Or)> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                :7_6:UnDeeper:
******************** / binary(And)                                                                              :7_6:UnDeeper:
binary(And)> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                              :7_6:UnDeeper:
******************** / binary(SetLess)                                                                          :7_6:UnDeeper:
binary(SetLess)> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                         :7_6:UnDeeper:
******************** / binary(SetPlus)                                                                          :7_6:UnDeeper:
binary(SetPlus)> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                         :7_6:UnDeeper:
expression> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
expression> MATCH (COK): "modification"
expression> VALUE: (MyLeaf (RPMT ["modification"]),[])

******************* \ expression has returned MyLeaf (RPMT ["modification"])                                     :7_6:UnDeeper:
manyIndentation/leaf?> IN: "modification" ) ) OR ( ( "disposal" ) ) <…>
manyIndentation/leaf?> MATCH (COK): "modification"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["modification"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["modification"])                            :7_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :7_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) OR ( ( "disposal" ) ) ) ) "of person <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :7_7:UnDeeper:
someIndentation> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
someIndentation> MATCH (COK): ( "modification" )
someIndentation> VALUE: (MyLeaf (RPMT ["modification"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["modification"])                                      :7_7:UnDeeper:
term p/2:someIndentation expr p> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "modification" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["modification"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["modification"])                        :7_7:UnDeeper:
term p/notLabelTerm> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
term p/notLabelTerm> MATCH (COK): ( "modification" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["modification"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["modification"])                                      :7_7:UnDeeper:
term p> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
term p> MATCH (COK): ( "modification" )
term p> VALUE: (MyLeaf (RPMT ["modification"]),[])

************** \ term p has returned MyLeaf (RPMT ["modification"])                                                     :7_7:UnDeeper:
************** / binary(Or)                                                                                             :7_7:UnDeeper:
binary(Or)> IN: ) OR ( ( "disposal" ) ) ) ) "of personal <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected )
binary(Or)> expecting OR

************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                              :7_7:UnDeeper:
************** / binary(And)                                                                                            :7_7:UnDeeper:
binary(And)> IN: ) OR ( ( "disposal" ) ) ) ) "of personal <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected )
binary(And)> expecting AND

************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                            :7_7:UnDeeper:
************** / binary(SetLess)                                                                                        :7_7:UnDeeper:
binary(SetLess)> IN: ) OR ( ( "disposal" ) ) ) ) "of personal <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                       :7_7:UnDeeper:
************** / binary(SetPlus)                                                                                        :7_7:UnDeeper:
binary(SetPlus)> IN: ) OR ( ( "disposal" ) ) ) ) "of personal <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                       :7_7:UnDeeper:
expression> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
expression> MATCH (COK): ( "modification" )
expression> VALUE: (MyLeaf (RPMT ["modification"]),[])

************* \ expression has returned MyLeaf (RPMT ["modification"])                                                   :7_7:UnDeeper:
manyIndentation/leaf?> IN: ( "modification" ) ) OR ( ( "disposal" ) <…>
manyIndentation/leaf?> MATCH (COK): ( "modification" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["modification"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["modification"])                                          :7_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :7_7:UnDeeper:
myindented: consuming UnDeeper> IN: ) OR ( ( "disposal" ) ) ) ) "of personal <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :7_5:Or:
someIndentation> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
someIndentation> MATCH (COK): ( ( "modification" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["modification"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["modification"])                                             :7_5:Or:
term p/2:someIndentation expr p> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "modification" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["modification"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["modification"])                               :7_5:Or:
term p/notLabelTerm> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
term p/notLabelTerm> MATCH (COK): ( ( "modification" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["modification"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["modification"])                                             :7_5:Or:
term p> IN: ( ( "modification" ) ) OR ( ( "disposal" <…>
term p> MATCH (COK): ( ( "modification" ) )
term p> VALUE: (MyLeaf (RPMT ["modification"]),[])

******** \ term p has returned MyLeaf (RPMT ["modification"])                                                            :7_5:Or:
******** / binary(Or)                                                                                                    :7_5:Or:
binary(Or)> IN: OR ( ( "disposal" ) ) ) ) "of personal d <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :7_6:GoDeeper:
******** / term p                                                                                                         :7_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :7_6:GoDeeper:
********** / $*|                                                                                                        :7_6:GoDeeper:
*********** / someSL                                                                                                   :7_6:GoDeeper:
************ / pNumAsText                                                                                             :7_6:GoDeeper:
pNumAsText> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                          :7_6:GoDeeper:
someSL> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

*********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                  :7_6:GoDeeper:
$*|> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected (
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                       :7_6:GoDeeper:
term p/1a:label directly above> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

********* \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number              :7_6:GoDeeper:
********* / term p/b:label to the left of line below, with EOL                                                           :7_6:GoDeeper:
********** / someSL                                                                                                     :7_6:GoDeeper:
*********** / pNumAsText                                                                                               :7_6:GoDeeper:
pNumAsText> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected (
pNumAsText> expecting number

*********** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                            :7_6:GoDeeper:
someSL> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected (
someSL> expecting other text or number

********** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                                    :7_6:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

********* \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :7_6:GoDeeper:
********* / term p/notLabelTerm                                                                                          :7_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :7_6:GoDeeper:
*********** / someIndentation                                                                                          :7_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :7_6:GoDeeper:
myindented: consuming GoDeeper> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :7_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :7_7:GoDeeper:
************* / expression                                                                                             :7_7:GoDeeper:
************** / term p                                                                                               :7_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :7_7:GoDeeper:
**************** / $*|                                                                                              :7_7:GoDeeper:
***************** / someSL                                                                                         :7_7:GoDeeper:
****************** / pNumAsText                                                                                   :7_7:GoDeeper:
pNumAsText> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :7_7:GoDeeper:
someSL> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :7_7:GoDeeper:
$*|> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :7_7:GoDeeper:
term p/1a:label directly above> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected (
term p/1a:label directly above> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label directly above: Unexpected ( Expecting: other text or number    :7_7:GoDeeper:
*************** / term p/b:label to the left of line below, with EOL                                                 :7_7:GoDeeper:
**************** / someSL                                                                                           :7_7:GoDeeper:
***************** / pNumAsText                                                                                     :7_7:GoDeeper:
pNumAsText> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                  :7_7:GoDeeper:
someSL> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                          :7_7:GoDeeper:
term p/b:label to the left of line below, with EOL> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected (
term p/b:label to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/b:label to the left of line below, with EOL: Unexpected ( Expecting: other text or number :7_7:GoDeeper:
*************** / term p/notLabelTerm                                                                                :7_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :7_7:GoDeeper:
***************** / someIndentation                                                                                :7_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :7_7:GoDeeper:
myindented: consuming GoDeeper> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :7_7:Other "disp:
****************** / manyIndentation/leaf?                                                                         :7_7:Other "disp:
******************* / expression                                                                                  :7_7:Other "disp:
******************** / term p                                                                                    :7_7:Other "disp:
********************* / term p/1a:label directly above                                                          :7_7:Other "disp:
********************** / $*|                                                                                   :7_7:Other "disp:
*********************** / someSL                                                                              :7_7:Other "disp:
someSL> IN: "disposal" ) ) ) ) "of personal data" )  <…>
someSL> MATCH (COK): "disposal"
someSL> VALUE: ((["disposal"],0),[])

*********************** \ someSL has returned (["disposal"],0)                                           :8_4:UnDeeper:
*********************** / pNumAsText                                                                     :8_4:UnDeeper:
pNumAsText> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                  :8_4:UnDeeper:
$*|> IN: "disposal" ) ) ) ) "of personal data" )  <…>
$*|> MATCH (CERR): "disposal"
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting ( or other text or number

********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number             :8_4:UnDeeper:
term p/1a:label directly above> IN: "disposal" ) ) ) ) "of personal data" )  <…>
term p/1a:label directly above> MATCH (CERR): "disposal"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected )
term p/1a:label directly above> expecting ( or other text or number

********************* \ !Consumed Error: term p/1a:label directly above: Unexpected ) Expecting: ( other text or number :8_4:UnDeeper:
********************* / term p/b:label to the left of line below, with EOL                                      :7_7:Other "disp:
********************** / someSL                                                                                :7_7:Other "disp:
someSL> IN: "disposal" ) ) ) ) "of personal data" )  <…>
someSL> MATCH (COK): "disposal"
someSL> VALUE: ((["disposal"],0),[])

********************** \ someSL has returned (["disposal"],0)                                             :8_4:UnDeeper:
********************** / undeepers                                                                        :8_4:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :8_4:UnDeeper:
*********************** > sameLine: success!                                                             :8_4:UnDeeper:
undeepers> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                        :8_4:UnDeeper:
********************** / matching EOL                                                                     :8_4:UnDeeper:
matching EOL> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=41:
matching EOL> unexpected )
matching EOL> expecting EOL

********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                     :8_4:UnDeeper:
term p/b:label to the left of line below, with EOL> IN: "disposal" ) ) ) ) "of personal data" )  <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): "disposal"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected )
term p/b:label to the left of line below, with EOL> expecting ( or EOL

********************* \ !Consumed Error: term p/b:label to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :8_4:UnDeeper:
********************* / term p/notLabelTerm                                                                     :7_7:Other "disp:
********************** / term p/2:someIndentation expr p                                                       :7_7:Other "disp:
*********************** / someIndentation                                                                     :7_7:Other "disp:
************************ / myindented: consuming GoDeeper                                                    :7_7:Other "disp:
myindented: consuming GoDeeper> IN: "disposal" ) ) ) ) "of personal data" )  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected "disposal"
myindented: consuming GoDeeper> expecting (

************************ \ !Unconsumed Error: myindented: consuming GoDeeper: Unexpected "disposal" Expecting: ( :7_7:Other "disp:
someIndentation> IN: "disposal" ) ) ) ) "of personal data" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected "disposal"
someIndentation> expecting (

*********************** \ !Unconsumed Error: someIndentation: Unexpected "disposal" Expecting: (              :7_7:Other "disp:
term p/2:someIndentation expr p> IN: "disposal" ) ) ) ) "of personal data" )  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected "disposal"
term p/2:someIndentation expr p> expecting (

********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "disposal" Expecting: ( :7_7:Other "disp:
********************** / term p/3:plain p                                                                      :7_7:Other "disp:
*********************** / pRelPred                                                                            :7_7:Other "disp:
************************ / slRelPred                                                                         :7_7:Other "disp:
************************* / nested simpleHorn                                                               :7_7:Other "disp:
************************** > |^|                                                                           :7_7:Other "disp:
************************** / $*|                                                                           :7_7:Other "disp:
*************************** / slMultiTerm                                                                 :7_7:Other "disp:
**************************** / someSL                                                                    :7_7:Other "disp:
someSL> IN: "disposal" ) ) ) ) "of personal data" )  <…>
someSL> MATCH (COK): "disposal"
someSL> VALUE: ((["disposal"],0),[])

**************************** \ someSL has returned (["disposal"],0)                                 :8_4:UnDeeper:
slMultiTerm> IN: "disposal" ) ) ) ) "of personal data" )  <…>
slMultiTerm> MATCH (COK): "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

*************************** \ slMultiTerm has returned (["disposal"],0)                              :8_4:UnDeeper:
$*|> IN: "disposal" ) ) ) ) "of personal data" )  <…>
$*|> MATCH (COK): "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************** \ $*| has returned (["disposal"],0)                                        :8_4:UnDeeper:
************************** / |^| deeps                                                                :8_4:UnDeeper:
|^| deeps> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|^| deeps> MATCH (COK): ) ) ) )
|^| deeps> VALUE: (([(),(),(),()],-4),[])

************************** \ |^| deeps has returned ([(),(),(),()],-4)                             :8_3:Other "of p:
nested simpleHorn> IN: "disposal" ) ) ) ) "of personal data" )  <…>
nested simpleHorn> MATCH (CERR): "disposal" ) ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=45:
nested simpleHorn> unexpected "of personal data"
nested simpleHorn> expecting ) or MEANS

************************* \ !Consumed Error: nested simpleHorn: Unexpected "of personal data" Expecting: MEANS ) :8_3:Other "of p:
************************* / RPConstraint                                                                    :7_7:Other "disp:
************************** / $*|                                                                           :7_7:Other "disp:
*************************** / slMultiTerm                                                                 :7_7:Other "disp:
**************************** / someSL                                                                    :7_7:Other "disp:
someSL> IN: "disposal" ) ) ) ) "of personal data" )  <…>
someSL> MATCH (COK): "disposal"
someSL> VALUE: ((["disposal"],0),[])

**************************** \ someSL has returned (["disposal"],0)                                 :8_4:UnDeeper:
slMultiTerm> IN: "disposal" ) ) ) ) "of personal data" )  <…>
slMultiTerm> MATCH (COK): "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

*************************** \ slMultiTerm has returned (["disposal"],0)                              :8_4:UnDeeper:
$*|> IN: "disposal" ) ) ) ) "of personal data" )  <…>
$*|> MATCH (COK): "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************** \ $*| has returned (["disposal"],0)                                        :8_4:UnDeeper:
************************** / |>| calling $>>                                                          :8_4:UnDeeper:
*************************** / |>>/recurse                                                            :8_4:UnDeeper:
|>>/recurse> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :8_4:UnDeeper:
*************************** / |>>/base                                                               :8_4:UnDeeper:
|>>/base> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :8_4:UnDeeper:
|>| calling $>>> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=41:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
RPConstraint> IN: "disposal" ) ) ) ) "of personal data" )  <…>
RPConstraint> MATCH (CERR): "disposal"
RPConstraint> ERROR:
RPConstraint> offset=41:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
************************* / RPBoolStructR                                                                   :7_7:Other "disp:
************************** / $*|                                                                           :7_7:Other "disp:
*************************** / slMultiTerm                                                                 :7_7:Other "disp:
**************************** / someSL                                                                    :7_7:Other "disp:
someSL> IN: "disposal" ) ) ) ) "of personal data" )  <…>
someSL> MATCH (COK): "disposal"
someSL> VALUE: ((["disposal"],0),[])

**************************** \ someSL has returned (["disposal"],0)                                 :8_4:UnDeeper:
slMultiTerm> IN: "disposal" ) ) ) ) "of personal data" )  <…>
slMultiTerm> MATCH (COK): "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

*************************** \ slMultiTerm has returned (["disposal"],0)                              :8_4:UnDeeper:
$*|> IN: "disposal" ) ) ) ) "of personal data" )  <…>
$*|> MATCH (COK): "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************** \ $*| has returned (["disposal"],0)                                        :8_4:UnDeeper:
************************** / |>| calling $>>                                                          :8_4:UnDeeper:
*************************** / |>>/recurse                                                            :8_4:UnDeeper:
|>>/recurse> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :8_4:UnDeeper:
*************************** / |>>/base                                                               :8_4:UnDeeper:
|>>/base> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :8_4:UnDeeper:
|>| calling $>>> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=41:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
RPBoolStructR> IN: "disposal" ) ) ) ) "of personal data" )  <…>
RPBoolStructR> MATCH (CERR): "disposal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=41:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
************************* / RPMT                                                                            :7_7:Other "disp:
************************** / $*|                                                                           :7_7:Other "disp:
*************************** / slAKA                                                                       :7_7:Other "disp:
**************************** / $*|                                                                       :7_7:Other "disp:
***************************** / slAKA base                                                              :7_7:Other "disp:
****************************** / slMultiTerm                                                           :7_7:Other "disp:
******************************* / someSL                                                              :7_7:Other "disp:
someSL> IN: "disposal" ) ) ) ) "of personal data" )  <…>
someSL> MATCH (COK): "disposal"
someSL> VALUE: ((["disposal"],0),[])

******************************* \ someSL has returned (["disposal"],0)                           :8_4:UnDeeper:
slMultiTerm> IN: "disposal" ) ) ) ) "of personal data" )  <…>
slMultiTerm> MATCH (COK): "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

****************************** \ slMultiTerm has returned (["disposal"],0)                        :8_4:UnDeeper:
slAKA base> IN: "disposal" ) ) ) ) "of personal data" )  <…>
slAKA base> MATCH (COK): "disposal"
slAKA base> VALUE: ((["disposal"],0),[])

***************************** \ slAKA base has returned (["disposal"],0)                           :8_4:UnDeeper:
$*|> IN: "disposal" ) ) ) ) "of personal data" )  <…>
$*|> MATCH (COK): "disposal"
$*|> VALUE: ((["disposal"],0),[])

**************************** \ $*| has returned (["disposal"],0)                                    :8_4:UnDeeper:
**************************** / |>>/recurse                                                          :8_4:UnDeeper:
|>>/recurse> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :8_4:UnDeeper:
**************************** / |>>/base                                                             :8_4:UnDeeper:
***************************** / slAKA optional akapart                                             :8_4:UnDeeper:
****************************** / |?| optional something                                           :8_4:UnDeeper:
******************************* / |>>/recurse                                                    :8_4:UnDeeper:
|>>/recurse> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (      :8_4:UnDeeper:
******************************* / |>>/base                                                       :8_4:UnDeeper:
******************************** / PAKA/akapart                                                 :8_4:UnDeeper:
********************************* / $>|                                                        :8_4:UnDeeper:
********************************** / Aka Token                                                :8_4:UnDeeper:
Aka Token> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :8_4:UnDeeper:
$>|> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting AKA

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA        :8_4:UnDeeper:
PAKA/akapart> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :8_4:UnDeeper:
|>>/base> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA       :8_4:UnDeeper:
|?| optional something> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                  :8_4:UnDeeper:
slAKA optional akapart> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                    :8_4:UnDeeper:
***************************** > |>>/base got Nothing                                               :8_4:UnDeeper:
|>>/base> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                    :8_4:UnDeeper:
**************************** / |>>/recurse                                                          :8_4:UnDeeper:
|>>/recurse> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :8_4:UnDeeper:
**************************** / |>>/base                                                             :8_4:UnDeeper:
***************************** / slAKA optional typically                                           :8_4:UnDeeper:
****************************** / |?| optional something                                           :8_4:UnDeeper:
******************************* / |>>/recurse                                                    :8_4:UnDeeper:
|>>/recurse> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (      :8_4:UnDeeper:
******************************* / |>>/base                                                       :8_4:UnDeeper:
******************************** / typically                                                    :8_4:UnDeeper:
********************************* / $>|                                                        :8_4:UnDeeper:
$>|> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY  :8_4:UnDeeper:
typically> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected )
typically> expecting TYPICALLY

******************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :8_4:UnDeeper:
|>>/base> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :8_4:UnDeeper:
|?| optional something> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                  :8_4:UnDeeper:
slAKA optional typically> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                  :8_4:UnDeeper:
***************************** > |>>/base got Nothing                                               :8_4:UnDeeper:
|>>/base> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                    :8_4:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...       :8_4:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                          :8_4:UnDeeper:
slAKA> IN: "disposal" ) ) ) ) "of personal data" )  <…>
slAKA> MATCH (COK): "disposal"
slAKA> VALUE: ((["disposal"],0),[])

*************************** \ slAKA has returned (["disposal"],0)                                    :8_4:UnDeeper:
$*|> IN: "disposal" ) ) ) ) "of personal data" )  <…>
$*|> MATCH (COK): "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************** \ $*| has returned (["disposal"],0)                                        :8_4:UnDeeper:
RPMT> IN: "disposal" ) ) ) ) "of personal data" )  <…>
RPMT> MATCH (COK): "disposal"
RPMT> VALUE: ((RPMT ["disposal"],0),[])

************************* \ RPMT has returned (RPMT ["disposal"],0)                                    :8_4:UnDeeper:
slRelPred> IN: "disposal" ) ) ) ) "of personal data" )  <…>
slRelPred> MATCH (COK): "disposal"
slRelPred> VALUE: ((RPMT ["disposal"],0),[])

************************ \ slRelPred has returned (RPMT ["disposal"],0)                                 :8_4:UnDeeper:
************************ / undeepers                                                                    :8_4:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :8_4:UnDeeper:
************************* > sameLine: success!                                                         :8_4:UnDeeper:
undeepers> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                    :8_4:UnDeeper:
pRelPred> IN: "disposal" ) ) ) ) "of personal data" )  <…>
pRelPred> MATCH (COK): "disposal"
pRelPred> VALUE: (RPMT ["disposal"],[])

*********************** \ pRelPred has returned RPMT ["disposal"]                                        :8_4:UnDeeper:
term p/3:plain p> IN: "disposal" ) ) ) ) "of personal data" )  <…>
term p/3:plain p> MATCH (COK): "disposal"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["disposal"])                         :8_4:UnDeeper:
term p/notLabelTerm> IN: "disposal" ) ) ) ) "of personal data" )  <…>
term p/notLabelTerm> MATCH (COK): "disposal"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disposal"])                        :8_4:UnDeeper:
term p> IN: "disposal" ) ) ) ) "of personal data" )  <…>
term p> MATCH (COK): "disposal"
term p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******************** \ term p has returned MyLeaf (RPMT ["disposal"])                                       :8_4:UnDeeper:
******************** / binary(Or)                                                                           :8_4:UnDeeper:
binary(Or)> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :8_4:UnDeeper:
******************** / binary(And)                                                                          :8_4:UnDeeper:
binary(And)> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :8_4:UnDeeper:
******************** / binary(SetLess)                                                                      :8_4:UnDeeper:
binary(SetLess)> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :8_4:UnDeeper:
******************** / binary(SetPlus)                                                                      :8_4:UnDeeper:
binary(SetPlus)> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :8_4:UnDeeper:
expression> IN: "disposal" ) ) ) ) "of personal data" )  <…>
expression> MATCH (COK): "disposal"
expression> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******************* \ expression has returned MyLeaf (RPMT ["disposal"])                                     :8_4:UnDeeper:
manyIndentation/leaf?> IN: "disposal" ) ) ) ) "of personal data" )  <…>
manyIndentation/leaf?> MATCH (COK): "disposal"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disposal"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disposal"])                            :8_4:UnDeeper:
****************** / myindented: consuming UnDeeper                                                           :8_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) ) "of personal data" ) ) OR ( "los <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                       :8_5:UnDeeper:
someIndentation> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
someIndentation> MATCH (COK): ( "disposal" )
someIndentation> VALUE: (MyLeaf (RPMT ["disposal"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["disposal"])                                      :8_5:UnDeeper:
term p/2:someIndentation expr p> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "disposal" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disposal"])                        :8_5:UnDeeper:
term p/notLabelTerm> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
term p/notLabelTerm> MATCH (COK): ( "disposal" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disposal"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["disposal"])                                      :8_5:UnDeeper:
term p> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
term p> MATCH (COK): ( "disposal" )
term p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

************** \ term p has returned MyLeaf (RPMT ["disposal"])                                                     :8_5:UnDeeper:
************** / binary(Or)                                                                                         :8_5:UnDeeper:
binary(Or)> IN: ) ) ) "of personal data" ) ) OR ( "loss  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected )
binary(Or)> expecting OR

************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                          :8_5:UnDeeper:
************** / binary(And)                                                                                        :8_5:UnDeeper:
binary(And)> IN: ) ) ) "of personal data" ) ) OR ( "loss  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected )
binary(And)> expecting AND

************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                        :8_5:UnDeeper:
************** / binary(SetLess)                                                                                    :8_5:UnDeeper:
binary(SetLess)> IN: ) ) ) "of personal data" ) ) OR ( "loss  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                   :8_5:UnDeeper:
************** / binary(SetPlus)                                                                                    :8_5:UnDeeper:
binary(SetPlus)> IN: ) ) ) "of personal data" ) ) OR ( "loss  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                   :8_5:UnDeeper:
expression> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
expression> MATCH (COK): ( "disposal" )
expression> VALUE: (MyLeaf (RPMT ["disposal"]),[])

************* \ expression has returned MyLeaf (RPMT ["disposal"])                                                   :8_5:UnDeeper:
manyIndentation/leaf?> IN: ( "disposal" ) ) ) ) "of personal data"  <…>
manyIndentation/leaf?> MATCH (COK): ( "disposal" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disposal"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disposal"])                                          :8_5:UnDeeper:
************ / myindented: consuming UnDeeper                                                                         :8_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) "of personal data" ) ) OR ( "loss  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                     :8_6:UnDeeper:
someIndentation> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
someIndentation> MATCH (COK): ( ( "disposal" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["disposal"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["disposal"])                                                    :8_6:UnDeeper:
term p/2:someIndentation expr p> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "disposal" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disposal"])                                      :8_6:UnDeeper:
term p/notLabelTerm> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
term p/notLabelTerm> MATCH (COK): ( ( "disposal" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disposal"])                                                    :8_6:UnDeeper:
term p> IN: ( ( "disposal" ) ) ) ) "of personal data <…>
term p> MATCH (COK): ( ( "disposal" ) )
term p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******** \ term p has returned MyLeaf (RPMT ["disposal"])                                                                   :8_6:UnDeeper:
******** / binary(Or)                                                                                                       :8_6:UnDeeper:
binary(Or)> IN: ) ) "of personal data" ) ) OR ( "loss of <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=43:
binary(Or)> unexpected )
binary(Or)> expecting OR

******** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                                        :8_6:UnDeeper:
******** / binary(And)                                                                                                      :8_6:UnDeeper:
binary(And)> IN: ) ) "of personal data" ) ) OR ( "loss of <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=43:
binary(And)> unexpected )
binary(And)> expecting AND

******** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                                      :8_6:UnDeeper:
******** / binary(SetLess)                                                                                                  :8_6:UnDeeper:
binary(SetLess)> IN: ) ) "of personal data" ) ) OR ( "loss of <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=43:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                                                 :8_6:UnDeeper:
******** / binary(SetPlus)                                                                                                  :8_6:UnDeeper:
binary(SetPlus)> IN: ) ) "of personal data" ) ) OR ( "loss of <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=43:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                                                 :8_6:UnDeeper:
expression> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
expression> MATCH (COK): ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

******* \ expression has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_6:UnDeeper:
ppp inner> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
ppp inner> MATCH (COK): ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

****** \ ppp inner has returned Any Nothing [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :8_6:UnDeeper:
made it to inner base parser> IN: ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
made it to inner base parser> MATCH (COK): ( ( "access" ) ) OR ( ( "use" ) ) OR ( ( <…>
made it to inner base parser> VALUE: (Any Nothing [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

***** \ made it to inner base parser has returned Any Nothing [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :8_6:UnDeeper:
***** / |<*/parent                                                                                                             :8_6:UnDeeper:
****** > |<*/recurse                                                                                                          :8_6:UnDeeper:
****** / post part                                                                                                     :8_3:Other "of p:
******* / slMultiTerm                                                                                                 :8_3:Other "of p:
******** / someSL                                                                                                    :8_3:Other "of p:
someSL> IN: "of personal data" ) ) OR ( "loss of sto <…>
someSL> MATCH (COK): "of personal data"
someSL> VALUE: ((["of personal data"],0),[])

******** \ someSL has returned (["of personal data"],0)                                                             :9_2:UnDeeper:
slMultiTerm> IN: "of personal data" ) ) OR ( "loss of sto <…>
slMultiTerm> MATCH (COK): "of personal data"
slMultiTerm> VALUE: ((["of personal data"],0),[])

******* \ slMultiTerm has returned (["of personal data"],0)                                                          :9_2:UnDeeper:
post part> IN: "of personal data" ) ) OR ( "loss of sto <…>
post part> MATCH (COK): "of personal data"
post part> VALUE: ((["of personal data"],0),[])

****** \ post part has returned (["of personal data"],0)                                                              :9_2:UnDeeper:
****** > |<*/recurse matched 2 UnDeepers                                                                              :9_2:UnDeeper:
|<*/parent> IN: ) ) "of personal data" ) ) OR ( "loss of <…>
|<*/parent> MATCH (COK): ) ) "of personal data"
|<*/parent> VALUE: ((["of personal data"],-2),[])

***** \ |<*/parent has returned (["of personal data"],-2)                                                              :9_2:UnDeeper:
***** / undeepers                                                                                                      :9_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                       :9_2:UnDeeper:
****** > sameLine: success!                                                                                        :9_1:Or:
undeepers> IN: ) ) OR ( "loss of storage medium on whic <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :9_1:Or:
withPrePost> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
withPrePost> MATCH (COK): ( "any" ( "unauthorised" ( ( ( ( "access <…>
withPrePost> VALUE: (Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

**** \ withPrePost has returned Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :9_1:Or:
pBSR> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
pBSR> MATCH (COK): ( "any" ( "unauthorised" ( ( ( ( "access <…>
pBSR> VALUE: (Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

*** \ pBSR has returned Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :9_1:Or:
made it to pBSR> IN: ( "any" ( "unauthorised" ( ( ( ( "access <…>
made it to pBSR> MATCH (COK): ( "any" ( "unauthorised" ( ( ( ( "access <…>
made it to pBSR> VALUE: (Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

** \ made it to pBSR has returned Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :9_1:Or:
** / undeepers                                                                                                         :9_1:Or:
*** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                                          :9_1:Or:
*** > sameLine: success!                                                                                              :9_1:Or:
undeepers> IN: OR ( "loss of storage medium on which pe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

** \ undeepers has returned ()                                                                                         :9_1:Or:

PDPA
  inline-1-s FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA inline-1-s
       expected: [((["Bad"],Means,Any Nothing [Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],Any (Just (PrePost "loss of storage medium on which personal data is stored in circumstances where the unauthorised" "of the personal data is likely to occur")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])]]),[])]
       but parsing failed with error:
       9:1:
       unexpected OR
       expecting end of input
       
       a data breach occurred                                                                                                           
       MEANS                    any                                   unauthorised                                  FALSE   access      
                                                                                                               OR   FALSE   use         
                                                                                                               OR   TRUE    disclosure  
                                                                                                               OR   FALSE   copying     
                                                                                                               OR   FALSE   modification
                                                                                                               OR   TRUE    disposal    
                                                                      of personal data                                                  
       ✳ OR                     loss of storage medium on which                                                     FALSE   access      
                                personal data is stored in                                                                              
                                circumstances where the                                                                                 
                                unauthorised                                                                                            
                                                                                                               OR   FALSE   use         
                                                                                                               OR   FALSE   disclosure  
                                                                                                               OR   FALSE   copying     
                                                                                                               OR   TRUE    modification
                                                                                                               OR   TRUE    disposal    
                                                                      of the personal data is likely to                                 
                                                                      occur                                                             
       

  To rerun use: --match "/PDPA/inline-1-s/"

Randomized with seed 1382252577

Finished in 0.0530 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

