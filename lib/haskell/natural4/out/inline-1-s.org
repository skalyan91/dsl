* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/inline-1-s/)

* Tokens
[Other "a data breach occurred",Means,GoDeeper,Other "any",GoDeeper,Other "unauthorised",GoDeeper,GoDeeper,GoDeeper,GoDeeper,Other "access",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "use",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "disclosure",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "copying",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "modification",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "disposal",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Other "of personal data",UnDeeper,UnDeeper,Or,GoDeeper,Other "loss of storage medium on which personal data is stored in circumstances where the unauthorised",GoDeeper,GoDeeper,GoDeeper,GoDeeper,GoDeeper,Other "access",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "use",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "disclosure",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "copying",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "modification",UnDeeper,UnDeeper,Or,GoDeeper,GoDeeper,Other "disposal",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Other "of the personal data is likely to occur",UnDeeper,UnDeeper]
1_1:Other "a da> |<|
1_1:Other "a da> |<* starting
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / $*|                                                                                                               :1_1:Other "a da:
*** / |>>/recurse                                                                                                     :1_1:Other "a da:
|>>/recurse> IN: Other "a data breach occurred" Means GoD <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=0:
|>>/recurse> unexpected Other "a data breach occurred"
|>>/recurse> expecting GoDeeper

*** / |>>/base                                                                                                        :1_1:Other "a da:
**** / subject slMultiTerm                                                                                           :1_1:Other "a da:
***** / slMultiTerm                                                                                                 :1_1:Other "a da:
****** / someSL                                                                                                    :1_1:Other "a da:
someSL> IN: Other "a data breach occurred" Means GoD <…>
someSL> MATCH (COK): Other "a data breach occurred"
someSL> VALUE: ((["a data breach occurred"],0),[])

****** \ someSL has returned (["a data breach occurred"],0)                                                        :2_1:Means:
slMultiTerm> IN: Other "a data breach occurred" Means GoD <…>
slMultiTerm> MATCH (COK): Other "a data breach occurred"
slMultiTerm> VALUE: ((["a data breach occurred"],0),[])

***** \ slMultiTerm has returned (["a data breach occurred"],0)                                                     :2_1:Means:
subject slMultiTerm> IN: Other "a data breach occurred" Means GoD <…>
subject slMultiTerm> MATCH (COK): Other "a data breach occurred"
subject slMultiTerm> VALUE: ((["a data breach occurred"],0),[])

**** \ subject slMultiTerm has returned (["a data breach occurred"],0)                                               :2_1:Means:
**** > |>>/base got ["a data breach occurred"]                                                                       :2_1:Means:
|>>/base> IN: Other "a data breach occurred" Means GoD <…>
|>>/base> MATCH (COK): Other "a data breach occurred"
|>>/base> VALUE: ((["a data breach occurred"],0),[])

*** \ |>>/base has returned (["a data breach occurred"],0)                                                            :2_1:Means:
$*|> IN: Other "a data breach occurred" Means GoD <…>
$*|> MATCH (COK): Other "a data breach occurred"
$*|> VALUE: ((["a data breach occurred"],0),[])

** \ $*| has returned (["a data breach occurred"],0)                                                                   :2_1:Means:
** / |<*/parent                                                                                                        :2_1:Means:
*** > |<*/recurse                                                                                                     :2_1:Means:
*** / |<*/base                                                                                                        :2_1:Means:
|<*/base> IN: Means GoDeeper Other "any" GoDeeper Othe <…>
|<*/base> MATCH (COK): Means
|<*/base> VALUE: ((Means,0),[])

*** \ |<*/base has returned (Means,0)                                                                                  :2_2:GoDeeper:
|<*/parent> IN: Means GoDeeper Other "any" GoDeeper Othe <…>
|<*/parent> MATCH (COK): Means
|<*/parent> VALUE: ((Means,0),[])

** \ |<*/parent has returned (Means,0)                                                                                  :2_2:GoDeeper:
** / made it to pBSR                                                                                                    :2_2:GoDeeper:
*** / pBSR                                                                                                             :2_2:GoDeeper:
**** / ppp inner                                                                                                      :2_2:GoDeeper:
***** / expression                                                                                                   :2_2:GoDeeper:
****** / labelPrefix                                                                                                :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "any" GoDeeper Other "una <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=2:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

****** / term p                                                                                                     :2_2:GoDeeper:
******* / term p/1a:label directly above                                                                           :2_2:GoDeeper:
******** / $*|                                                                                                    :2_2:GoDeeper:
********* / someSL                                                                                               :2_2:GoDeeper:
********** / pNumAsText                                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "any" GoDeeper Other "una <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "any" GoDeeper Other "una <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "any" GoDeeper Other "una <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "any" GoDeeper Other "una <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=2:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******* / term p/b:label to the left of line below, with EOL                                                       :2_2:GoDeeper:
******** / someSL                                                                                                 :2_2:GoDeeper:
********* / pNumAsText                                                                                           :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "any" GoDeeper Other "una <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "any" GoDeeper Other "una <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "any" GoDeeper Other "una <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=2:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******* / term p/notLabelTerm                                                                                      :2_2:GoDeeper:
******** / term p/2:someIndentation expr p                                                                        :2_2:GoDeeper:
********* / someIndentation                                                                                      :2_2:GoDeeper:
********** / myindented: consuming GoDeeper                                                                     :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "any" GoDeeper Other "una <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********** \ myindented: consuming GoDeeper has returned GoDeeper                                                :2_2:Other "any":
********** / manyIndentation/leaf?                                                                               :2_2:Other "any":
*********** / expression                                                                                        :2_2:Other "any":
************ / labelPrefix                                                                                     :2_2:Other "any":
labelPrefix> IN: Other "any" GoDeeper Other "unauthorised <…>
labelPrefix> MATCH (COK): Other "any"
labelPrefix> VALUE: ("any",[])

************ \ labelPrefix has returned "any"                                                                   :2_3:GoDeeper:
************ / term p                                                                                           :2_3:GoDeeper:
************* / term p/1a:label directly above                                                                 :2_3:GoDeeper:
************** / $*|                                                                                          :2_3:GoDeeper:
*************** / someSL                                                                                     :2_3:GoDeeper:
**************** / pNumAsText                                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=4:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************* / term p/b:label to the left of line below, with EOL                                             :2_3:GoDeeper:
************** / someSL                                                                                       :2_3:GoDeeper:
*************** / pNumAsText                                                                                 :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=4:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************* / term p/notLabelTerm                                                                            :2_3:GoDeeper:
************** / term p/2:someIndentation expr p                                                              :2_3:GoDeeper:
*************** / someIndentation                                                                            :2_3:GoDeeper:
**************** / myindented: consuming GoDeeper                                                           :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :2_3:Other "unau:
**************** / manyIndentation/leaf?                                                                     :2_3:Other "unau:
***************** / expression                                                                              :2_3:Other "unau:
****************** / labelPrefix                                                                           :2_3:Other "unau:
labelPrefix> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
labelPrefix> MATCH (COK): Other "unauthorised"
labelPrefix> VALUE: ("unauthorised",[])

****************** \ labelPrefix has returned "unauthorised"                                                :2_4:GoDeeper:
****************** / term p                                                                                 :2_4:GoDeeper:
******************* / term p/1a:label directly above                                                       :2_4:GoDeeper:
******************** / $*|                                                                                :2_4:GoDeeper:
********************* / someSL                                                                           :2_4:GoDeeper:
********************** / pNumAsText                                                                     :2_4:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=6:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************* / term p/b:label to the left of line below, with EOL                                   :2_4:GoDeeper:
******************** / someSL                                                                             :2_4:GoDeeper:
********************* / pNumAsText                                                                       :2_4:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=6:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************* / term p/notLabelTerm                                                                  :2_4:GoDeeper:
******************** / term p/2:someIndentation expr p                                                    :2_4:GoDeeper:
********************* / someIndentation                                                                  :2_4:GoDeeper:
********************** / myindented: consuming GoDeeper                                                 :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                             :2_5:GoDeeper:
********************** / manyIndentation/leaf?                                                            :2_5:GoDeeper:
*********************** / expression                                                                     :2_5:GoDeeper:
************************ / labelPrefix                                                                  :2_5:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=7:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************************ / term p                                                                       :2_5:GoDeeper:
************************* / term p/1a:label directly above                                             :2_5:GoDeeper:
************************** / $*|                                                                      :2_5:GoDeeper:
*************************** / someSL                                                                 :2_5:GoDeeper:
**************************** / pNumAsText                                                           :2_5:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=7:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************* / term p/b:label to the left of line below, with EOL                         :2_5:GoDeeper:
************************** / someSL                                                                   :2_5:GoDeeper:
*************************** / pNumAsText                                                             :2_5:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=7:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************* / term p/notLabelTerm                                                        :2_5:GoDeeper:
************************** / term p/2:someIndentation expr p                                          :2_5:GoDeeper:
*************************** / someIndentation                                                        :2_5:GoDeeper:
**************************** / myindented: consuming GoDeeper                                       :2_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                   :2_6:GoDeeper:
**************************** / manyIndentation/leaf?                                                  :2_6:GoDeeper:
***************************** / expression                                                           :2_6:GoDeeper:
****************************** / labelPrefix                                                        :2_6:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=8:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

****************************** / term p                                                             :2_6:GoDeeper:
******************************* / term p/1a:label directly above                                   :2_6:GoDeeper:
******************************** / $*|                                                            :2_6:GoDeeper:
********************************* / someSL                                                       :2_6:GoDeeper:
********************************** / pNumAsText                                                 :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL               :2_6:GoDeeper:
******************************** / someSL                                                         :2_6:GoDeeper:
********************************* / pNumAsText                                                   :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************************* / term p/notLabelTerm                                              :2_6:GoDeeper:
******************************** / term p/2:someIndentation expr p                                :2_6:GoDeeper:
********************************* / someIndentation                                              :2_6:GoDeeper:
********************************** / myindented: consuming GoDeeper                             :2_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************** \ myindented: consuming GoDeeper has returned GoDeeper         :2_7:GoDeeper:
********************************** / manyIndentation/leaf?                                        :2_7:GoDeeper:
*********************************** / expression                                                 :2_7:GoDeeper:
************************************ / labelPrefix                                              :2_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************************************ / term p                                                   :2_7:GoDeeper:
************************************* / term p/1a:label directly above                         :2_7:GoDeeper:
************************************** / $*|                                                  :2_7:GoDeeper:
*************************************** / someSL                                             :2_7:GoDeeper:
**************************************** / pNumAsText                                       :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=9:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************************* / term p/b:label to the left of line below, with EOL     :2_7:GoDeeper:
************************************** / someSL                                               :2_7:GoDeeper:
*************************************** / pNumAsText                                         :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=9:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************************* / term p/notLabelTerm                                    :2_7:GoDeeper:
************************************** / term p/2:someIndentation expr p                      :2_7:GoDeeper:
*************************************** / someIndentation                                    :2_7:GoDeeper:
**************************************** / myindented: consuming GoDeeper                   :2_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************************** \ myindented: consuming GoDeeper has returned GoDeeper :2_7:Other "acce:
**************************************** / manyIndentation/leaf?                             :2_7:Other "acce:
***************************************** / expression                                      :2_7:Other "acce:
****************************************** / labelPrefix                                   :2_7:Other "acce:
labelPrefix> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected UnDeeper

****************************************** / term p                                        :2_7:Other "acce:
******************************************* / term p/1a:label directly above              :2_7:Other "acce:
******************************************** / $*|                                       :2_7:Other "acce:
********************************************* / someSL                                  :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

********************************************* \ someSL has returned (["access"],0)     :3_6:UnDeeper:
********************************************* / pNumAsText                             :3_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (CERR): Other "access"
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/1a:label directly above> MATCH (CERR): Other "access"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=11:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************************* / term p/b:label to the left of line below, with EOL :2_7:Other "acce:
******************************************** / someSL                                    :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

******************************************** \ someSL has returned (["access"],0)       :3_6:UnDeeper:
******************************************** / undeepers                                :3_6:UnDeeper:
********************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_6:UnDeeper:
********************************************* > sameLine: success!                     :3_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************** \ undeepers has returned ()                :3_6:UnDeeper:
******************************************** / matching EOL                             :3_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=11:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "access"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=11:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************************* / term p/notLabelTerm                         :2_7:Other "acce:
******************************************** / term p/2:someIndentation expr p           :2_7:Other "acce:
********************************************* / someIndentation                         :2_7:Other "acce:
********************************************** / myindented: consuming GoDeeper        :2_7:Other "acce:
myindented: consuming GoDeeper> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected Other "access"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected Other "access"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected Other "access"
term p/2:someIndentation expr p> expecting GoDeeper

******************************************** / term p/3:plain p                          :2_7:Other "acce:
********************************************* / pRelPred                                :2_7:Other "acce:
********************************************** / slRelPred                             :2_7:Other "acce:
*********************************************** / nested simpleHorn                   :2_7:Other "acce:
************************************************ > |^|                               :2_7:Other "acce:
************************************************ / $*|                               :2_7:Other "acce:
************************************************* / slMultiTerm                     :2_7:Other "acce:
************************************************** / someSL                        :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

************************************************** \ someSL has returned (["access"],0) :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

************************************************* \ slMultiTerm has returned (["access"],0) :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

************************************************ \ $*| has returned (["access"],0)  :3_6:UnDeeper:
************************************************ / |^| deeps                        :3_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************************************ \ |^| deeps has returned ([(),()],-2) :3_5:Or:
nested simpleHorn> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
nested simpleHorn> MATCH (CERR): Other "access" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

*********************************************** / RPConstraint                        :2_7:Other "acce:
************************************************ / $*|                               :2_7:Other "acce:
************************************************* / slMultiTerm                     :2_7:Other "acce:
************************************************** / someSL                        :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

************************************************** \ someSL has returned (["access"],0) :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

************************************************* \ slMultiTerm has returned (["access"],0) :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

************************************************ \ $*| has returned (["access"],0)  :3_6:UnDeeper:
************************************************ / |>| calling $>>                  :3_6:UnDeeper:
************************************************* / |>>/recurse                    :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :3_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
RPConstraint> MATCH (CERR): Other "access"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPBoolStructR                       :2_7:Other "acce:
************************************************ / $*|                               :2_7:Other "acce:
************************************************* / slMultiTerm                     :2_7:Other "acce:
************************************************** / someSL                        :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

************************************************** \ someSL has returned (["access"],0) :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

************************************************* \ slMultiTerm has returned (["access"],0) :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

************************************************ \ $*| has returned (["access"],0)  :3_6:UnDeeper:
************************************************ / |>| calling $>>                  :3_6:UnDeeper:
************************************************* / |>>/recurse                    :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :3_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
RPBoolStructR> MATCH (CERR): Other "access"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPMT                                :2_7:Other "acce:
************************************************ / $*|                               :2_7:Other "acce:
************************************************* / slAKA                           :2_7:Other "acce:
************************************************** / $*|                           :2_7:Other "acce:
*************************************************** / slAKA base                  :2_7:Other "acce:
**************************************************** / slMultiTerm               :2_7:Other "acce:
***************************************************** / someSL                  :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

***************************************************** \ someSL has returned (["access"],0) :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

**************************************************** \ slMultiTerm has returned (["access"],0) :3_6:UnDeeper:
slAKA base> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slAKA base> MATCH (COK): Other "access"
slAKA base> VALUE: ((["access"],0),[])

*************************************************** \ slAKA base has returned (["access"],0) :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

************************************************** \ $*| has returned (["access"],0) :3_6:UnDeeper:
************************************************** / |>>/recurse                  :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :3_6:UnDeeper:
*************************************************** / slAKA optional akapart     :3_6:UnDeeper:
**************************************************** / |?| optional something   :3_6:UnDeeper:
***************************************************** / |>>/recurse            :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :3_6:UnDeeper:
****************************************************** / PAKA/akapart         :3_6:UnDeeper:
******************************************************* / $>|                :3_6:UnDeeper:
******************************************************** / Aka Token        :3_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :3_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional akapart has returned (Nothing,0) :3_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :3_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :3_6:UnDeeper:
************************************************** / |>>/recurse                  :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :3_6:UnDeeper:
*************************************************** / slAKA optional typically   :3_6:UnDeeper:
**************************************************** / |?| optional something   :3_6:UnDeeper:
***************************************************** / |>>/recurse            :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :3_6:UnDeeper:
****************************************************** / typically            :3_6:UnDeeper:
******************************************************* / $>|                :3_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=11:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :3_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional typically has returned (Nothing,0) :3_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :3_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :3_6:UnDeeper:
************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_6:UnDeeper:
************************************************** > pAKA: entityalias = Nothing  :3_6:UnDeeper:
slAKA> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slAKA> MATCH (COK): Other "access"
slAKA> VALUE: ((["access"],0),[])

************************************************* \ slAKA has returned (["access"],0) :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

************************************************ \ $*| has returned (["access"],0)  :3_6:UnDeeper:
RPMT> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
RPMT> MATCH (COK): Other "access"
RPMT> VALUE: ((RPMT ["access"],0),[])

*********************************************** \ RPMT has returned (RPMT ["access"],0) :3_6:UnDeeper:
slRelPred> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slRelPred> MATCH (COK): Other "access"
slRelPred> VALUE: ((RPMT ["access"],0),[])

********************************************** \ slRelPred has returned (RPMT ["access"],0) :3_6:UnDeeper:
********************************************** / undeepers                            :3_6:UnDeeper:
*********************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_6:UnDeeper:
*********************************************** > sameLine: success!                 :3_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************************** \ undeepers has returned ()            :3_6:UnDeeper:
pRelPred> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
pRelPred> MATCH (COK): Other "access"
pRelPred> VALUE: (RPMT ["access"],[])

********************************************* \ pRelPred has returned RPMT ["access"]  :3_6:UnDeeper:
term p/3:plain p> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/3:plain p> MATCH (COK): Other "access"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["access"]),[])

******************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["access"]) :3_6:UnDeeper:
term p/notLabelTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/notLabelTerm> MATCH (COK): Other "access"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["access"]),[])

******************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["access"]) :3_6:UnDeeper:
term p> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p> MATCH (COK): Other "access"
term p> VALUE: (MyLeaf (RPMT ["access"]),[])

****************************************** \ term p has returned MyLeaf (RPMT ["access"]) :3_6:UnDeeper:
****************************************** / binary(Or)                                   :3_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************************** / binary(And)                                  :3_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************************** / binary(SetLess)                              :3_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************************** / binary(SetPlus)                              :3_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
expression> MATCH (COK): Other "access"
expression> VALUE: (MyLeaf (RPMT ["access"]),[])

***************************************** \ expression has returned MyLeaf (RPMT ["access"]) :3_6:UnDeeper:
manyIndentation/leaf?> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
manyIndentation/leaf?> MATCH (COK): Other "access"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["access"]),[])

**************************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["access"]) :3_6:UnDeeper:
**************************************** / myindented: consuming UnDeeper                   :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************************** \ myindented: consuming UnDeeper has returned UnDeeper :3_7:UnDeeper:
someIndentation> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "access" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["access"]),[])

*************************************** \ someIndentation has returned MyLeaf (RPMT ["access"]) :3_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "access" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["access"]),[])

************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["access"]) :3_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "access" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["access"]),[])

************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["access"]) :3_7:UnDeeper:
term p> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "access" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["access"]),[])

************************************ \ term p has returned MyLeaf (RPMT ["access"])               :3_7:UnDeeper:
************************************ / binary(Or)                                                 :3_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************************ / binary(And)                                                :3_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************************ / binary(SetLess)                                            :3_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************************ / binary(SetPlus)                                            :3_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
expression> MATCH (COK): GoDeeper Other "access" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["access"]),[])

*********************************** \ expression has returned MyLeaf (RPMT ["access"])             :3_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "access" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["access"]),[])

********************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["access"])    :3_7:UnDeeper:
********************************** / myindented: consuming UnDeeper                                 :3_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************** \ myindented: consuming UnDeeper has returned UnDeeper      :3_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
someIndentation> VALUE: (MyLeaf (RPMT ["access"]),[])

********************************* \ someIndentation has returned MyLeaf (RPMT ["access"])       :3_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["access"]),[])

******************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["access"]) :3_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["access"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["access"])       :3_5:Or:
term p> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
term p> VALUE: (MyLeaf (RPMT ["access"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["access"])                      :3_5:Or:
****************************** / binary(Or)                                                        :3_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "use" UnDeepe <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

****************************** \ binary(Or) has returned Or                                         :3_6:GoDeeper:
****************************** / term p                                                             :3_6:GoDeeper:
******************************* / term p/1a:label directly above                                   :3_6:GoDeeper:
******************************** / $*|                                                            :3_6:GoDeeper:
********************************* / someSL                                                       :3_6:GoDeeper:
********************************** / pNumAsText                                                 :3_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=14:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL               :3_6:GoDeeper:
******************************** / someSL                                                         :3_6:GoDeeper:
********************************* / pNumAsText                                                   :3_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=14:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************************* / term p/notLabelTerm                                              :3_6:GoDeeper:
******************************** / term p/2:someIndentation expr p                                :3_6:GoDeeper:
********************************* / someIndentation                                              :3_6:GoDeeper:
********************************** / myindented: consuming GoDeeper                             :3_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************** \ myindented: consuming GoDeeper has returned GoDeeper         :3_7:GoDeeper:
********************************** / manyIndentation/leaf?                                        :3_7:GoDeeper:
*********************************** / expression                                                 :3_7:GoDeeper:
************************************ / labelPrefix                                              :3_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************************************ / term p                                                   :3_7:GoDeeper:
************************************* / term p/1a:label directly above                         :3_7:GoDeeper:
************************************** / $*|                                                  :3_7:GoDeeper:
*************************************** / someSL                                             :3_7:GoDeeper:
**************************************** / pNumAsText                                       :3_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=15:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************************* / term p/b:label to the left of line below, with EOL     :3_7:GoDeeper:
************************************** / someSL                                               :3_7:GoDeeper:
*************************************** / pNumAsText                                         :3_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=15:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************************* / term p/notLabelTerm                                    :3_7:GoDeeper:
************************************** / term p/2:someIndentation expr p                      :3_7:GoDeeper:
*************************************** / someIndentation                                    :3_7:GoDeeper:
**************************************** / myindented: consuming GoDeeper                   :3_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************************** \ myindented: consuming GoDeeper has returned GoDeeper :3_7:Other "use":
**************************************** / manyIndentation/leaf?                             :3_7:Other "use":
***************************************** / expression                                      :3_7:Other "use":
****************************************** / labelPrefix                                   :3_7:Other "use":
labelPrefix> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

****************************************** / term p                                        :3_7:Other "use":
******************************************* / term p/1a:label directly above              :3_7:Other "use":
******************************************** / $*|                                       :3_7:Other "use":
********************************************* / someSL                                  :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

********************************************* \ someSL has returned (["use"],0)        :4_6:UnDeeper:
********************************************* / pNumAsText                             :4_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (CERR): Other "use"
$*|> ERROR:
$*|> offset=17:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "use"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=17:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************************* / term p/b:label to the left of line below, with EOL :3_7:Other "use":
******************************************** / someSL                                    :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

******************************************** \ someSL has returned (["use"],0)          :4_6:UnDeeper:
******************************************** / undeepers                                :4_6:UnDeeper:
********************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_6:UnDeeper:
********************************************* > sameLine: success!                     :4_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************** \ undeepers has returned ()                :4_6:UnDeeper:
******************************************** / matching EOL                             :4_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=17:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "use"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=17:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************************* / term p/notLabelTerm                         :3_7:Other "use":
******************************************** / term p/2:someIndentation expr p           :3_7:Other "use":
********************************************* / someIndentation                         :3_7:Other "use":
********************************************** / myindented: consuming GoDeeper        :3_7:Other "use":
myindented: consuming GoDeeper> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "use"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "use"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "use"
term p/2:someIndentation expr p> expecting GoDeeper

******************************************** / term p/3:plain p                          :3_7:Other "use":
********************************************* / pRelPred                                :3_7:Other "use":
********************************************** / slRelPred                             :3_7:Other "use":
*********************************************** / nested simpleHorn                   :3_7:Other "use":
************************************************ > |^|                               :3_7:Other "use":
************************************************ / $*|                               :3_7:Other "use":
************************************************* / slMultiTerm                     :3_7:Other "use":
************************************************** / someSL                        :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

************************************************** \ someSL has returned (["use"],0) :4_6:UnDeeper:
slMultiTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slMultiTerm> MATCH (COK): Other "use"
slMultiTerm> VALUE: ((["use"],0),[])

************************************************* \ slMultiTerm has returned (["use"],0) :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

************************************************ \ $*| has returned (["use"],0)     :4_6:UnDeeper:
************************************************ / |^| deeps                        :4_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************************************ \ |^| deeps has returned ([(),()],-2) :4_5:Or:
nested simpleHorn> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
nested simpleHorn> MATCH (CERR): Other "use" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

*********************************************** / RPConstraint                        :3_7:Other "use":
************************************************ / $*|                               :3_7:Other "use":
************************************************* / slMultiTerm                     :3_7:Other "use":
************************************************** / someSL                        :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

************************************************** \ someSL has returned (["use"],0) :4_6:UnDeeper:
slMultiTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slMultiTerm> MATCH (COK): Other "use"
slMultiTerm> VALUE: ((["use"],0),[])

************************************************* \ slMultiTerm has returned (["use"],0) :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

************************************************ \ $*| has returned (["use"],0)     :4_6:UnDeeper:
************************************************ / |>| calling $>>                  :4_6:UnDeeper:
************************************************* / |>>/recurse                    :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :4_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
RPConstraint> MATCH (CERR): Other "use"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPBoolStructR                       :3_7:Other "use":
************************************************ / $*|                               :3_7:Other "use":
************************************************* / slMultiTerm                     :3_7:Other "use":
************************************************** / someSL                        :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

************************************************** \ someSL has returned (["use"],0) :4_6:UnDeeper:
slMultiTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slMultiTerm> MATCH (COK): Other "use"
slMultiTerm> VALUE: ((["use"],0),[])

************************************************* \ slMultiTerm has returned (["use"],0) :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

************************************************ \ $*| has returned (["use"],0)     :4_6:UnDeeper:
************************************************ / |>| calling $>>                  :4_6:UnDeeper:
************************************************* / |>>/recurse                    :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :4_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
RPBoolStructR> MATCH (CERR): Other "use"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPMT                                :3_7:Other "use":
************************************************ / $*|                               :3_7:Other "use":
************************************************* / slAKA                           :3_7:Other "use":
************************************************** / $*|                           :3_7:Other "use":
*************************************************** / slAKA base                  :3_7:Other "use":
**************************************************** / slMultiTerm               :3_7:Other "use":
***************************************************** / someSL                  :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

***************************************************** \ someSL has returned (["use"],0) :4_6:UnDeeper:
slMultiTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slMultiTerm> MATCH (COK): Other "use"
slMultiTerm> VALUE: ((["use"],0),[])

**************************************************** \ slMultiTerm has returned (["use"],0) :4_6:UnDeeper:
slAKA base> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slAKA base> MATCH (COK): Other "use"
slAKA base> VALUE: ((["use"],0),[])

*************************************************** \ slAKA base has returned (["use"],0) :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

************************************************** \ $*| has returned (["use"],0) :4_6:UnDeeper:
************************************************** / |>>/recurse                  :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :4_6:UnDeeper:
*************************************************** / slAKA optional akapart     :4_6:UnDeeper:
**************************************************** / |?| optional something   :4_6:UnDeeper:
***************************************************** / |>>/recurse            :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :4_6:UnDeeper:
****************************************************** / PAKA/akapart         :4_6:UnDeeper:
******************************************************* / $>|                :4_6:UnDeeper:
******************************************************** / Aka Token        :4_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :4_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional akapart has returned (Nothing,0) :4_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :4_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :4_6:UnDeeper:
************************************************** / |>>/recurse                  :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :4_6:UnDeeper:
*************************************************** / slAKA optional typically   :4_6:UnDeeper:
**************************************************** / |?| optional something   :4_6:UnDeeper:
***************************************************** / |>>/recurse            :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :4_6:UnDeeper:
****************************************************** / typically            :4_6:UnDeeper:
******************************************************* / $>|                :4_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :4_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional typically has returned (Nothing,0) :4_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :4_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :4_6:UnDeeper:
************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_6:UnDeeper:
************************************************** > pAKA: entityalias = Nothing  :4_6:UnDeeper:
slAKA> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slAKA> MATCH (COK): Other "use"
slAKA> VALUE: ((["use"],0),[])

************************************************* \ slAKA has returned (["use"],0) :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

************************************************ \ $*| has returned (["use"],0)     :4_6:UnDeeper:
RPMT> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
RPMT> MATCH (COK): Other "use"
RPMT> VALUE: ((RPMT ["use"],0),[])

*********************************************** \ RPMT has returned (RPMT ["use"],0) :4_6:UnDeeper:
slRelPred> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slRelPred> MATCH (COK): Other "use"
slRelPred> VALUE: ((RPMT ["use"],0),[])

********************************************** \ slRelPred has returned (RPMT ["use"],0) :4_6:UnDeeper:
********************************************** / undeepers                            :4_6:UnDeeper:
*********************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_6:UnDeeper:
*********************************************** > sameLine: success!                 :4_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************************** \ undeepers has returned ()            :4_6:UnDeeper:
pRelPred> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
pRelPred> MATCH (COK): Other "use"
pRelPred> VALUE: (RPMT ["use"],[])

********************************************* \ pRelPred has returned RPMT ["use"]     :4_6:UnDeeper:
term p/3:plain p> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/3:plain p> MATCH (COK): Other "use"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["use"]),[])

******************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["use"]) :4_6:UnDeeper:
term p/notLabelTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "use"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["use"]),[])

******************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["use"]) :4_6:UnDeeper:
term p> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p> MATCH (COK): Other "use"
term p> VALUE: (MyLeaf (RPMT ["use"]),[])

****************************************** \ term p has returned MyLeaf (RPMT ["use"])    :4_6:UnDeeper:
****************************************** / binary(Or)                                   :4_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************************** / binary(And)                                  :4_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************************** / binary(SetLess)                              :4_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************************** / binary(SetPlus)                              :4_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
expression> MATCH (COK): Other "use"
expression> VALUE: (MyLeaf (RPMT ["use"]),[])

***************************************** \ expression has returned MyLeaf (RPMT ["use"])  :4_6:UnDeeper:
manyIndentation/leaf?> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "use"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["use"]),[])

**************************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["use"]) :4_6:UnDeeper:
**************************************** / myindented: consuming UnDeeper                   :4_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************************** \ myindented: consuming UnDeeper has returned UnDeeper :4_7:UnDeeper:
someIndentation> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
someIndentation> MATCH (COK): GoDeeper Other "use" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["use"]),[])

*************************************** \ someIndentation has returned MyLeaf (RPMT ["use"])   :4_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "use" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["use"]),[])

************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["use"]) :4_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "use" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["use"]),[])

************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["use"])   :4_7:UnDeeper:
term p> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p> MATCH (COK): GoDeeper Other "use" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["use"]),[])

************************************ \ term p has returned MyLeaf (RPMT ["use"])                  :4_7:UnDeeper:
************************************ / binary(Or)                                                 :4_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************************ / binary(And)                                                :4_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************************ / binary(SetLess)                                            :4_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************************ / binary(SetPlus)                                            :4_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
expression> MATCH (COK): GoDeeper Other "use" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["use"]),[])

*********************************** \ expression has returned MyLeaf (RPMT ["use"])                :4_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "use" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["use"]),[])

********************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["use"])       :4_7:UnDeeper:
********************************** / myindented: consuming UnDeeper                                 :4_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************** \ myindented: consuming UnDeeper has returned UnDeeper      :4_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "use" UnDeeper U <…>
someIndentation> VALUE: (MyLeaf (RPMT ["use"]),[])

********************************* \ someIndentation has returned MyLeaf (RPMT ["use"])          :4_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["use"]),[])

******************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["use"]) :4_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["use"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["use"])          :4_5:Or:
term p> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p> VALUE: (MyLeaf (RPMT ["use"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["use"])                         :4_5:Or:
****************************** / binary(Or)                                                        :4_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "disclosure"  <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

****************************** \ binary(Or) has returned Or                                         :4_6:GoDeeper:
****************************** / term p                                                             :4_6:GoDeeper:
******************************* / term p/1a:label directly above                                   :4_6:GoDeeper:
******************************** / $*|                                                            :4_6:GoDeeper:
********************************* / someSL                                                       :4_6:GoDeeper:
********************************** / pNumAsText                                                 :4_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=20:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL               :4_6:GoDeeper:
******************************** / someSL                                                         :4_6:GoDeeper:
********************************* / pNumAsText                                                   :4_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=20:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************************* / term p/notLabelTerm                                              :4_6:GoDeeper:
******************************** / term p/2:someIndentation expr p                                :4_6:GoDeeper:
********************************* / someIndentation                                              :4_6:GoDeeper:
********************************** / myindented: consuming GoDeeper                             :4_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************** \ myindented: consuming GoDeeper has returned GoDeeper         :4_7:GoDeeper:
********************************** / manyIndentation/leaf?                                        :4_7:GoDeeper:
*********************************** / expression                                                 :4_7:GoDeeper:
************************************ / labelPrefix                                              :4_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=21:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************************************ / term p                                                   :4_7:GoDeeper:
************************************* / term p/1a:label directly above                         :4_7:GoDeeper:
************************************** / $*|                                                  :4_7:GoDeeper:
*************************************** / someSL                                             :4_7:GoDeeper:
**************************************** / pNumAsText                                       :4_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=21:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************************* / term p/b:label to the left of line below, with EOL     :4_7:GoDeeper:
************************************** / someSL                                               :4_7:GoDeeper:
*************************************** / pNumAsText                                         :4_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=21:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************************* / term p/notLabelTerm                                    :4_7:GoDeeper:
************************************** / term p/2:someIndentation expr p                      :4_7:GoDeeper:
*************************************** / someIndentation                                    :4_7:GoDeeper:
**************************************** / myindented: consuming GoDeeper                   :4_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************************** \ myindented: consuming GoDeeper has returned GoDeeper :4_7:Other "disc:
**************************************** / manyIndentation/leaf?                             :4_7:Other "disc:
***************************************** / expression                                      :4_7:Other "disc:
****************************************** / labelPrefix                                   :4_7:Other "disc:
labelPrefix> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected UnDeeper

****************************************** / term p                                        :4_7:Other "disc:
******************************************* / term p/1a:label directly above              :4_7:Other "disc:
******************************************** / $*|                                       :4_7:Other "disc:
********************************************* / someSL                                  :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

********************************************* \ someSL has returned (["disclosure"],0) :5_6:UnDeeper:
********************************************* / pNumAsText                             :5_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (CERR): Other "disclosure"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/1a:label directly above> MATCH (CERR): Other "disclosure"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=23:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************************* / term p/b:label to the left of line below, with EOL :4_7:Other "disc:
******************************************** / someSL                                    :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

******************************************** \ someSL has returned (["disclosure"],0)   :5_6:UnDeeper:
******************************************** / undeepers                                :5_6:UnDeeper:
********************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :5_6:UnDeeper:
********************************************* > sameLine: success!                     :5_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************** \ undeepers has returned ()                :5_6:UnDeeper:
******************************************** / matching EOL                             :5_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "disclosure"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=23:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************************* / term p/notLabelTerm                         :4_7:Other "disc:
******************************************** / term p/2:someIndentation expr p           :4_7:Other "disc:
********************************************* / someIndentation                         :4_7:Other "disc:
********************************************** / myindented: consuming GoDeeper        :4_7:Other "disc:
myindented: consuming GoDeeper> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected Other "disclosure"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected Other "disclosure"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected Other "disclosure"
term p/2:someIndentation expr p> expecting GoDeeper

******************************************** / term p/3:plain p                          :4_7:Other "disc:
********************************************* / pRelPred                                :4_7:Other "disc:
********************************************** / slRelPred                             :4_7:Other "disc:
*********************************************** / nested simpleHorn                   :4_7:Other "disc:
************************************************ > |^|                               :4_7:Other "disc:
************************************************ / $*|                               :4_7:Other "disc:
************************************************* / slMultiTerm                     :4_7:Other "disc:
************************************************** / someSL                        :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

************************************************** \ someSL has returned (["disclosure"],0) :5_6:UnDeeper:
slMultiTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slMultiTerm> MATCH (COK): Other "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

************************************************* \ slMultiTerm has returned (["disclosure"],0) :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************************************ \ $*| has returned (["disclosure"],0) :5_6:UnDeeper:
************************************************ / |^| deeps                        :5_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************************************ \ |^| deeps has returned ([(),()],-2) :5_5:Or:
nested simpleHorn> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
nested simpleHorn> MATCH (CERR): Other "disclosure" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

*********************************************** / RPConstraint                        :4_7:Other "disc:
************************************************ / $*|                               :4_7:Other "disc:
************************************************* / slMultiTerm                     :4_7:Other "disc:
************************************************** / someSL                        :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

************************************************** \ someSL has returned (["disclosure"],0) :5_6:UnDeeper:
slMultiTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slMultiTerm> MATCH (COK): Other "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

************************************************* \ slMultiTerm has returned (["disclosure"],0) :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************************************ \ $*| has returned (["disclosure"],0) :5_6:UnDeeper:
************************************************ / |>| calling $>>                  :5_6:UnDeeper:
************************************************* / |>>/recurse                    :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :5_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
RPConstraint> MATCH (CERR): Other "disclosure"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPBoolStructR                       :4_7:Other "disc:
************************************************ / $*|                               :4_7:Other "disc:
************************************************* / slMultiTerm                     :4_7:Other "disc:
************************************************** / someSL                        :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

************************************************** \ someSL has returned (["disclosure"],0) :5_6:UnDeeper:
slMultiTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slMultiTerm> MATCH (COK): Other "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

************************************************* \ slMultiTerm has returned (["disclosure"],0) :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************************************ \ $*| has returned (["disclosure"],0) :5_6:UnDeeper:
************************************************ / |>| calling $>>                  :5_6:UnDeeper:
************************************************* / |>>/recurse                    :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :5_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
RPBoolStructR> MATCH (CERR): Other "disclosure"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPMT                                :4_7:Other "disc:
************************************************ / $*|                               :4_7:Other "disc:
************************************************* / slAKA                           :4_7:Other "disc:
************************************************** / $*|                           :4_7:Other "disc:
*************************************************** / slAKA base                  :4_7:Other "disc:
**************************************************** / slMultiTerm               :4_7:Other "disc:
***************************************************** / someSL                  :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

***************************************************** \ someSL has returned (["disclosure"],0) :5_6:UnDeeper:
slMultiTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slMultiTerm> MATCH (COK): Other "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

**************************************************** \ slMultiTerm has returned (["disclosure"],0) :5_6:UnDeeper:
slAKA base> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slAKA base> MATCH (COK): Other "disclosure"
slAKA base> VALUE: ((["disclosure"],0),[])

*************************************************** \ slAKA base has returned (["disclosure"],0) :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************************************** \ $*| has returned (["disclosure"],0) :5_6:UnDeeper:
************************************************** / |>>/recurse                  :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :5_6:UnDeeper:
*************************************************** / slAKA optional akapart     :5_6:UnDeeper:
**************************************************** / |?| optional something   :5_6:UnDeeper:
***************************************************** / |>>/recurse            :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :5_6:UnDeeper:
****************************************************** / PAKA/akapart         :5_6:UnDeeper:
******************************************************* / $>|                :5_6:UnDeeper:
******************************************************** / Aka Token        :5_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :5_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional akapart has returned (Nothing,0) :5_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :5_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :5_6:UnDeeper:
************************************************** / |>>/recurse                  :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :5_6:UnDeeper:
*************************************************** / slAKA optional typically   :5_6:UnDeeper:
**************************************************** / |?| optional something   :5_6:UnDeeper:
***************************************************** / |>>/recurse            :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :5_6:UnDeeper:
****************************************************** / typically            :5_6:UnDeeper:
******************************************************* / $>|                :5_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :5_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional typically has returned (Nothing,0) :5_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :5_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :5_6:UnDeeper:
************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :5_6:UnDeeper:
************************************************** > pAKA: entityalias = Nothing  :5_6:UnDeeper:
slAKA> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slAKA> MATCH (COK): Other "disclosure"
slAKA> VALUE: ((["disclosure"],0),[])

************************************************* \ slAKA has returned (["disclosure"],0) :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************************************ \ $*| has returned (["disclosure"],0) :5_6:UnDeeper:
RPMT> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
RPMT> MATCH (COK): Other "disclosure"
RPMT> VALUE: ((RPMT ["disclosure"],0),[])

*********************************************** \ RPMT has returned (RPMT ["disclosure"],0) :5_6:UnDeeper:
slRelPred> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slRelPred> MATCH (COK): Other "disclosure"
slRelPred> VALUE: ((RPMT ["disclosure"],0),[])

********************************************** \ slRelPred has returned (RPMT ["disclosure"],0) :5_6:UnDeeper:
********************************************** / undeepers                            :5_6:UnDeeper:
*********************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :5_6:UnDeeper:
*********************************************** > sameLine: success!                 :5_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************************** \ undeepers has returned ()            :5_6:UnDeeper:
pRelPred> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
pRelPred> MATCH (COK): Other "disclosure"
pRelPred> VALUE: (RPMT ["disclosure"],[])

********************************************* \ pRelPred has returned RPMT ["disclosure"] :5_6:UnDeeper:
term p/3:plain p> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/3:plain p> MATCH (COK): Other "disclosure"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["disclosure"]) :5_6:UnDeeper:
term p/notLabelTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/notLabelTerm> MATCH (COK): Other "disclosure"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disclosure"]) :5_6:UnDeeper:
term p> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p> MATCH (COK): Other "disclosure"
term p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

****************************************** \ term p has returned MyLeaf (RPMT ["disclosure"]) :5_6:UnDeeper:
****************************************** / binary(Or)                                   :5_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************************** / binary(And)                                  :5_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************************** / binary(SetLess)                              :5_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************************** / binary(SetPlus)                              :5_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
expression> MATCH (COK): Other "disclosure"
expression> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

***************************************** \ expression has returned MyLeaf (RPMT ["disclosure"]) :5_6:UnDeeper:
manyIndentation/leaf?> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
manyIndentation/leaf?> MATCH (COK): Other "disclosure"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

**************************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disclosure"]) :5_6:UnDeeper:
**************************************** / myindented: consuming UnDeeper                   :5_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************************** \ myindented: consuming UnDeeper has returned UnDeeper :5_7:UnDeeper:
someIndentation> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
someIndentation> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

*************************************** \ someIndentation has returned MyLeaf (RPMT ["disclosure"]) :5_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disclosure"]) :5_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disclosure"]) :5_7:UnDeeper:
term p> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

************************************ \ term p has returned MyLeaf (RPMT ["disclosure"])           :5_7:UnDeeper:
************************************ / binary(Or)                                                 :5_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************************ / binary(And)                                                :5_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************************ / binary(SetLess)                                            :5_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************************ / binary(SetPlus)                                            :5_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
expression> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

*********************************** \ expression has returned MyLeaf (RPMT ["disclosure"])         :5_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disclosure"]) :5_7:UnDeeper:
********************************** / myindented: consuming UnDeeper                                 :5_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************** \ myindented: consuming UnDeeper has returned UnDeeper      :5_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "disclosure" UnD <…>
someIndentation> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********************************* \ someIndentation has returned MyLeaf (RPMT ["disclosure"])   :5_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disclosure"]) :5_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disclosure"])   :5_5:Or:
term p> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "disclosure" UnD <…>
term p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["disclosure"])                  :5_5:Or:
****************************** / binary(Or)                                                        :5_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "copying" UnD <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

****************************** \ binary(Or) has returned Or                                         :5_6:GoDeeper:
****************************** / term p                                                             :5_6:GoDeeper:
******************************* / term p/1a:label directly above                                   :5_6:GoDeeper:
******************************** / $*|                                                            :5_6:GoDeeper:
********************************* / someSL                                                       :5_6:GoDeeper:
********************************** / pNumAsText                                                 :5_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL               :5_6:GoDeeper:
******************************** / someSL                                                         :5_6:GoDeeper:
********************************* / pNumAsText                                                   :5_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************************* / term p/notLabelTerm                                              :5_6:GoDeeper:
******************************** / term p/2:someIndentation expr p                                :5_6:GoDeeper:
********************************* / someIndentation                                              :5_6:GoDeeper:
********************************** / myindented: consuming GoDeeper                             :5_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************** \ myindented: consuming GoDeeper has returned GoDeeper         :5_7:GoDeeper:
********************************** / manyIndentation/leaf?                                        :5_7:GoDeeper:
*********************************** / expression                                                 :5_7:GoDeeper:
************************************ / labelPrefix                                              :5_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************************************ / term p                                                   :5_7:GoDeeper:
************************************* / term p/1a:label directly above                         :5_7:GoDeeper:
************************************** / $*|                                                  :5_7:GoDeeper:
*************************************** / someSL                                             :5_7:GoDeeper:
**************************************** / pNumAsText                                       :5_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************************* / term p/b:label to the left of line below, with EOL     :5_7:GoDeeper:
************************************** / someSL                                               :5_7:GoDeeper:
*************************************** / pNumAsText                                         :5_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************************* / term p/notLabelTerm                                    :5_7:GoDeeper:
************************************** / term p/2:someIndentation expr p                      :5_7:GoDeeper:
*************************************** / someIndentation                                    :5_7:GoDeeper:
**************************************** / myindented: consuming GoDeeper                   :5_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************************** \ myindented: consuming GoDeeper has returned GoDeeper :5_7:Other "copy:
**************************************** / manyIndentation/leaf?                             :5_7:Other "copy:
***************************************** / expression                                      :5_7:Other "copy:
****************************************** / labelPrefix                                   :5_7:Other "copy:
labelPrefix> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected UnDeeper

****************************************** / term p                                        :5_7:Other "copy:
******************************************* / term p/1a:label directly above              :5_7:Other "copy:
******************************************** / $*|                                       :5_7:Other "copy:
********************************************* / someSL                                  :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

********************************************* \ someSL has returned (["copying"],0)    :6_6:UnDeeper:
********************************************* / pNumAsText                             :6_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (CERR): Other "copying"
$*|> ERROR:
$*|> offset=29:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/1a:label directly above> MATCH (CERR): Other "copying"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************************* / term p/b:label to the left of line below, with EOL :5_7:Other "copy:
******************************************** / someSL                                    :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

******************************************** \ someSL has returned (["copying"],0)      :6_6:UnDeeper:
******************************************** / undeepers                                :6_6:UnDeeper:
********************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_6:UnDeeper:
********************************************* > sameLine: success!                     :6_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************** \ undeepers has returned ()                :6_6:UnDeeper:
******************************************** / matching EOL                             :6_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=29:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "copying"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************************* / term p/notLabelTerm                         :5_7:Other "copy:
******************************************** / term p/2:someIndentation expr p           :5_7:Other "copy:
********************************************* / someIndentation                         :5_7:Other "copy:
********************************************** / myindented: consuming GoDeeper        :5_7:Other "copy:
myindented: consuming GoDeeper> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=28:
myindented: consuming GoDeeper> unexpected Other "copying"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected Other "copying"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected Other "copying"
term p/2:someIndentation expr p> expecting GoDeeper

******************************************** / term p/3:plain p                          :5_7:Other "copy:
********************************************* / pRelPred                                :5_7:Other "copy:
********************************************** / slRelPred                             :5_7:Other "copy:
*********************************************** / nested simpleHorn                   :5_7:Other "copy:
************************************************ > |^|                               :5_7:Other "copy:
************************************************ / $*|                               :5_7:Other "copy:
************************************************* / slMultiTerm                     :5_7:Other "copy:
************************************************** / someSL                        :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

************************************************** \ someSL has returned (["copying"],0) :6_6:UnDeeper:
slMultiTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slMultiTerm> MATCH (COK): Other "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

************************************************* \ slMultiTerm has returned (["copying"],0) :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

************************************************ \ $*| has returned (["copying"],0) :6_6:UnDeeper:
************************************************ / |^| deeps                        :6_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************************************ \ |^| deeps has returned ([(),()],-2) :6_5:Or:
nested simpleHorn> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
nested simpleHorn> MATCH (CERR): Other "copying" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

*********************************************** / RPConstraint                        :5_7:Other "copy:
************************************************ / $*|                               :5_7:Other "copy:
************************************************* / slMultiTerm                     :5_7:Other "copy:
************************************************** / someSL                        :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

************************************************** \ someSL has returned (["copying"],0) :6_6:UnDeeper:
slMultiTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slMultiTerm> MATCH (COK): Other "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

************************************************* \ slMultiTerm has returned (["copying"],0) :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

************************************************ \ $*| has returned (["copying"],0) :6_6:UnDeeper:
************************************************ / |>| calling $>>                  :6_6:UnDeeper:
************************************************* / |>>/recurse                    :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :6_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
RPConstraint> MATCH (CERR): Other "copying"
RPConstraint> ERROR:
RPConstraint> offset=29:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPBoolStructR                       :5_7:Other "copy:
************************************************ / $*|                               :5_7:Other "copy:
************************************************* / slMultiTerm                     :5_7:Other "copy:
************************************************** / someSL                        :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

************************************************** \ someSL has returned (["copying"],0) :6_6:UnDeeper:
slMultiTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slMultiTerm> MATCH (COK): Other "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

************************************************* \ slMultiTerm has returned (["copying"],0) :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

************************************************ \ $*| has returned (["copying"],0) :6_6:UnDeeper:
************************************************ / |>| calling $>>                  :6_6:UnDeeper:
************************************************* / |>>/recurse                    :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :6_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
RPBoolStructR> MATCH (CERR): Other "copying"
RPBoolStructR> ERROR:
RPBoolStructR> offset=29:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPMT                                :5_7:Other "copy:
************************************************ / $*|                               :5_7:Other "copy:
************************************************* / slAKA                           :5_7:Other "copy:
************************************************** / $*|                           :5_7:Other "copy:
*************************************************** / slAKA base                  :5_7:Other "copy:
**************************************************** / slMultiTerm               :5_7:Other "copy:
***************************************************** / someSL                  :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

***************************************************** \ someSL has returned (["copying"],0) :6_6:UnDeeper:
slMultiTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slMultiTerm> MATCH (COK): Other "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

**************************************************** \ slMultiTerm has returned (["copying"],0) :6_6:UnDeeper:
slAKA base> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slAKA base> MATCH (COK): Other "copying"
slAKA base> VALUE: ((["copying"],0),[])

*************************************************** \ slAKA base has returned (["copying"],0) :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

************************************************** \ $*| has returned (["copying"],0) :6_6:UnDeeper:
************************************************** / |>>/recurse                  :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :6_6:UnDeeper:
*************************************************** / slAKA optional akapart     :6_6:UnDeeper:
**************************************************** / |?| optional something   :6_6:UnDeeper:
***************************************************** / |>>/recurse            :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :6_6:UnDeeper:
****************************************************** / PAKA/akapart         :6_6:UnDeeper:
******************************************************* / $>|                :6_6:UnDeeper:
******************************************************** / Aka Token        :6_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=29:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=29:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :6_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional akapart has returned (Nothing,0) :6_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :6_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :6_6:UnDeeper:
************************************************** / |>>/recurse                  :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :6_6:UnDeeper:
*************************************************** / slAKA optional typically   :6_6:UnDeeper:
**************************************************** / |?| optional something   :6_6:UnDeeper:
***************************************************** / |>>/recurse            :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :6_6:UnDeeper:
****************************************************** / typically            :6_6:UnDeeper:
******************************************************* / $>|                :6_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=29:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :6_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional typically has returned (Nothing,0) :6_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :6_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :6_6:UnDeeper:
************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :6_6:UnDeeper:
************************************************** > pAKA: entityalias = Nothing  :6_6:UnDeeper:
slAKA> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slAKA> MATCH (COK): Other "copying"
slAKA> VALUE: ((["copying"],0),[])

************************************************* \ slAKA has returned (["copying"],0) :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

************************************************ \ $*| has returned (["copying"],0) :6_6:UnDeeper:
RPMT> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
RPMT> MATCH (COK): Other "copying"
RPMT> VALUE: ((RPMT ["copying"],0),[])

*********************************************** \ RPMT has returned (RPMT ["copying"],0) :6_6:UnDeeper:
slRelPred> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slRelPred> MATCH (COK): Other "copying"
slRelPred> VALUE: ((RPMT ["copying"],0),[])

********************************************** \ slRelPred has returned (RPMT ["copying"],0) :6_6:UnDeeper:
********************************************** / undeepers                            :6_6:UnDeeper:
*********************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_6:UnDeeper:
*********************************************** > sameLine: success!                 :6_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************************** \ undeepers has returned ()            :6_6:UnDeeper:
pRelPred> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
pRelPred> MATCH (COK): Other "copying"
pRelPred> VALUE: (RPMT ["copying"],[])

********************************************* \ pRelPred has returned RPMT ["copying"] :6_6:UnDeeper:
term p/3:plain p> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/3:plain p> MATCH (COK): Other "copying"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["copying"]),[])

******************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["copying"]) :6_6:UnDeeper:
term p/notLabelTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/notLabelTerm> MATCH (COK): Other "copying"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["copying"]),[])

******************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["copying"]) :6_6:UnDeeper:
term p> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p> MATCH (COK): Other "copying"
term p> VALUE: (MyLeaf (RPMT ["copying"]),[])

****************************************** \ term p has returned MyLeaf (RPMT ["copying"]) :6_6:UnDeeper:
****************************************** / binary(Or)                                   :6_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=29:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************************** / binary(And)                                  :6_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=29:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************************** / binary(SetLess)                              :6_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=29:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************************** / binary(SetPlus)                              :6_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=29:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
expression> MATCH (COK): Other "copying"
expression> VALUE: (MyLeaf (RPMT ["copying"]),[])

***************************************** \ expression has returned MyLeaf (RPMT ["copying"]) :6_6:UnDeeper:
manyIndentation/leaf?> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
manyIndentation/leaf?> MATCH (COK): Other "copying"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["copying"]),[])

**************************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["copying"]) :6_6:UnDeeper:
**************************************** / myindented: consuming UnDeeper                   :6_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************************** \ myindented: consuming UnDeeper has returned UnDeeper :6_7:UnDeeper:
someIndentation> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
someIndentation> MATCH (COK): GoDeeper Other "copying" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["copying"]),[])

*************************************** \ someIndentation has returned MyLeaf (RPMT ["copying"]) :6_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "copying" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["copying"]),[])

************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["copying"]) :6_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "copying" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["copying"]),[])

************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["copying"]) :6_7:UnDeeper:
term p> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p> MATCH (COK): GoDeeper Other "copying" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["copying"]),[])

************************************ \ term p has returned MyLeaf (RPMT ["copying"])              :6_7:UnDeeper:
************************************ / binary(Or)                                                 :6_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************************ / binary(And)                                                :6_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************************ / binary(SetLess)                                            :6_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************************ / binary(SetPlus)                                            :6_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
expression> MATCH (COK): GoDeeper Other "copying" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["copying"]),[])

*********************************** \ expression has returned MyLeaf (RPMT ["copying"])            :6_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "copying" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["copying"]),[])

********************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["copying"])   :6_7:UnDeeper:
********************************** / myindented: consuming UnDeeper                                 :6_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************** \ myindented: consuming UnDeeper has returned UnDeeper      :6_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "copying" UnDeep <…>
someIndentation> VALUE: (MyLeaf (RPMT ["copying"]),[])

********************************* \ someIndentation has returned MyLeaf (RPMT ["copying"])      :6_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["copying"]),[])

******************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["copying"]) :6_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["copying"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["copying"])      :6_5:Or:
term p> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "copying" UnDeep <…>
term p> VALUE: (MyLeaf (RPMT ["copying"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["copying"])                     :6_5:Or:
****************************** / binary(Or)                                                        :6_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "modification <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

****************************** \ binary(Or) has returned Or                                         :6_6:GoDeeper:
****************************** / term p                                                             :6_6:GoDeeper:
******************************* / term p/1a:label directly above                                   :6_6:GoDeeper:
******************************** / $*|                                                            :6_6:GoDeeper:
********************************* / someSL                                                       :6_6:GoDeeper:
********************************** / pNumAsText                                                 :6_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "modification" U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "modification" U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "modification" U <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "modification" U <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=32:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL               :6_6:GoDeeper:
******************************** / someSL                                                         :6_6:GoDeeper:
********************************* / pNumAsText                                                   :6_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "modification" U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "modification" U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "modification" U <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=32:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************************* / term p/notLabelTerm                                              :6_6:GoDeeper:
******************************** / term p/2:someIndentation expr p                                :6_6:GoDeeper:
********************************* / someIndentation                                              :6_6:GoDeeper:
********************************** / myindented: consuming GoDeeper                             :6_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "modification" U <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************** \ myindented: consuming GoDeeper has returned GoDeeper         :6_7:GoDeeper:
********************************** / manyIndentation/leaf?                                        :6_7:GoDeeper:
*********************************** / expression                                                 :6_7:GoDeeper:
************************************ / labelPrefix                                              :6_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "modification" UnDeeper U <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************************************ / term p                                                   :6_7:GoDeeper:
************************************* / term p/1a:label directly above                         :6_7:GoDeeper:
************************************** / $*|                                                  :6_7:GoDeeper:
*************************************** / someSL                                             :6_7:GoDeeper:
**************************************** / pNumAsText                                       :6_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "modification" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "modification" UnDeeper U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "modification" UnDeeper U <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "modification" UnDeeper U <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************************* / term p/b:label to the left of line below, with EOL     :6_7:GoDeeper:
************************************** / someSL                                               :6_7:GoDeeper:
*************************************** / pNumAsText                                         :6_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "modification" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "modification" UnDeeper U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "modification" UnDeeper U <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************************* / term p/notLabelTerm                                    :6_7:GoDeeper:
************************************** / term p/2:someIndentation expr p                      :6_7:GoDeeper:
*************************************** / someIndentation                                    :6_7:GoDeeper:
**************************************** / myindented: consuming GoDeeper                   :6_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "modification" UnDeeper U <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************************** \ myindented: consuming GoDeeper has returned GoDeeper :6_7:Other "modi:
**************************************** / manyIndentation/leaf?                             :6_7:Other "modi:
***************************************** / expression                                      :6_7:Other "modi:
****************************************** / labelPrefix                                   :6_7:Other "modi:
labelPrefix> IN: Other "modification" UnDeeper UnDeeper O <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=35:
labelPrefix> unexpected UnDeeper

****************************************** / term p                                        :6_7:Other "modi:
******************************************* / term p/1a:label directly above              :6_7:Other "modi:
******************************************** / $*|                                       :6_7:Other "modi:
********************************************* / someSL                                  :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

********************************************* \ someSL has returned (["modification"],0) :7_6:UnDeeper:
********************************************* / pNumAsText                             :7_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (CERR): Other "modification"
$*|> ERROR:
$*|> offset=35:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/1a:label directly above> MATCH (CERR): Other "modification"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=35:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************************* / term p/b:label to the left of line below, with EOL :6_7:Other "modi:
******************************************** / someSL                                    :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

******************************************** \ someSL has returned (["modification"],0) :7_6:UnDeeper:
******************************************** / undeepers                                :7_6:UnDeeper:
********************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_6:UnDeeper:
********************************************* > sameLine: success!                     :7_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************** \ undeepers has returned ()                :7_6:UnDeeper:
******************************************** / matching EOL                             :7_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=35:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "modification"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=35:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************************* / term p/notLabelTerm                         :6_7:Other "modi:
******************************************** / term p/2:someIndentation expr p           :6_7:Other "modi:
********************************************* / someIndentation                         :6_7:Other "modi:
********************************************** / myindented: consuming GoDeeper        :6_7:Other "modi:
myindented: consuming GoDeeper> IN: Other "modification" UnDeeper UnDeeper O <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=34:
myindented: consuming GoDeeper> unexpected Other "modification"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "modification" UnDeeper UnDeeper O <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=34:
someIndentation> unexpected Other "modification"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=34:
term p/2:someIndentation expr p> unexpected Other "modification"
term p/2:someIndentation expr p> expecting GoDeeper

******************************************** / term p/3:plain p                          :6_7:Other "modi:
********************************************* / pRelPred                                :6_7:Other "modi:
********************************************** / slRelPred                             :6_7:Other "modi:
*********************************************** / nested simpleHorn                   :6_7:Other "modi:
************************************************ > |^|                               :6_7:Other "modi:
************************************************ / $*|                               :6_7:Other "modi:
************************************************* / slMultiTerm                     :6_7:Other "modi:
************************************************** / someSL                        :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

************************************************** \ someSL has returned (["modification"],0) :7_6:UnDeeper:
slMultiTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
slMultiTerm> MATCH (COK): Other "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

************************************************* \ slMultiTerm has returned (["modification"],0) :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

************************************************ \ $*| has returned (["modification"],0) :7_6:UnDeeper:
************************************************ / |^| deeps                        :7_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************************************ \ |^| deeps has returned ([(),()],-2) :7_5:Or:
nested simpleHorn> IN: Other "modification" UnDeeper UnDeeper O <…>
nested simpleHorn> MATCH (CERR): Other "modification" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

*********************************************** / RPConstraint                        :6_7:Other "modi:
************************************************ / $*|                               :6_7:Other "modi:
************************************************* / slMultiTerm                     :6_7:Other "modi:
************************************************** / someSL                        :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

************************************************** \ someSL has returned (["modification"],0) :7_6:UnDeeper:
slMultiTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
slMultiTerm> MATCH (COK): Other "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

************************************************* \ slMultiTerm has returned (["modification"],0) :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

************************************************ \ $*| has returned (["modification"],0) :7_6:UnDeeper:
************************************************ / |>| calling $>>                  :7_6:UnDeeper:
************************************************* / |>>/recurse                    :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :7_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=35:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "modification" UnDeeper UnDeeper O <…>
RPConstraint> MATCH (CERR): Other "modification"
RPConstraint> ERROR:
RPConstraint> offset=35:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPBoolStructR                       :6_7:Other "modi:
************************************************ / $*|                               :6_7:Other "modi:
************************************************* / slMultiTerm                     :6_7:Other "modi:
************************************************** / someSL                        :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

************************************************** \ someSL has returned (["modification"],0) :7_6:UnDeeper:
slMultiTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
slMultiTerm> MATCH (COK): Other "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

************************************************* \ slMultiTerm has returned (["modification"],0) :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

************************************************ \ $*| has returned (["modification"],0) :7_6:UnDeeper:
************************************************ / |>| calling $>>                  :7_6:UnDeeper:
************************************************* / |>>/recurse                    :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                       :7_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=35:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "modification" UnDeeper UnDeeper O <…>
RPBoolStructR> MATCH (CERR): Other "modification"
RPBoolStructR> ERROR:
RPBoolStructR> offset=35:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPMT                                :6_7:Other "modi:
************************************************ / $*|                               :6_7:Other "modi:
************************************************* / slAKA                           :6_7:Other "modi:
************************************************** / $*|                           :6_7:Other "modi:
*************************************************** / slAKA base                  :6_7:Other "modi:
**************************************************** / slMultiTerm               :6_7:Other "modi:
***************************************************** / someSL                  :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

***************************************************** \ someSL has returned (["modification"],0) :7_6:UnDeeper:
slMultiTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
slMultiTerm> MATCH (COK): Other "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

**************************************************** \ slMultiTerm has returned (["modification"],0) :7_6:UnDeeper:
slAKA base> IN: Other "modification" UnDeeper UnDeeper O <…>
slAKA base> MATCH (COK): Other "modification"
slAKA base> VALUE: ((["modification"],0),[])

*************************************************** \ slAKA base has returned (["modification"],0) :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

************************************************** \ $*| has returned (["modification"],0) :7_6:UnDeeper:
************************************************** / |>>/recurse                  :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :7_6:UnDeeper:
*************************************************** / slAKA optional akapart     :7_6:UnDeeper:
**************************************************** / |?| optional something   :7_6:UnDeeper:
***************************************************** / |>>/recurse            :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :7_6:UnDeeper:
****************************************************** / PAKA/akapart         :7_6:UnDeeper:
******************************************************* / $>|                :7_6:UnDeeper:
******************************************************** / Aka Token        :7_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=35:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=35:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :7_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional akapart has returned (Nothing,0) :7_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :7_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :7_6:UnDeeper:
************************************************** / |>>/recurse                  :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                     :7_6:UnDeeper:
*************************************************** / slAKA optional typically   :7_6:UnDeeper:
**************************************************** / |?| optional something   :7_6:UnDeeper:
***************************************************** / |>>/recurse            :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base               :7_6:UnDeeper:
****************************************************** / typically            :7_6:UnDeeper:
******************************************************* / $>|                :7_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=35:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :7_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional typically has returned (Nothing,0) :7_6:UnDeeper:
*************************************************** > |>>/base got Nothing       :7_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :7_6:UnDeeper:
************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :7_6:UnDeeper:
************************************************** > pAKA: entityalias = Nothing  :7_6:UnDeeper:
slAKA> IN: Other "modification" UnDeeper UnDeeper O <…>
slAKA> MATCH (COK): Other "modification"
slAKA> VALUE: ((["modification"],0),[])

************************************************* \ slAKA has returned (["modification"],0) :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

************************************************ \ $*| has returned (["modification"],0) :7_6:UnDeeper:
RPMT> IN: Other "modification" UnDeeper UnDeeper O <…>
RPMT> MATCH (COK): Other "modification"
RPMT> VALUE: ((RPMT ["modification"],0),[])

*********************************************** \ RPMT has returned (RPMT ["modification"],0) :7_6:UnDeeper:
slRelPred> IN: Other "modification" UnDeeper UnDeeper O <…>
slRelPred> MATCH (COK): Other "modification"
slRelPred> VALUE: ((RPMT ["modification"],0),[])

********************************************** \ slRelPred has returned (RPMT ["modification"],0) :7_6:UnDeeper:
********************************************** / undeepers                            :7_6:UnDeeper:
*********************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_6:UnDeeper:
*********************************************** > sameLine: success!                 :7_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************************** \ undeepers has returned ()            :7_6:UnDeeper:
pRelPred> IN: Other "modification" UnDeeper UnDeeper O <…>
pRelPred> MATCH (COK): Other "modification"
pRelPred> VALUE: (RPMT ["modification"],[])

********************************************* \ pRelPred has returned RPMT ["modification"] :7_6:UnDeeper:
term p/3:plain p> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/3:plain p> MATCH (COK): Other "modification"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["modification"]),[])

******************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["modification"]) :7_6:UnDeeper:
term p/notLabelTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/notLabelTerm> MATCH (COK): Other "modification"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["modification"]),[])

******************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["modification"]) :7_6:UnDeeper:
term p> IN: Other "modification" UnDeeper UnDeeper O <…>
term p> MATCH (COK): Other "modification"
term p> VALUE: (MyLeaf (RPMT ["modification"]),[])

****************************************** \ term p has returned MyLeaf (RPMT ["modification"]) :7_6:UnDeeper:
****************************************** / binary(Or)                                   :7_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************************** / binary(And)                                  :7_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************************** / binary(SetLess)                              :7_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************************** / binary(SetPlus)                              :7_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "modification" UnDeeper UnDeeper O <…>
expression> MATCH (COK): Other "modification"
expression> VALUE: (MyLeaf (RPMT ["modification"]),[])

***************************************** \ expression has returned MyLeaf (RPMT ["modification"]) :7_6:UnDeeper:
manyIndentation/leaf?> IN: Other "modification" UnDeeper UnDeeper O <…>
manyIndentation/leaf?> MATCH (COK): Other "modification"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["modification"]),[])

**************************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["modification"]) :7_6:UnDeeper:
**************************************** / myindented: consuming UnDeeper                   :7_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************************** \ myindented: consuming UnDeeper has returned UnDeeper :7_7:UnDeeper:
someIndentation> IN: GoDeeper Other "modification" UnDeeper U <…>
someIndentation> MATCH (COK): GoDeeper Other "modification" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["modification"]),[])

*************************************** \ someIndentation has returned MyLeaf (RPMT ["modification"]) :7_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "modification" UnDeeper U <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "modification" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["modification"]),[])

************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["modification"]) :7_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "modification" UnDeeper U <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "modification" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["modification"]),[])

************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["modification"]) :7_7:UnDeeper:
term p> IN: GoDeeper Other "modification" UnDeeper U <…>
term p> MATCH (COK): GoDeeper Other "modification" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["modification"]),[])

************************************ \ term p has returned MyLeaf (RPMT ["modification"])         :7_7:UnDeeper:
************************************ / binary(Or)                                                 :7_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************************ / binary(And)                                                :7_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************************ / binary(SetLess)                                            :7_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************************ / binary(SetPlus)                                            :7_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "modification" UnDeeper U <…>
expression> MATCH (COK): GoDeeper Other "modification" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["modification"]),[])

*********************************** \ expression has returned MyLeaf (RPMT ["modification"])       :7_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "modification" UnDeeper U <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "modification" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["modification"]),[])

********************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["modification"]) :7_7:UnDeeper:
********************************** / myindented: consuming UnDeeper                                 :7_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************** \ myindented: consuming UnDeeper has returned UnDeeper      :7_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "modification" U <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "modification" U <…>
someIndentation> VALUE: (MyLeaf (RPMT ["modification"]),[])

********************************* \ someIndentation has returned MyLeaf (RPMT ["modification"]) :7_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "modification" U <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "modification" U <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["modification"]),[])

******************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["modification"]) :7_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "modification" U <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "modification" U <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["modification"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["modification"]) :7_5:Or:
term p> IN: GoDeeper GoDeeper Other "modification" U <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "modification" U <…>
term p> VALUE: (MyLeaf (RPMT ["modification"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["modification"])                :7_5:Or:
****************************** / binary(Or)                                                        :7_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "disposal" Un <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

****************************** \ binary(Or) has returned Or                                         :7_6:GoDeeper:
****************************** / term p                                                             :7_6:GoDeeper:
******************************* / term p/1a:label directly above                                   :7_6:GoDeeper:
******************************** / $*|                                                            :7_6:GoDeeper:
********************************* / someSL                                                       :7_6:GoDeeper:
********************************** / pNumAsText                                                 :7_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL               :7_6:GoDeeper:
******************************** / someSL                                                         :7_6:GoDeeper:
********************************* / pNumAsText                                                   :7_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************************* / term p/notLabelTerm                                              :7_6:GoDeeper:
******************************** / term p/2:someIndentation expr p                                :7_6:GoDeeper:
********************************* / someIndentation                                              :7_6:GoDeeper:
********************************** / myindented: consuming GoDeeper                             :7_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************************** \ myindented: consuming GoDeeper has returned GoDeeper         :7_7:GoDeeper:
********************************** / manyIndentation/leaf?                                        :7_7:GoDeeper:
*********************************** / expression                                                 :7_7:GoDeeper:
************************************ / labelPrefix                                              :7_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************************************ / term p                                                   :7_7:GoDeeper:
************************************* / term p/1a:label directly above                         :7_7:GoDeeper:
************************************** / $*|                                                  :7_7:GoDeeper:
*************************************** / someSL                                             :7_7:GoDeeper:
**************************************** / pNumAsText                                       :7_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************************* / term p/b:label to the left of line below, with EOL     :7_7:GoDeeper:
************************************** / someSL                                               :7_7:GoDeeper:
*************************************** / pNumAsText                                         :7_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************************* / term p/notLabelTerm                                    :7_7:GoDeeper:
************************************** / term p/2:someIndentation expr p                      :7_7:GoDeeper:
*************************************** / someIndentation                                    :7_7:GoDeeper:
**************************************** / myindented: consuming GoDeeper                   :7_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************************** \ myindented: consuming GoDeeper has returned GoDeeper :7_7:Other "disp:
**************************************** / manyIndentation/leaf?                             :7_7:Other "disp:
***************************************** / expression                                      :7_7:Other "disp:
****************************************** / labelPrefix                                   :7_7:Other "disp:
labelPrefix> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected UnDeeper

****************************************** / term p                                        :7_7:Other "disp:
******************************************* / term p/1a:label directly above              :7_7:Other "disp:
******************************************** / $*|                                       :7_7:Other "disp:
********************************************* / someSL                                  :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

********************************************* \ someSL has returned (["disposal"],0) :8_4:UnDeeper:
********************************************* / pNumAsText                         :8_4:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (CERR): Other "disposal"
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/1a:label directly above> MATCH (CERR): Other "disposal"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************************* / term p/b:label to the left of line below, with EOL :7_7:Other "disp:
******************************************** / someSL                                    :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

******************************************** \ someSL has returned (["disposal"],0) :8_4:UnDeeper:
******************************************** / undeepers                            :8_4:UnDeeper:
********************************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :8_4:UnDeeper:
********************************************* > sameLine: success!                 :8_4:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************** \ undeepers has returned ()            :8_4:UnDeeper:
******************************************** / matching EOL                         :8_4:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=41:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "disposal"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************************* / term p/notLabelTerm                         :7_7:Other "disp:
******************************************** / term p/2:someIndentation expr p           :7_7:Other "disp:
********************************************* / someIndentation                         :7_7:Other "disp:
********************************************** / myindented: consuming GoDeeper        :7_7:Other "disp:
myindented: consuming GoDeeper> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected Other "disposal"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "disposal"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "disposal"
term p/2:someIndentation expr p> expecting GoDeeper

******************************************** / term p/3:plain p                          :7_7:Other "disp:
********************************************* / pRelPred                                :7_7:Other "disp:
********************************************** / slRelPred                             :7_7:Other "disp:
*********************************************** / nested simpleHorn                   :7_7:Other "disp:
************************************************ > |^|                               :7_7:Other "disp:
************************************************ / $*|                               :7_7:Other "disp:
************************************************* / slMultiTerm                     :7_7:Other "disp:
************************************************** / someSL                        :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

************************************************** \ someSL has returned (["disposal"],0) :8_4:UnDeeper:
slMultiTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slMultiTerm> MATCH (COK): Other "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

************************************************* \ slMultiTerm has returned (["disposal"],0) :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************************************ \ $*| has returned (["disposal"],0) :8_4:UnDeeper:
************************************************ / |^| deeps                    :8_4:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

************************************************ \ |^| deeps has returned ([(),(),(),()],-4) :8_3:Other "of p:
nested simpleHorn> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
nested simpleHorn> MATCH (CERR): Other "disposal" UnDeeper UnDeeper UnDee <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=45:
nested simpleHorn> unexpected Other "of personal data"
nested simpleHorn> expecting Means or UnDeeper

*********************************************** / RPConstraint                        :7_7:Other "disp:
************************************************ / $*|                               :7_7:Other "disp:
************************************************* / slMultiTerm                     :7_7:Other "disp:
************************************************** / someSL                        :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

************************************************** \ someSL has returned (["disposal"],0) :8_4:UnDeeper:
slMultiTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slMultiTerm> MATCH (COK): Other "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

************************************************* \ slMultiTerm has returned (["disposal"],0) :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************************************ \ $*| has returned (["disposal"],0) :8_4:UnDeeper:
************************************************ / |>| calling $>>              :8_4:UnDeeper:
************************************************* / |>>/recurse                :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                   :8_4:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=41:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
RPConstraint> MATCH (CERR): Other "disposal"
RPConstraint> ERROR:
RPConstraint> offset=41:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPBoolStructR                       :7_7:Other "disp:
************************************************ / $*|                               :7_7:Other "disp:
************************************************* / slMultiTerm                     :7_7:Other "disp:
************************************************** / someSL                        :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

************************************************** \ someSL has returned (["disposal"],0) :8_4:UnDeeper:
slMultiTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slMultiTerm> MATCH (COK): Other "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

************************************************* \ slMultiTerm has returned (["disposal"],0) :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************************************ \ $*| has returned (["disposal"],0) :8_4:UnDeeper:
************************************************ / |>| calling $>>              :8_4:UnDeeper:
************************************************* / |>>/recurse                :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************* / |>>/base                   :8_4:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=41:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
RPBoolStructR> MATCH (CERR): Other "disposal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=41:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************************** / RPMT                                :7_7:Other "disp:
************************************************ / $*|                               :7_7:Other "disp:
************************************************* / slAKA                           :7_7:Other "disp:
************************************************** / $*|                           :7_7:Other "disp:
*************************************************** / slAKA base                  :7_7:Other "disp:
**************************************************** / slMultiTerm               :7_7:Other "disp:
***************************************************** / someSL                  :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

***************************************************** \ someSL has returned (["disposal"],0) :8_4:UnDeeper:
slMultiTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slMultiTerm> MATCH (COK): Other "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

**************************************************** \ slMultiTerm has returned (["disposal"],0) :8_4:UnDeeper:
slAKA base> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slAKA base> MATCH (COK): Other "disposal"
slAKA base> VALUE: ((["disposal"],0),[])

*************************************************** \ slAKA base has returned (["disposal"],0) :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************************************** \ $*| has returned (["disposal"],0) :8_4:UnDeeper:
************************************************** / |>>/recurse              :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                 :8_4:UnDeeper:
*************************************************** / slAKA optional akapart :8_4:UnDeeper:
**************************************************** / |?| optional something :8_4:UnDeeper:
***************************************************** / |>>/recurse        :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base           :8_4:UnDeeper:
****************************************************** / PAKA/akapart     :8_4:UnDeeper:
******************************************************* / $>|            :8_4:UnDeeper:
******************************************************** / Aka Token    :8_4:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :8_4:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional akapart has returned (Nothing,0) :8_4:UnDeeper:
*************************************************** > |>>/base got Nothing   :8_4:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :8_4:UnDeeper:
************************************************** / |>>/recurse              :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************************** / |>>/base                 :8_4:UnDeeper:
*************************************************** / slAKA optional typically :8_4:UnDeeper:
**************************************************** / |?| optional something :8_4:UnDeeper:
***************************************************** / |>>/recurse        :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************************** / |>>/base           :8_4:UnDeeper:
****************************************************** / typically        :8_4:UnDeeper:
******************************************************* / $>|            :8_4:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************************** \ |?| optional something has returned (Nothing,0) :8_4:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************************** \ slAKA optional typically has returned (Nothing,0) :8_4:UnDeeper:
*************************************************** > |>>/base got Nothing   :8_4:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************************** \ |>>/base has returned (Nothing,0) :8_4:UnDeeper:
************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :8_4:UnDeeper:
************************************************** > pAKA: entityalias = Nothing :8_4:UnDeeper:
slAKA> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slAKA> MATCH (COK): Other "disposal"
slAKA> VALUE: ((["disposal"],0),[])

************************************************* \ slAKA has returned (["disposal"],0) :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************************************ \ $*| has returned (["disposal"],0) :8_4:UnDeeper:
RPMT> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
RPMT> MATCH (COK): Other "disposal"
RPMT> VALUE: ((RPMT ["disposal"],0),[])

*********************************************** \ RPMT has returned (RPMT ["disposal"],0) :8_4:UnDeeper:
slRelPred> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slRelPred> MATCH (COK): Other "disposal"
slRelPred> VALUE: ((RPMT ["disposal"],0),[])

********************************************** \ slRelPred has returned (RPMT ["disposal"],0) :8_4:UnDeeper:
********************************************** / undeepers                        :8_4:UnDeeper:
*********************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :8_4:UnDeeper:
*********************************************** > sameLine: success!             :8_4:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************************** \ undeepers has returned ()        :8_4:UnDeeper:
pRelPred> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
pRelPred> MATCH (COK): Other "disposal"
pRelPred> VALUE: (RPMT ["disposal"],[])

********************************************* \ pRelPred has returned RPMT ["disposal"] :8_4:UnDeeper:
term p/3:plain p> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/3:plain p> MATCH (COK): Other "disposal"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["disposal"]) :8_4:UnDeeper:
term p/notLabelTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/notLabelTerm> MATCH (COK): Other "disposal"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disposal"]) :8_4:UnDeeper:
term p> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p> MATCH (COK): Other "disposal"
term p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

****************************************** \ term p has returned MyLeaf (RPMT ["disposal"]) :8_4:UnDeeper:
****************************************** / binary(Or)                               :8_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************************** / binary(And)                              :8_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************************** / binary(SetLess)                          :8_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************************** / binary(SetPlus)                          :8_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
expression> MATCH (COK): Other "disposal"
expression> VALUE: (MyLeaf (RPMT ["disposal"]),[])

***************************************** \ expression has returned MyLeaf (RPMT ["disposal"]) :8_4:UnDeeper:
manyIndentation/leaf?> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
manyIndentation/leaf?> MATCH (COK): Other "disposal"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disposal"]),[])

**************************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disposal"]) :8_4:UnDeeper:
**************************************** / myindented: consuming UnDeeper               :8_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************************** \ myindented: consuming UnDeeper has returned UnDeeper :8_5:UnDeeper:
someIndentation> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
someIndentation> MATCH (COK): GoDeeper Other "disposal" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["disposal"]),[])

*************************************** \ someIndentation has returned MyLeaf (RPMT ["disposal"]) :8_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "disposal" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disposal"]) :8_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "disposal" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disposal"]),[])

************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disposal"]) :8_5:UnDeeper:
term p> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p> MATCH (COK): GoDeeper Other "disposal" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

************************************ \ term p has returned MyLeaf (RPMT ["disposal"])         :8_5:UnDeeper:
************************************ / binary(Or)                                             :8_5:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************************ / binary(And)                                            :8_5:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************************ / binary(SetLess)                                        :8_5:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************************ / binary(SetPlus)                                        :8_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
expression> MATCH (COK): GoDeeper Other "disposal" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["disposal"]),[])

*********************************** \ expression has returned MyLeaf (RPMT ["disposal"])       :8_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "disposal" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disposal"]) :8_5:UnDeeper:
********************************** / myindented: consuming UnDeeper                             :8_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************************** \ myindented: consuming UnDeeper has returned UnDeeper         :8_6:UnDeeper:
someIndentation> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "disposal" UnDee <…>
someIndentation> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********************************* \ someIndentation has returned MyLeaf (RPMT ["disposal"])        :8_6:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disposal"]) :8_6:UnDeeper:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disposal"])        :8_6:UnDeeper:
term p> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "disposal" UnDee <…>
term p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["disposal"])                       :8_6:UnDeeper:
****************************** / binary(Or)                                                           :8_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Other "of personal dat <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=43:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************** / binary(And)                                                          :8_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Other "of personal dat <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=43:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************** / binary(SetLess)                                                      :8_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Other "of personal dat <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=43:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************** / binary(SetPlus)                                                      :8_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Other "of personal dat <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=43:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

***************************** \ expression has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_6:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

**************************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_6:UnDeeper:
**************************** / myindented: consuming UnDeeper                                           :8_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Other "of personal dat <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper                       :8_7:UnDeeper:
someIndentation> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "access <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

*************************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "access <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

************************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "access <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

************************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_7:UnDeeper:
term p> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
term p> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "access <…>
term p> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

************************ \ term p has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_7:UnDeeper:
************************ / binary(Or)                                                                         :8_7:UnDeeper:
binary(Or)> IN: UnDeeper Other "of personal data" UnDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=44:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                                        :8_7:UnDeeper:
binary(And)> IN: UnDeeper Other "of personal data" UnDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=44:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                                    :8_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "of personal data" UnDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=44:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                                    :8_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "of personal data" UnDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=44:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
expression> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "access <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

*********************** \ expression has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "access <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

********************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_7:UnDeeper:
********************** / myindented: consuming UnDeeper                                                         :8_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "of personal data" UnDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                          :8_3:Other "of p:
someIndentation> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

********************* \ someIndentation has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_3:Other "of p:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

******************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_3:Other "of p:
term p/notLabelTerm> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

******************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_3:Other "of p:
term p> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
term p> MATCH (COK): GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
term p> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

****************** \ term p has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_3:Other "of p:
****************** / binary(Or)                                                                            :8_3:Other "of p:
binary(Or)> IN: Other "of personal data" UnDeeper UnDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected Other "of personal data"
binary(Or)> expecting Or

****************** / binary(And)                                                                           :8_3:Other "of p:
binary(And)> IN: Other "of personal data" UnDeeper UnDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected Other "of personal data"
binary(And)> expecting And

****************** / binary(SetLess)                                                                       :8_3:Other "of p:
binary(SetLess)> IN: Other "of personal data" UnDeeper UnDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected Other "of personal data"
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                       :8_3:Other "of p:
binary(SetPlus)> IN: Other "of personal data" UnDeeper UnDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected Other "of personal data"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
expression> MATCH (COK): Other "unauthorised" GoDeeper GoDeeper G <…>
expression> VALUE: (MyLabel ["unauthorised"] (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])]),[])

***************** \ expression has returned MyLabel ["unauthorised"] (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])]) :8_3:Other "of p:
manyIndentation/leaf?> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> MATCH (COK): Other "unauthorised" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> VALUE: (MyLabel ["unauthorised"] (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])]),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["unauthorised"] (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])]) :8_3:Other "of p:
**************** / myindented: consuming UnDeeper                                                            :8_3:Other "of p:
myindented: consuming UnDeeper> IN: Other "of personal data" UnDeeper UnDeep <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=45:
myindented: consuming UnDeeper> unexpected Other "of personal data"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
someIndentation> MATCH (CERR): GoDeeper Other "unauthorised" GoDeeper G <…>
someIndentation> ERROR:
someIndentation> offset=45:
someIndentation> unexpected Other "of personal data"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p/2:someIndentation expr p> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper Other "unauthorised" GoDeeper G <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=45:
term p/2:someIndentation expr p> unexpected Other "of personal data"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, or UnDeeper

************** / term p/3:plain p                                                                             :2_3:GoDeeper:
*************** / pRelPred                                                                                   :2_3:GoDeeper:
**************** / slRelPred                                                                                :2_3:GoDeeper:
***************** / nested simpleHorn                                                                      :2_3:GoDeeper:
****************** > |^|                                                                                  :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / slMultiTerm                                                                        :2_3:GoDeeper:
******************** / someSL                                                                           :2_3:GoDeeper:
********************* / pNumAsText                                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting Other text or TNumber 1234

***************** / RPConstraint                                                                           :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / slMultiTerm                                                                        :2_3:GoDeeper:
******************** / someSL                                                                           :2_3:GoDeeper:
********************* / pNumAsText                                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting Other text or TNumber 1234

***************** / RPBoolStructR                                                                          :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / slMultiTerm                                                                        :2_3:GoDeeper:
******************** / someSL                                                                           :2_3:GoDeeper:
********************* / pNumAsText                                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting Other text or TNumber 1234

***************** / RPMT                                                                                   :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / slAKA                                                                              :2_3:GoDeeper:
******************** / $*|                                                                              :2_3:GoDeeper:
********************* / slAKA base                                                                     :2_3:GoDeeper:
********************** / slMultiTerm                                                                  :2_3:GoDeeper:
*********************** / someSL                                                                     :2_3:GoDeeper:
************************ / pNumAsText                                                               :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected GoDeeper
slAKA base> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

slAKA> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected GoDeeper
slAKA> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPMT> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected GoDeeper
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected GoDeeper
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected GoDeeper
pRelPred> expecting Other text or TNumber 1234

term p/3:plain p> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=4:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting Other text or TNumber 1234

term p/notLabelTerm> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=45:
term p/notLabelTerm> unexpected Other "of personal data"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=45:
term p> unexpected Other "of personal data"
term p> expecting And, Or, SetLess, SetPlus, or UnDeeper

expression> IN: Other "any" GoDeeper Other "unauthorised <…>
expression> MATCH (CERR): Other "any"
expression> ERROR:
expression> offset=45:
expression> unexpected Other "of personal data"
expression> expecting And, MPNot, Or, SetLess, SetPlus, or UnDeeper

manyIndentation/leaf?> IN: Other "any" GoDeeper Other "unauthorised <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=45:
manyIndentation/leaf?> unexpected Other "of personal data"
manyIndentation/leaf?> expecting And, MPNot, Or, SetLess, SetPlus, or UnDeeper

********** / manyIndentation/deeper; calling someIndentation                                                     :2_2:Other "any":
*********** / someIndentation                                                                                   :2_2:Other "any":
************ / myindented: consuming GoDeeper                                                                  :2_2:Other "any":
myindented: consuming GoDeeper> IN: Other "any" GoDeeper Other "unauthorised <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=3:
myindented: consuming GoDeeper> unexpected Other "any"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "any" GoDeeper Other "unauthorised <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=3:
someIndentation> unexpected Other "any"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "any" GoDeeper Other "unauthorised <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=3:
manyIndentation/deeper; calling someIndentation> unexpected Other "any"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Other "any" GoDeeper Other "una <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=45:
someIndentation> unexpected Other "of personal data"
someIndentation> expecting And, MPNot, Or, SetLess, SetPlus, or UnDeeper

term p/2:someIndentation expr p> IN: GoDeeper Other "any" GoDeeper Other "una <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=45:
term p/2:someIndentation expr p> unexpected Other "of personal data"
term p/2:someIndentation expr p> expecting And, MPNot, Or, SetLess, SetPlus, or UnDeeper

******** / term p/3:plain p                                                                                       :2_2:GoDeeper:
********* / pRelPred                                                                                             :2_2:GoDeeper:
********** / slRelPred                                                                                          :2_2:GoDeeper:
*********** / nested simpleHorn                                                                                :2_2:GoDeeper:
************ > |^|                                                                                            :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slMultiTerm                                                                                  :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "any" GoDeeper Other "una <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "any" GoDeeper Other "una <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "any" GoDeeper Other "una <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "any" GoDeeper Other "una <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: GoDeeper Other "any" GoDeeper Other "una <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=2:
nested simpleHorn> unexpected GoDeeper
nested simpleHorn> expecting Other text or TNumber 1234

*********** / RPConstraint                                                                                     :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slMultiTerm                                                                                  :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "any" GoDeeper Other "una <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "any" GoDeeper Other "una <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "any" GoDeeper Other "una <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "any" GoDeeper Other "una <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: GoDeeper Other "any" GoDeeper Other "una <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=2:
RPConstraint> unexpected GoDeeper
RPConstraint> expecting Other text or TNumber 1234

*********** / RPBoolStructR                                                                                    :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slMultiTerm                                                                                  :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "any" GoDeeper Other "una <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "any" GoDeeper Other "una <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "any" GoDeeper Other "una <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "any" GoDeeper Other "una <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: GoDeeper Other "any" GoDeeper Other "una <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=2:
RPBoolStructR> unexpected GoDeeper
RPBoolStructR> expecting Other text or TNumber 1234

*********** / RPMT                                                                                             :2_2:GoDeeper:
************ / $*|                                                                                            :2_2:GoDeeper:
************* / slAKA                                                                                        :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / slAKA base                                                                               :2_2:GoDeeper:
**************** / slMultiTerm                                                                            :2_2:GoDeeper:
***************** / someSL                                                                               :2_2:GoDeeper:
****************** / pNumAsText                                                                         :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "any" GoDeeper Other "una <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=2:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "any" GoDeeper Other "una <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=2:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: GoDeeper Other "any" GoDeeper Other "una <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=2:
slMultiTerm> unexpected GoDeeper
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: GoDeeper Other "any" GoDeeper Other "una <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=2:
slAKA base> unexpected GoDeeper
slAKA base> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "any" GoDeeper Other "una <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

slAKA> IN: GoDeeper Other "any" GoDeeper Other "una <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=2:
slAKA> unexpected GoDeeper
slAKA> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "any" GoDeeper Other "una <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=2:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

RPMT> IN: GoDeeper Other "any" GoDeeper Other "una <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=2:
RPMT> unexpected GoDeeper
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: GoDeeper Other "any" GoDeeper Other "una <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=2:
slRelPred> unexpected GoDeeper
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: GoDeeper Other "any" GoDeeper Other "una <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=2:
pRelPred> unexpected GoDeeper
pRelPred> expecting Other text or TNumber 1234

term p/3:plain p> IN: GoDeeper Other "any" GoDeeper Other "una <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=2:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting Other text or TNumber 1234

term p/notLabelTerm> IN: GoDeeper Other "any" GoDeeper Other "una <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=45:
term p/notLabelTerm> unexpected Other "of personal data"
term p/notLabelTerm> expecting And, MPNot, Or, SetLess, SetPlus, or UnDeeper

term p> IN: GoDeeper Other "any" GoDeeper Other "una <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=45:
term p> unexpected Other "of personal data"
term p> expecting And, MPNot, Or, SetLess, SetPlus, or UnDeeper

expression> IN: GoDeeper Other "any" GoDeeper Other "una <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=45:
expression> unexpected Other "of personal data"
expression> expecting expression

ppp inner> IN: GoDeeper Other "any" GoDeeper Other "una <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=45:
ppp inner> unexpected Other "of personal data"
ppp inner> expecting expression

**** / withPrePost                                                                                                    :2_2:GoDeeper:
***** > |<* starting                                                                                                 :2_2:GoDeeper:
***** / $*|                                                                                                          :2_2:GoDeeper:
****** / pre part                                                                                                   :2_2:GoDeeper:
******* / aboveNextLineKeyword                                                                                      :2_2:Other "any":
******** / expectUnDeepers                                                                                         :2_2:Other "any":
********* / pNumAsText                                                                                             :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* > ignoring ["any","GD","unauthorised","GD","GD","GD","GD","access"]                                              :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: Other "any" GoDeeper Other "unauthorised <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                          :2_2:Other "any":
******** > aNLK: determined undp_count = 2                                                                         :2_2:Other "any":
******** > ->| trying to consume 1 GoDeepers                                                                       :2_2:Other "any":
******** / $*|                                                                                                     :2_2:Other "any":
$*|> IN: Other "any" GoDeeper Other "unauthorised <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                 :2_2:Other "any":
aboveNextLineKeyword> IN: Other "any" GoDeeper Other "unauthorised <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=3:
aboveNextLineKeyword> unexpected Other "any"
aboveNextLineKeyword> expecting GoDeeper

******* > /*= lookAhead failed, delegating to plain /+=                                                             :2_2:Other "any":
******* / aboveNextLineKeyword                                                                                       :2_3:GoDeeper:
******** / expectUnDeepers                                                                                          :2_3:GoDeeper:
********* / pNumAsText                                                                                             :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* > ignoring ["GD","unauthorised","GD","GD","GD","GD","access"]                                                    :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                           :2_3:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                          :2_3:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                        :2_3:GoDeeper:
******** / $*|                                                                                                      :2_3:GoDeeper:
$*|> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                  :2_3:GoDeeper:
******** > ->| success                                                                                               :2_3:Other "unau:
******** / |>>/recurse                                                                                               :2_3:Other "unau:
|>>/recurse> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Other "unauthorised"
|>>/recurse> expecting GoDeeper

******** / |>>/base                                                                                                  :2_3:Other "unau:
********* / slMultiTerm                                                                                             :2_3:Other "unau:
********** / someSL                                                                                                :2_3:Other "unau:
someSL> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
someSL> MATCH (COK): Other "unauthorised" GoDeeper GoDeeper G <…>
someSL> VALUE: ((["unauthorised","access"],4),[])

********** \ someSL has returned (["unauthorised","access"],4)                                                            :3_6:UnDeeper:
slMultiTerm> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
slMultiTerm> MATCH (COK): Other "unauthorised" GoDeeper GoDeeper G <…>
slMultiTerm> VALUE: ((["unauthorised","access"],4),[])

********* \ slMultiTerm has returned (["unauthorised","access"],4)                                                         :3_6:UnDeeper:
********* > |>>/base got ["unauthorised","access"]                                                                         :3_6:UnDeeper:
|>>/base> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
|>>/base> MATCH (COK): Other "unauthorised" GoDeeper GoDeeper G <…>
|>>/base> VALUE: ((["unauthorised","access"],4),[])

******** \ |>>/base has returned (["unauthorised","access"],4)                                                              :3_6:UnDeeper:
******** > aNLK: current depth is 5                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["unauthorised","access"]                                                                 :3_6:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "unauthorised" GoDeeper G <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "unauthorised" GoDeeper G <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 2 but the cursor seems to be placed such that we have 5; a different backtrack will probably fare better

******* > /*= lookAhead failed, delegating to plain /+=                                                              :2_3:GoDeeper:
******* / aboveNextLineKeyword                                                                                        :2_3:Other "unau:
******** / expectUnDeepers                                                                                           :2_3:Other "unau:
********* / pNumAsText                                                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* > ignoring ["unauthorised","GD","GD","GD","GD","access"]                                                         :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                            :2_3:Other "unau:
******** > aNLK: determined undp_count = 2                                                                           :2_3:Other "unau:
******** > ->| trying to consume 1 GoDeepers                                                                         :2_3:Other "unau:
******** / $*|                                                                                                       :2_3:Other "unau:
$*|> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                   :2_3:Other "unau:
aboveNextLineKeyword> IN: Other "unauthorised" GoDeeper GoDeeper G <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=5:
aboveNextLineKeyword> unexpected Other "unauthorised"
aboveNextLineKeyword> expecting GoDeeper

******* > /*= lookAhead failed, delegating to plain /+=                                                               :2_3:Other "unau:
******* / aboveNextLineKeyword                                                                                         :2_4:GoDeeper:
******** / expectUnDeepers                                                                                            :2_4:GoDeeper:
********* / pNumAsText                                                                                               :2_4:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* > ignoring ["GD","GD","GD","GD","access"]                                                                        :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                             :2_4:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                            :2_4:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                          :2_4:GoDeeper:
******** / $*|                                                                                                        :2_4:GoDeeper:
$*|> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                    :2_4:GoDeeper:
******** > ->| success                                                                                                  :2_5:GoDeeper:
******** / |>>/recurse                                                                                                  :2_5:GoDeeper:
********* / |>>/recurse                                                                                                  :2_6:GoDeeper:
********** / |>>/recurse                                                                                                  :2_7:GoDeeper:
*********** / |>>/recurse                                                                                                 :2_7:Other "acce:
|>>/recurse> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Other "access"
|>>/recurse> expecting GoDeeper

*********** / |>>/base                                                                                                    :2_7:Other "acce:
************ / slMultiTerm                                                                                               :2_7:Other "acce:
************* / someSL                                                                                                  :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

************* \ someSL has returned (["access"],0)                                                                     :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

************ \ slMultiTerm has returned (["access"],0)                                                                  :3_6:UnDeeper:
************ > |>>/base got ["access"]                                                                                  :3_6:UnDeeper:
|>>/base> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
|>>/base> MATCH (COK): Other "access"
|>>/base> VALUE: ((["access"],0),[])

*********** \ |>>/base has returned (["access"],0)                                                                       :3_6:UnDeeper:
|>>/recurse> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "access"
|>>/recurse> VALUE: ((["access"],1),[])

********** \ |>>/recurse has returned (["access"],1)                                                                      :3_6:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Other "access"
|>>/recurse> VALUE: ((["access"],2),[])

********* \ |>>/recurse has returned (["access"],2)                                                                        :3_6:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper GoDeeper Other "access <…>
|>>/recurse> VALUE: ((["access"],3),[])

******** \ |>>/recurse has returned (["access"],3)                                                                          :3_6:UnDeeper:
******** > aNLK: current depth is 4                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["access"]                                                                                :3_6:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper GoDeeper GoDeeper GoDeeper Othe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 2 but the cursor seems to be placed such that we have 4; a different backtrack will probably fare better

******* > /*= lookAhead failed, delegating to plain /+=                                                                :2_4:GoDeeper:
******* / aboveNextLineKeyword                                                                                           :2_5:GoDeeper:
******** / expectUnDeepers                                                                                              :2_5:GoDeeper:
********* / pNumAsText                                                                                                 :2_5:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* > ignoring ["GD","GD","GD","access"]                                                                             :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                               :2_5:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                              :2_5:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                            :2_5:GoDeeper:
******** / $*|                                                                                                          :2_5:GoDeeper:
$*|> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                      :2_5:GoDeeper:
******** > ->| success                                                                                                    :2_6:GoDeeper:
******** / |>>/recurse                                                                                                    :2_6:GoDeeper:
********* / |>>/recurse                                                                                                    :2_7:GoDeeper:
********** / |>>/recurse                                                                                                   :2_7:Other "acce:
|>>/recurse> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Other "access"
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                                      :2_7:Other "acce:
*********** / slMultiTerm                                                                                                 :2_7:Other "acce:
************ / someSL                                                                                                    :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

************ \ someSL has returned (["access"],0)                                                                       :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

*********** \ slMultiTerm has returned (["access"],0)                                                                    :3_6:UnDeeper:
*********** > |>>/base got ["access"]                                                                                    :3_6:UnDeeper:
|>>/base> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
|>>/base> MATCH (COK): Other "access"
|>>/base> VALUE: ((["access"],0),[])

********** \ |>>/base has returned (["access"],0)                                                                         :3_6:UnDeeper:
|>>/recurse> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "access"
|>>/recurse> VALUE: ((["access"],1),[])

********* \ |>>/recurse has returned (["access"],1)                                                                        :3_6:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Other "access"
|>>/recurse> VALUE: ((["access"],2),[])

******** \ |>>/recurse has returned (["access"],2)                                                                          :3_6:UnDeeper:
******** > aNLK: current depth is 3                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["access"]                                                                                :3_6:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper GoDeeper GoDeeper Other "access <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper GoDeeper GoDeeper Other "access <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 2 but the cursor seems to be placed such that we have 3; a different backtrack will probably fare better

******* > /*= lookAhead failed, delegating to plain /+=                                                                  :2_5:GoDeeper:
******* / aboveNextLineKeyword                                                                                             :2_6:GoDeeper:
******** / expectUnDeepers                                                                                                :2_6:GoDeeper:
********* / pNumAsText                                                                                                   :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* > ignoring ["GD","GD","access"]                                                                                  :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                                 :2_6:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                                :2_6:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                              :2_6:GoDeeper:
******** / $*|                                                                                                            :2_6:GoDeeper:
$*|> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                        :2_6:GoDeeper:
******** > ->| success                                                                                                      :2_7:GoDeeper:
******** / |>>/recurse                                                                                                      :2_7:GoDeeper:
********* / |>>/recurse                                                                                                     :2_7:Other "acce:
|>>/recurse> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Other "access"
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                                        :2_7:Other "acce:
********** / slMultiTerm                                                                                                   :2_7:Other "acce:
*********** / someSL                                                                                                      :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

*********** \ someSL has returned (["access"],0)                                                                         :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

********** \ slMultiTerm has returned (["access"],0)                                                                      :3_6:UnDeeper:
********** > |>>/base got ["access"]                                                                                      :3_6:UnDeeper:
|>>/base> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
|>>/base> MATCH (COK): Other "access"
|>>/base> VALUE: ((["access"],0),[])

********* \ |>>/base has returned (["access"],0)                                                                           :3_6:UnDeeper:
|>>/recurse> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (COK): GoDeeper Other "access"
|>>/recurse> VALUE: ((["access"],1),[])

******** \ |>>/recurse has returned (["access"],1)                                                                          :3_6:UnDeeper:
******** > aNLK: current depth is 2                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["access"]                                                                                :3_6:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
aboveNextLineKeyword> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
aboveNextLineKeyword> VALUE: (((["access"],Or),0),[])

******* \ aboveNextLineKeyword has returned ((["access"],Or),0)                                                            :3_6:GoDeeper:
******* > /*= lookAhead succeeded, recursing greedily                                                                      :2_6:GoDeeper:
******* / aboveNextLineKeyword                                                                                               :2_7:GoDeeper:
******** / expectUnDeepers                                                                                                  :2_7:GoDeeper:
********* / pNumAsText                                                                                                     :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

********* > ignoring ["GD","access"]                                                                                       :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                                   :2_7:GoDeeper:
******** > aNLK: determined undp_count = 2                                                                                  :2_7:GoDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                                :2_7:GoDeeper:
******** / $*|                                                                                                              :2_7:GoDeeper:
$*|> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                          :2_7:GoDeeper:
******** > ->| success                                                                                                       :2_7:Other "acce:
******** / |>>/recurse                                                                                                       :2_7:Other "acce:
|>>/recurse> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Other "access"
|>>/recurse> expecting GoDeeper

******** / |>>/base                                                                                                          :2_7:Other "acce:
********* / slMultiTerm                                                                                                     :2_7:Other "acce:
********** / someSL                                                                                                        :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

********** \ someSL has returned (["access"],0)                                                                           :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

********* \ slMultiTerm has returned (["access"],0)                                                                        :3_6:UnDeeper:
********* > |>>/base got ["access"]                                                                                        :3_6:UnDeeper:
|>>/base> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
|>>/base> MATCH (COK): Other "access"
|>>/base> VALUE: ((["access"],0),[])

******** \ |>>/base has returned (["access"],0)                                                                             :3_6:UnDeeper:
******** > aNLK: current depth is 1                                                                                         :3_6:UnDeeper:
******** > |<|                                                                                                              :3_6:UnDeeper:
******** > |<* starting                                                                                                     :3_6:UnDeeper:
******** / |<*/parent                                                                                                       :3_6:UnDeeper:
********* > |<*/recurse                                                                                                    :3_6:UnDeeper:
********* > |<*/recurse matched 2 UnDeepers                                                                              :3_6:GoDeeper:
|<*/parent> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper Or
|<*/parent> VALUE: ((Or,-2),[])

******** \ |<*/parent has returned (Or,-2)                                                                                :3_6:GoDeeper:
******** > aNLK: slMultiTerm is ["access"]                                                                                :3_6:GoDeeper:
aboveNextLineKeyword> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "access" UnDeeper UnDeepe <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> aNLK: expecting depth 2 but the cursor seems to be placed such that we have 1; a different backtrack will probably fare better

******* > /*= lookAhead failed, delegating to plain /+=                                                                      :2_7:GoDeeper:
******* / aboveNextLineKeyword                                                                                                :2_7:Other "acce:
******** / expectUnDeepers                                                                                                   :2_7:Other "acce:
********* > ignoring ["access"]                                                                                            :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                                    :2_7:Other "acce:
******** > aNLK: determined undp_count = 2                                                                                   :2_7:Other "acce:
******** > ->| trying to consume 1 GoDeepers                                                                                 :2_7:Other "acce:
******** / $*|                                                                                                               :2_7:Other "acce:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                           :2_7:Other "acce:
aboveNextLineKeyword> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=10:
aboveNextLineKeyword> unexpected Other "access"
aboveNextLineKeyword> expecting GoDeeper

******* > /*= lookAhead failed, delegating to plain /+=                                                                       :2_7:Other "acce:
******* / aboveNextLineKeyword                                                                                               :3_6:UnDeeper:
******** / expectUnDeepers                                                                                                  :3_6:UnDeeper:
********* > ignoring []                                                                                                    :3_6:UnDeeper:
********* > matched undeepers [UnDeeper,UnDeeper]                                                                       :3_5:Or:
expectUnDeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

******** \ expectUnDeepers has returned 2                                                                                   :3_6:UnDeeper:
******** > aNLK: determined undp_count = 2                                                                                  :3_6:UnDeeper:
******** > ->| trying to consume 1 GoDeepers                                                                                :3_6:UnDeeper:
******** / $*|                                                                                                              :3_6:UnDeeper:
$*|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

******** \ $*| has returned ((),0)                                                                                          :3_6:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

******* > /*= lookAhead failed, delegating to plain /+=                                                                      :3_6:UnDeeper:
******* > /*= lookAhead succeeded, greedy recursion failed (no p1); returning p2.                                          :2_6:GoDeeper:
pre part> IN: GoDeeper Other "any" GoDeeper Other "una <…>
pre part> MATCH (COK): GoDeeper Other "any" GoDeeper Other "una <…>
pre part> VALUE: ((["any","unauthorised"],4),[])

****** \ pre part has returned (["any","unauthorised"],4)                                                                   :2_6:GoDeeper:
$*|> IN: GoDeeper Other "any" GoDeeper Other "una <…>
$*|> MATCH (COK): GoDeeper Other "any" GoDeeper Other "una <…>
$*|> VALUE: ((["any","unauthorised"],4),[])

***** \ $*| has returned (["any","unauthorised"],4)                                                                          :2_6:GoDeeper:
***** / made it to inner base parser                                                                                         :2_6:GoDeeper:
****** / ppp inner                                                                                                          :2_6:GoDeeper:
******* / expression                                                                                                       :2_6:GoDeeper:
******** / labelPrefix                                                                                                    :2_6:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=8:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******** / term p                                                                                                         :2_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :2_6:GoDeeper:
********** / $*|                                                                                                        :2_6:GoDeeper:
*********** / someSL                                                                                                   :2_6:GoDeeper:
************ / pNumAsText                                                                                             :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=8:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********* / term p/b:label to the left of line below, with EOL                                                           :2_6:GoDeeper:
********** / someSL                                                                                                     :2_6:GoDeeper:
*********** / pNumAsText                                                                                               :2_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=8:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********* / term p/notLabelTerm                                                                                          :2_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :2_6:GoDeeper:
*********** / someIndentation                                                                                          :2_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :2_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :2_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :2_7:GoDeeper:
************* / expression                                                                                             :2_7:GoDeeper:
************** / labelPrefix                                                                                          :2_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                               :2_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :2_7:GoDeeper:
**************** / $*|                                                                                              :2_7:GoDeeper:
***************** / someSL                                                                                         :2_7:GoDeeper:
****************** / pNumAsText                                                                                   :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=9:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

*************** / term p/b:label to the left of line below, with EOL                                                 :2_7:GoDeeper:
**************** / someSL                                                                                           :2_7:GoDeeper:
***************** / pNumAsText                                                                                     :2_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=9:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

*************** / term p/notLabelTerm                                                                                :2_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :2_7:GoDeeper:
***************** / someIndentation                                                                                :2_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :2_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :2_7:Other "acce:
****************** / manyIndentation/leaf?                                                                         :2_7:Other "acce:
******************* / expression                                                                                  :2_7:Other "acce:
******************** / labelPrefix                                                                               :2_7:Other "acce:
labelPrefix> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected UnDeeper

******************** / term p                                                                                    :2_7:Other "acce:
********************* / term p/1a:label directly above                                                          :2_7:Other "acce:
********************** / $*|                                                                                   :2_7:Other "acce:
*********************** / someSL                                                                              :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

*********************** \ someSL has returned (["access"],0)                                                 :3_6:UnDeeper:
*********************** / pNumAsText                                                                         :3_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (CERR): Other "access"
$*|> ERROR:
$*|> offset=11:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/1a:label directly above> MATCH (CERR): Other "access"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=11:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************* / term p/b:label to the left of line below, with EOL                                      :2_7:Other "acce:
********************** / someSL                                                                                :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

********************** \ someSL has returned (["access"],0)                                                   :3_6:UnDeeper:
********************** / undeepers                                                                            :3_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :3_6:UnDeeper:
*********************** > sameLine: success!                                                                 :3_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :3_6:UnDeeper:
********************** / matching EOL                                                                         :3_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=11:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "access"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=11:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************* / term p/notLabelTerm                                                                     :2_7:Other "acce:
********************** / term p/2:someIndentation expr p                                                       :2_7:Other "acce:
*********************** / someIndentation                                                                     :2_7:Other "acce:
************************ / myindented: consuming GoDeeper                                                    :2_7:Other "acce:
myindented: consuming GoDeeper> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=10:
myindented: consuming GoDeeper> unexpected Other "access"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected Other "access"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected Other "access"
term p/2:someIndentation expr p> expecting GoDeeper

********************** / term p/3:plain p                                                                      :2_7:Other "acce:
*********************** / pRelPred                                                                            :2_7:Other "acce:
************************ / slRelPred                                                                         :2_7:Other "acce:
************************* / nested simpleHorn                                                               :2_7:Other "acce:
************************** > |^|                                                                           :2_7:Other "acce:
************************** / $*|                                                                           :2_7:Other "acce:
*************************** / slMultiTerm                                                                 :2_7:Other "acce:
**************************** / someSL                                                                    :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

**************************** \ someSL has returned (["access"],0)                                       :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

*************************** \ slMultiTerm has returned (["access"],0)                                    :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

************************** \ $*| has returned (["access"],0)                                              :3_6:UnDeeper:
************************** / |^| deeps                                                                    :3_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :3_5:Or:
nested simpleHorn> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
nested simpleHorn> MATCH (CERR): Other "access" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************* / RPConstraint                                                                    :2_7:Other "acce:
************************** / $*|                                                                           :2_7:Other "acce:
*************************** / slMultiTerm                                                                 :2_7:Other "acce:
**************************** / someSL                                                                    :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

**************************** \ someSL has returned (["access"],0)                                       :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

*************************** \ slMultiTerm has returned (["access"],0)                                    :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

************************** \ $*| has returned (["access"],0)                                              :3_6:UnDeeper:
************************** / |>| calling $>>                                                              :3_6:UnDeeper:
*************************** / |>>/recurse                                                                :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :3_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
RPConstraint> MATCH (CERR): Other "access"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPBoolStructR                                                                   :2_7:Other "acce:
************************** / $*|                                                                           :2_7:Other "acce:
*************************** / slMultiTerm                                                                 :2_7:Other "acce:
**************************** / someSL                                                                    :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

**************************** \ someSL has returned (["access"],0)                                       :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

*************************** \ slMultiTerm has returned (["access"],0)                                    :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

************************** \ $*| has returned (["access"],0)                                              :3_6:UnDeeper:
************************** / |>| calling $>>                                                              :3_6:UnDeeper:
*************************** / |>>/recurse                                                                :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :3_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
RPBoolStructR> MATCH (CERR): Other "access"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPMT                                                                            :2_7:Other "acce:
************************** / $*|                                                                           :2_7:Other "acce:
*************************** / slAKA                                                                       :2_7:Other "acce:
**************************** / $*|                                                                       :2_7:Other "acce:
***************************** / slAKA base                                                              :2_7:Other "acce:
****************************** / slMultiTerm                                                           :2_7:Other "acce:
******************************* / someSL                                                              :2_7:Other "acce:
someSL> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
someSL> MATCH (COK): Other "access"
someSL> VALUE: ((["access"],0),[])

******************************* \ someSL has returned (["access"],0)                                 :3_6:UnDeeper:
slMultiTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slMultiTerm> MATCH (COK): Other "access"
slMultiTerm> VALUE: ((["access"],0),[])

****************************** \ slMultiTerm has returned (["access"],0)                              :3_6:UnDeeper:
slAKA base> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slAKA base> MATCH (COK): Other "access"
slAKA base> VALUE: ((["access"],0),[])

***************************** \ slAKA base has returned (["access"],0)                                 :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

**************************** \ $*| has returned (["access"],0)                                          :3_6:UnDeeper:
**************************** / |>>/recurse                                                              :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :3_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :3_6:UnDeeper:
****************************** / |?| optional something                                               :3_6:UnDeeper:
******************************* / |>>/recurse                                                        :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :3_6:UnDeeper:
******************************** / PAKA/akapart                                                     :3_6:UnDeeper:
********************************* / $>|                                                            :3_6:UnDeeper:
********************************** / Aka Token                                                    :3_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :3_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :3_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :3_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :3_6:UnDeeper:
**************************** / |>>/recurse                                                              :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :3_6:UnDeeper:
***************************** / slAKA optional typically                                               :3_6:UnDeeper:
****************************** / |?| optional something                                               :3_6:UnDeeper:
******************************* / |>>/recurse                                                        :3_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :3_6:UnDeeper:
******************************** / typically                                                        :3_6:UnDeeper:
********************************* / $>|                                                            :3_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=11:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :3_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :3_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :3_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :3_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :3_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :3_6:UnDeeper:
slAKA> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slAKA> MATCH (COK): Other "access"
slAKA> VALUE: ((["access"],0),[])

*************************** \ slAKA has returned (["access"],0)                                          :3_6:UnDeeper:
$*|> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
$*|> MATCH (COK): Other "access"
$*|> VALUE: ((["access"],0),[])

************************** \ $*| has returned (["access"],0)                                              :3_6:UnDeeper:
RPMT> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
RPMT> MATCH (COK): Other "access"
RPMT> VALUE: ((RPMT ["access"],0),[])

************************* \ RPMT has returned (RPMT ["access"],0)                                          :3_6:UnDeeper:
slRelPred> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
slRelPred> MATCH (COK): Other "access"
slRelPred> VALUE: ((RPMT ["access"],0),[])

************************ \ slRelPred has returned (RPMT ["access"],0)                                       :3_6:UnDeeper:
************************ / undeepers                                                                        :3_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :3_6:UnDeeper:
************************* > sameLine: success!                                                             :3_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :3_6:UnDeeper:
pRelPred> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
pRelPred> MATCH (COK): Other "access"
pRelPred> VALUE: (RPMT ["access"],[])

*********************** \ pRelPred has returned RPMT ["access"]                                              :3_6:UnDeeper:
term p/3:plain p> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/3:plain p> MATCH (COK): Other "access"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["access"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["access"])                               :3_6:UnDeeper:
term p/notLabelTerm> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p/notLabelTerm> MATCH (COK): Other "access"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["access"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["access"])                              :3_6:UnDeeper:
term p> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
term p> MATCH (COK): Other "access"
term p> VALUE: (MyLeaf (RPMT ["access"]),[])

******************** \ term p has returned MyLeaf (RPMT ["access"])                                             :3_6:UnDeeper:
******************** / binary(Or)                                                                               :3_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************** / binary(And)                                                                              :3_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************** / binary(SetLess)                                                                          :3_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************** / binary(SetPlus)                                                                          :3_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
expression> MATCH (COK): Other "access"
expression> VALUE: (MyLeaf (RPMT ["access"]),[])

******************* \ expression has returned MyLeaf (RPMT ["access"])                                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: Other "access" UnDeeper UnDeeper Or GoDe <…>
manyIndentation/leaf?> MATCH (COK): Other "access"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["access"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["access"])                                  :3_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :3_7:UnDeeper:
someIndentation> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "access" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["access"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["access"])                                            :3_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "access" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["access"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["access"])                              :3_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "access" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["access"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["access"])                                            :3_7:UnDeeper:
term p> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "access" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["access"]),[])

************** \ term p has returned MyLeaf (RPMT ["access"])                                                           :3_7:UnDeeper:
************** / binary(Or)                                                                                             :3_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************** / binary(And)                                                                                            :3_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************** / binary(SetLess)                                                                                        :3_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************** / binary(SetPlus)                                                                                        :3_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
expression> MATCH (COK): GoDeeper Other "access" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["access"]),[])

************* \ expression has returned MyLeaf (RPMT ["access"])                                                         :3_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "access" UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "access" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["access"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["access"])                                                :3_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :3_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "use <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :3_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
someIndentation> VALUE: (MyLeaf (RPMT ["access"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["access"])                                                   :3_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["access"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["access"])                                     :3_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["access"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["access"])                                                   :3_5:Or:
term p> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
term p> VALUE: (MyLeaf (RPMT ["access"]),[])

******** \ term p has returned MyLeaf (RPMT ["access"])                                                                  :3_5:Or:
******** / binary(Or)                                                                                                    :3_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "use" UnDeepe <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :3_6:GoDeeper:
******** / term p                                                                                                         :3_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :3_6:GoDeeper:
********** / $*|                                                                                                        :3_6:GoDeeper:
*********** / someSL                                                                                                   :3_6:GoDeeper:
************ / pNumAsText                                                                                             :3_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=14:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********* / term p/b:label to the left of line below, with EOL                                                           :3_6:GoDeeper:
********** / someSL                                                                                                     :3_6:GoDeeper:
*********** / pNumAsText                                                                                               :3_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=14:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********* / term p/notLabelTerm                                                                                          :3_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :3_6:GoDeeper:
*********** / someIndentation                                                                                          :3_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :3_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :3_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :3_7:GoDeeper:
************* / expression                                                                                             :3_7:GoDeeper:
************** / labelPrefix                                                                                          :3_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                               :3_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :3_7:GoDeeper:
**************** / $*|                                                                                              :3_7:GoDeeper:
***************** / someSL                                                                                         :3_7:GoDeeper:
****************** / pNumAsText                                                                                   :3_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=15:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

*************** / term p/b:label to the left of line below, with EOL                                                 :3_7:GoDeeper:
**************** / someSL                                                                                           :3_7:GoDeeper:
***************** / pNumAsText                                                                                     :3_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=15:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

*************** / term p/notLabelTerm                                                                                :3_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :3_7:GoDeeper:
***************** / someIndentation                                                                                :3_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :3_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :3_7:Other "use":
****************** / manyIndentation/leaf?                                                                         :3_7:Other "use":
******************* / expression                                                                                  :3_7:Other "use":
******************** / labelPrefix                                                                               :3_7:Other "use":
labelPrefix> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

******************** / term p                                                                                    :3_7:Other "use":
********************* / term p/1a:label directly above                                                          :3_7:Other "use":
********************** / $*|                                                                                   :3_7:Other "use":
*********************** / someSL                                                                              :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

*********************** \ someSL has returned (["use"],0)                                                    :4_6:UnDeeper:
*********************** / pNumAsText                                                                         :4_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (CERR): Other "use"
$*|> ERROR:
$*|> offset=17:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "use"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=17:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************* / term p/b:label to the left of line below, with EOL                                      :3_7:Other "use":
********************** / someSL                                                                                :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

********************** \ someSL has returned (["use"],0)                                                      :4_6:UnDeeper:
********************** / undeepers                                                                            :4_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :4_6:UnDeeper:
*********************** > sameLine: success!                                                                 :4_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :4_6:UnDeeper:
********************** / matching EOL                                                                         :4_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=17:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "use"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=17:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************* / term p/notLabelTerm                                                                     :3_7:Other "use":
********************** / term p/2:someIndentation expr p                                                       :3_7:Other "use":
*********************** / someIndentation                                                                     :3_7:Other "use":
************************ / myindented: consuming GoDeeper                                                    :3_7:Other "use":
myindented: consuming GoDeeper> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "use"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "use"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "use"
term p/2:someIndentation expr p> expecting GoDeeper

********************** / term p/3:plain p                                                                      :3_7:Other "use":
*********************** / pRelPred                                                                            :3_7:Other "use":
************************ / slRelPred                                                                         :3_7:Other "use":
************************* / nested simpleHorn                                                               :3_7:Other "use":
************************** > |^|                                                                           :3_7:Other "use":
************************** / $*|                                                                           :3_7:Other "use":
*************************** / slMultiTerm                                                                 :3_7:Other "use":
**************************** / someSL                                                                    :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

**************************** \ someSL has returned (["use"],0)                                          :4_6:UnDeeper:
slMultiTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slMultiTerm> MATCH (COK): Other "use"
slMultiTerm> VALUE: ((["use"],0),[])

*************************** \ slMultiTerm has returned (["use"],0)                                       :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

************************** \ $*| has returned (["use"],0)                                                 :4_6:UnDeeper:
************************** / |^| deeps                                                                    :4_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :4_5:Or:
nested simpleHorn> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
nested simpleHorn> MATCH (CERR): Other "use" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************* / RPConstraint                                                                    :3_7:Other "use":
************************** / $*|                                                                           :3_7:Other "use":
*************************** / slMultiTerm                                                                 :3_7:Other "use":
**************************** / someSL                                                                    :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

**************************** \ someSL has returned (["use"],0)                                          :4_6:UnDeeper:
slMultiTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slMultiTerm> MATCH (COK): Other "use"
slMultiTerm> VALUE: ((["use"],0),[])

*************************** \ slMultiTerm has returned (["use"],0)                                       :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

************************** \ $*| has returned (["use"],0)                                                 :4_6:UnDeeper:
************************** / |>| calling $>>                                                              :4_6:UnDeeper:
*************************** / |>>/recurse                                                                :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :4_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
RPConstraint> MATCH (CERR): Other "use"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPBoolStructR                                                                   :3_7:Other "use":
************************** / $*|                                                                           :3_7:Other "use":
*************************** / slMultiTerm                                                                 :3_7:Other "use":
**************************** / someSL                                                                    :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

**************************** \ someSL has returned (["use"],0)                                          :4_6:UnDeeper:
slMultiTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slMultiTerm> MATCH (COK): Other "use"
slMultiTerm> VALUE: ((["use"],0),[])

*************************** \ slMultiTerm has returned (["use"],0)                                       :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

************************** \ $*| has returned (["use"],0)                                                 :4_6:UnDeeper:
************************** / |>| calling $>>                                                              :4_6:UnDeeper:
*************************** / |>>/recurse                                                                :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :4_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
RPBoolStructR> MATCH (CERR): Other "use"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPMT                                                                            :3_7:Other "use":
************************** / $*|                                                                           :3_7:Other "use":
*************************** / slAKA                                                                       :3_7:Other "use":
**************************** / $*|                                                                       :3_7:Other "use":
***************************** / slAKA base                                                              :3_7:Other "use":
****************************** / slMultiTerm                                                           :3_7:Other "use":
******************************* / someSL                                                              :3_7:Other "use":
someSL> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
someSL> MATCH (COK): Other "use"
someSL> VALUE: ((["use"],0),[])

******************************* \ someSL has returned (["use"],0)                                    :4_6:UnDeeper:
slMultiTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slMultiTerm> MATCH (COK): Other "use"
slMultiTerm> VALUE: ((["use"],0),[])

****************************** \ slMultiTerm has returned (["use"],0)                                 :4_6:UnDeeper:
slAKA base> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slAKA base> MATCH (COK): Other "use"
slAKA base> VALUE: ((["use"],0),[])

***************************** \ slAKA base has returned (["use"],0)                                    :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

**************************** \ $*| has returned (["use"],0)                                             :4_6:UnDeeper:
**************************** / |>>/recurse                                                              :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :4_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :4_6:UnDeeper:
****************************** / |?| optional something                                               :4_6:UnDeeper:
******************************* / |>>/recurse                                                        :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :4_6:UnDeeper:
******************************** / PAKA/akapart                                                     :4_6:UnDeeper:
********************************* / $>|                                                            :4_6:UnDeeper:
********************************** / Aka Token                                                    :4_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :4_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :4_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :4_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :4_6:UnDeeper:
**************************** / |>>/recurse                                                              :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :4_6:UnDeeper:
***************************** / slAKA optional typically                                               :4_6:UnDeeper:
****************************** / |?| optional something                                               :4_6:UnDeeper:
******************************* / |>>/recurse                                                        :4_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :4_6:UnDeeper:
******************************** / typically                                                        :4_6:UnDeeper:
********************************* / $>|                                                            :4_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :4_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :4_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :4_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :4_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :4_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :4_6:UnDeeper:
slAKA> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slAKA> MATCH (COK): Other "use"
slAKA> VALUE: ((["use"],0),[])

*************************** \ slAKA has returned (["use"],0)                                             :4_6:UnDeeper:
$*|> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
$*|> MATCH (COK): Other "use"
$*|> VALUE: ((["use"],0),[])

************************** \ $*| has returned (["use"],0)                                                 :4_6:UnDeeper:
RPMT> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
RPMT> MATCH (COK): Other "use"
RPMT> VALUE: ((RPMT ["use"],0),[])

************************* \ RPMT has returned (RPMT ["use"],0)                                             :4_6:UnDeeper:
slRelPred> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
slRelPred> MATCH (COK): Other "use"
slRelPred> VALUE: ((RPMT ["use"],0),[])

************************ \ slRelPred has returned (RPMT ["use"],0)                                          :4_6:UnDeeper:
************************ / undeepers                                                                        :4_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :4_6:UnDeeper:
************************* > sameLine: success!                                                             :4_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :4_6:UnDeeper:
pRelPred> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
pRelPred> MATCH (COK): Other "use"
pRelPred> VALUE: (RPMT ["use"],[])

*********************** \ pRelPred has returned RPMT ["use"]                                                 :4_6:UnDeeper:
term p/3:plain p> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/3:plain p> MATCH (COK): Other "use"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["use"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["use"])                                  :4_6:UnDeeper:
term p/notLabelTerm> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "use"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["use"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["use"])                                 :4_6:UnDeeper:
term p> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
term p> MATCH (COK): Other "use"
term p> VALUE: (MyLeaf (RPMT ["use"]),[])

******************** \ term p has returned MyLeaf (RPMT ["use"])                                                :4_6:UnDeeper:
******************** / binary(Or)                                                                               :4_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************** / binary(And)                                                                              :4_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************** / binary(SetLess)                                                                          :4_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************** / binary(SetPlus)                                                                          :4_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
expression> MATCH (COK): Other "use"
expression> VALUE: (MyLeaf (RPMT ["use"]),[])

******************* \ expression has returned MyLeaf (RPMT ["use"])                                              :4_6:UnDeeper:
manyIndentation/leaf?> IN: Other "use" UnDeeper UnDeeper Or GoDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "use"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["use"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["use"])                                     :4_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :4_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :4_7:UnDeeper:
someIndentation> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
someIndentation> MATCH (COK): GoDeeper Other "use" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["use"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["use"])                                               :4_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "use" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["use"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["use"])                                 :4_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "use" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["use"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["use"])                                               :4_7:UnDeeper:
term p> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
term p> MATCH (COK): GoDeeper Other "use" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["use"]),[])

************** \ term p has returned MyLeaf (RPMT ["use"])                                                              :4_7:UnDeeper:
************** / binary(Or)                                                                                             :4_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************** / binary(And)                                                                                            :4_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************** / binary(SetLess)                                                                                        :4_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************** / binary(SetPlus)                                                                                        :4_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
expression> MATCH (COK): GoDeeper Other "use" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["use"]),[])

************* \ expression has returned MyLeaf (RPMT ["use"])                                                            :4_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "use" UnDeeper UnDeeper O <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "use" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["use"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["use"])                                                   :4_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :4_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :4_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "use" UnDeeper U <…>
someIndentation> VALUE: (MyLeaf (RPMT ["use"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["use"])                                                      :4_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["use"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["use"])                                        :4_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["use"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["use"])                                                      :4_5:Or:
term p> IN: GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "use" UnDeeper U <…>
term p> VALUE: (MyLeaf (RPMT ["use"]),[])

******** \ term p has returned MyLeaf (RPMT ["use"])                                                                     :4_5:Or:
******** / binary(Or)                                                                                                    :4_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "disclosure"  <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :4_6:GoDeeper:
******** / term p                                                                                                         :4_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :4_6:GoDeeper:
********** / $*|                                                                                                        :4_6:GoDeeper:
*********** / someSL                                                                                                   :4_6:GoDeeper:
************ / pNumAsText                                                                                             :4_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=20:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********* / term p/b:label to the left of line below, with EOL                                                           :4_6:GoDeeper:
********** / someSL                                                                                                     :4_6:GoDeeper:
*********** / pNumAsText                                                                                               :4_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=20:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********* / term p/notLabelTerm                                                                                          :4_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :4_6:GoDeeper:
*********** / someIndentation                                                                                          :4_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :4_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :4_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :4_7:GoDeeper:
************* / expression                                                                                             :4_7:GoDeeper:
************** / labelPrefix                                                                                          :4_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=21:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                               :4_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :4_7:GoDeeper:
**************** / $*|                                                                                              :4_7:GoDeeper:
***************** / someSL                                                                                         :4_7:GoDeeper:
****************** / pNumAsText                                                                                   :4_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=21:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

*************** / term p/b:label to the left of line below, with EOL                                                 :4_7:GoDeeper:
**************** / someSL                                                                                           :4_7:GoDeeper:
***************** / pNumAsText                                                                                     :4_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=21:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

*************** / term p/notLabelTerm                                                                                :4_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :4_7:GoDeeper:
***************** / someIndentation                                                                                :4_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :4_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :4_7:Other "disc:
****************** / manyIndentation/leaf?                                                                         :4_7:Other "disc:
******************* / expression                                                                                  :4_7:Other "disc:
******************** / labelPrefix                                                                               :4_7:Other "disc:
labelPrefix> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected UnDeeper

******************** / term p                                                                                    :4_7:Other "disc:
********************* / term p/1a:label directly above                                                          :4_7:Other "disc:
********************** / $*|                                                                                   :4_7:Other "disc:
*********************** / someSL                                                                              :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

*********************** \ someSL has returned (["disclosure"],0)                                             :5_6:UnDeeper:
*********************** / pNumAsText                                                                         :5_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (CERR): Other "disclosure"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/1a:label directly above> MATCH (CERR): Other "disclosure"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=23:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************* / term p/b:label to the left of line below, with EOL                                      :4_7:Other "disc:
********************** / someSL                                                                                :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

********************** \ someSL has returned (["disclosure"],0)                                               :5_6:UnDeeper:
********************** / undeepers                                                                            :5_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :5_6:UnDeeper:
*********************** > sameLine: success!                                                                 :5_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :5_6:UnDeeper:
********************** / matching EOL                                                                         :5_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "disclosure"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=23:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************* / term p/notLabelTerm                                                                     :4_7:Other "disc:
********************** / term p/2:someIndentation expr p                                                       :4_7:Other "disc:
*********************** / someIndentation                                                                     :4_7:Other "disc:
************************ / myindented: consuming GoDeeper                                                    :4_7:Other "disc:
myindented: consuming GoDeeper> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected Other "disclosure"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected Other "disclosure"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected Other "disclosure"
term p/2:someIndentation expr p> expecting GoDeeper

********************** / term p/3:plain p                                                                      :4_7:Other "disc:
*********************** / pRelPred                                                                            :4_7:Other "disc:
************************ / slRelPred                                                                         :4_7:Other "disc:
************************* / nested simpleHorn                                                               :4_7:Other "disc:
************************** > |^|                                                                           :4_7:Other "disc:
************************** / $*|                                                                           :4_7:Other "disc:
*************************** / slMultiTerm                                                                 :4_7:Other "disc:
**************************** / someSL                                                                    :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

**************************** \ someSL has returned (["disclosure"],0)                                   :5_6:UnDeeper:
slMultiTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slMultiTerm> MATCH (COK): Other "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

*************************** \ slMultiTerm has returned (["disclosure"],0)                                :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************** \ $*| has returned (["disclosure"],0)                                          :5_6:UnDeeper:
************************** / |^| deeps                                                                    :5_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :5_5:Or:
nested simpleHorn> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
nested simpleHorn> MATCH (CERR): Other "disclosure" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************* / RPConstraint                                                                    :4_7:Other "disc:
************************** / $*|                                                                           :4_7:Other "disc:
*************************** / slMultiTerm                                                                 :4_7:Other "disc:
**************************** / someSL                                                                    :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

**************************** \ someSL has returned (["disclosure"],0)                                   :5_6:UnDeeper:
slMultiTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slMultiTerm> MATCH (COK): Other "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

*************************** \ slMultiTerm has returned (["disclosure"],0)                                :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************** \ $*| has returned (["disclosure"],0)                                          :5_6:UnDeeper:
************************** / |>| calling $>>                                                              :5_6:UnDeeper:
*************************** / |>>/recurse                                                                :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :5_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
RPConstraint> MATCH (CERR): Other "disclosure"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPBoolStructR                                                                   :4_7:Other "disc:
************************** / $*|                                                                           :4_7:Other "disc:
*************************** / slMultiTerm                                                                 :4_7:Other "disc:
**************************** / someSL                                                                    :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

**************************** \ someSL has returned (["disclosure"],0)                                   :5_6:UnDeeper:
slMultiTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slMultiTerm> MATCH (COK): Other "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

*************************** \ slMultiTerm has returned (["disclosure"],0)                                :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************** \ $*| has returned (["disclosure"],0)                                          :5_6:UnDeeper:
************************** / |>| calling $>>                                                              :5_6:UnDeeper:
*************************** / |>>/recurse                                                                :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :5_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
RPBoolStructR> MATCH (CERR): Other "disclosure"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPMT                                                                            :4_7:Other "disc:
************************** / $*|                                                                           :4_7:Other "disc:
*************************** / slAKA                                                                       :4_7:Other "disc:
**************************** / $*|                                                                       :4_7:Other "disc:
***************************** / slAKA base                                                              :4_7:Other "disc:
****************************** / slMultiTerm                                                           :4_7:Other "disc:
******************************* / someSL                                                              :4_7:Other "disc:
someSL> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
someSL> MATCH (COK): Other "disclosure"
someSL> VALUE: ((["disclosure"],0),[])

******************************* \ someSL has returned (["disclosure"],0)                             :5_6:UnDeeper:
slMultiTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slMultiTerm> MATCH (COK): Other "disclosure"
slMultiTerm> VALUE: ((["disclosure"],0),[])

****************************** \ slMultiTerm has returned (["disclosure"],0)                          :5_6:UnDeeper:
slAKA base> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slAKA base> MATCH (COK): Other "disclosure"
slAKA base> VALUE: ((["disclosure"],0),[])

***************************** \ slAKA base has returned (["disclosure"],0)                             :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

**************************** \ $*| has returned (["disclosure"],0)                                      :5_6:UnDeeper:
**************************** / |>>/recurse                                                              :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :5_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :5_6:UnDeeper:
****************************** / |?| optional something                                               :5_6:UnDeeper:
******************************* / |>>/recurse                                                        :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :5_6:UnDeeper:
******************************** / PAKA/akapart                                                     :5_6:UnDeeper:
********************************* / $>|                                                            :5_6:UnDeeper:
********************************** / Aka Token                                                    :5_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :5_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :5_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :5_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :5_6:UnDeeper:
**************************** / |>>/recurse                                                              :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :5_6:UnDeeper:
***************************** / slAKA optional typically                                               :5_6:UnDeeper:
****************************** / |?| optional something                                               :5_6:UnDeeper:
******************************* / |>>/recurse                                                        :5_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :5_6:UnDeeper:
******************************** / typically                                                        :5_6:UnDeeper:
********************************* / $>|                                                            :5_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :5_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :5_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :5_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :5_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :5_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :5_6:UnDeeper:
slAKA> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slAKA> MATCH (COK): Other "disclosure"
slAKA> VALUE: ((["disclosure"],0),[])

*************************** \ slAKA has returned (["disclosure"],0)                                      :5_6:UnDeeper:
$*|> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
$*|> MATCH (COK): Other "disclosure"
$*|> VALUE: ((["disclosure"],0),[])

************************** \ $*| has returned (["disclosure"],0)                                          :5_6:UnDeeper:
RPMT> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
RPMT> MATCH (COK): Other "disclosure"
RPMT> VALUE: ((RPMT ["disclosure"],0),[])

************************* \ RPMT has returned (RPMT ["disclosure"],0)                                      :5_6:UnDeeper:
slRelPred> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
slRelPred> MATCH (COK): Other "disclosure"
slRelPred> VALUE: ((RPMT ["disclosure"],0),[])

************************ \ slRelPred has returned (RPMT ["disclosure"],0)                                   :5_6:UnDeeper:
************************ / undeepers                                                                        :5_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :5_6:UnDeeper:
************************* > sameLine: success!                                                             :5_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :5_6:UnDeeper:
pRelPred> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
pRelPred> MATCH (COK): Other "disclosure"
pRelPred> VALUE: (RPMT ["disclosure"],[])

*********************** \ pRelPred has returned RPMT ["disclosure"]                                          :5_6:UnDeeper:
term p/3:plain p> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/3:plain p> MATCH (COK): Other "disclosure"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["disclosure"])                           :5_6:UnDeeper:
term p/notLabelTerm> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p/notLabelTerm> MATCH (COK): Other "disclosure"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disclosure"])                          :5_6:UnDeeper:
term p> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
term p> MATCH (COK): Other "disclosure"
term p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******************** \ term p has returned MyLeaf (RPMT ["disclosure"])                                         :5_6:UnDeeper:
******************** / binary(Or)                                                                               :5_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************** / binary(And)                                                                              :5_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************** / binary(SetLess)                                                                          :5_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************** / binary(SetPlus)                                                                          :5_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
expression> MATCH (COK): Other "disclosure"
expression> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******************* \ expression has returned MyLeaf (RPMT ["disclosure"])                                       :5_6:UnDeeper:
manyIndentation/leaf?> IN: Other "disclosure" UnDeeper UnDeeper Or  <…>
manyIndentation/leaf?> MATCH (COK): Other "disclosure"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disclosure"])                              :5_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :5_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :5_7:UnDeeper:
someIndentation> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
someIndentation> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["disclosure"])                                        :5_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disclosure"])                          :5_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["disclosure"])                                        :5_7:UnDeeper:
term p> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
term p> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

************** \ term p has returned MyLeaf (RPMT ["disclosure"])                                                       :5_7:UnDeeper:
************** / binary(Or)                                                                                             :5_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************** / binary(And)                                                                                            :5_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************** / binary(SetLess)                                                                                        :5_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************** / binary(SetPlus)                                                                                        :5_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
expression> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

************* \ expression has returned MyLeaf (RPMT ["disclosure"])                                                     :5_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "disclosure" UnDeeper UnD <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "disclosure" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disclosure"])                                            :5_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :5_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "cop <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :5_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "disclosure" UnD <…>
someIndentation> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["disclosure"])                                               :5_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disclosure"])                                 :5_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "disclosure" UnD <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disclosure"])                                               :5_5:Or:
term p> IN: GoDeeper GoDeeper Other "disclosure" UnD <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "disclosure" UnD <…>
term p> VALUE: (MyLeaf (RPMT ["disclosure"]),[])

******** \ term p has returned MyLeaf (RPMT ["disclosure"])                                                              :5_5:Or:
******** / binary(Or)                                                                                                    :5_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "copying" UnD <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :5_6:GoDeeper:
******** / term p                                                                                                         :5_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :5_6:GoDeeper:
********** / $*|                                                                                                        :5_6:GoDeeper:
*********** / someSL                                                                                                   :5_6:GoDeeper:
************ / pNumAsText                                                                                             :5_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=26:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********* / term p/b:label to the left of line below, with EOL                                                           :5_6:GoDeeper:
********** / someSL                                                                                                     :5_6:GoDeeper:
*********** / pNumAsText                                                                                               :5_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=26:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********* / term p/notLabelTerm                                                                                          :5_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :5_6:GoDeeper:
*********** / someIndentation                                                                                          :5_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :5_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :5_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :5_7:GoDeeper:
************* / expression                                                                                             :5_7:GoDeeper:
************** / labelPrefix                                                                                          :5_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                               :5_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :5_7:GoDeeper:
**************** / $*|                                                                                              :5_7:GoDeeper:
***************** / someSL                                                                                         :5_7:GoDeeper:
****************** / pNumAsText                                                                                   :5_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=27:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

*************** / term p/b:label to the left of line below, with EOL                                                 :5_7:GoDeeper:
**************** / someSL                                                                                           :5_7:GoDeeper:
***************** / pNumAsText                                                                                     :5_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=27:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

*************** / term p/notLabelTerm                                                                                :5_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :5_7:GoDeeper:
***************** / someIndentation                                                                                :5_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :5_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :5_7:Other "copy:
****************** / manyIndentation/leaf?                                                                         :5_7:Other "copy:
******************* / expression                                                                                  :5_7:Other "copy:
******************** / labelPrefix                                                                               :5_7:Other "copy:
labelPrefix> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected UnDeeper

******************** / term p                                                                                    :5_7:Other "copy:
********************* / term p/1a:label directly above                                                          :5_7:Other "copy:
********************** / $*|                                                                                   :5_7:Other "copy:
*********************** / someSL                                                                              :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

*********************** \ someSL has returned (["copying"],0)                                                :6_6:UnDeeper:
*********************** / pNumAsText                                                                         :6_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (CERR): Other "copying"
$*|> ERROR:
$*|> offset=29:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/1a:label directly above> MATCH (CERR): Other "copying"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=29:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************* / term p/b:label to the left of line below, with EOL                                      :5_7:Other "copy:
********************** / someSL                                                                                :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

********************** \ someSL has returned (["copying"],0)                                                  :6_6:UnDeeper:
********************** / undeepers                                                                            :6_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :6_6:UnDeeper:
*********************** > sameLine: success!                                                                 :6_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :6_6:UnDeeper:
********************** / matching EOL                                                                         :6_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=29:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "copying"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=29:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************* / term p/notLabelTerm                                                                     :5_7:Other "copy:
********************** / term p/2:someIndentation expr p                                                       :5_7:Other "copy:
*********************** / someIndentation                                                                     :5_7:Other "copy:
************************ / myindented: consuming GoDeeper                                                    :5_7:Other "copy:
myindented: consuming GoDeeper> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=28:
myindented: consuming GoDeeper> unexpected Other "copying"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected Other "copying"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected Other "copying"
term p/2:someIndentation expr p> expecting GoDeeper

********************** / term p/3:plain p                                                                      :5_7:Other "copy:
*********************** / pRelPred                                                                            :5_7:Other "copy:
************************ / slRelPred                                                                         :5_7:Other "copy:
************************* / nested simpleHorn                                                               :5_7:Other "copy:
************************** > |^|                                                                           :5_7:Other "copy:
************************** / $*|                                                                           :5_7:Other "copy:
*************************** / slMultiTerm                                                                 :5_7:Other "copy:
**************************** / someSL                                                                    :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

**************************** \ someSL has returned (["copying"],0)                                      :6_6:UnDeeper:
slMultiTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slMultiTerm> MATCH (COK): Other "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

*************************** \ slMultiTerm has returned (["copying"],0)                                   :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

************************** \ $*| has returned (["copying"],0)                                             :6_6:UnDeeper:
************************** / |^| deeps                                                                    :6_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :6_5:Or:
nested simpleHorn> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
nested simpleHorn> MATCH (CERR): Other "copying" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************* / RPConstraint                                                                    :5_7:Other "copy:
************************** / $*|                                                                           :5_7:Other "copy:
*************************** / slMultiTerm                                                                 :5_7:Other "copy:
**************************** / someSL                                                                    :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

**************************** \ someSL has returned (["copying"],0)                                      :6_6:UnDeeper:
slMultiTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slMultiTerm> MATCH (COK): Other "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

*************************** \ slMultiTerm has returned (["copying"],0)                                   :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

************************** \ $*| has returned (["copying"],0)                                             :6_6:UnDeeper:
************************** / |>| calling $>>                                                              :6_6:UnDeeper:
*************************** / |>>/recurse                                                                :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :6_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
RPConstraint> MATCH (CERR): Other "copying"
RPConstraint> ERROR:
RPConstraint> offset=29:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPBoolStructR                                                                   :5_7:Other "copy:
************************** / $*|                                                                           :5_7:Other "copy:
*************************** / slMultiTerm                                                                 :5_7:Other "copy:
**************************** / someSL                                                                    :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

**************************** \ someSL has returned (["copying"],0)                                      :6_6:UnDeeper:
slMultiTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slMultiTerm> MATCH (COK): Other "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

*************************** \ slMultiTerm has returned (["copying"],0)                                   :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

************************** \ $*| has returned (["copying"],0)                                             :6_6:UnDeeper:
************************** / |>| calling $>>                                                              :6_6:UnDeeper:
*************************** / |>>/recurse                                                                :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :6_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
RPBoolStructR> MATCH (CERR): Other "copying"
RPBoolStructR> ERROR:
RPBoolStructR> offset=29:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPMT                                                                            :5_7:Other "copy:
************************** / $*|                                                                           :5_7:Other "copy:
*************************** / slAKA                                                                       :5_7:Other "copy:
**************************** / $*|                                                                       :5_7:Other "copy:
***************************** / slAKA base                                                              :5_7:Other "copy:
****************************** / slMultiTerm                                                           :5_7:Other "copy:
******************************* / someSL                                                              :5_7:Other "copy:
someSL> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
someSL> MATCH (COK): Other "copying"
someSL> VALUE: ((["copying"],0),[])

******************************* \ someSL has returned (["copying"],0)                                :6_6:UnDeeper:
slMultiTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slMultiTerm> MATCH (COK): Other "copying"
slMultiTerm> VALUE: ((["copying"],0),[])

****************************** \ slMultiTerm has returned (["copying"],0)                             :6_6:UnDeeper:
slAKA base> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slAKA base> MATCH (COK): Other "copying"
slAKA base> VALUE: ((["copying"],0),[])

***************************** \ slAKA base has returned (["copying"],0)                                :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

**************************** \ $*| has returned (["copying"],0)                                         :6_6:UnDeeper:
**************************** / |>>/recurse                                                              :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :6_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :6_6:UnDeeper:
****************************** / |?| optional something                                               :6_6:UnDeeper:
******************************* / |>>/recurse                                                        :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :6_6:UnDeeper:
******************************** / PAKA/akapart                                                     :6_6:UnDeeper:
********************************* / $>|                                                            :6_6:UnDeeper:
********************************** / Aka Token                                                    :6_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=29:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=29:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :6_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :6_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :6_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :6_6:UnDeeper:
**************************** / |>>/recurse                                                              :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :6_6:UnDeeper:
***************************** / slAKA optional typically                                               :6_6:UnDeeper:
****************************** / |?| optional something                                               :6_6:UnDeeper:
******************************* / |>>/recurse                                                        :6_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :6_6:UnDeeper:
******************************** / typically                                                        :6_6:UnDeeper:
********************************* / $>|                                                            :6_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=29:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :6_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :6_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :6_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :6_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :6_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :6_6:UnDeeper:
slAKA> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slAKA> MATCH (COK): Other "copying"
slAKA> VALUE: ((["copying"],0),[])

*************************** \ slAKA has returned (["copying"],0)                                         :6_6:UnDeeper:
$*|> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
$*|> MATCH (COK): Other "copying"
$*|> VALUE: ((["copying"],0),[])

************************** \ $*| has returned (["copying"],0)                                             :6_6:UnDeeper:
RPMT> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
RPMT> MATCH (COK): Other "copying"
RPMT> VALUE: ((RPMT ["copying"],0),[])

************************* \ RPMT has returned (RPMT ["copying"],0)                                         :6_6:UnDeeper:
slRelPred> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
slRelPred> MATCH (COK): Other "copying"
slRelPred> VALUE: ((RPMT ["copying"],0),[])

************************ \ slRelPred has returned (RPMT ["copying"],0)                                      :6_6:UnDeeper:
************************ / undeepers                                                                        :6_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :6_6:UnDeeper:
************************* > sameLine: success!                                                             :6_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :6_6:UnDeeper:
pRelPred> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
pRelPred> MATCH (COK): Other "copying"
pRelPred> VALUE: (RPMT ["copying"],[])

*********************** \ pRelPred has returned RPMT ["copying"]                                             :6_6:UnDeeper:
term p/3:plain p> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/3:plain p> MATCH (COK): Other "copying"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["copying"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["copying"])                              :6_6:UnDeeper:
term p/notLabelTerm> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p/notLabelTerm> MATCH (COK): Other "copying"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["copying"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["copying"])                             :6_6:UnDeeper:
term p> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
term p> MATCH (COK): Other "copying"
term p> VALUE: (MyLeaf (RPMT ["copying"]),[])

******************** \ term p has returned MyLeaf (RPMT ["copying"])                                            :6_6:UnDeeper:
******************** / binary(Or)                                                                               :6_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=29:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************** / binary(And)                                                                              :6_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=29:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************** / binary(SetLess)                                                                          :6_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=29:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************** / binary(SetPlus)                                                                          :6_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=29:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
expression> MATCH (COK): Other "copying"
expression> VALUE: (MyLeaf (RPMT ["copying"]),[])

******************* \ expression has returned MyLeaf (RPMT ["copying"])                                          :6_6:UnDeeper:
manyIndentation/leaf?> IN: Other "copying" UnDeeper UnDeeper Or GoD <…>
manyIndentation/leaf?> MATCH (COK): Other "copying"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["copying"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["copying"])                                 :6_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :6_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :6_7:UnDeeper:
someIndentation> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
someIndentation> MATCH (COK): GoDeeper Other "copying" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["copying"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["copying"])                                           :6_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "copying" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["copying"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["copying"])                             :6_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "copying" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["copying"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["copying"])                                           :6_7:UnDeeper:
term p> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
term p> MATCH (COK): GoDeeper Other "copying" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["copying"]),[])

************** \ term p has returned MyLeaf (RPMT ["copying"])                                                          :6_7:UnDeeper:
************** / binary(Or)                                                                                             :6_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************** / binary(And)                                                                                            :6_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************** / binary(SetLess)                                                                                        :6_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************** / binary(SetPlus)                                                                                        :6_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
expression> MATCH (COK): GoDeeper Other "copying" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["copying"]),[])

************* \ expression has returned MyLeaf (RPMT ["copying"])                                                        :6_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "copying" UnDeeper UnDeep <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "copying" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["copying"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["copying"])                                               :6_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :6_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "mod <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :6_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "copying" UnDeep <…>
someIndentation> VALUE: (MyLeaf (RPMT ["copying"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["copying"])                                                  :6_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["copying"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["copying"])                                    :6_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "copying" UnDeep <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["copying"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["copying"])                                                  :6_5:Or:
term p> IN: GoDeeper GoDeeper Other "copying" UnDeep <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "copying" UnDeep <…>
term p> VALUE: (MyLeaf (RPMT ["copying"]),[])

******** \ term p has returned MyLeaf (RPMT ["copying"])                                                                 :6_5:Or:
******** / binary(Or)                                                                                                    :6_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "modification <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :6_6:GoDeeper:
******** / term p                                                                                                         :6_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :6_6:GoDeeper:
********** / $*|                                                                                                        :6_6:GoDeeper:
*********** / someSL                                                                                                   :6_6:GoDeeper:
************ / pNumAsText                                                                                             :6_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "modification" U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "modification" U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "modification" U <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "modification" U <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=32:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********* / term p/b:label to the left of line below, with EOL                                                           :6_6:GoDeeper:
********** / someSL                                                                                                     :6_6:GoDeeper:
*********** / pNumAsText                                                                                               :6_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "modification" U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "modification" U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "modification" U <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=32:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********* / term p/notLabelTerm                                                                                          :6_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :6_6:GoDeeper:
*********** / someIndentation                                                                                          :6_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :6_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "modification" U <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :6_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :6_7:GoDeeper:
************* / expression                                                                                             :6_7:GoDeeper:
************** / labelPrefix                                                                                          :6_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "modification" UnDeeper U <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=33:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                               :6_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :6_7:GoDeeper:
**************** / $*|                                                                                              :6_7:GoDeeper:
***************** / someSL                                                                                         :6_7:GoDeeper:
****************** / pNumAsText                                                                                   :6_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "modification" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "modification" UnDeeper U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "modification" UnDeeper U <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "modification" UnDeeper U <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=33:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

*************** / term p/b:label to the left of line below, with EOL                                                 :6_7:GoDeeper:
**************** / someSL                                                                                           :6_7:GoDeeper:
***************** / pNumAsText                                                                                     :6_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "modification" UnDeeper U <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "modification" UnDeeper U <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "modification" UnDeeper U <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=33:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

*************** / term p/notLabelTerm                                                                                :6_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :6_7:GoDeeper:
***************** / someIndentation                                                                                :6_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :6_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "modification" UnDeeper U <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :6_7:Other "modi:
****************** / manyIndentation/leaf?                                                                         :6_7:Other "modi:
******************* / expression                                                                                  :6_7:Other "modi:
******************** / labelPrefix                                                                               :6_7:Other "modi:
labelPrefix> IN: Other "modification" UnDeeper UnDeeper O <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=35:
labelPrefix> unexpected UnDeeper

******************** / term p                                                                                    :6_7:Other "modi:
********************* / term p/1a:label directly above                                                          :6_7:Other "modi:
********************** / $*|                                                                                   :6_7:Other "modi:
*********************** / someSL                                                                              :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

*********************** \ someSL has returned (["modification"],0)                                           :7_6:UnDeeper:
*********************** / pNumAsText                                                                         :7_6:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (CERR): Other "modification"
$*|> ERROR:
$*|> offset=35:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/1a:label directly above> MATCH (CERR): Other "modification"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=35:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************* / term p/b:label to the left of line below, with EOL                                      :6_7:Other "modi:
********************** / someSL                                                                                :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

********************** \ someSL has returned (["modification"],0)                                             :7_6:UnDeeper:
********************** / undeepers                                                                            :7_6:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers             :7_6:UnDeeper:
*********************** > sameLine: success!                                                                 :7_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                            :7_6:UnDeeper:
********************** / matching EOL                                                                         :7_6:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=35:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "modification"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=35:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************* / term p/notLabelTerm                                                                     :6_7:Other "modi:
********************** / term p/2:someIndentation expr p                                                       :6_7:Other "modi:
*********************** / someIndentation                                                                     :6_7:Other "modi:
************************ / myindented: consuming GoDeeper                                                    :6_7:Other "modi:
myindented: consuming GoDeeper> IN: Other "modification" UnDeeper UnDeeper O <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=34:
myindented: consuming GoDeeper> unexpected Other "modification"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "modification" UnDeeper UnDeeper O <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=34:
someIndentation> unexpected Other "modification"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=34:
term p/2:someIndentation expr p> unexpected Other "modification"
term p/2:someIndentation expr p> expecting GoDeeper

********************** / term p/3:plain p                                                                      :6_7:Other "modi:
*********************** / pRelPred                                                                            :6_7:Other "modi:
************************ / slRelPred                                                                         :6_7:Other "modi:
************************* / nested simpleHorn                                                               :6_7:Other "modi:
************************** > |^|                                                                           :6_7:Other "modi:
************************** / $*|                                                                           :6_7:Other "modi:
*************************** / slMultiTerm                                                                 :6_7:Other "modi:
**************************** / someSL                                                                    :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

**************************** \ someSL has returned (["modification"],0)                                 :7_6:UnDeeper:
slMultiTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
slMultiTerm> MATCH (COK): Other "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

*************************** \ slMultiTerm has returned (["modification"],0)                              :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

************************** \ $*| has returned (["modification"],0)                                        :7_6:UnDeeper:
************************** / |^| deeps                                                                    :7_6:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

************************** \ |^| deeps has returned ([(),()],-2)                                       :7_5:Or:
nested simpleHorn> IN: Other "modification" UnDeeper UnDeeper O <…>
nested simpleHorn> MATCH (CERR): Other "modification" UnDeeper UnDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=37:
nested simpleHorn> unexpected Or
nested simpleHorn> expecting Means or UnDeeper

************************* / RPConstraint                                                                    :6_7:Other "modi:
************************** / $*|                                                                           :6_7:Other "modi:
*************************** / slMultiTerm                                                                 :6_7:Other "modi:
**************************** / someSL                                                                    :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

**************************** \ someSL has returned (["modification"],0)                                 :7_6:UnDeeper:
slMultiTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
slMultiTerm> MATCH (COK): Other "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

*************************** \ slMultiTerm has returned (["modification"],0)                              :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

************************** \ $*| has returned (["modification"],0)                                        :7_6:UnDeeper:
************************** / |>| calling $>>                                                              :7_6:UnDeeper:
*************************** / |>>/recurse                                                                :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :7_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=35:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "modification" UnDeeper UnDeeper O <…>
RPConstraint> MATCH (CERR): Other "modification"
RPConstraint> ERROR:
RPConstraint> offset=35:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPBoolStructR                                                                   :6_7:Other "modi:
************************** / $*|                                                                           :6_7:Other "modi:
*************************** / slMultiTerm                                                                 :6_7:Other "modi:
**************************** / someSL                                                                    :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

**************************** \ someSL has returned (["modification"],0)                                 :7_6:UnDeeper:
slMultiTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
slMultiTerm> MATCH (COK): Other "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

*************************** \ slMultiTerm has returned (["modification"],0)                              :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

************************** \ $*| has returned (["modification"],0)                                        :7_6:UnDeeper:
************************** / |>| calling $>>                                                              :7_6:UnDeeper:
*************************** / |>>/recurse                                                                :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                                   :7_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=35:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "modification" UnDeeper UnDeeper O <…>
RPBoolStructR> MATCH (CERR): Other "modification"
RPBoolStructR> ERROR:
RPBoolStructR> offset=35:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPMT                                                                            :6_7:Other "modi:
************************** / $*|                                                                           :6_7:Other "modi:
*************************** / slAKA                                                                       :6_7:Other "modi:
**************************** / $*|                                                                       :6_7:Other "modi:
***************************** / slAKA base                                                              :6_7:Other "modi:
****************************** / slMultiTerm                                                           :6_7:Other "modi:
******************************* / someSL                                                              :6_7:Other "modi:
someSL> IN: Other "modification" UnDeeper UnDeeper O <…>
someSL> MATCH (COK): Other "modification"
someSL> VALUE: ((["modification"],0),[])

******************************* \ someSL has returned (["modification"],0)                           :7_6:UnDeeper:
slMultiTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
slMultiTerm> MATCH (COK): Other "modification"
slMultiTerm> VALUE: ((["modification"],0),[])

****************************** \ slMultiTerm has returned (["modification"],0)                        :7_6:UnDeeper:
slAKA base> IN: Other "modification" UnDeeper UnDeeper O <…>
slAKA base> MATCH (COK): Other "modification"
slAKA base> VALUE: ((["modification"],0),[])

***************************** \ slAKA base has returned (["modification"],0)                           :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

**************************** \ $*| has returned (["modification"],0)                                    :7_6:UnDeeper:
**************************** / |>>/recurse                                                              :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :7_6:UnDeeper:
***************************** / slAKA optional akapart                                                 :7_6:UnDeeper:
****************************** / |?| optional something                                               :7_6:UnDeeper:
******************************* / |>>/recurse                                                        :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :7_6:UnDeeper:
******************************** / PAKA/akapart                                                     :7_6:UnDeeper:
********************************* / $>|                                                            :7_6:UnDeeper:
********************************** / Aka Token                                                    :7_6:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=35:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=35:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :7_6:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                        :7_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :7_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :7_6:UnDeeper:
**************************** / |>>/recurse                                                              :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                                 :7_6:UnDeeper:
***************************** / slAKA optional typically                                               :7_6:UnDeeper:
****************************** / |?| optional something                                               :7_6:UnDeeper:
******************************* / |>>/recurse                                                        :7_6:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=35:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                           :7_6:UnDeeper:
******************************** / typically                                                        :7_6:UnDeeper:
********************************* / $>|                                                            :7_6:UnDeeper:
$>|> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=35:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=35:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                      :7_6:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                      :7_6:UnDeeper:
***************************** > |>>/base got Nothing                                                   :7_6:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                        :7_6:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...           :7_6:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                              :7_6:UnDeeper:
slAKA> IN: Other "modification" UnDeeper UnDeeper O <…>
slAKA> MATCH (COK): Other "modification"
slAKA> VALUE: ((["modification"],0),[])

*************************** \ slAKA has returned (["modification"],0)                                    :7_6:UnDeeper:
$*|> IN: Other "modification" UnDeeper UnDeeper O <…>
$*|> MATCH (COK): Other "modification"
$*|> VALUE: ((["modification"],0),[])

************************** \ $*| has returned (["modification"],0)                                        :7_6:UnDeeper:
RPMT> IN: Other "modification" UnDeeper UnDeeper O <…>
RPMT> MATCH (COK): Other "modification"
RPMT> VALUE: ((RPMT ["modification"],0),[])

************************* \ RPMT has returned (RPMT ["modification"],0)                                    :7_6:UnDeeper:
slRelPred> IN: Other "modification" UnDeeper UnDeeper O <…>
slRelPred> MATCH (COK): Other "modification"
slRelPred> VALUE: ((RPMT ["modification"],0),[])

************************ \ slRelPred has returned (RPMT ["modification"],0)                                 :7_6:UnDeeper:
************************ / undeepers                                                                        :7_6:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :7_6:UnDeeper:
************************* > sameLine: success!                                                             :7_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                        :7_6:UnDeeper:
pRelPred> IN: Other "modification" UnDeeper UnDeeper O <…>
pRelPred> MATCH (COK): Other "modification"
pRelPred> VALUE: (RPMT ["modification"],[])

*********************** \ pRelPred has returned RPMT ["modification"]                                        :7_6:UnDeeper:
term p/3:plain p> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/3:plain p> MATCH (COK): Other "modification"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["modification"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["modification"])                         :7_6:UnDeeper:
term p/notLabelTerm> IN: Other "modification" UnDeeper UnDeeper O <…>
term p/notLabelTerm> MATCH (COK): Other "modification"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["modification"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["modification"])                        :7_6:UnDeeper:
term p> IN: Other "modification" UnDeeper UnDeeper O <…>
term p> MATCH (COK): Other "modification"
term p> VALUE: (MyLeaf (RPMT ["modification"]),[])

******************** \ term p has returned MyLeaf (RPMT ["modification"])                                       :7_6:UnDeeper:
******************** / binary(Or)                                                                               :7_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=35:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************** / binary(And)                                                                              :7_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=35:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************** / binary(SetLess)                                                                          :7_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=35:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************** / binary(SetPlus)                                                                          :7_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=35:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "modification" UnDeeper UnDeeper O <…>
expression> MATCH (COK): Other "modification"
expression> VALUE: (MyLeaf (RPMT ["modification"]),[])

******************* \ expression has returned MyLeaf (RPMT ["modification"])                                     :7_6:UnDeeper:
manyIndentation/leaf?> IN: Other "modification" UnDeeper UnDeeper O <…>
manyIndentation/leaf?> MATCH (COK): Other "modification"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["modification"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["modification"])                            :7_6:UnDeeper:
****************** / myindented: consuming UnDeeper                                                               :7_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Or GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                           :7_7:UnDeeper:
someIndentation> IN: GoDeeper Other "modification" UnDeeper U <…>
someIndentation> MATCH (COK): GoDeeper Other "modification" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["modification"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["modification"])                                      :7_7:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "modification" UnDeeper U <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "modification" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["modification"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["modification"])                        :7_7:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "modification" UnDeeper U <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "modification" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["modification"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["modification"])                                      :7_7:UnDeeper:
term p> IN: GoDeeper Other "modification" UnDeeper U <…>
term p> MATCH (COK): GoDeeper Other "modification" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["modification"]),[])

************** \ term p has returned MyLeaf (RPMT ["modification"])                                                     :7_7:UnDeeper:
************** / binary(Or)                                                                                             :7_7:UnDeeper:
binary(Or)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************** / binary(And)                                                                                            :7_7:UnDeeper:
binary(And)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************** / binary(SetLess)                                                                                        :7_7:UnDeeper:
binary(SetLess)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************** / binary(SetPlus)                                                                                        :7_7:UnDeeper:
binary(SetPlus)> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "modification" UnDeeper U <…>
expression> MATCH (COK): GoDeeper Other "modification" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["modification"]),[])

************* \ expression has returned MyLeaf (RPMT ["modification"])                                                   :7_7:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "modification" UnDeeper U <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "modification" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["modification"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["modification"])                                          :7_7:UnDeeper:
************ / myindented: consuming UnDeeper                                                                             :7_7:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Or GoDeeper GoDeeper Other "dis <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                  :7_5:Or:
someIndentation> IN: GoDeeper GoDeeper Other "modification" U <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "modification" U <…>
someIndentation> VALUE: (MyLeaf (RPMT ["modification"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["modification"])                                             :7_5:Or:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "modification" U <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "modification" U <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["modification"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["modification"])                               :7_5:Or:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "modification" U <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "modification" U <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["modification"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["modification"])                                             :7_5:Or:
term p> IN: GoDeeper GoDeeper Other "modification" U <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "modification" U <…>
term p> VALUE: (MyLeaf (RPMT ["modification"]),[])

******** \ term p has returned MyLeaf (RPMT ["modification"])                                                            :7_5:Or:
******** / binary(Or)                                                                                                    :7_5:Or:
binary(Or)> IN: Or GoDeeper GoDeeper Other "disposal" Un <…>
binary(Or)> MATCH (COK): Or
binary(Or)> VALUE: (Or,[])

******** \ binary(Or) has returned Or                                                                                     :7_6:GoDeeper:
******** / term p                                                                                                         :7_6:GoDeeper:
********* / term p/1a:label directly above                                                                               :7_6:GoDeeper:
********** / $*|                                                                                                        :7_6:GoDeeper:
*********** / someSL                                                                                                   :7_6:GoDeeper:
************ / pNumAsText                                                                                             :7_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=38:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=38:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

********* / term p/b:label to the left of line below, with EOL                                                           :7_6:GoDeeper:
********** / someSL                                                                                                     :7_6:GoDeeper:
*********** / pNumAsText                                                                                               :7_6:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=38:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=38:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=38:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

********* / term p/notLabelTerm                                                                                          :7_6:GoDeeper:
********** / term p/2:someIndentation expr p                                                                            :7_6:GoDeeper:
*********** / someIndentation                                                                                          :7_6:GoDeeper:
************ / myindented: consuming GoDeeper                                                                         :7_6:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************ \ myindented: consuming GoDeeper has returned GoDeeper                                                     :7_7:GoDeeper:
************ / manyIndentation/leaf?                                                                                    :7_7:GoDeeper:
************* / expression                                                                                             :7_7:GoDeeper:
************** / labelPrefix                                                                                          :7_7:GoDeeper:
labelPrefix> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                               :7_7:GoDeeper:
*************** / term p/1a:label directly above                                                                     :7_7:GoDeeper:
**************** / $*|                                                                                              :7_7:GoDeeper:
***************** / someSL                                                                                         :7_7:GoDeeper:
****************** / pNumAsText                                                                                   :7_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=39:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

*************** / term p/b:label to the left of line below, with EOL                                                 :7_7:GoDeeper:
**************** / someSL                                                                                           :7_7:GoDeeper:
***************** / pNumAsText                                                                                     :7_7:GoDeeper:
pNumAsText> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=39:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

*************** / term p/notLabelTerm                                                                                :7_7:GoDeeper:
**************** / term p/2:someIndentation expr p                                                                  :7_7:GoDeeper:
***************** / someIndentation                                                                                :7_7:GoDeeper:
****************** / myindented: consuming GoDeeper                                                               :7_7:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                          :7_7:Other "disp:
****************** / manyIndentation/leaf?                                                                         :7_7:Other "disp:
******************* / expression                                                                                  :7_7:Other "disp:
******************** / labelPrefix                                                                               :7_7:Other "disp:
labelPrefix> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=41:
labelPrefix> unexpected UnDeeper

******************** / term p                                                                                    :7_7:Other "disp:
********************* / term p/1a:label directly above                                                          :7_7:Other "disp:
********************** / $*|                                                                                   :7_7:Other "disp:
*********************** / someSL                                                                              :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

*********************** \ someSL has returned (["disposal"],0)                                           :8_4:UnDeeper:
*********************** / pNumAsText                                                                     :8_4:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (CERR): Other "disposal"
$*|> ERROR:
$*|> offset=41:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/1a:label directly above> MATCH (CERR): Other "disposal"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=41:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

********************* / term p/b:label to the left of line below, with EOL                                      :7_7:Other "disp:
********************** / someSL                                                                                :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

********************** \ someSL has returned (["disposal"],0)                                             :8_4:UnDeeper:
********************** / undeepers                                                                        :8_4:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers         :8_4:UnDeeper:
*********************** > sameLine: success!                                                             :8_4:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                        :8_4:UnDeeper:
********************** / matching EOL                                                                     :8_4:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=41:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "disposal"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=41:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

********************* / term p/notLabelTerm                                                                     :7_7:Other "disp:
********************** / term p/2:someIndentation expr p                                                       :7_7:Other "disp:
*********************** / someIndentation                                                                     :7_7:Other "disp:
************************ / myindented: consuming GoDeeper                                                    :7_7:Other "disp:
myindented: consuming GoDeeper> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=40:
myindented: consuming GoDeeper> unexpected Other "disposal"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "disposal"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "disposal"
term p/2:someIndentation expr p> expecting GoDeeper

********************** / term p/3:plain p                                                                      :7_7:Other "disp:
*********************** / pRelPred                                                                            :7_7:Other "disp:
************************ / slRelPred                                                                         :7_7:Other "disp:
************************* / nested simpleHorn                                                               :7_7:Other "disp:
************************** > |^|                                                                           :7_7:Other "disp:
************************** / $*|                                                                           :7_7:Other "disp:
*************************** / slMultiTerm                                                                 :7_7:Other "disp:
**************************** / someSL                                                                    :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

**************************** \ someSL has returned (["disposal"],0)                                 :8_4:UnDeeper:
slMultiTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slMultiTerm> MATCH (COK): Other "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

*************************** \ slMultiTerm has returned (["disposal"],0)                              :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************** \ $*| has returned (["disposal"],0)                                        :8_4:UnDeeper:
************************** / |^| deeps                                                                :8_4:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),(),()],-4),[])

************************** \ |^| deeps has returned ([(),(),(),()],-4)                             :8_3:Other "of p:
nested simpleHorn> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
nested simpleHorn> MATCH (CERR): Other "disposal" UnDeeper UnDeeper UnDee <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=45:
nested simpleHorn> unexpected Other "of personal data"
nested simpleHorn> expecting Means or UnDeeper

************************* / RPConstraint                                                                    :7_7:Other "disp:
************************** / $*|                                                                           :7_7:Other "disp:
*************************** / slMultiTerm                                                                 :7_7:Other "disp:
**************************** / someSL                                                                    :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

**************************** \ someSL has returned (["disposal"],0)                                 :8_4:UnDeeper:
slMultiTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slMultiTerm> MATCH (COK): Other "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

*************************** \ slMultiTerm has returned (["disposal"],0)                              :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************** \ $*| has returned (["disposal"],0)                                        :8_4:UnDeeper:
************************** / |>| calling $>>                                                          :8_4:UnDeeper:
*************************** / |>>/recurse                                                            :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                               :8_4:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=41:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
RPConstraint> MATCH (CERR): Other "disposal"
RPConstraint> ERROR:
RPConstraint> offset=41:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPBoolStructR                                                                   :7_7:Other "disp:
************************** / $*|                                                                           :7_7:Other "disp:
*************************** / slMultiTerm                                                                 :7_7:Other "disp:
**************************** / someSL                                                                    :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

**************************** \ someSL has returned (["disposal"],0)                                 :8_4:UnDeeper:
slMultiTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slMultiTerm> MATCH (COK): Other "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

*************************** \ slMultiTerm has returned (["disposal"],0)                              :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************** \ $*| has returned (["disposal"],0)                                        :8_4:UnDeeper:
************************** / |>| calling $>>                                                          :8_4:UnDeeper:
*************************** / |>>/recurse                                                            :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************** / |>>/base                                                               :8_4:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=41:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
RPBoolStructR> MATCH (CERR): Other "disposal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=41:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************* / RPMT                                                                            :7_7:Other "disp:
************************** / $*|                                                                           :7_7:Other "disp:
*************************** / slAKA                                                                       :7_7:Other "disp:
**************************** / $*|                                                                       :7_7:Other "disp:
***************************** / slAKA base                                                              :7_7:Other "disp:
****************************** / slMultiTerm                                                           :7_7:Other "disp:
******************************* / someSL                                                              :7_7:Other "disp:
someSL> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
someSL> MATCH (COK): Other "disposal"
someSL> VALUE: ((["disposal"],0),[])

******************************* \ someSL has returned (["disposal"],0)                           :8_4:UnDeeper:
slMultiTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slMultiTerm> MATCH (COK): Other "disposal"
slMultiTerm> VALUE: ((["disposal"],0),[])

****************************** \ slMultiTerm has returned (["disposal"],0)                        :8_4:UnDeeper:
slAKA base> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slAKA base> MATCH (COK): Other "disposal"
slAKA base> VALUE: ((["disposal"],0),[])

***************************** \ slAKA base has returned (["disposal"],0)                           :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

**************************** \ $*| has returned (["disposal"],0)                                    :8_4:UnDeeper:
**************************** / |>>/recurse                                                          :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                             :8_4:UnDeeper:
***************************** / slAKA optional akapart                                             :8_4:UnDeeper:
****************************** / |?| optional something                                           :8_4:UnDeeper:
******************************* / |>>/recurse                                                    :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                       :8_4:UnDeeper:
******************************** / PAKA/akapart                                                 :8_4:UnDeeper:
********************************* / $>|                                                        :8_4:UnDeeper:
********************************** / Aka Token                                                :8_4:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                  :8_4:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional akapart has returned (Nothing,0)                    :8_4:UnDeeper:
***************************** > |>>/base got Nothing                                               :8_4:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                    :8_4:UnDeeper:
**************************** / |>>/recurse                                                          :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                             :8_4:UnDeeper:
***************************** / slAKA optional typically                                           :8_4:UnDeeper:
****************************** / |?| optional something                                           :8_4:UnDeeper:
******************************* / |>>/recurse                                                    :8_4:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                       :8_4:UnDeeper:
******************************** / typically                                                    :8_4:UnDeeper:
********************************* / $>|                                                        :8_4:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************************** \ |?| optional something has returned (Nothing,0)                  :8_4:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************************** \ slAKA optional typically has returned (Nothing,0)                  :8_4:UnDeeper:
***************************** > |>>/base got Nothing                                               :8_4:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                    :8_4:UnDeeper:
**************************** > slAKA: proceeding after base and entityalias are retrieved ...       :8_4:UnDeeper:
**************************** > pAKA: entityalias = Nothing                                          :8_4:UnDeeper:
slAKA> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slAKA> MATCH (COK): Other "disposal"
slAKA> VALUE: ((["disposal"],0),[])

*************************** \ slAKA has returned (["disposal"],0)                                    :8_4:UnDeeper:
$*|> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
$*|> MATCH (COK): Other "disposal"
$*|> VALUE: ((["disposal"],0),[])

************************** \ $*| has returned (["disposal"],0)                                        :8_4:UnDeeper:
RPMT> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
RPMT> MATCH (COK): Other "disposal"
RPMT> VALUE: ((RPMT ["disposal"],0),[])

************************* \ RPMT has returned (RPMT ["disposal"],0)                                    :8_4:UnDeeper:
slRelPred> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
slRelPred> MATCH (COK): Other "disposal"
slRelPred> VALUE: ((RPMT ["disposal"],0),[])

************************ \ slRelPred has returned (RPMT ["disposal"],0)                                 :8_4:UnDeeper:
************************ / undeepers                                                                    :8_4:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :8_4:UnDeeper:
************************* > sameLine: success!                                                         :8_4:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                    :8_4:UnDeeper:
pRelPred> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
pRelPred> MATCH (COK): Other "disposal"
pRelPred> VALUE: (RPMT ["disposal"],[])

*********************** \ pRelPred has returned RPMT ["disposal"]                                        :8_4:UnDeeper:
term p/3:plain p> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/3:plain p> MATCH (COK): Other "disposal"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********************** \ term p/3:plain p has returned MyLeaf (RPMT ["disposal"])                         :8_4:UnDeeper:
term p/notLabelTerm> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p/notLabelTerm> MATCH (COK): Other "disposal"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disposal"])                        :8_4:UnDeeper:
term p> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
term p> MATCH (COK): Other "disposal"
term p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******************** \ term p has returned MyLeaf (RPMT ["disposal"])                                       :8_4:UnDeeper:
******************** / binary(Or)                                                                           :8_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=41:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************** / binary(And)                                                                          :8_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=41:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************** / binary(SetLess)                                                                      :8_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=41:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************** / binary(SetPlus)                                                                      :8_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=41:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
expression> MATCH (COK): Other "disposal"
expression> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******************* \ expression has returned MyLeaf (RPMT ["disposal"])                                     :8_4:UnDeeper:
manyIndentation/leaf?> IN: Other "disposal" UnDeeper UnDeeper UnDee <…>
manyIndentation/leaf?> MATCH (COK): Other "disposal"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disposal"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disposal"])                            :8_4:UnDeeper:
****************** / myindented: consuming UnDeeper                                                           :8_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper UnDeeper Othe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented: consuming UnDeeper has returned UnDeeper                                       :8_5:UnDeeper:
someIndentation> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
someIndentation> MATCH (COK): GoDeeper Other "disposal" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["disposal"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["disposal"])                                      :8_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "disposal" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disposal"])                        :8_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "disposal" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disposal"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["disposal"])                                      :8_5:UnDeeper:
term p> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
term p> MATCH (COK): GoDeeper Other "disposal" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

************** \ term p has returned MyLeaf (RPMT ["disposal"])                                                     :8_5:UnDeeper:
************** / binary(Or)                                                                                         :8_5:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=42:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************** / binary(And)                                                                                        :8_5:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=42:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************** / binary(SetLess)                                                                                    :8_5:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=42:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************** / binary(SetPlus)                                                                                    :8_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=42:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
expression> MATCH (COK): GoDeeper Other "disposal" UnDeeper
expression> VALUE: (MyLeaf (RPMT ["disposal"]),[])

************* \ expression has returned MyLeaf (RPMT ["disposal"])                                                   :8_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "disposal" UnDeeper UnDee <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "disposal" UnDeeper
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["disposal"]),[])

************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["disposal"])                                          :8_5:UnDeeper:
************ / myindented: consuming UnDeeper                                                                         :8_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Other "of per <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************ \ myindented: consuming UnDeeper has returned UnDeeper                                                     :8_6:UnDeeper:
someIndentation> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "disposal" UnDee <…>
someIndentation> VALUE: (MyLeaf (RPMT ["disposal"]),[])

*********** \ someIndentation has returned MyLeaf (RPMT ["disposal"])                                                    :8_6:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["disposal"])                                      :8_6:UnDeeper:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "disposal" UnDee <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["disposal"]),[])

********* \ term p/notLabelTerm has returned MyLeaf (RPMT ["disposal"])                                                    :8_6:UnDeeper:
term p> IN: GoDeeper GoDeeper Other "disposal" UnDee <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "disposal" UnDee <…>
term p> VALUE: (MyLeaf (RPMT ["disposal"]),[])

******** \ term p has returned MyLeaf (RPMT ["disposal"])                                                                   :8_6:UnDeeper:
******** / binary(Or)                                                                                                       :8_6:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Other "of personal dat <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=43:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******** / binary(And)                                                                                                      :8_6:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Other "of personal dat <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=43:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******** / binary(SetLess)                                                                                                  :8_6:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Other "of personal dat <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=43:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******** / binary(SetPlus)                                                                                                  :8_6:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Other "of personal dat <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=43:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])],[])

******* \ expression has returned MyAny [MyLeaf (RPMT ["access"]),MyLeaf (RPMT ["use"]),MyLeaf (RPMT ["disclosure"]),MyLeaf (RPMT ["copying"]),MyLeaf (RPMT ["modification"]),MyLeaf (RPMT ["disposal"])] :8_6:UnDeeper:
ppp inner> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
ppp inner> VALUE: (Any Nothing [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

****** \ ppp inner has returned Any Nothing [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :8_6:UnDeeper:
made it to inner base parser> IN: GoDeeper GoDeeper Other "access" UnDeepe <…>
made it to inner base parser> MATCH (COK): GoDeeper GoDeeper Other "access" UnDeepe <…>
made it to inner base parser> VALUE: (Any Nothing [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

***** \ made it to inner base parser has returned Any Nothing [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :8_6:UnDeeper:
***** / |<*/parent                                                                                                             :8_6:UnDeeper:
****** > |<*/recurse                                                                                                          :8_6:UnDeeper:
****** / post part                                                                                                     :8_3:Other "of p:
******* / slMultiTerm                                                                                                 :8_3:Other "of p:
******** / someSL                                                                                                    :8_3:Other "of p:
someSL> IN: Other "of personal data" UnDeeper UnDeep <…>
someSL> MATCH (COK): Other "of personal data"
someSL> VALUE: ((["of personal data"],0),[])

******** \ someSL has returned (["of personal data"],0)                                                             :9_2:UnDeeper:
slMultiTerm> IN: Other "of personal data" UnDeeper UnDeep <…>
slMultiTerm> MATCH (COK): Other "of personal data"
slMultiTerm> VALUE: ((["of personal data"],0),[])

******* \ slMultiTerm has returned (["of personal data"],0)                                                          :9_2:UnDeeper:
post part> IN: Other "of personal data" UnDeeper UnDeep <…>
post part> MATCH (COK): Other "of personal data"
post part> VALUE: ((["of personal data"],0),[])

****** \ post part has returned (["of personal data"],0)                                                              :9_2:UnDeeper:
****** > |<*/recurse matched 2 UnDeepers                                                                              :9_2:UnDeeper:
|<*/parent> IN: UnDeeper UnDeeper Other "of personal dat <…>
|<*/parent> MATCH (COK): UnDeeper UnDeeper Other "of personal dat <…>
|<*/parent> VALUE: ((["of personal data"],-2),[])

***** \ |<*/parent has returned (["of personal data"],-2)                                                              :9_2:UnDeeper:
***** / undeepers                                                                                                      :9_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                       :9_2:UnDeeper:
****** > sameLine: success!                                                                                        :9_1:Or:
undeepers> IN: UnDeeper UnDeeper Or GoDeeper Other "los <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :9_1:Or:
withPrePost> IN: GoDeeper Other "any" GoDeeper Other "una <…>
withPrePost> MATCH (COK): GoDeeper Other "any" GoDeeper Other "una <…>
withPrePost> VALUE: (Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

**** \ withPrePost has returned Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :9_1:Or:
pBSR> IN: GoDeeper Other "any" GoDeeper Other "una <…>
pBSR> MATCH (COK): GoDeeper Other "any" GoDeeper Other "una <…>
pBSR> VALUE: (Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

*** \ pBSR has returned Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :9_1:Or:
made it to pBSR> IN: GoDeeper Other "any" GoDeeper Other "una <…>
made it to pBSR> MATCH (COK): GoDeeper Other "any" GoDeeper Other "una <…>
made it to pBSR> VALUE: (Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],[])

** \ made it to pBSR has returned Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])] :9_1:Or:
** / undeepers                                                                                                         :9_1:Or:
*** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                                          :9_1:Or:
*** > sameLine: success!                                                                                              :9_1:Or:
undeepers> IN: Or GoDeeper Other "loss of storage mediu <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

** \ undeepers has returned ()                                                                                         :9_1:Or:

PDPA
  inline-1-s FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA inline-1-s
       expected: [((["Bad"],Means,Any Nothing [Any (Just (PrePost "any unauthorised" "of personal data")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])],Any (Just (PrePost "loss of storage medium on which personal data is stored in circumstances where the unauthorised" "of the personal data is likely to occur")) [Leaf (RPMT ["access"]),Leaf (RPMT ["use"]),Leaf (RPMT ["disclosure"]),Leaf (RPMT ["copying"]),Leaf (RPMT ["modification"]),Leaf (RPMT ["disposal"])]]),[])]
       but parsing failed with error:
       9:1:
       unexpected Or
       expecting end of input
       a data breach occurred                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
       MEANS                                                                                           any                                                                                             unauthorised                                                                                                                                                                                                                                                                                    FALSE                                                                                           access                                                                                         
use                                                                                            
disclosure                                                                                     
copying                                                                                        
modification                                                                                   
disposal                                                                                       
                                                                                                                                                                                                       of personal data                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
       ✳ OR                                                                                            loss of storage medium on which personal data is stored in circumstances where the unauthorised                                                                                                                                                                                                                                                                                                 FALSE                                                                                           access                                                                                         
use                                                                                            
disclosure                                                                                     
copying                                                                                        
modification                                                                                   
disposal                                                                                       
                                                                                                                                                                                                       of the personal data is likely to occur                                                                                                                                                                                                                                                                                                                                                                                                                                                        
       

  To rerun use: --match "/PDPA/inline-1-s/"

Randomized with seed 567933632

Finished in 0.0821 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

