* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-1/)

* Tokens
§§ ( "Assess" ) EVERY
    ( "Organisation"
        (
            (
                ( AKA ( "You" ) )
            )
        )
    ) WHO
    ( "is"
        ( "not" ( "a Public Agency" ) )
    ) MUST
    ( BEFORE
        ( 30 ( "days" ) )
    ) UPON ( "becoming aware a data breach may have occurred" ) WHEN ( "the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13" ) DO
    ( "assess" ( "if it is a Notifiable Data Breach" ) "by"
        ( "performing" ( ( "NDB Qualification" ) ) )
    ) HENCE ( "Notification" ) LEST
    (
        ( "the PDPC"
            ( MAY DO
                (
                    ( "demand" ( "an explanation for your inaction" ) )
                ) HENCE
                ( "You"
                    ( MUST DO
                        ( "respond" "to" ( "the PDPC" ) "about" ( "your inaction" ) )
                    )
                )
            )
        )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Asse:
******** > |>>/base got "Assess"                                                                                    :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

******* \ |>>/base has returned ("Assess",0)                                                                         :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

****** \ |>>/recurse has returned ("Assess",1)                                                                        :2_2:UnDeeper:
|>| calling $>>> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>| calling $>>> MATCH (COK): ( "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

***** \ |>| calling $>> has returned ("Assess",1)                                                                      :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Every:
undeepers> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (COK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / pRegRuleSugary                                                                                                :2_1:Every:
***** / someDeep                                                                                                    :2_1:Every:
****** / someDeep first part calls base directly                                                                   :2_1:Every:
someDeep first part calls base directly> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

someDeep> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected EVERY
someDeep> expecting Other text

pRegRuleSugary> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:Every:
***** / permutationsReg                                                                                             :2_1:Every:
****** / regulative permutation with deontic-temporal                                                              :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected AKA
pNumAsText> expecting number

someSL> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
someSL> MATCH (COK): "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA base> MATCH (COK): "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
$*|> MATCH (COK): "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) ) WHO ( "is" ( "not" ( " <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( "no <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( " <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: ( ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( <…>
|>>/recurse> MATCH (COK): ( ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You"
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
undeepers> MATCH (COK): ) ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pMultiTermAka> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented: consuming UnDeeper                                                                                 :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( "is" ( "not" ( "a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :3_1:Who:
someIndentation> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> MATCH (COK): ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Organisation" :| [],Nothing) :| []))            :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / expression                                                                            :3_2:Other "is":
****************** / labelPrefix                                                                         :3_2:Other "is":
labelPrefix> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

****************** \ labelPrefix has returned "is"                                                        :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "not":
********************** / manyIndentation/leaf?                                                         :3_3:Other "not":
*********************** / expression                                                                  :3_3:Other "not":
************************ / labelPrefix                                                               :3_3:Other "not":
labelPrefix> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
labelPrefix> MATCH (COK): "not"
labelPrefix> VALUE: ("not",[])

************************ \ labelPrefix has returned "not"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "a Pu:
**************************** / manyIndentation/leaf?                                               :3_4:Other "a Pu:
***************************** / expression                                                        :3_4:Other "a Pu:
****************************** / labelPrefix                                                     :3_4:Other "a Pu:
labelPrefix> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "a Pu:
******************************* / term p/notLabelTerm                                           :3_4:Other "a Pu:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "a Pu:
********************************* / someIndentation                                           :3_4:Other "a Pu:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "a Pu:
myindented: consuming GoDeeper> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=24:
myindented: consuming GoDeeper> unexpected "a Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected "a Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected "a Public Agency"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "a Pu:
********************************* / pRelPred                                                  :3_4:Other "a Pu:
********************************** / slRelPred                                               :3_4:Other "a Pu:
*********************************** / nested simpleHorn                                     :3_4:Other "a Pu:
************************************ > |^|                                                 :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:Must:
nested simpleHorn> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
nested simpleHorn> MATCH (CERR): "a Public Agency" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPConstraint> MATCH (CERR): "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPBoolStructR> MATCH (CERR): "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slAKA                                             :3_4:Other "a Pu:
************************************** / $*|                                             :3_4:Other "a Pu:
*************************************** / slAKA base                                    :3_4:Other "a Pu:
**************************************** / slMultiTerm                                 :3_4:Other "a Pu:
***************************************** / someSL                                    :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

***************************************** \ someSL has returned (["a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

**************************************** \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slAKA base> MATCH (COK): "a Public Agency"
slAKA base> VALUE: ((["a Public Agency"],0),[])

*************************************** \ slAKA base has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************** \ $*| has returned (["a Public Agency"],0)     :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slAKA> MATCH (COK): "a Public Agency"
slAKA> VALUE: ((["a Public Agency"],0),[])

************************************* \ slAKA has returned (["a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
RPMT> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPMT> MATCH (COK): "a Public Agency"
RPMT> VALUE: ((RPMT ["a Public Agency"],0),[])

*********************************** \ RPMT has returned (RPMT ["a Public Agency"],0)     :4_2:UnDeeper:
slRelPred> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slRelPred> MATCH (COK): "a Public Agency"
slRelPred> VALUE: ((RPMT ["a Public Agency"],0),[])

********************************** \ slRelPred has returned (RPMT ["a Public Agency"],0)  :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
pRelPred> MATCH (COK): "a Public Agency"
pRelPred> VALUE: (RPMT ["a Public Agency"],[])

********************************* \ pRelPred has returned RPMT ["a Public Agency"]         :4_2:UnDeeper:
term p/3:plain p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/3:plain p> MATCH (COK): "a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/notLabelTerm> MATCH (COK): "a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p> MATCH (COK): "a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["a Public Agency"])        :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
expression> MATCH (COK): "a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["a Public Agency"])      :4_2:UnDeeper:
manyIndentation/leaf?> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
manyIndentation/leaf?> MATCH (COK): "a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
someIndentation> MATCH (COK): ( "a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p/notLabelTerm> MATCH (COK): ( "a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p> MATCH (COK): ( "a Public Agency" )
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["a Public Agency"])                      :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
expression> MATCH (COK): "not" ( "a Public Agency" )
expression> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

*********************** \ expression has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))  :4_3:UnDeeper:
manyIndentation/leaf?> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
manyIndentation/leaf?> MATCH (COK): "not" ( "a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
someIndentation> MATCH (COK): ( "not" ( "a Public Agency" ) )
someIndentation> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************* \ someIndentation has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p/notLabelTerm> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

****************** \ term p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))                  :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
expression> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

***************** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Must:
someIndentation> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someIndentation> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
someIndentation> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*************** \ someIndentation has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/2:someIndentation expr p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/notLabelTerm> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************ \ term p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))      :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
expression> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*********** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))    :4_1:Must:
ppp inner> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
ppp inner> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["is","not","a Public Agency"])                                 :4_1:Must:
pBSR> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pBSR> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
pBSR> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is","not","a Public Agency"])                                        :4_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))   :4_1:Must:
manyIndentation/leaf?> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******* \ manyIndentation/leaf? has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))                     :4_1:Must:
******* / WHERE                                                                                                   :4_1:Must:
WHERE> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=28:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=28:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=28:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=28:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=28:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=28:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Before:
|>>/recurse> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected BEFORE
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Before:
*********** / pTemporal/eventually                                                                              :4_2:Before:
pTemporal/eventually> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=30:
pTemporal/eventually> unexpected BEFORE
pTemporal/eventually> expecting EVENTUALLY

*********** / pTemporal/specifically                                                                            :4_2:Before:
************ / $>|                                                                                             :4_2:Before:
$>|> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
$>|> MATCH (COK): BEFORE
$>|> VALUE: (Before,[])

************ \ $>| has returned Before                                                                          :4_3:GoDeeper:
************ / |>>/recurse                                                                                      :4_3:GoDeeper:
************* / |>>/recurse                                                                                     :4_3:TNumber 30:
|>>/recurse> IN: 30 ( "days" ) ) ) UPON ( "becoming aware <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected 30
|>>/recurse> expecting (

************* / |>>/base                                                                                        :4_3:TNumber 30:
************** > |>>/base got Just 30                                                                           :4_4:GoDeeper:
|>>/base> IN: 30 ( "days" ) ) ) UPON ( "becoming aware <…>
|>>/base> MATCH (COK): 30
|>>/base> VALUE: ((Just 30,0),[])

************* \ |>>/base has returned (Just 30,0)                                                                :4_4:GoDeeper:
|>>/recurse> IN: ( 30 ( "days" ) ) ) UPON ( "becoming awa <…>
|>>/recurse> MATCH (COK): ( 30
|>>/recurse> VALUE: ((Just 30,1),[])

************ \ |>>/recurse has returned (Just 30,1)                                                               :4_4:GoDeeper:
************ / |>| calling $>>                                                                                    :4_4:GoDeeper:
************* / |>>/recurse                                                                                      :4_4:GoDeeper:
************** / |>>/recurse                                                                                     :4_4:Other "days:
|>>/recurse> IN: "days" ) ) ) UPON ( "becoming aware a da <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=34:
|>>/recurse> unexpected "days"
|>>/recurse> expecting (

************** / |>>/base                                                                                        :4_4:Other "days:
*************** > |>>/base got "days"                                                                        :5_2:UnDeeper:
|>>/base> IN: "days" ) ) ) UPON ( "becoming aware a da <…>
|>>/base> MATCH (COK): "days"
|>>/base> VALUE: (("days",0),[])

************** \ |>>/base has returned ("days",0)                                                             :5_2:UnDeeper:
|>>/recurse> IN: ( "days" ) ) ) UPON ( "becoming aware a  <…>
|>>/recurse> MATCH (COK): ( "days"
|>>/recurse> VALUE: (("days",1),[])

************* \ |>>/recurse has returned ("days",1)                                                            :5_2:UnDeeper:
|>| calling $>>> IN: ( "days" ) ) ) UPON ( "becoming aware a  <…>
|>| calling $>>> MATCH (COK): ( "days"
|>| calling $>>> VALUE: (("days",1),[])

************ \ |>| calling $>> has returned ("days",1)                                                          :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                                 :5_4:UnDeeper:
undeepers> IN: ) ) ) UPON ( "becoming aware a data brea <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                            :5_4:UnDeeper:
pTemporal/specifically> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pTemporal/specifically> MATCH (COK): BEFORE ( 30 ( "days" ) )
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 30) "days"),[])

*********** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 30) "days")                 :5_4:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TBefore (Just 30) "days"))                                 :5_4:UnDeeper:
|>>/base> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
|>>/base> MATCH (COK): BEFORE ( 30 ( "days" ) )
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),0)                      :5_4:UnDeeper:
|>>/recurse> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
|>>/recurse> MATCH (COK): ( BEFORE ( 30 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),1)                     :5_4:UnDeeper:
|>| calling $>>> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
|>| calling $>>> MATCH (COK): ( BEFORE ( 30 ( "days" ) )
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),1)                   :5_4:UnDeeper:
******** / undeepers                                                                                                    :5_4:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :5_4:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:Upon:
undeepers> IN: ) UPON ( "becoming aware a data breach m <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:Upon:
pDT> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pDT> MATCH (COK): MUST ( BEFORE ( 30 ( "days" ) ) )
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 30) "days")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 30) "days"))                             :5_1:Upon:
******* / WHERE                                                                                                   :5_1:Upon:
WHERE> IN: UPON ( "becoming aware a data breach may <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=38:
WHERE> unexpected UPON
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=38:
$>|> unexpected UPON
$>|> expecting HAVING

preambleParamText:[Having]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=38:
preambleParamText:[Having]> unexpected UPON
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=38:
$>|> unexpected UPON
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=38:
preambleParamText:[Given]> unexpected UPON
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (COK): UPON
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / |>>/recurse                                                                                          :5_2:GoDeeper:
********** / |>>/recurse                                                                                         :5_2:Other "beco:
|>>/recurse> IN: "becoming aware a data breach may have o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=40:
|>>/recurse> unexpected "becoming aware a data breach may have occurred"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :5_2:Other "beco:
*********** / pParamText                                                                                        :5_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :5_2:Other "beco:
************* / pKeyValuesAka                                                                                 :5_2:Other "beco:
************** / slAKA                                                                                       :5_2:Other "beco:
*************** / $*|                                                                                       :5_2:Other "beco:
**************** / slAKA base                                                                              :5_2:Other "beco:
***************** / slKeyValues                                                                           :5_2:Other "beco:
****************** / $*|                                                                                 :5_2:Other "beco:
******************* / someSL                                                                            :5_2:Other "beco:
someSL> IN: "becoming aware a data breach may have o <…>
someSL> MATCH (COK): "becoming aware a data breach may have o <…>
someSL> VALUE: ((["becoming aware a data breach may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach may have occurred"],0)         :6_2:UnDeeper:
$*|> IN: "becoming aware a data breach may have o <…>
$*|> MATCH (COK): "becoming aware a data breach may have o <…>
$*|> VALUE: ((["becoming aware a data breach may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach may have occurred"],0)              :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / |?| optional something                                                             :6_2:UnDeeper:
******************** / |>>/recurse                                                                      :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :6_2:UnDeeper:
********************* / slTypeSig                                                                      :6_2:UnDeeper:
********************** / $>|                                                                          :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) WHEN ( "the data breach occurs on or a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :6_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :6_2:UnDeeper:
slKeyValues> IN: "becoming aware a data breach may have o <…>
slKeyValues> MATCH (COK): "becoming aware a data breach may have o <…>
slKeyValues> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0) :6_2:UnDeeper:
slAKA base> IN: "becoming aware a data breach may have o <…>
slAKA base> MATCH (COK): "becoming aware a data breach may have o <…>
slAKA base> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0) :6_2:UnDeeper:
$*|> IN: "becoming aware a data breach may have o <…>
$*|> MATCH (COK): "becoming aware a data breach may have o <…>
$*|> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0)      :6_2:UnDeeper:
*************** / |>>/recurse                                                                                :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :6_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :6_2:UnDeeper:
***************** / |?| optional something                                                                 :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / PAKA/akapart                                                                       :6_2:UnDeeper:
******************** / $>|                                                                              :6_2:UnDeeper:
********************* / Aka Token                                                                      :6_2:UnDeeper:
Aka Token> IN: ) WHEN ( "the data breach occurs on or a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :6_2:UnDeeper:
slAKA optional akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :6_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :6_2:UnDeeper:
*************** / |>>/recurse                                                                                :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :6_2:UnDeeper:
**************** / slAKA optional typically                                                                 :6_2:UnDeeper:
***************** / |?| optional something                                                                 :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / typically                                                                          :6_2:UnDeeper:
******************** / $>|                                                                              :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHEN ( "the data breach occurs on or a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :6_2:UnDeeper:
slAKA optional typically> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :6_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :6_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :6_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :6_2:UnDeeper:
slAKA> IN: "becoming aware a data breach may have o <…>
slAKA> MATCH (COK): "becoming aware a data breach may have o <…>
slAKA> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0)      :6_2:UnDeeper:
************** / undeepers                                                                                    :6_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :6_2:UnDeeper:
*************** > sameLine: success!                                                                         :6_2:UnDeeper:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :6_2:UnDeeper:
pKeyValuesAka> IN: "becoming aware a data breach may have o <…>
pKeyValuesAka> MATCH (COK): "becoming aware a data breach may have o <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach may have occurred" :| [],Nothing)    :6_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "becoming aware a data breach may have o <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "becoming aware a data breach may have o <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach may have occurred" :| [],Nothing) :6_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :6_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :6_2:UnDeeper:
************** / sameMany                                                                                     :6_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :6_2:UnDeeper:
**************** / slAKA                                                                                    :6_2:UnDeeper:
***************** / $*|                                                                                    :6_2:UnDeeper:
****************** / slAKA base                                                                           :6_2:UnDeeper:
******************* / slKeyValues                                                                        :6_2:UnDeeper:
******************** / $*|                                                                              :6_2:UnDeeper:
********************* / someSL                                                                         :6_2:UnDeeper:
********************** / pNumAsText                                                                   :6_2:UnDeeper:
pNumAsText> IN: ) WHEN ( "the data breach occurs on or a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) WHEN ( "the data breach occurs on or a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) WHEN ( "the data breach occurs on or a <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) WHEN ( "the data breach occurs on or a <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :6_2:UnDeeper:
manyIndentation/leaf?> IN: ) WHEN ( "the data breach occurs on or a <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :6_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :6_2:UnDeeper:
pParamText> IN: "becoming aware a data breach may have o <…>
pParamText> MATCH (COK): "becoming aware a data breach may have o <…>
pParamText> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach may have occurred" :| [],Nothing) :| []     :6_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach may have occurred" :| [],Nothing) :| []                :6_2:UnDeeper:
|>>/base> IN: "becoming aware a data breach may have o <…>
|>>/base> MATCH (COK): "becoming aware a data breach may have o <…>
|>>/base> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],0)     :6_2:UnDeeper:
|>>/recurse> IN: ( "becoming aware a data breach may have <…>
|>>/recurse> MATCH (COK): ( "becoming aware a data breach may have <…>
|>>/recurse> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1)    :6_2:UnDeeper:
|>| calling $>>> IN: ( "becoming aware a data breach may have <…>
|>| calling $>>> MATCH (COK): ( "becoming aware a data breach may have <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1)  :6_2:UnDeeper:
******** / undeepers                                                                                                :6_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :6_2:UnDeeper:
********* > sameLine: success!                                                                                  :6_1:When:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :6_1:When:
preambleParamText:[Upon]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Upon]> MATCH (COK): UPON ( "becoming aware a data breach may <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| []) :6_1:When:
******* / preambleParamText:[Upon]                                                                                :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting UPON

preambleParamText:[Upon]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=42:
preambleParamText:[Upon]> unexpected WHEN
preambleParamText:[Upon]> expecting UPON

******* / WHERE                                                                                                   :6_1:When:
WHERE> IN: WHEN ( "the data breach occurs on or aft <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=42:
WHERE> unexpected WHEN
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting HAVING

preambleParamText:[Having]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=42:
preambleParamText:[Having]> unexpected WHEN
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting GIVEN

preambleParamText:[Given]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=42:
preambleParamText:[Given]> unexpected WHEN
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :6_1:When:
preambleBoolStructR [Unless]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=42:
preambleBoolStructR [Unless]> unexpected WHEN
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :6_1:When:
******** / pBSR                                                                                                   :6_2:GoDeeper:
********* / ppp inner                                                                                            :6_2:GoDeeper:
********** / expression                                                                                         :6_2:GoDeeper:
*********** / labelPrefix                                                                                      :6_2:GoDeeper:
labelPrefix> IN: ( "the data breach occurs on or after th <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=43:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :6_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :6_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :6_2:GoDeeper:
************** / someIndentation                                                                            :6_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "the data breach occurs on or after th <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :6_2:Other "the:
*************** / manyIndentation/leaf?                                                                     :6_2:Other "the:
**************** / expression                                                                              :6_2:Other "the:
***************** / labelPrefix                                                                           :6_2:Other "the:
labelPrefix> IN: "the data breach occurs on or after the  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected )

***************** / term p                                                                                :6_2:Other "the:
****************** / term p/notLabelTerm                                                                 :6_2:Other "the:
******************* / term p/2:someIndentation expr p                                                   :6_2:Other "the:
******************** / someIndentation                                                                 :6_2:Other "the:
********************* / myindented: consuming GoDeeper                                                :6_2:Other "the:
myindented: consuming GoDeeper> IN: "the data breach occurs on or after the  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "the data breach occurs on or after the  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "the data breach occurs on or after the  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
term p/2:someIndentation expr p> expecting (

******************* / term p/3:plain p                                                                  :6_2:Other "the:
******************** / pRelPred                                                                        :6_2:Other "the:
********************* / slRelPred                                                                     :6_2:Other "the:
********************** / nested simpleHorn                                                           :6_2:Other "the:
*********************** > |^|                                                                       :6_2:Other "the:
*********************** / $*|                                                                       :6_2:Other "the:
************************ / slMultiTerm                                                             :6_2:Other "the:
************************* / someSL                                                                :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
*********************** / |^| deeps                                                                  :7_2:UnDeeper:
|^| deeps> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*********************** \ |^| deeps has returned ([()],-1)                                        :7_1:Do:
nested simpleHorn> IN: "the data breach occurs on or after the  <…>
nested simpleHorn> MATCH (CERR): "the data breach occurs on or after the  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=46:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting ) or MEANS

********************** / RPConstraint                                                                :6_2:Other "the:
*********************** / $*|                                                                       :6_2:Other "the:
************************ / slMultiTerm                                                             :6_2:Other "the:
************************* / someSL                                                                :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
*********************** / |>| calling $>>                                                            :7_2:UnDeeper:
************************ / |>>/recurse                                                              :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ / |>>/base                                                                 :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "the data breach occurs on or after the  <…>
RPConstraint> MATCH (CERR): "the data breach occurs on or after the  <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************** / RPBoolStructR                                                               :6_2:Other "the:
*********************** / $*|                                                                       :6_2:Other "the:
************************ / slMultiTerm                                                             :6_2:Other "the:
************************* / someSL                                                                :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
*********************** / |>| calling $>>                                                            :7_2:UnDeeper:
************************ / |>>/recurse                                                              :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ / |>>/base                                                                 :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "the data breach occurs on or after the  <…>
RPBoolStructR> MATCH (CERR): "the data breach occurs on or after the  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************** / RPMT                                                                        :6_2:Other "the:
*********************** / $*|                                                                       :6_2:Other "the:
************************ / slAKA                                                                   :6_2:Other "the:
************************* / $*|                                                                   :6_2:Other "the:
************************** / slAKA base                                                          :6_2:Other "the:
*************************** / slMultiTerm                                                       :6_2:Other "the:
**************************** / someSL                                                          :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

**************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*************************** \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slAKA base> IN: "the data breach occurs on or after the  <…>
slAKA base> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA base> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ slAKA base has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************* / |>>/recurse                                                            :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :7_2:UnDeeper:
************************** / slAKA optional akapart                                               :7_2:UnDeeper:
*************************** / |?| optional something                                             :7_2:UnDeeper:
**************************** / |>>/recurse                                                      :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :7_2:UnDeeper:
***************************** / PAKA/akapart                                                   :7_2:UnDeeper:
****************************** / $>|                                                          :7_2:UnDeeper:
******************************* / Aka Token                                                  :7_2:UnDeeper:
Aka Token> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :7_2:UnDeeper:
slAKA optional akapart> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :7_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :7_2:UnDeeper:
************************* / |>>/recurse                                                            :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :7_2:UnDeeper:
************************** / slAKA optional typically                                             :7_2:UnDeeper:
*************************** / |?| optional something                                             :7_2:UnDeeper:
**************************** / |>>/recurse                                                      :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :7_2:UnDeeper:
***************************** / typically                                                      :7_2:UnDeeper:
****************************** / $>|                                                          :7_2:UnDeeper:
$>|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :7_2:UnDeeper:
slAKA optional typically> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :7_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :7_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :7_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :7_2:UnDeeper:
slAKA> IN: "the data breach occurs on or after the  <…>
slAKA> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slAKA has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
RPMT> IN: "the data breach occurs on or after the  <…>
RPMT> MATCH (COK): "the data breach occurs on or after the  <…>
RPMT> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************** \ RPMT has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slRelPred> IN: "the data breach occurs on or after the  <…>
slRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
slRelPred> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ slRelPred has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
********************* / undeepers                                                                      :7_2:UnDeeper:
********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :7_2:UnDeeper:
********************** > sameLine: success!                                                           :7_2:UnDeeper:
undeepers> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************* \ undeepers has returned ()                                                      :7_2:UnDeeper:
pRelPred> IN: "the data breach occurs on or after the  <…>
pRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
pRelPred> VALUE: (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],[])

******************** \ pRelPred has returned RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"] :7_2:UnDeeper:
term p/3:plain p> IN: "the data breach occurs on or after the  <…>
term p/3:plain p> MATCH (COK): "the data breach occurs on or after the  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************* \ term p/3:plain p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
term p/notLabelTerm> IN: "the data breach occurs on or after the  <…>
term p/notLabelTerm> MATCH (COK): "the data breach occurs on or after the  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
term p> IN: "the data breach occurs on or after the  <…>
term p> MATCH (COK): "the data breach occurs on or after the  <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

***************** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
***************** / binary(Or)                                                                             :7_2:UnDeeper:
binary(Or)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                            :7_2:UnDeeper:
binary(And)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                        :7_2:UnDeeper:
binary(SetLess)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                        :7_2:UnDeeper:
binary(SetPlus)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "the data breach occurs on or after the  <…>
expression> MATCH (COK): "the data breach occurs on or after the  <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

**************** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
manyIndentation/leaf?> IN: "the data breach occurs on or after the  <…>
manyIndentation/leaf?> MATCH (COK): "the data breach occurs on or after the  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :7_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :7_1:Do:
someIndentation> IN: ( "the data breach occurs on or after th <…>
someIndentation> MATCH (COK): ( "the data breach occurs on or after th <…>
someIndentation> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p/2:someIndentation expr p> IN: ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p/notLabelTerm> IN: ( "the data breach occurs on or after th <…>
term p/notLabelTerm> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p> IN: ( "the data breach occurs on or after th <…>
term p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*********** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
*********** / binary(Or)                                                                                      :7_1:Do:
binary(Or)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected DO
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :7_1:Do:
binary(And)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected DO
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :7_1:Do:
binary(SetLess)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected DO
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :7_1:Do:
binary(SetPlus)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected DO
binary(SetPlus)> expecting PLUS

expression> IN: ( "the data breach occurs on or after th <…>
expression> MATCH (COK): ( "the data breach occurs on or after th <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
ppp inner> IN: ( "the data breach occurs on or after th <…>
ppp inner> MATCH (COK): ( "the data breach occurs on or after th <…>
ppp inner> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********* \ ppp inner has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
pBSR> IN: ( "the data breach occurs on or after th <…>
pBSR> MATCH (COK): ( "the data breach occurs on or after th <…>
pBSR> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******** \ pBSR has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
preambleBoolStructR [When,If]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> MATCH (COK): WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> VALUE: ((When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])),[])

******* \ preambleBoolStructR [When,If] has returned (When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :7_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :7_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=46:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / WHERE                                                                                                   :7_1:Do:
WHERE> IN: DO ( "assess" ( "if it is a Notifiable D <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=46:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=46:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=46:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=46:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=46:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :7_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=46:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / pDoAction/Do                                                                                            :7_1:Do:
pDoAction/Do> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :7_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :7_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :7_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :7_2:GoDeeper:
********** / expr pParamText                                                                                    :7_2:GoDeeper:
*********** / expression                                                                                       :7_2:GoDeeper:
************ / labelPrefix                                                                                    :7_2:GoDeeper:
labelPrefix> IN: ( "assess" ( "if it is a Notifiable Data <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=47:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :7_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :7_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :7_2:GoDeeper:
*************** / someIndentation                                                                          :7_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :7_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "assess" ( "if it is a Notifiable Data <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :7_2:Other "asse:
**************** / manyIndentation/leaf?                                                                   :7_2:Other "asse:
***************** / expression                                                                            :7_2:Other "asse:
****************** / labelPrefix                                                                         :7_2:Other "asse:
labelPrefix> IN: "assess" ( "if it is a Notifiable Data B <…>
labelPrefix> MATCH (COK): "assess"
labelPrefix> VALUE: ("assess",[])

****************** \ labelPrefix has returned "assess"                                                    :7_3:GoDeeper:
****************** / term p                                                                               :7_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :7_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :7_3:GoDeeper:
********************* / someIndentation                                                                :7_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :7_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "if it is a Notifiable Data Breach" )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :7_3:Other "if i:
********************** / manyIndentation/leaf?                                                         :7_3:Other "if i:
*********************** / expression                                                                  :7_3:Other "if i:
************************ / labelPrefix                                                               :7_3:Other "if i:
labelPrefix> IN: "if it is a Notifiable Data Breach" ) "b <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=51:
labelPrefix> unexpected )

************************ / term p                                                                    :7_3:Other "if i:
************************* / term p/notLabelTerm                                                     :7_3:Other "if i:
************************** / term p/2:someIndentation expr p                                       :7_3:Other "if i:
*************************** / someIndentation                                                     :7_3:Other "if i:
**************************** / myindented: consuming GoDeeper                                    :7_3:Other "if i:
myindented: consuming GoDeeper> IN: "if it is a Notifiable Data Breach" ) "b <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=50:
myindented: consuming GoDeeper> unexpected "if it is a Notifiable Data Breach"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "if it is a Notifiable Data Breach" ) "b <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=50:
someIndentation> unexpected "if it is a Notifiable Data Breach"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "if it is a Notifiable Data Breach" ) "b <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=50:
term p/2:someIndentation expr p> unexpected "if it is a Notifiable Data Breach"
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :7_3:Other "if i:
*************************** / pParamText                                                          :7_3:Other "if i:
**************************** / pParamText(flat) first line: pKeyValues                           :7_3:Other "if i:
***************************** / pKeyValuesAka                                                   :7_3:Other "if i:
****************************** / slAKA                                                         :7_3:Other "if i:
******************************* / $*|                                                         :7_3:Other "if i:
******************************** / slAKA base                                                :7_3:Other "if i:
********************************* / slKeyValues                                             :7_3:Other "if i:
********************************** / $*|                                                   :7_3:Other "if i:
*********************************** / someSL                                              :7_3:Other "if i:
someSL> IN: "if it is a Notifiable Data Breach" ) "b <…>
someSL> MATCH (COK): "if it is a Notifiable Data Breach"
someSL> VALUE: ((["if it is a Notifiable Data Breach"],0),[])

*********************************** \ someSL has returned (["if it is a Notifiable Data Breach"],0) :8_3:UnDeeper:
$*|> IN: "if it is a Notifiable Data Breach" ) "b <…>
$*|> MATCH (COK): "if it is a Notifiable Data Breach"
$*|> VALUE: ((["if it is a Notifiable Data Breach"],0),[])

********************************** \ $*| has returned (["if it is a Notifiable Data Breach"],0) :8_3:UnDeeper:
********************************** / |>>/recurse                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :8_3:UnDeeper:
*********************************** / |?| optional something                               :8_3:UnDeeper:
************************************ / |>>/recurse                                        :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                           :8_3:UnDeeper:
************************************* / slTypeSig                                        :8_3:UnDeeper:
************************************** / $>|                                            :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=51:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :8_3:UnDeeper:
*********************************** > |>>/base got Nothing                                 :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                      :8_3:UnDeeper:
slKeyValues> IN: "if it is a Notifiable Data Breach" ) "b <…>
slKeyValues> MATCH (COK): "if it is a Notifiable Data Breach"
slKeyValues> VALUE: ((("if it is a Notifiable Data Breach" :| [],Nothing),0),[])

********************************* \ slKeyValues has returned (("if it is a Notifiable Data Breach" :| [],Nothing),0) :8_3:UnDeeper:
slAKA base> IN: "if it is a Notifiable Data Breach" ) "b <…>
slAKA base> MATCH (COK): "if it is a Notifiable Data Breach"
slAKA base> VALUE: ((("if it is a Notifiable Data Breach" :| [],Nothing),0),[])

******************************** \ slAKA base has returned (("if it is a Notifiable Data Breach" :| [],Nothing),0) :8_3:UnDeeper:
$*|> IN: "if it is a Notifiable Data Breach" ) "b <…>
$*|> MATCH (COK): "if it is a Notifiable Data Breach"
$*|> VALUE: ((("if it is a Notifiable Data Breach" :| [],Nothing),0),[])

******************************* \ $*| has returned (("if it is a Notifiable Data Breach" :| [],Nothing),0) :8_3:UnDeeper:
******************************* / |>>/recurse                                                  :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :8_3:UnDeeper:
******************************** / slAKA optional akapart                                     :8_3:UnDeeper:
********************************* / |?| optional something                                   :8_3:UnDeeper:
********************************** / |>>/recurse                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :8_3:UnDeeper:
*********************************** / PAKA/akapart                                         :8_3:UnDeeper:
************************************ / $>|                                                :8_3:UnDeeper:
************************************* / Aka Token                                        :8_3:UnDeeper:
Aka Token> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=51:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=51:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :8_3:UnDeeper:
slAKA optional akapart> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)            :8_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :8_3:UnDeeper:
******************************* / |>>/recurse                                                  :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :8_3:UnDeeper:
******************************** / slAKA optional typically                                   :8_3:UnDeeper:
********************************* / |?| optional something                                   :8_3:UnDeeper:
********************************** / |>>/recurse                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :8_3:UnDeeper:
*********************************** / typically                                            :8_3:UnDeeper:
************************************ / $>|                                                :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=51:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :8_3:UnDeeper:
slAKA optional typically> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)          :8_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :8_3:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :8_3:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                  :8_3:UnDeeper:
slAKA> IN: "if it is a Notifiable Data Breach" ) "b <…>
slAKA> MATCH (COK): "if it is a Notifiable Data Breach"
slAKA> VALUE: ((("if it is a Notifiable Data Breach" :| [],Nothing),0),[])

****************************** \ slAKA has returned (("if it is a Notifiable Data Breach" :| [],Nothing),0) :8_3:UnDeeper:
****************************** / undeepers                                                      :8_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :8_3:UnDeeper:
******************************* > sameLine: success!                                           :8_3:UnDeeper:
undeepers> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :8_3:UnDeeper:
pKeyValuesAka> IN: "if it is a Notifiable Data Breach" ) "b <…>
pKeyValuesAka> MATCH (COK): "if it is a Notifiable Data Breach"
pKeyValuesAka> VALUE: (("if it is a Notifiable Data Breach" :| [],Nothing),[])

***************************** \ pKeyValuesAka has returned ("if it is a Notifiable Data Breach" :| [],Nothing) :8_3:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "if it is a Notifiable Data Breach" ) "b <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "if it is a Notifiable Data Breach"
pParamText(flat) first line: pKeyValues> VALUE: (("if it is a Notifiable Data Breach" :| [],Nothing),[])

**************************** \ pParamText(flat) first line: pKeyValues has returned ("if it is a Notifiable Data Breach" :| [],Nothing) :8_3:UnDeeper:
**************************** / pParamText(flat) subsequent lines: sameMany pKeyValues             :8_3:UnDeeper:
***************************** / manyIndentation/leaf?                                            :8_3:UnDeeper:
****************************** / sameMany                                                       :8_3:UnDeeper:
******************************* / pKeyValuesAka                                                :8_3:UnDeeper:
******************************** / slAKA                                                      :8_3:UnDeeper:
********************************* / $*|                                                      :8_3:UnDeeper:
********************************** / slAKA base                                             :8_3:UnDeeper:
*********************************** / slKeyValues                                          :8_3:UnDeeper:
************************************ / $*|                                                :8_3:UnDeeper:
************************************* / someSL                                           :8_3:UnDeeper:
************************************** / pNumAsText                                     :8_3:UnDeeper:
pNumAsText> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=51:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=51:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=51:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=51:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=51:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=51:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=51:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=51:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

****************************** \ sameMany has returned []                                       :8_3:UnDeeper:
manyIndentation/leaf?> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

***************************** \ manyIndentation/leaf? has returned []                            :8_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

**************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :8_3:UnDeeper:
pParamText> IN: "if it is a Notifiable Data Breach" ) "b <…>
pParamText> MATCH (COK): "if it is a Notifiable Data Breach"
pParamText> VALUE: (("if it is a Notifiable Data Breach" :| [],Nothing) :| [],[])

*************************** \ pParamText has returned ("if it is a Notifiable Data Breach" :| [],Nothing) :| [] :8_3:UnDeeper:
term p/3:plain p> IN: "if it is a Notifiable Data Breach" ) "b <…>
term p/3:plain p> MATCH (COK): "if it is a Notifiable Data Breach"
term p/3:plain p> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

************************** \ term p/3:plain p has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
term p/notLabelTerm> IN: "if it is a Notifiable Data Breach" ) "b <…>
term p/notLabelTerm> MATCH (COK): "if it is a Notifiable Data Breach"
term p/notLabelTerm> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
term p> IN: "if it is a Notifiable Data Breach" ) "b <…>
term p> MATCH (COK): "if it is a Notifiable Data Breach"
term p> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
************************ / binary(Or)                                                                 :8_3:UnDeeper:
binary(Or)> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=51:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :8_3:UnDeeper:
binary(And)> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=51:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :8_3:UnDeeper:
binary(SetLess)> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=51:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :8_3:UnDeeper:
binary(SetPlus)> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=51:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "if it is a Notifiable Data Breach" ) "b <…>
expression> MATCH (COK): "if it is a Notifiable Data Breach"
expression> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

*********************** \ expression has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
manyIndentation/leaf?> IN: "if it is a Notifiable Data Breach" ) "b <…>
manyIndentation/leaf?> MATCH (COK): "if it is a Notifiable Data Breach"
manyIndentation/leaf?> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :8_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :8_2:Other "by":
someIndentation> IN: ( "if it is a Notifiable Data Breach" )  <…>
someIndentation> MATCH (COK): ( "if it is a Notifiable Data Breach" )
someIndentation> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

********************* \ someIndentation has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_2:Other "by":
term p/2:someIndentation expr p> IN: ( "if it is a Notifiable Data Breach" )  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "if it is a Notifiable Data Breach" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_2:Other "by":
term p/notLabelTerm> IN: ( "if it is a Notifiable Data Breach" )  <…>
term p/notLabelTerm> MATCH (COK): ( "if it is a Notifiable Data Breach" )
term p/notLabelTerm> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_2:Other "by":
term p> IN: ( "if it is a Notifiable Data Breach" )  <…>
term p> MATCH (COK): ( "if it is a Notifiable Data Breach" )
term p> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_2:Other "by":
****************** / binary(Or)                                                                          :8_2:Other "by":
binary(Or)> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=52:
binary(Or)> unexpected "by"
binary(Or)> expecting OR

****************** / binary(And)                                                                         :8_2:Other "by":
binary(And)> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=52:
binary(And)> unexpected "by"
binary(And)> expecting AND

****************** / binary(SetLess)                                                                     :8_2:Other "by":
binary(SetLess)> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=52:
binary(SetLess)> unexpected "by"
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                     :8_2:Other "by":
binary(SetPlus)> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=52:
binary(SetPlus)> unexpected "by"
binary(SetPlus)> expecting PLUS

expression> IN: "assess" ( "if it is a Notifiable Data B <…>
expression> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
expression> VALUE: (MyLabel ["assess"] (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| [])),[])

***************** \ expression has returned MyLabel ["assess"] (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| [])) :8_2:Other "by":
manyIndentation/leaf?> IN: "assess" ( "if it is a Notifiable Data B <…>
manyIndentation/leaf?> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
manyIndentation/leaf?> VALUE: (MyLabel ["assess"] (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| [])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["assess"] (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| [])) :8_2:Other "by":
**************** / myindented: consuming UnDeeper                                                          :8_2:Other "by":
myindented: consuming UnDeeper> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=52:
myindented: consuming UnDeeper> unexpected "by"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "assess" ( "if it is a Notifiable Data <…>
someIndentation> MATCH (CERR): ( "assess" ( "if it is a Notifiable Data <…>
someIndentation> ERROR:
someIndentation> offset=52:
someIndentation> unexpected "by"
someIndentation> expecting ), AND, LESS, OR, or PLUS

term p/2:someIndentation expr p> IN: ( "assess" ( "if it is a Notifiable Data <…>
term p/2:someIndentation expr p> MATCH (CERR): ( "assess" ( "if it is a Notifiable Data <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=52:
term p/2:someIndentation expr p> unexpected "by"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, or PLUS

************** / term p/3:plain p                                                                           :7_2:GoDeeper:
*************** / pParamText                                                                               :7_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :7_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :7_2:GoDeeper:
****************** / slAKA                                                                              :7_2:GoDeeper:
******************* / $*|                                                                              :7_2:GoDeeper:
******************** / slAKA base                                                                     :7_2:GoDeeper:
********************* / slKeyValues                                                                  :7_2:GoDeeper:
********************** / $*|                                                                        :7_2:GoDeeper:
*********************** / someSL                                                                   :7_2:GoDeeper:
************************ / pNumAsText                                                             :7_2:GoDeeper:
pNumAsText> IN: ( "assess" ( "if it is a Notifiable Data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=47:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "assess" ( "if it is a Notifiable Data <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=47:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "assess" ( "if it is a Notifiable Data <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=47:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "assess" ( "if it is a Notifiable Data <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=47:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "assess" ( "if it is a Notifiable Data <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=47:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "assess" ( "if it is a Notifiable Data <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=47:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "assess" ( "if it is a Notifiable Data <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=47:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "assess" ( "if it is a Notifiable Data <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=47:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "assess" ( "if it is a Notifiable Data <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=47:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "assess" ( "if it is a Notifiable Data <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=47:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "assess" ( "if it is a Notifiable Data <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=47:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "assess" ( "if it is a Notifiable Data <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=52:
term p/notLabelTerm> unexpected "by"
term p/notLabelTerm> expecting ), AND, LESS, OR, or PLUS

term p> IN: ( "assess" ( "if it is a Notifiable Data <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=52:
term p> unexpected "by"
term p> expecting ), AND, LESS, OR, or PLUS

expression> IN: ( "assess" ( "if it is a Notifiable Data <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=52:
expression> unexpected "by"
expression> expecting expression

expr pParamText> IN: ( "assess" ( "if it is a Notifiable Data <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=52:
expr pParamText> unexpected "by"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( "assess" ( "if it is a Notifiable Data <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=52:
dBoolStructP calling exprP> unexpected "by"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( "assess" ( "if it is a Notifiable Data <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=52:
pAction calling dBoolStructP> unexpected "by"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: ( "assess" ( "if it is a Notifiable Data <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=52:
pDoAction/pAction> unexpected "by"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=52:
regulative permutation with deontic-temporal> unexpected "by"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :2_1:Every:
pTemporal/eventually> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=4:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=4:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :2_1:Every:
pTemporal/vaguely> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=4:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected AKA
pNumAsText> expecting number

someSL> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
someSL> MATCH (COK): "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA base> MATCH (COK): "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
$*|> MATCH (COK): "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) ) WHO ( "is" ( "not" ( " <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( "no <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( " <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: ( ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( <…>
|>>/recurse> MATCH (COK): ( ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You"
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
undeepers> MATCH (COK): ) ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pMultiTermAka> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented: consuming UnDeeper                                                                                 :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( "is" ( "not" ( "a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :3_1:Who:
someIndentation> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> MATCH (COK): ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Organisation" :| [],Nothing) :| []))            :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / expression                                                                            :3_2:Other "is":
****************** / labelPrefix                                                                         :3_2:Other "is":
labelPrefix> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

****************** \ labelPrefix has returned "is"                                                        :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "not":
********************** / manyIndentation/leaf?                                                         :3_3:Other "not":
*********************** / expression                                                                  :3_3:Other "not":
************************ / labelPrefix                                                               :3_3:Other "not":
labelPrefix> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
labelPrefix> MATCH (COK): "not"
labelPrefix> VALUE: ("not",[])

************************ \ labelPrefix has returned "not"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "a Pu:
**************************** / manyIndentation/leaf?                                               :3_4:Other "a Pu:
***************************** / expression                                                        :3_4:Other "a Pu:
****************************** / labelPrefix                                                     :3_4:Other "a Pu:
labelPrefix> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "a Pu:
******************************* / term p/notLabelTerm                                           :3_4:Other "a Pu:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "a Pu:
********************************* / someIndentation                                           :3_4:Other "a Pu:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "a Pu:
myindented: consuming GoDeeper> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=24:
myindented: consuming GoDeeper> unexpected "a Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected "a Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected "a Public Agency"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "a Pu:
********************************* / pRelPred                                                  :3_4:Other "a Pu:
********************************** / slRelPred                                               :3_4:Other "a Pu:
*********************************** / nested simpleHorn                                     :3_4:Other "a Pu:
************************************ > |^|                                                 :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:Must:
nested simpleHorn> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
nested simpleHorn> MATCH (CERR): "a Public Agency" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPConstraint> MATCH (CERR): "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPBoolStructR> MATCH (CERR): "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slAKA                                             :3_4:Other "a Pu:
************************************** / $*|                                             :3_4:Other "a Pu:
*************************************** / slAKA base                                    :3_4:Other "a Pu:
**************************************** / slMultiTerm                                 :3_4:Other "a Pu:
***************************************** / someSL                                    :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

***************************************** \ someSL has returned (["a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

**************************************** \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slAKA base> MATCH (COK): "a Public Agency"
slAKA base> VALUE: ((["a Public Agency"],0),[])

*************************************** \ slAKA base has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************** \ $*| has returned (["a Public Agency"],0)     :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slAKA> MATCH (COK): "a Public Agency"
slAKA> VALUE: ((["a Public Agency"],0),[])

************************************* \ slAKA has returned (["a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
RPMT> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPMT> MATCH (COK): "a Public Agency"
RPMT> VALUE: ((RPMT ["a Public Agency"],0),[])

*********************************** \ RPMT has returned (RPMT ["a Public Agency"],0)     :4_2:UnDeeper:
slRelPred> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slRelPred> MATCH (COK): "a Public Agency"
slRelPred> VALUE: ((RPMT ["a Public Agency"],0),[])

********************************** \ slRelPred has returned (RPMT ["a Public Agency"],0)  :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
pRelPred> MATCH (COK): "a Public Agency"
pRelPred> VALUE: (RPMT ["a Public Agency"],[])

********************************* \ pRelPred has returned RPMT ["a Public Agency"]         :4_2:UnDeeper:
term p/3:plain p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/3:plain p> MATCH (COK): "a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/notLabelTerm> MATCH (COK): "a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p> MATCH (COK): "a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["a Public Agency"])        :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
expression> MATCH (COK): "a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["a Public Agency"])      :4_2:UnDeeper:
manyIndentation/leaf?> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
manyIndentation/leaf?> MATCH (COK): "a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
someIndentation> MATCH (COK): ( "a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p/notLabelTerm> MATCH (COK): ( "a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p> MATCH (COK): ( "a Public Agency" )
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["a Public Agency"])                      :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
expression> MATCH (COK): "not" ( "a Public Agency" )
expression> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

*********************** \ expression has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))  :4_3:UnDeeper:
manyIndentation/leaf?> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
manyIndentation/leaf?> MATCH (COK): "not" ( "a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
someIndentation> MATCH (COK): ( "not" ( "a Public Agency" ) )
someIndentation> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************* \ someIndentation has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p/notLabelTerm> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

****************** \ term p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))                  :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
expression> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

***************** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Must:
someIndentation> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someIndentation> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
someIndentation> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*************** \ someIndentation has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/2:someIndentation expr p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/notLabelTerm> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************ \ term p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))      :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
expression> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*********** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))    :4_1:Must:
ppp inner> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
ppp inner> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["is","not","a Public Agency"])                                 :4_1:Must:
pBSR> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pBSR> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
pBSR> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is","not","a Public Agency"])                                        :4_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))   :4_1:Must:
manyIndentation/leaf?> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******* \ manyIndentation/leaf? has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))                     :4_1:Must:
******* / WHERE                                                                                                   :4_1:Must:
WHERE> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=28:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=28:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=28:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=28:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=28:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=28:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :4_1:Must:
pTemporal/eventually> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :4_1:Must:
pTemporal/vaguely> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=28:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :4_1:Must:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / expression                                                                                       :4_2:GoDeeper:
************ / labelPrefix                                                                                    :4_2:GoDeeper:
labelPrefix> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :4_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :4_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :4_2:GoDeeper:
*************** / someIndentation                                                                          :4_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :4_2:Before:
**************** / manyIndentation/leaf?                                                                   :4_2:Before:
***************** / expression                                                                            :4_2:Before:
****************** / labelPrefix                                                                         :4_2:Before:
labelPrefix> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=30:
labelPrefix> unexpected BEFORE
labelPrefix> expecting Other text

****************** / term p                                                                              :4_2:Before:
******************* / term p/notLabelTerm                                                               :4_2:Before:
******************** / term p/2:someIndentation expr p                                                 :4_2:Before:
********************* / someIndentation                                                               :4_2:Before:
********************** / myindented: consuming GoDeeper                                              :4_2:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=30:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected BEFORE
someIndentation> expecting (

term p/2:someIndentation expr p> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=30:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :4_2:Before:
********************* / pParamText                                                                    :4_2:Before:
********************** / pParamText(flat) first line: pKeyValues                                     :4_2:Before:
*********************** / pKeyValuesAka                                                             :4_2:Before:
************************ / slAKA                                                                   :4_2:Before:
************************* / $*|                                                                   :4_2:Before:
************************** / slAKA base                                                          :4_2:Before:
*************************** / slKeyValues                                                       :4_2:Before:
**************************** / $*|                                                             :4_2:Before:
***************************** / someSL                                                        :4_2:Before:
****************************** / pNumAsText                                                  :4_2:Before:
pNumAsText> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected BEFORE
pNumAsText> expecting number

someSL> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=30:
someSL> unexpected BEFORE
someSL> expecting other text or number

$*|> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected BEFORE
$*|> expecting other text or number

slKeyValues> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=30:
slKeyValues> unexpected BEFORE
slKeyValues> expecting other text or number

slAKA base> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=30:
slAKA base> unexpected BEFORE
slAKA base> expecting other text or number

$*|> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected BEFORE
$*|> expecting other text or number

slAKA> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=30:
slAKA> unexpected BEFORE
slAKA> expecting other text or number

pKeyValuesAka> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=30:
pKeyValuesAka> unexpected BEFORE
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=30:
pParamText(flat) first line: pKeyValues> unexpected BEFORE
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=30:
pParamText> unexpected BEFORE
pParamText> expecting other text or number

term p/3:plain p> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=30:
term p/3:plain p> unexpected BEFORE
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=30:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or term

term p> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=30:
term p> unexpected BEFORE
term p> expecting ( or term

expression> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=30:
expression> unexpected BEFORE
expression> expecting expression

manyIndentation/leaf?> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=30:
manyIndentation/leaf?> unexpected BEFORE
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                         :4_2:Before:
***************** / someIndentation                                                                       :4_2:Before:
****************** / myindented: consuming GoDeeper                                                      :4_2:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=30:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected BEFORE
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=30:
manyIndentation/deeper; calling someIndentation> unexpected BEFORE
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected BEFORE
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=30:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting ( or expression

************** / term p/3:plain p                                                                           :4_2:GoDeeper:
*************** / pParamText                                                                               :4_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :4_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :4_2:GoDeeper:
****************** / slAKA                                                                              :4_2:GoDeeper:
******************* / $*|                                                                              :4_2:GoDeeper:
******************** / slAKA base                                                                     :4_2:GoDeeper:
********************* / slKeyValues                                                                  :4_2:GoDeeper:
********************** / $*|                                                                        :4_2:GoDeeper:
*********************** / someSL                                                                   :4_2:GoDeeper:
************************ / pNumAsText                                                             :4_2:GoDeeper:
pNumAsText> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=29:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=29:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=29:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=29:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=29:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=29:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=29:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=30:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or expression

term p> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=30:
term p> unexpected BEFORE
term p> expecting ( or expression

expression> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=30:
expression> unexpected BEFORE
expression> expecting expression

expr pParamText> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=30:
expr pParamText> unexpected BEFORE
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=30:
dBoolStructP calling exprP> unexpected BEFORE
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=30:
pAction calling dBoolStructP> unexpected BEFORE
pAction calling dBoolStructP> expecting expression

pDA> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pDA> MATCH (CERR): MUST
pDA> ERROR:
pDA> offset=30:
pDA> unexpected BEFORE
pDA> expecting expression

regulative permutation with deontic-action> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=30:
regulative permutation with deontic-action> unexpected BEFORE
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or expression

permutationsReg> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=52:
permutationsReg> unexpected "by"
permutationsReg> expecting expression

pRegRuleNormal> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=52:
pRegRuleNormal> unexpected "by"
pRegRuleNormal> expecting expression

pRegRule> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRegRule> MATCH (CERR): §§ ( "Assess" )
pRegRule> ERROR:
pRegRule> offset=52:
pRegRule> unexpected "by"
pRegRule> expecting expression

*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Asse:
******** > |>>/base got "Assess"                                                                                    :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

******* \ |>>/base has returned ("Assess",0)                                                                         :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

****** \ |>>/recurse has returned ("Assess",1)                                                                        :2_2:UnDeeper:
|>| calling $>>> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>| calling $>>> MATCH (COK): ( "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

***** \ |>| calling $>> has returned ("Assess",1)                                                                      :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Every:
undeepers> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (COK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / pHornlike/uponLimb                                                                                            :2_1:Every:
***** / preambleParamText:[Upon]                                                                                    :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :2_1:Every:
***** / preambleParamText:[Given]                                                                                   :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

pTypeDefinition> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pTypeDefinition> MATCH (CERR): §§ ( "Assess" )
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, or UPON

*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Asse:
******** > |>>/base got "Assess"                                                                                    :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

******* \ |>>/base has returned ("Assess",0)                                                                         :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

****** \ |>>/recurse has returned ("Assess",1)                                                                        :2_2:UnDeeper:
|>| calling $>>> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>| calling $>>> MATCH (COK): ( "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

***** \ |>| calling $>> has returned ("Assess",1)                                                                      :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Every:
undeepers> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (COK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / calling myindented pNameParens                                                                                :2_1:Every:
***** / manyIndentation/leaf?                                                                                       :2_1:Every:
****** / pMultiTermAka                                                                                             :2_1:Every:
******* / pAKA                                                                                                    :2_1:Every:
******** / slAKA                                                                                                 :2_1:Every:
********* / $*|                                                                                                 :2_1:Every:
********** / slAKA base                                                                                        :2_1:Every:
*********** / slMultiTerm                                                                                     :2_1:Every:
************ / someSL                                                                                        :2_1:Every:
************* / pNumAsText                                                                                  :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

pAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected EVERY
pAKA> expecting other text or number

pMultiTermAka> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Every:
****** / someIndentation                                                                                           :2_1:Every:
******* / myindented: consuming GoDeeper                                                                          :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pConstitutiveRule> MATCH (CERR): §§ ( "Assess" )
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting ( or other text or number

*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

******* / |>>/base                                                                                                  :1_2:Other "Asse:
******** > |>>/base got "Assess"                                                                                    :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

******* \ |>>/base has returned ("Assess",0)                                                                         :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

****** \ |>>/recurse has returned ("Assess",1)                                                                        :2_2:UnDeeper:
|>| calling $>>> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>| calling $>>> MATCH (COK): ( "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

***** \ |>| calling $>> has returned ("Assess",1)                                                                      :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Every:
undeepers> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (COK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / pExpect                                                                                                       :2_1:Every:
pExpect> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected EVERY
pExpect> expecting EXPECT

pScenarioRule> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pScenarioRule> MATCH (CERR): §§ ( "Assess" )
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting EXPECT or GIVEN

*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>| calling $>>                                                                                            :1_2:GoDeeper:
******* / |>>/recurse                                                                                              :1_2:GoDeeper:
******** / |>>/recurse                                                                                             :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

******** / |>>/base                                                                                                :1_2:Other "Asse:
********* > |>>/base got "Assess"                                                                                  :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

******** \ |>>/base has returned ("Assess",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

******* \ |>>/recurse has returned ("Assess",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>| calling $>>> MATCH (COK): ( "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

****** \ |>| calling $>> has returned ("Assess",1)                                                                    :2_2:UnDeeper:
****** / |>| calling $>>                                                                                              :2_2:UnDeeper:
******* / |>>/recurse                                                                                                :2_2:UnDeeper:
|>>/recurse> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******* / |>>/base                                                                                                   :2_2:UnDeeper:
******** > |>>/base got Nothing                                                                                     :2_2:UnDeeper:
|>>/base> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******* \ |>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

****** \ |>| calling $>> has returned (Nothing,0)                                                                     :2_2:UnDeeper:
****** / undeepers                                                                                                    :2_2:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :2_2:UnDeeper:
******* > sameLine: success!                                                                                      :2_1:Every:
undeepers> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (COK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

***** \ pRuleLabel has returned ("\167",2,"Assess")                                                                 :2_1:Every:
pSrcRef> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pSrcRef> MATCH (COK): §§ ( "Assess" )
pSrcRef> VALUE: ((Just ("\167",2,"Assess"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Assess"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Every:
**** / pHornlike / permute                                                                                           :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

pHornlike / permute> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=4:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

pHornlike> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pHornlike> MATCH (CERR): §§ ( "Assess" )
pHornlike> ERROR:
pHornlike> offset=4:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

**** \ $>| has returned RuleMarker 2 "\167"                                                                           :1_2:GoDeeper:
**** / |>| calling $>>                                                                                                :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

****** / |>>/base                                                                                                    :1_2:Other "Asse:
******* > |>>/base got "Assess"                                                                                      :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

****** \ |>>/base has returned ("Assess",0)                                                                           :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

***** \ |>>/recurse has returned ("Assess",1)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>| calling $>>> MATCH (COK): ( "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

**** \ |>| calling $>> has returned ("Assess",1)                                                                        :2_2:UnDeeper:
**** / |>| calling $>>                                                                                                  :2_2:UnDeeper:
***** / |>>/recurse                                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***** / |>>/base                                                                                                       :2_2:UnDeeper:
****** > |>>/base got Nothing                                                                                         :2_2:UnDeeper:
|>>/base> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***** \ |>>/base has returned (Nothing,0)                                                                              :2_2:UnDeeper:
|>| calling $>>> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

**** \ |>| calling $>> has returned (Nothing,0)                                                                         :2_2:UnDeeper:
**** / undeepers                                                                                                        :2_2:UnDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                         :2_2:UnDeeper:
***** > sameLine: success!                                                                                          :2_1:Every:
undeepers> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                     :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (COK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

*** \ pRuleLabel has returned ("\167",2,"Assess")                                                                     :2_1:Every:
pRule> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRule> MATCH (COK): §§ ( "Assess" )
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",2,"Assess"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})},[])

** \ pRule has returned RuleGroup {rlabel = Just ("\167",2,"Assess"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:Every:
** / pRule                                                                                                             :2_1:Every:
*** / pRegRule                                                                                                        :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :2_1:Every:
***** / someDeep                                                                                                    :2_1:Every:
****** / someDeep first part calls base directly                                                                   :2_1:Every:
someDeep first part calls base directly> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

someDeep> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected EVERY
someDeep> expecting Other text

pRegRuleSugary> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:Every:
***** / permutationsReg                                                                                             :2_1:Every:
****** / regulative permutation with deontic-temporal                                                              :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected AKA
pNumAsText> expecting number

someSL> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
someSL> MATCH (COK): "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA base> MATCH (COK): "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
$*|> MATCH (COK): "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) ) WHO ( "is" ( "not" ( " <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( "no <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( " <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: ( ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( <…>
|>>/recurse> MATCH (COK): ( ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You"
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
undeepers> MATCH (COK): ) ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pMultiTermAka> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented: consuming UnDeeper                                                                                 :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( "is" ( "not" ( "a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :3_1:Who:
someIndentation> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> MATCH (COK): ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Organisation" :| [],Nothing) :| []))            :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / expression                                                                            :3_2:Other "is":
****************** / labelPrefix                                                                         :3_2:Other "is":
labelPrefix> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

****************** \ labelPrefix has returned "is"                                                        :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "not":
********************** / manyIndentation/leaf?                                                         :3_3:Other "not":
*********************** / expression                                                                  :3_3:Other "not":
************************ / labelPrefix                                                               :3_3:Other "not":
labelPrefix> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
labelPrefix> MATCH (COK): "not"
labelPrefix> VALUE: ("not",[])

************************ \ labelPrefix has returned "not"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "a Pu:
**************************** / manyIndentation/leaf?                                               :3_4:Other "a Pu:
***************************** / expression                                                        :3_4:Other "a Pu:
****************************** / labelPrefix                                                     :3_4:Other "a Pu:
labelPrefix> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "a Pu:
******************************* / term p/notLabelTerm                                           :3_4:Other "a Pu:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "a Pu:
********************************* / someIndentation                                           :3_4:Other "a Pu:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "a Pu:
myindented: consuming GoDeeper> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=24:
myindented: consuming GoDeeper> unexpected "a Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected "a Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected "a Public Agency"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "a Pu:
********************************* / pRelPred                                                  :3_4:Other "a Pu:
********************************** / slRelPred                                               :3_4:Other "a Pu:
*********************************** / nested simpleHorn                                     :3_4:Other "a Pu:
************************************ > |^|                                                 :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:Must:
nested simpleHorn> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
nested simpleHorn> MATCH (CERR): "a Public Agency" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPConstraint> MATCH (CERR): "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPBoolStructR> MATCH (CERR): "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slAKA                                             :3_4:Other "a Pu:
************************************** / $*|                                             :3_4:Other "a Pu:
*************************************** / slAKA base                                    :3_4:Other "a Pu:
**************************************** / slMultiTerm                                 :3_4:Other "a Pu:
***************************************** / someSL                                    :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

***************************************** \ someSL has returned (["a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

**************************************** \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slAKA base> MATCH (COK): "a Public Agency"
slAKA base> VALUE: ((["a Public Agency"],0),[])

*************************************** \ slAKA base has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************** \ $*| has returned (["a Public Agency"],0)     :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slAKA> MATCH (COK): "a Public Agency"
slAKA> VALUE: ((["a Public Agency"],0),[])

************************************* \ slAKA has returned (["a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
RPMT> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPMT> MATCH (COK): "a Public Agency"
RPMT> VALUE: ((RPMT ["a Public Agency"],0),[])

*********************************** \ RPMT has returned (RPMT ["a Public Agency"],0)     :4_2:UnDeeper:
slRelPred> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slRelPred> MATCH (COK): "a Public Agency"
slRelPred> VALUE: ((RPMT ["a Public Agency"],0),[])

********************************** \ slRelPred has returned (RPMT ["a Public Agency"],0)  :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
pRelPred> MATCH (COK): "a Public Agency"
pRelPred> VALUE: (RPMT ["a Public Agency"],[])

********************************* \ pRelPred has returned RPMT ["a Public Agency"]         :4_2:UnDeeper:
term p/3:plain p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/3:plain p> MATCH (COK): "a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/notLabelTerm> MATCH (COK): "a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p> MATCH (COK): "a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["a Public Agency"])        :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
expression> MATCH (COK): "a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["a Public Agency"])      :4_2:UnDeeper:
manyIndentation/leaf?> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
manyIndentation/leaf?> MATCH (COK): "a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
someIndentation> MATCH (COK): ( "a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p/notLabelTerm> MATCH (COK): ( "a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p> MATCH (COK): ( "a Public Agency" )
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["a Public Agency"])                      :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
expression> MATCH (COK): "not" ( "a Public Agency" )
expression> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

*********************** \ expression has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))  :4_3:UnDeeper:
manyIndentation/leaf?> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
manyIndentation/leaf?> MATCH (COK): "not" ( "a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
someIndentation> MATCH (COK): ( "not" ( "a Public Agency" ) )
someIndentation> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************* \ someIndentation has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p/notLabelTerm> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

****************** \ term p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))                  :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
expression> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

***************** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Must:
someIndentation> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someIndentation> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
someIndentation> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*************** \ someIndentation has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/2:someIndentation expr p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/notLabelTerm> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************ \ term p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))      :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
expression> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*********** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))    :4_1:Must:
ppp inner> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
ppp inner> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["is","not","a Public Agency"])                                 :4_1:Must:
pBSR> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pBSR> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
pBSR> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is","not","a Public Agency"])                                        :4_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))   :4_1:Must:
manyIndentation/leaf?> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******* \ manyIndentation/leaf? has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))                     :4_1:Must:
******* / WHERE                                                                                                   :4_1:Must:
WHERE> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=28:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=28:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=28:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=28:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=28:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=28:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Before:
|>>/recurse> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected BEFORE
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Before:
*********** / pTemporal/eventually                                                                              :4_2:Before:
pTemporal/eventually> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=30:
pTemporal/eventually> unexpected BEFORE
pTemporal/eventually> expecting EVENTUALLY

*********** / pTemporal/specifically                                                                            :4_2:Before:
************ / $>|                                                                                             :4_2:Before:
$>|> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
$>|> MATCH (COK): BEFORE
$>|> VALUE: (Before,[])

************ \ $>| has returned Before                                                                          :4_3:GoDeeper:
************ / |>>/recurse                                                                                      :4_3:GoDeeper:
************* / |>>/recurse                                                                                     :4_3:TNumber 30:
|>>/recurse> IN: 30 ( "days" ) ) ) UPON ( "becoming aware <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected 30
|>>/recurse> expecting (

************* / |>>/base                                                                                        :4_3:TNumber 30:
************** > |>>/base got Just 30                                                                           :4_4:GoDeeper:
|>>/base> IN: 30 ( "days" ) ) ) UPON ( "becoming aware <…>
|>>/base> MATCH (COK): 30
|>>/base> VALUE: ((Just 30,0),[])

************* \ |>>/base has returned (Just 30,0)                                                                :4_4:GoDeeper:
|>>/recurse> IN: ( 30 ( "days" ) ) ) UPON ( "becoming awa <…>
|>>/recurse> MATCH (COK): ( 30
|>>/recurse> VALUE: ((Just 30,1),[])

************ \ |>>/recurse has returned (Just 30,1)                                                               :4_4:GoDeeper:
************ / |>| calling $>>                                                                                    :4_4:GoDeeper:
************* / |>>/recurse                                                                                      :4_4:GoDeeper:
************** / |>>/recurse                                                                                     :4_4:Other "days:
|>>/recurse> IN: "days" ) ) ) UPON ( "becoming aware a da <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=34:
|>>/recurse> unexpected "days"
|>>/recurse> expecting (

************** / |>>/base                                                                                        :4_4:Other "days:
*************** > |>>/base got "days"                                                                        :5_2:UnDeeper:
|>>/base> IN: "days" ) ) ) UPON ( "becoming aware a da <…>
|>>/base> MATCH (COK): "days"
|>>/base> VALUE: (("days",0),[])

************** \ |>>/base has returned ("days",0)                                                             :5_2:UnDeeper:
|>>/recurse> IN: ( "days" ) ) ) UPON ( "becoming aware a  <…>
|>>/recurse> MATCH (COK): ( "days"
|>>/recurse> VALUE: (("days",1),[])

************* \ |>>/recurse has returned ("days",1)                                                            :5_2:UnDeeper:
|>| calling $>>> IN: ( "days" ) ) ) UPON ( "becoming aware a  <…>
|>| calling $>>> MATCH (COK): ( "days"
|>| calling $>>> VALUE: (("days",1),[])

************ \ |>| calling $>> has returned ("days",1)                                                          :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                                 :5_4:UnDeeper:
undeepers> IN: ) ) ) UPON ( "becoming aware a data brea <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                            :5_4:UnDeeper:
pTemporal/specifically> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pTemporal/specifically> MATCH (COK): BEFORE ( 30 ( "days" ) )
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 30) "days"),[])

*********** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 30) "days")                 :5_4:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TBefore (Just 30) "days"))                                 :5_4:UnDeeper:
|>>/base> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
|>>/base> MATCH (COK): BEFORE ( 30 ( "days" ) )
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),0)                      :5_4:UnDeeper:
|>>/recurse> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
|>>/recurse> MATCH (COK): ( BEFORE ( 30 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),1)                     :5_4:UnDeeper:
|>| calling $>>> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
|>| calling $>>> MATCH (COK): ( BEFORE ( 30 ( "days" ) )
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),1)                   :5_4:UnDeeper:
******** / undeepers                                                                                                    :5_4:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :5_4:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:Upon:
undeepers> IN: ) UPON ( "becoming aware a data breach m <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:Upon:
pDT> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pDT> MATCH (COK): MUST ( BEFORE ( 30 ( "days" ) ) )
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 30) "days")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 30) "days"))                             :5_1:Upon:
******* / WHERE                                                                                                   :5_1:Upon:
WHERE> IN: UPON ( "becoming aware a data breach may <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=38:
WHERE> unexpected UPON
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=38:
$>|> unexpected UPON
$>|> expecting HAVING

preambleParamText:[Having]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=38:
preambleParamText:[Having]> unexpected UPON
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=38:
$>|> unexpected UPON
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=38:
preambleParamText:[Given]> unexpected UPON
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (COK): UPON
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / |>>/recurse                                                                                          :5_2:GoDeeper:
********** / |>>/recurse                                                                                         :5_2:Other "beco:
|>>/recurse> IN: "becoming aware a data breach may have o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=40:
|>>/recurse> unexpected "becoming aware a data breach may have occurred"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :5_2:Other "beco:
*********** / pParamText                                                                                        :5_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :5_2:Other "beco:
************* / pKeyValuesAka                                                                                 :5_2:Other "beco:
************** / slAKA                                                                                       :5_2:Other "beco:
*************** / $*|                                                                                       :5_2:Other "beco:
**************** / slAKA base                                                                              :5_2:Other "beco:
***************** / slKeyValues                                                                           :5_2:Other "beco:
****************** / $*|                                                                                 :5_2:Other "beco:
******************* / someSL                                                                            :5_2:Other "beco:
someSL> IN: "becoming aware a data breach may have o <…>
someSL> MATCH (COK): "becoming aware a data breach may have o <…>
someSL> VALUE: ((["becoming aware a data breach may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach may have occurred"],0)         :6_2:UnDeeper:
$*|> IN: "becoming aware a data breach may have o <…>
$*|> MATCH (COK): "becoming aware a data breach may have o <…>
$*|> VALUE: ((["becoming aware a data breach may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach may have occurred"],0)              :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / |?| optional something                                                             :6_2:UnDeeper:
******************** / |>>/recurse                                                                      :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :6_2:UnDeeper:
********************* / slTypeSig                                                                      :6_2:UnDeeper:
********************** / $>|                                                                          :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) WHEN ( "the data breach occurs on or a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :6_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :6_2:UnDeeper:
slKeyValues> IN: "becoming aware a data breach may have o <…>
slKeyValues> MATCH (COK): "becoming aware a data breach may have o <…>
slKeyValues> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0) :6_2:UnDeeper:
slAKA base> IN: "becoming aware a data breach may have o <…>
slAKA base> MATCH (COK): "becoming aware a data breach may have o <…>
slAKA base> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0) :6_2:UnDeeper:
$*|> IN: "becoming aware a data breach may have o <…>
$*|> MATCH (COK): "becoming aware a data breach may have o <…>
$*|> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0)      :6_2:UnDeeper:
*************** / |>>/recurse                                                                                :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :6_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :6_2:UnDeeper:
***************** / |?| optional something                                                                 :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / PAKA/akapart                                                                       :6_2:UnDeeper:
******************** / $>|                                                                              :6_2:UnDeeper:
********************* / Aka Token                                                                      :6_2:UnDeeper:
Aka Token> IN: ) WHEN ( "the data breach occurs on or a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :6_2:UnDeeper:
slAKA optional akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :6_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :6_2:UnDeeper:
*************** / |>>/recurse                                                                                :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :6_2:UnDeeper:
**************** / slAKA optional typically                                                                 :6_2:UnDeeper:
***************** / |?| optional something                                                                 :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / typically                                                                          :6_2:UnDeeper:
******************** / $>|                                                                              :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHEN ( "the data breach occurs on or a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :6_2:UnDeeper:
slAKA optional typically> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :6_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :6_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :6_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :6_2:UnDeeper:
slAKA> IN: "becoming aware a data breach may have o <…>
slAKA> MATCH (COK): "becoming aware a data breach may have o <…>
slAKA> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0)      :6_2:UnDeeper:
************** / undeepers                                                                                    :6_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :6_2:UnDeeper:
*************** > sameLine: success!                                                                         :6_2:UnDeeper:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :6_2:UnDeeper:
pKeyValuesAka> IN: "becoming aware a data breach may have o <…>
pKeyValuesAka> MATCH (COK): "becoming aware a data breach may have o <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach may have occurred" :| [],Nothing)    :6_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "becoming aware a data breach may have o <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "becoming aware a data breach may have o <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach may have occurred" :| [],Nothing) :6_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :6_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :6_2:UnDeeper:
************** / sameMany                                                                                     :6_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :6_2:UnDeeper:
**************** / slAKA                                                                                    :6_2:UnDeeper:
***************** / $*|                                                                                    :6_2:UnDeeper:
****************** / slAKA base                                                                           :6_2:UnDeeper:
******************* / slKeyValues                                                                        :6_2:UnDeeper:
******************** / $*|                                                                              :6_2:UnDeeper:
********************* / someSL                                                                         :6_2:UnDeeper:
********************** / pNumAsText                                                                   :6_2:UnDeeper:
pNumAsText> IN: ) WHEN ( "the data breach occurs on or a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) WHEN ( "the data breach occurs on or a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) WHEN ( "the data breach occurs on or a <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) WHEN ( "the data breach occurs on or a <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :6_2:UnDeeper:
manyIndentation/leaf?> IN: ) WHEN ( "the data breach occurs on or a <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :6_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :6_2:UnDeeper:
pParamText> IN: "becoming aware a data breach may have o <…>
pParamText> MATCH (COK): "becoming aware a data breach may have o <…>
pParamText> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach may have occurred" :| [],Nothing) :| []     :6_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach may have occurred" :| [],Nothing) :| []                :6_2:UnDeeper:
|>>/base> IN: "becoming aware a data breach may have o <…>
|>>/base> MATCH (COK): "becoming aware a data breach may have o <…>
|>>/base> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],0)     :6_2:UnDeeper:
|>>/recurse> IN: ( "becoming aware a data breach may have <…>
|>>/recurse> MATCH (COK): ( "becoming aware a data breach may have <…>
|>>/recurse> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1)    :6_2:UnDeeper:
|>| calling $>>> IN: ( "becoming aware a data breach may have <…>
|>| calling $>>> MATCH (COK): ( "becoming aware a data breach may have <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1)  :6_2:UnDeeper:
******** / undeepers                                                                                                :6_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :6_2:UnDeeper:
********* > sameLine: success!                                                                                  :6_1:When:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :6_1:When:
preambleParamText:[Upon]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Upon]> MATCH (COK): UPON ( "becoming aware a data breach may <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| []) :6_1:When:
******* / preambleParamText:[Upon]                                                                                :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting UPON

preambleParamText:[Upon]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=42:
preambleParamText:[Upon]> unexpected WHEN
preambleParamText:[Upon]> expecting UPON

******* / WHERE                                                                                                   :6_1:When:
WHERE> IN: WHEN ( "the data breach occurs on or aft <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=42:
WHERE> unexpected WHEN
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting HAVING

preambleParamText:[Having]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=42:
preambleParamText:[Having]> unexpected WHEN
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting GIVEN

preambleParamText:[Given]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=42:
preambleParamText:[Given]> unexpected WHEN
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :6_1:When:
preambleBoolStructR [Unless]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=42:
preambleBoolStructR [Unless]> unexpected WHEN
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :6_1:When:
******** / pBSR                                                                                                   :6_2:GoDeeper:
********* / ppp inner                                                                                            :6_2:GoDeeper:
********** / expression                                                                                         :6_2:GoDeeper:
*********** / labelPrefix                                                                                      :6_2:GoDeeper:
labelPrefix> IN: ( "the data breach occurs on or after th <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=43:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :6_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :6_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :6_2:GoDeeper:
************** / someIndentation                                                                            :6_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "the data breach occurs on or after th <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :6_2:Other "the:
*************** / manyIndentation/leaf?                                                                     :6_2:Other "the:
**************** / expression                                                                              :6_2:Other "the:
***************** / labelPrefix                                                                           :6_2:Other "the:
labelPrefix> IN: "the data breach occurs on or after the  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=45:
labelPrefix> unexpected )

***************** / term p                                                                                :6_2:Other "the:
****************** / term p/notLabelTerm                                                                 :6_2:Other "the:
******************* / term p/2:someIndentation expr p                                                   :6_2:Other "the:
******************** / someIndentation                                                                 :6_2:Other "the:
********************* / myindented: consuming GoDeeper                                                :6_2:Other "the:
myindented: consuming GoDeeper> IN: "the data breach occurs on or after the  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=44:
myindented: consuming GoDeeper> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "the data breach occurs on or after the  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "the data breach occurs on or after the  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
term p/2:someIndentation expr p> expecting (

******************* / term p/3:plain p                                                                  :6_2:Other "the:
******************** / pRelPred                                                                        :6_2:Other "the:
********************* / slRelPred                                                                     :6_2:Other "the:
********************** / nested simpleHorn                                                           :6_2:Other "the:
*********************** > |^|                                                                       :6_2:Other "the:
*********************** / $*|                                                                       :6_2:Other "the:
************************ / slMultiTerm                                                             :6_2:Other "the:
************************* / someSL                                                                :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
*********************** / |^| deeps                                                                  :7_2:UnDeeper:
|^| deeps> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*********************** \ |^| deeps has returned ([()],-1)                                        :7_1:Do:
nested simpleHorn> IN: "the data breach occurs on or after the  <…>
nested simpleHorn> MATCH (CERR): "the data breach occurs on or after the  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=46:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting ) or MEANS

********************** / RPConstraint                                                                :6_2:Other "the:
*********************** / $*|                                                                       :6_2:Other "the:
************************ / slMultiTerm                                                             :6_2:Other "the:
************************* / someSL                                                                :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
*********************** / |>| calling $>>                                                            :7_2:UnDeeper:
************************ / |>>/recurse                                                              :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ / |>>/base                                                                 :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "the data breach occurs on or after the  <…>
RPConstraint> MATCH (CERR): "the data breach occurs on or after the  <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************** / RPBoolStructR                                                               :6_2:Other "the:
*********************** / $*|                                                                       :6_2:Other "the:
************************ / slMultiTerm                                                             :6_2:Other "the:
************************* / someSL                                                                :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
*********************** / |>| calling $>>                                                            :7_2:UnDeeper:
************************ / |>>/recurse                                                              :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ / |>>/base                                                                 :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "the data breach occurs on or after the  <…>
RPBoolStructR> MATCH (CERR): "the data breach occurs on or after the  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************** / RPMT                                                                        :6_2:Other "the:
*********************** / $*|                                                                       :6_2:Other "the:
************************ / slAKA                                                                   :6_2:Other "the:
************************* / $*|                                                                   :6_2:Other "the:
************************** / slAKA base                                                          :6_2:Other "the:
*************************** / slMultiTerm                                                       :6_2:Other "the:
**************************** / someSL                                                          :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

**************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*************************** \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slAKA base> IN: "the data breach occurs on or after the  <…>
slAKA base> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA base> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ slAKA base has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************* / |>>/recurse                                                            :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :7_2:UnDeeper:
************************** / slAKA optional akapart                                               :7_2:UnDeeper:
*************************** / |?| optional something                                             :7_2:UnDeeper:
**************************** / |>>/recurse                                                      :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :7_2:UnDeeper:
***************************** / PAKA/akapart                                                   :7_2:UnDeeper:
****************************** / $>|                                                          :7_2:UnDeeper:
******************************* / Aka Token                                                  :7_2:UnDeeper:
Aka Token> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :7_2:UnDeeper:
slAKA optional akapart> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :7_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :7_2:UnDeeper:
************************* / |>>/recurse                                                            :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :7_2:UnDeeper:
************************** / slAKA optional typically                                             :7_2:UnDeeper:
*************************** / |?| optional something                                             :7_2:UnDeeper:
**************************** / |>>/recurse                                                      :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :7_2:UnDeeper:
***************************** / typically                                                      :7_2:UnDeeper:
****************************** / $>|                                                          :7_2:UnDeeper:
$>|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :7_2:UnDeeper:
slAKA optional typically> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :7_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :7_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :7_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :7_2:UnDeeper:
slAKA> IN: "the data breach occurs on or after the  <…>
slAKA> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slAKA has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
RPMT> IN: "the data breach occurs on or after the  <…>
RPMT> MATCH (COK): "the data breach occurs on or after the  <…>
RPMT> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************** \ RPMT has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slRelPred> IN: "the data breach occurs on or after the  <…>
slRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
slRelPred> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ slRelPred has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
********************* / undeepers                                                                      :7_2:UnDeeper:
********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :7_2:UnDeeper:
********************** > sameLine: success!                                                           :7_2:UnDeeper:
undeepers> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************* \ undeepers has returned ()                                                      :7_2:UnDeeper:
pRelPred> IN: "the data breach occurs on or after the  <…>
pRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
pRelPred> VALUE: (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],[])

******************** \ pRelPred has returned RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"] :7_2:UnDeeper:
term p/3:plain p> IN: "the data breach occurs on or after the  <…>
term p/3:plain p> MATCH (COK): "the data breach occurs on or after the  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************* \ term p/3:plain p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
term p/notLabelTerm> IN: "the data breach occurs on or after the  <…>
term p/notLabelTerm> MATCH (COK): "the data breach occurs on or after the  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
term p> IN: "the data breach occurs on or after the  <…>
term p> MATCH (COK): "the data breach occurs on or after the  <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

***************** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
***************** / binary(Or)                                                                             :7_2:UnDeeper:
binary(Or)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                            :7_2:UnDeeper:
binary(And)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                        :7_2:UnDeeper:
binary(SetLess)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                        :7_2:UnDeeper:
binary(SetPlus)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "the data breach occurs on or after the  <…>
expression> MATCH (COK): "the data breach occurs on or after the  <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

**************** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
manyIndentation/leaf?> IN: "the data breach occurs on or after the  <…>
manyIndentation/leaf?> MATCH (COK): "the data breach occurs on or after the  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :7_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :7_1:Do:
someIndentation> IN: ( "the data breach occurs on or after th <…>
someIndentation> MATCH (COK): ( "the data breach occurs on or after th <…>
someIndentation> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p/2:someIndentation expr p> IN: ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p/notLabelTerm> IN: ( "the data breach occurs on or after th <…>
term p/notLabelTerm> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p> IN: ( "the data breach occurs on or after th <…>
term p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*********** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
*********** / binary(Or)                                                                                      :7_1:Do:
binary(Or)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected DO
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :7_1:Do:
binary(And)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected DO
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :7_1:Do:
binary(SetLess)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected DO
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :7_1:Do:
binary(SetPlus)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected DO
binary(SetPlus)> expecting PLUS

expression> IN: ( "the data breach occurs on or after th <…>
expression> MATCH (COK): ( "the data breach occurs on or after th <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
ppp inner> IN: ( "the data breach occurs on or after th <…>
ppp inner> MATCH (COK): ( "the data breach occurs on or after th <…>
ppp inner> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********* \ ppp inner has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
pBSR> IN: ( "the data breach occurs on or after th <…>
pBSR> MATCH (COK): ( "the data breach occurs on or after th <…>
pBSR> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******** \ pBSR has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
preambleBoolStructR [When,If]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> MATCH (COK): WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> VALUE: ((When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])),[])

******* \ preambleBoolStructR [When,If] has returned (When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :7_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :7_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=46:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / WHERE                                                                                                   :7_1:Do:
WHERE> IN: DO ( "assess" ( "if it is a Notifiable D <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=46:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=46:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=46:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=46:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=46:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :7_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=46:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / pDoAction/Do                                                                                            :7_1:Do:
pDoAction/Do> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :7_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :7_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :7_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :7_2:GoDeeper:
********** / expr pParamText                                                                                    :7_2:GoDeeper:
*********** / expression                                                                                       :7_2:GoDeeper:
************ / labelPrefix                                                                                    :7_2:GoDeeper:
labelPrefix> IN: ( "assess" ( "if it is a Notifiable Data <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=47:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :7_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :7_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :7_2:GoDeeper:
*************** / someIndentation                                                                          :7_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :7_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "assess" ( "if it is a Notifiable Data <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :7_2:Other "asse:
**************** / manyIndentation/leaf?                                                                   :7_2:Other "asse:
***************** / expression                                                                            :7_2:Other "asse:
****************** / labelPrefix                                                                         :7_2:Other "asse:
labelPrefix> IN: "assess" ( "if it is a Notifiable Data B <…>
labelPrefix> MATCH (COK): "assess"
labelPrefix> VALUE: ("assess",[])

****************** \ labelPrefix has returned "assess"                                                    :7_3:GoDeeper:
****************** / term p                                                                               :7_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :7_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :7_3:GoDeeper:
********************* / someIndentation                                                                :7_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :7_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "if it is a Notifiable Data Breach" )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :7_3:Other "if i:
********************** / manyIndentation/leaf?                                                         :7_3:Other "if i:
*********************** / expression                                                                  :7_3:Other "if i:
************************ / labelPrefix                                                               :7_3:Other "if i:
labelPrefix> IN: "if it is a Notifiable Data Breach" ) "b <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=51:
labelPrefix> unexpected )

************************ / term p                                                                    :7_3:Other "if i:
************************* / term p/notLabelTerm                                                     :7_3:Other "if i:
************************** / term p/2:someIndentation expr p                                       :7_3:Other "if i:
*************************** / someIndentation                                                     :7_3:Other "if i:
**************************** / myindented: consuming GoDeeper                                    :7_3:Other "if i:
myindented: consuming GoDeeper> IN: "if it is a Notifiable Data Breach" ) "b <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=50:
myindented: consuming GoDeeper> unexpected "if it is a Notifiable Data Breach"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "if it is a Notifiable Data Breach" ) "b <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=50:
someIndentation> unexpected "if it is a Notifiable Data Breach"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "if it is a Notifiable Data Breach" ) "b <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=50:
term p/2:someIndentation expr p> unexpected "if it is a Notifiable Data Breach"
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :7_3:Other "if i:
*************************** / pParamText                                                          :7_3:Other "if i:
**************************** / pParamText(flat) first line: pKeyValues                           :7_3:Other "if i:
***************************** / pKeyValuesAka                                                   :7_3:Other "if i:
****************************** / slAKA                                                         :7_3:Other "if i:
******************************* / $*|                                                         :7_3:Other "if i:
******************************** / slAKA base                                                :7_3:Other "if i:
********************************* / slKeyValues                                             :7_3:Other "if i:
********************************** / $*|                                                   :7_3:Other "if i:
*********************************** / someSL                                              :7_3:Other "if i:
someSL> IN: "if it is a Notifiable Data Breach" ) "b <…>
someSL> MATCH (COK): "if it is a Notifiable Data Breach"
someSL> VALUE: ((["if it is a Notifiable Data Breach"],0),[])

*********************************** \ someSL has returned (["if it is a Notifiable Data Breach"],0) :8_3:UnDeeper:
$*|> IN: "if it is a Notifiable Data Breach" ) "b <…>
$*|> MATCH (COK): "if it is a Notifiable Data Breach"
$*|> VALUE: ((["if it is a Notifiable Data Breach"],0),[])

********************************** \ $*| has returned (["if it is a Notifiable Data Breach"],0) :8_3:UnDeeper:
********************************** / |>>/recurse                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :8_3:UnDeeper:
*********************************** / |?| optional something                               :8_3:UnDeeper:
************************************ / |>>/recurse                                        :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                           :8_3:UnDeeper:
************************************* / slTypeSig                                        :8_3:UnDeeper:
************************************** / $>|                                            :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=51:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :8_3:UnDeeper:
*********************************** > |>>/base got Nothing                                 :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                      :8_3:UnDeeper:
slKeyValues> IN: "if it is a Notifiable Data Breach" ) "b <…>
slKeyValues> MATCH (COK): "if it is a Notifiable Data Breach"
slKeyValues> VALUE: ((("if it is a Notifiable Data Breach" :| [],Nothing),0),[])

********************************* \ slKeyValues has returned (("if it is a Notifiable Data Breach" :| [],Nothing),0) :8_3:UnDeeper:
slAKA base> IN: "if it is a Notifiable Data Breach" ) "b <…>
slAKA base> MATCH (COK): "if it is a Notifiable Data Breach"
slAKA base> VALUE: ((("if it is a Notifiable Data Breach" :| [],Nothing),0),[])

******************************** \ slAKA base has returned (("if it is a Notifiable Data Breach" :| [],Nothing),0) :8_3:UnDeeper:
$*|> IN: "if it is a Notifiable Data Breach" ) "b <…>
$*|> MATCH (COK): "if it is a Notifiable Data Breach"
$*|> VALUE: ((("if it is a Notifiable Data Breach" :| [],Nothing),0),[])

******************************* \ $*| has returned (("if it is a Notifiable Data Breach" :| [],Nothing),0) :8_3:UnDeeper:
******************************* / |>>/recurse                                                  :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :8_3:UnDeeper:
******************************** / slAKA optional akapart                                     :8_3:UnDeeper:
********************************* / |?| optional something                                   :8_3:UnDeeper:
********************************** / |>>/recurse                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :8_3:UnDeeper:
*********************************** / PAKA/akapart                                         :8_3:UnDeeper:
************************************ / $>|                                                :8_3:UnDeeper:
************************************* / Aka Token                                        :8_3:UnDeeper:
Aka Token> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=51:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=51:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :8_3:UnDeeper:
slAKA optional akapart> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)            :8_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :8_3:UnDeeper:
******************************* / |>>/recurse                                                  :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :8_3:UnDeeper:
******************************** / slAKA optional typically                                   :8_3:UnDeeper:
********************************* / |?| optional something                                   :8_3:UnDeeper:
********************************** / |>>/recurse                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :8_3:UnDeeper:
*********************************** / typically                                            :8_3:UnDeeper:
************************************ / $>|                                                :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=51:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :8_3:UnDeeper:
slAKA optional typically> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)          :8_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :8_3:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :8_3:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                  :8_3:UnDeeper:
slAKA> IN: "if it is a Notifiable Data Breach" ) "b <…>
slAKA> MATCH (COK): "if it is a Notifiable Data Breach"
slAKA> VALUE: ((("if it is a Notifiable Data Breach" :| [],Nothing),0),[])

****************************** \ slAKA has returned (("if it is a Notifiable Data Breach" :| [],Nothing),0) :8_3:UnDeeper:
****************************** / undeepers                                                      :8_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :8_3:UnDeeper:
******************************* > sameLine: success!                                           :8_3:UnDeeper:
undeepers> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :8_3:UnDeeper:
pKeyValuesAka> IN: "if it is a Notifiable Data Breach" ) "b <…>
pKeyValuesAka> MATCH (COK): "if it is a Notifiable Data Breach"
pKeyValuesAka> VALUE: (("if it is a Notifiable Data Breach" :| [],Nothing),[])

***************************** \ pKeyValuesAka has returned ("if it is a Notifiable Data Breach" :| [],Nothing) :8_3:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "if it is a Notifiable Data Breach" ) "b <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "if it is a Notifiable Data Breach"
pParamText(flat) first line: pKeyValues> VALUE: (("if it is a Notifiable Data Breach" :| [],Nothing),[])

**************************** \ pParamText(flat) first line: pKeyValues has returned ("if it is a Notifiable Data Breach" :| [],Nothing) :8_3:UnDeeper:
**************************** / pParamText(flat) subsequent lines: sameMany pKeyValues             :8_3:UnDeeper:
***************************** / manyIndentation/leaf?                                            :8_3:UnDeeper:
****************************** / sameMany                                                       :8_3:UnDeeper:
******************************* / pKeyValuesAka                                                :8_3:UnDeeper:
******************************** / slAKA                                                      :8_3:UnDeeper:
********************************* / $*|                                                      :8_3:UnDeeper:
********************************** / slAKA base                                             :8_3:UnDeeper:
*********************************** / slKeyValues                                          :8_3:UnDeeper:
************************************ / $*|                                                :8_3:UnDeeper:
************************************* / someSL                                           :8_3:UnDeeper:
************************************** / pNumAsText                                     :8_3:UnDeeper:
pNumAsText> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=51:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=51:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=51:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=51:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=51:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=51:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=51:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=51:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

****************************** \ sameMany has returned []                                       :8_3:UnDeeper:
manyIndentation/leaf?> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

***************************** \ manyIndentation/leaf? has returned []                            :8_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

**************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :8_3:UnDeeper:
pParamText> IN: "if it is a Notifiable Data Breach" ) "b <…>
pParamText> MATCH (COK): "if it is a Notifiable Data Breach"
pParamText> VALUE: (("if it is a Notifiable Data Breach" :| [],Nothing) :| [],[])

*************************** \ pParamText has returned ("if it is a Notifiable Data Breach" :| [],Nothing) :| [] :8_3:UnDeeper:
term p/3:plain p> IN: "if it is a Notifiable Data Breach" ) "b <…>
term p/3:plain p> MATCH (COK): "if it is a Notifiable Data Breach"
term p/3:plain p> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

************************** \ term p/3:plain p has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
term p/notLabelTerm> IN: "if it is a Notifiable Data Breach" ) "b <…>
term p/notLabelTerm> MATCH (COK): "if it is a Notifiable Data Breach"
term p/notLabelTerm> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
term p> IN: "if it is a Notifiable Data Breach" ) "b <…>
term p> MATCH (COK): "if it is a Notifiable Data Breach"
term p> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
************************ / binary(Or)                                                                 :8_3:UnDeeper:
binary(Or)> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=51:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :8_3:UnDeeper:
binary(And)> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=51:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :8_3:UnDeeper:
binary(SetLess)> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=51:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :8_3:UnDeeper:
binary(SetPlus)> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=51:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "if it is a Notifiable Data Breach" ) "b <…>
expression> MATCH (COK): "if it is a Notifiable Data Breach"
expression> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

*********************** \ expression has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
manyIndentation/leaf?> IN: "if it is a Notifiable Data Breach" ) "b <…>
manyIndentation/leaf?> MATCH (COK): "if it is a Notifiable Data Breach"
manyIndentation/leaf?> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :8_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :8_2:Other "by":
someIndentation> IN: ( "if it is a Notifiable Data Breach" )  <…>
someIndentation> MATCH (COK): ( "if it is a Notifiable Data Breach" )
someIndentation> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

********************* \ someIndentation has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_2:Other "by":
term p/2:someIndentation expr p> IN: ( "if it is a Notifiable Data Breach" )  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "if it is a Notifiable Data Breach" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_2:Other "by":
term p/notLabelTerm> IN: ( "if it is a Notifiable Data Breach" )  <…>
term p/notLabelTerm> MATCH (COK): ( "if it is a Notifiable Data Breach" )
term p/notLabelTerm> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_2:Other "by":
term p> IN: ( "if it is a Notifiable Data Breach" )  <…>
term p> MATCH (COK): ( "if it is a Notifiable Data Breach" )
term p> VALUE: (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| []) :8_2:Other "by":
****************** / binary(Or)                                                                          :8_2:Other "by":
binary(Or)> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=52:
binary(Or)> unexpected "by"
binary(Or)> expecting OR

****************** / binary(And)                                                                         :8_2:Other "by":
binary(And)> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=52:
binary(And)> unexpected "by"
binary(And)> expecting AND

****************** / binary(SetLess)                                                                     :8_2:Other "by":
binary(SetLess)> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=52:
binary(SetLess)> unexpected "by"
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                     :8_2:Other "by":
binary(SetPlus)> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=52:
binary(SetPlus)> unexpected "by"
binary(SetPlus)> expecting PLUS

expression> IN: "assess" ( "if it is a Notifiable Data B <…>
expression> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
expression> VALUE: (MyLabel ["assess"] (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| [])),[])

***************** \ expression has returned MyLabel ["assess"] (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| [])) :8_2:Other "by":
manyIndentation/leaf?> IN: "assess" ( "if it is a Notifiable Data B <…>
manyIndentation/leaf?> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
manyIndentation/leaf?> VALUE: (MyLabel ["assess"] (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| [])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["assess"] (MyLeaf (("if it is a Notifiable Data Breach" :| [],Nothing) :| [])) :8_2:Other "by":
**************** / myindented: consuming UnDeeper                                                          :8_2:Other "by":
myindented: consuming UnDeeper> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=52:
myindented: consuming UnDeeper> unexpected "by"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "assess" ( "if it is a Notifiable Data <…>
someIndentation> MATCH (CERR): ( "assess" ( "if it is a Notifiable Data <…>
someIndentation> ERROR:
someIndentation> offset=52:
someIndentation> unexpected "by"
someIndentation> expecting ), AND, LESS, OR, or PLUS

term p/2:someIndentation expr p> IN: ( "assess" ( "if it is a Notifiable Data <…>
term p/2:someIndentation expr p> MATCH (CERR): ( "assess" ( "if it is a Notifiable Data <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=52:
term p/2:someIndentation expr p> unexpected "by"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, or PLUS

************** / term p/3:plain p                                                                           :7_2:GoDeeper:
*************** / pParamText                                                                               :7_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :7_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :7_2:GoDeeper:
****************** / slAKA                                                                              :7_2:GoDeeper:
******************* / $*|                                                                              :7_2:GoDeeper:
******************** / slAKA base                                                                     :7_2:GoDeeper:
********************* / slKeyValues                                                                  :7_2:GoDeeper:
********************** / $*|                                                                        :7_2:GoDeeper:
*********************** / someSL                                                                   :7_2:GoDeeper:
************************ / pNumAsText                                                             :7_2:GoDeeper:
pNumAsText> IN: ( "assess" ( "if it is a Notifiable Data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=47:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "assess" ( "if it is a Notifiable Data <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=47:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "assess" ( "if it is a Notifiable Data <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=47:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "assess" ( "if it is a Notifiable Data <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=47:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "assess" ( "if it is a Notifiable Data <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=47:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "assess" ( "if it is a Notifiable Data <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=47:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "assess" ( "if it is a Notifiable Data <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=47:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "assess" ( "if it is a Notifiable Data <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=47:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "assess" ( "if it is a Notifiable Data <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=47:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "assess" ( "if it is a Notifiable Data <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=47:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "assess" ( "if it is a Notifiable Data <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=47:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "assess" ( "if it is a Notifiable Data <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=52:
term p/notLabelTerm> unexpected "by"
term p/notLabelTerm> expecting ), AND, LESS, OR, or PLUS

term p> IN: ( "assess" ( "if it is a Notifiable Data <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=52:
term p> unexpected "by"
term p> expecting ), AND, LESS, OR, or PLUS

expression> IN: ( "assess" ( "if it is a Notifiable Data <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=52:
expression> unexpected "by"
expression> expecting expression

expr pParamText> IN: ( "assess" ( "if it is a Notifiable Data <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=52:
expr pParamText> unexpected "by"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( "assess" ( "if it is a Notifiable Data <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=52:
dBoolStructP calling exprP> unexpected "by"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( "assess" ( "if it is a Notifiable Data <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=52:
pAction calling dBoolStructP> unexpected "by"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: ( "assess" ( "if it is a Notifiable Data <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=52:
pDoAction/pAction> unexpected "by"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=52:
regulative permutation with deontic-temporal> unexpected "by"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :2_1:Every:
pTemporal/eventually> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=4:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=4:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :2_1:Every:
pTemporal/vaguely> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=4:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected AKA
pNumAsText> expecting number

someSL> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
someSL> MATCH (COK): "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA base> MATCH (COK): "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
$*|> MATCH (COK): "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) ) WHO ( "is" ( "not" ( " <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( "no <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( " <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: ( ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( <…>
|>>/recurse> MATCH (COK): ( ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You"
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
undeepers> MATCH (COK): ) ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pMultiTermAka> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented: consuming UnDeeper                                                                                 :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHO ( "is" ( "not" ( "a Public Agency" <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :3_1:Who:
someIndentation> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> MATCH (COK): ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [Every,Party,TokAll]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Organisation" :| [],Nothing) :| []))            :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / expression                                                                            :3_2:Other "is":
****************** / labelPrefix                                                                         :3_2:Other "is":
labelPrefix> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
labelPrefix> MATCH (COK): "is"
labelPrefix> VALUE: ("is",[])

****************** \ labelPrefix has returned "is"                                                        :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "not":
********************** / manyIndentation/leaf?                                                         :3_3:Other "not":
*********************** / expression                                                                  :3_3:Other "not":
************************ / labelPrefix                                                               :3_3:Other "not":
labelPrefix> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
labelPrefix> MATCH (COK): "not"
labelPrefix> VALUE: ("not",[])

************************ \ labelPrefix has returned "not"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "a Pu:
**************************** / manyIndentation/leaf?                                               :3_4:Other "a Pu:
***************************** / expression                                                        :3_4:Other "a Pu:
****************************** / labelPrefix                                                     :3_4:Other "a Pu:
labelPrefix> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected )

****************************** / term p                                                          :3_4:Other "a Pu:
******************************* / term p/notLabelTerm                                           :3_4:Other "a Pu:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "a Pu:
********************************* / someIndentation                                           :3_4:Other "a Pu:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "a Pu:
myindented: consuming GoDeeper> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=24:
myindented: consuming GoDeeper> unexpected "a Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected "a Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected "a Public Agency"
term p/2:someIndentation expr p> expecting (

******************************** / term p/3:plain p                                            :3_4:Other "a Pu:
********************************* / pRelPred                                                  :3_4:Other "a Pu:
********************************** / slRelPred                                               :3_4:Other "a Pu:
*********************************** / nested simpleHorn                                     :3_4:Other "a Pu:
************************************ > |^|                                                 :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:Must:
nested simpleHorn> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
nested simpleHorn> MATCH (CERR): "a Public Agency" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

*********************************** / RPConstraint                                          :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPConstraint> MATCH (CERR): "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPBoolStructR                                         :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPBoolStructR> MATCH (CERR): "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** / RPMT                                                  :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slAKA                                             :3_4:Other "a Pu:
************************************** / $*|                                             :3_4:Other "a Pu:
*************************************** / slAKA base                                    :3_4:Other "a Pu:
**************************************** / slMultiTerm                                 :3_4:Other "a Pu:
***************************************** / someSL                                    :3_4:Other "a Pu:
someSL> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
someSL> MATCH (COK): "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

***************************************** \ someSL has returned (["a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slMultiTerm> MATCH (COK): "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

**************************************** \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slAKA base> MATCH (COK): "a Public Agency"
slAKA base> VALUE: ((["a Public Agency"],0),[])

*************************************** \ slAKA base has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************** \ $*| has returned (["a Public Agency"],0)     :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slAKA> MATCH (COK): "a Public Agency"
slAKA> VALUE: ((["a Public Agency"],0),[])

************************************* \ slAKA has returned (["a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
$*|> MATCH (COK): "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
RPMT> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
RPMT> MATCH (COK): "a Public Agency"
RPMT> VALUE: ((RPMT ["a Public Agency"],0),[])

*********************************** \ RPMT has returned (RPMT ["a Public Agency"],0)     :4_2:UnDeeper:
slRelPred> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
slRelPred> MATCH (COK): "a Public Agency"
slRelPred> VALUE: ((RPMT ["a Public Agency"],0),[])

********************************** \ slRelPred has returned (RPMT ["a Public Agency"],0)  :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
pRelPred> MATCH (COK): "a Public Agency"
pRelPred> VALUE: (RPMT ["a Public Agency"],[])

********************************* \ pRelPred has returned RPMT ["a Public Agency"]         :4_2:UnDeeper:
term p/3:plain p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/3:plain p> MATCH (COK): "a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p/notLabelTerm> MATCH (COK): "a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
term p> MATCH (COK): "a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["a Public Agency"])        :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
expression> MATCH (COK): "a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["a Public Agency"])      :4_2:UnDeeper:
manyIndentation/leaf?> IN: "a Public Agency" ) ) ) MUST ( BEFORE (  <…>
manyIndentation/leaf?> MATCH (COK): "a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
someIndentation> MATCH (COK): ( "a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p/notLabelTerm> MATCH (COK): ( "a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p> IN: ( "a Public Agency" ) ) ) MUST ( BEFORE  <…>
term p> MATCH (COK): ( "a Public Agency" )
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["a Public Agency"])                      :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
expression> MATCH (COK): "not" ( "a Public Agency" )
expression> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

*********************** \ expression has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))  :4_3:UnDeeper:
manyIndentation/leaf?> IN: "not" ( "a Public Agency" ) ) ) MUST ( B <…>
manyIndentation/leaf?> MATCH (COK): "not" ( "a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MUST ( BEFORE ( 30 ( "days" ) ) ) UP <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
someIndentation> MATCH (COK): ( "not" ( "a Public Agency" ) )
someIndentation> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************* \ someIndentation has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p/notLabelTerm> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p> IN: ( "not" ( "a Public Agency" ) ) ) MUST ( <…>
term p> MATCH (COK): ( "not" ( "a Public Agency" ) )
term p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

****************** \ term p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))                  :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
expression> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

***************** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Must:
someIndentation> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someIndentation> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
someIndentation> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*************** \ someIndentation has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/2:someIndentation expr p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/notLabelTerm> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************ \ term p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))      :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

expression> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
expression> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*********** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))    :4_1:Must:
ppp inner> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
ppp inner> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
ppp inner> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["is","not","a Public Agency"])                                 :4_1:Must:
pBSR> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pBSR> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
pBSR> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is","not","a Public Agency"])                                        :4_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))   :4_1:Must:
manyIndentation/leaf?> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******* \ manyIndentation/leaf? has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))                     :4_1:Must:
******* / WHERE                                                                                                   :4_1:Must:
WHERE> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=28:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=28:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=28:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=28:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :4_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=28:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :4_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=28:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :4_1:Must:
pTemporal/eventually> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :4_1:Must:
pTemporal/vaguely> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=28:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :4_1:Must:
******** / pAction calling dBoolStructP                                                                           :4_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :4_2:GoDeeper:
********** / expr pParamText                                                                                    :4_2:GoDeeper:
*********** / expression                                                                                       :4_2:GoDeeper:
************ / labelPrefix                                                                                    :4_2:GoDeeper:
labelPrefix> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :4_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :4_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :4_2:GoDeeper:
*************** / someIndentation                                                                          :4_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :4_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :4_2:Before:
**************** / manyIndentation/leaf?                                                                   :4_2:Before:
***************** / expression                                                                            :4_2:Before:
****************** / labelPrefix                                                                         :4_2:Before:
labelPrefix> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=30:
labelPrefix> unexpected BEFORE
labelPrefix> expecting Other text

****************** / term p                                                                              :4_2:Before:
******************* / term p/notLabelTerm                                                               :4_2:Before:
******************** / term p/2:someIndentation expr p                                                 :4_2:Before:
********************* / someIndentation                                                               :4_2:Before:
********************** / myindented: consuming GoDeeper                                              :4_2:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=30:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected BEFORE
someIndentation> expecting (

term p/2:someIndentation expr p> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=30:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :4_2:Before:
********************* / pParamText                                                                    :4_2:Before:
********************** / pParamText(flat) first line: pKeyValues                                     :4_2:Before:
*********************** / pKeyValuesAka                                                             :4_2:Before:
************************ / slAKA                                                                   :4_2:Before:
************************* / $*|                                                                   :4_2:Before:
************************** / slAKA base                                                          :4_2:Before:
*************************** / slKeyValues                                                       :4_2:Before:
**************************** / $*|                                                             :4_2:Before:
***************************** / someSL                                                        :4_2:Before:
****************************** / pNumAsText                                                  :4_2:Before:
pNumAsText> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected BEFORE
pNumAsText> expecting number

someSL> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=30:
someSL> unexpected BEFORE
someSL> expecting other text or number

$*|> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected BEFORE
$*|> expecting other text or number

slKeyValues> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=30:
slKeyValues> unexpected BEFORE
slKeyValues> expecting other text or number

slAKA base> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=30:
slAKA base> unexpected BEFORE
slAKA base> expecting other text or number

$*|> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected BEFORE
$*|> expecting other text or number

slAKA> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=30:
slAKA> unexpected BEFORE
slAKA> expecting other text or number

pKeyValuesAka> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=30:
pKeyValuesAka> unexpected BEFORE
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=30:
pParamText(flat) first line: pKeyValues> unexpected BEFORE
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=30:
pParamText> unexpected BEFORE
pParamText> expecting other text or number

term p/3:plain p> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=30:
term p/3:plain p> unexpected BEFORE
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=30:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or term

term p> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=30:
term p> unexpected BEFORE
term p> expecting ( or term

expression> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=30:
expression> unexpected BEFORE
expression> expecting expression

manyIndentation/leaf?> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=30:
manyIndentation/leaf?> unexpected BEFORE
manyIndentation/leaf?> expecting expression

**************** / manyIndentation/deeper; calling someIndentation                                         :4_2:Before:
***************** / someIndentation                                                                       :4_2:Before:
****************** / myindented: consuming GoDeeper                                                      :4_2:Before:
myindented: consuming GoDeeper> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=30:
myindented: consuming GoDeeper> unexpected BEFORE
myindented: consuming GoDeeper> expecting (

someIndentation> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected BEFORE
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=30:
manyIndentation/deeper; calling someIndentation> unexpected BEFORE
manyIndentation/deeper; calling someIndentation> expecting (

someIndentation> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected BEFORE
someIndentation> expecting ( or expression

term p/2:someIndentation expr p> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=30:
term p/2:someIndentation expr p> unexpected BEFORE
term p/2:someIndentation expr p> expecting ( or expression

************** / term p/3:plain p                                                                           :4_2:GoDeeper:
*************** / pParamText                                                                               :4_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :4_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :4_2:GoDeeper:
****************** / slAKA                                                                              :4_2:GoDeeper:
******************* / $*|                                                                              :4_2:GoDeeper:
******************** / slAKA base                                                                     :4_2:GoDeeper:
********************* / slKeyValues                                                                  :4_2:GoDeeper:
********************** / $*|                                                                        :4_2:GoDeeper:
*********************** / someSL                                                                   :4_2:GoDeeper:
************************ / pNumAsText                                                             :4_2:GoDeeper:
pNumAsText> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=29:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=29:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=29:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=29:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=29:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=29:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=29:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=30:
term p/notLabelTerm> unexpected BEFORE
term p/notLabelTerm> expecting ( or expression

term p> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=30:
term p> unexpected BEFORE
term p> expecting ( or expression

expression> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=30:
expression> unexpected BEFORE
expression> expecting expression

expr pParamText> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=30:
expr pParamText> unexpected BEFORE
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=30:
dBoolStructP calling exprP> unexpected BEFORE
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=30:
pAction calling dBoolStructP> unexpected BEFORE
pAction calling dBoolStructP> expecting expression

pDA> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pDA> MATCH (CERR): MUST
pDA> ERROR:
pDA> offset=30:
pDA> unexpected BEFORE
pDA> expecting expression

regulative permutation with deontic-action> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=30:
regulative permutation with deontic-action> unexpected BEFORE
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or expression

permutationsReg> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=52:
permutationsReg> unexpected "by"
permutationsReg> expecting expression

pRegRuleNormal> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=52:
pRegRuleNormal> unexpected "by"
pRegRuleNormal> expecting expression

pRegRule> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=52:
pRegRule> unexpected "by"
pRegRule> expecting expression or §

*** / pTypeDefinition                                                                                                 :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pHornlike/uponLimb                                                                                            :2_1:Every:
***** / preambleParamText:[Upon]                                                                                    :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :2_1:Every:
***** / preambleParamText:[Given]                                                                                   :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

pTypeDefinition> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** / pConstitutiveRule                                                                                               :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / calling myindented pNameParens                                                                                :2_1:Every:
***** / manyIndentation/leaf?                                                                                       :2_1:Every:
****** / pMultiTermAka                                                                                             :2_1:Every:
******* / pAKA                                                                                                    :2_1:Every:
******** / slAKA                                                                                                 :2_1:Every:
********* / $*|                                                                                                 :2_1:Every:
********** / slAKA base                                                                                        :2_1:Every:
*********** / slMultiTerm                                                                                     :2_1:Every:
************ / someSL                                                                                        :2_1:Every:
************* / pNumAsText                                                                                  :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

pAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected EVERY
pAKA> expecting other text or number

pMultiTermAka> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Every:
****** / someIndentation                                                                                           :2_1:Every:
******* / myindented: consuming GoDeeper                                                                          :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** / pScenarioRule                                                                                                   :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pExpect                                                                                                       :2_1:Every:
pExpect> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected EVERY
pExpect> expecting EXPECT

pScenarioRule> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting EXPECT, GIVEN, or §

*** / pHornlike                                                                                                       :2_1:Every:
**** / pSrcRef                                                                                                       :2_1:Every:
***** / pRuleLabel                                                                                                  :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

pSrcRef> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Every:
**** / pHornlike / permute                                                                                           :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

pHornlike / permute> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=4:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

pHornlike> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=4:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** / pRuleLabel                                                                                                      :2_1:Every:
**** / $>|                                                                                                           :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** / pRule: unwrapping indentation and recursing                                                                     :2_1:Every:
**** / myindented: consuming GoDeeper                                                                                :2_1:Every:
myindented: consuming GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected EVERY
myindented: consuming GoDeeper> expecting (

pRule: unwrapping indentation and recursing> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=4:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

pRule> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=52:
pRule> unexpected "by"
pRule> expecting EOL or regulative rule


PDPA
  pdpadbno-1 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-1
       expected: [[Regulative {subj = Leaf (("Organisation" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is","not","a Public Agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 30) "days"), hence = Just (RuleAlias ["Notification"]), lest = Just (Regulative {subj = Leaf (("the PDPC" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Nothing, deontic = DMay, action = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), temporal = Nothing, hence = Just (Regulative {subj = Leaf (("You" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Nothing, deontic = DMust, action = Leaf (("respond" :| [],Nothing) :| [("to" :| ["the PDPC"],Nothing),("about" :| ["your inaction"],Nothing)]), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []}), lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []}), rlabel = Just ("\167",2,"Assess"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}]]
       but parsing failed with error:
       2:1:
       unexpected EVERY
       expecting end of input
       §§                                                                              Assess
       ✳ EVERY                                                                         Organisation                                                                                                                                                                                                                                    AKA                                                                             You                                                                                                                                                                                                                                                                                                                            
       WHO                                                                             is                                                                              not                                                                             a Public Agency                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
       MUST                                                                            WITHIN                                                                          30                                                                              days                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
       UPON                                                                            becoming aware a data breach may have occurred
       WHEN                                                                            the data breach occurs on or after the date of commencement of PDP(A)A 2020 §
       ->                                                                              assess                                                                          if it is a Notifiable Data Breach
                                                                                       by                                                                              performing                                                                                                                                                      NDB Qualification                                                                                                                                                                                                                                                                                                                                                                                              
       HENCE                                                                           Notification
       LEST                                                                                                                                                            the
                                                                                                                                                                                                                                                       ->                                                                                                                                                              demand                                                                          an explanation for your inaction                                                                                                                                                                                                               
                                                                                                                                                                                                                                                       HENCE                                                                           You                                                                             MUST                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                                                                       ->                                                                              respond                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       to                                                                              the PDPC                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       about                                                                           your inaction                                                                                                                                                  
       

  To rerun use: --match "/PDPA/pdpadbno-1/"

Randomized with seed 1922721358

Finished in 0.0985 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

