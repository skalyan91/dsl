* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-1/)

* Tokens
[RuleMarker 2 "\167",GoDeeper,Other "Assess",UnDeeper,Every,GoDeeper,Other "Organisation",GoDeeper,GoDeeper,GoDeeper,Aka,GoDeeper,Other "You",UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper,Who,GoDeeper,Other "is",GoDeeper,Other "not",GoDeeper,Other "a Public Agency",UnDeeper,UnDeeper,UnDeeper,Must,GoDeeper,Before,GoDeeper,TNumber 30,GoDeeper,Other "days",UnDeeper,UnDeeper,UnDeeper,Upon,GoDeeper,Other "becoming aware a data breach may have occurred",UnDeeper,When,GoDeeper,Other "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13",UnDeeper,Do,GoDeeper,Other "assess",GoDeeper,Other "if it is a Notifiable Data Breach",UnDeeper,Other "by",GoDeeper,Other "performing",GoDeeper,GoDeeper,Other "NDB Qualification",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Hence,GoDeeper,Other "Notification",UnDeeper,Lest,GoDeeper,GoDeeper,Other "the PDPC",GoDeeper,May,Do,GoDeeper,GoDeeper,Other "demand",GoDeeper,Other "an explanation for your inaction",UnDeeper,UnDeeper,UnDeeper,Hence,GoDeeper,Other "You",GoDeeper,Must,Do,GoDeeper,Other "respond",Other "to",GoDeeper,Other "the PDPC",UnDeeper,Other "about",GoDeeper,Other "your inaction",UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Asse:
|>>/recurse> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Assess"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Asse:
******** > |>>/base got "Assess"                                                                                    :2_2:UnDeeper:
|>>/base> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/base> MATCH (COK): Other "Assess"
|>>/base> VALUE: (("Assess",0),[])

******* \ |>>/base has returned ("Assess",0)                                                                         :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

****** \ |>>/recurse has returned ("Assess",1)                                                                        :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

***** \ |>| calling $>> has returned ("Assess",1)                                                                      :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Every:
undeepers> IN: UnDeeper Every GoDeeper Other "Organisat <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Every:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / pRegRuleSugary                                                                                                :2_1:Every:
***** / someDeep                                                                                                    :2_1:Every:
****** / someDeep first part calls base directly                                                                   :2_1:Every:
someDeep first part calls base directly> IN: Every GoDeeper Other "Organisation" GoDe <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected Every
someDeep first part calls base directly> expecting Other text

someDeep> IN: Every GoDeeper Other "Organisation" GoDe <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected Every
someDeep> expecting Other text

pRegRuleSugary> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected Every
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:Every:
***** / permutationsReg                                                                                             :2_1:Every:
****** / regulative permutation with deontic-temporal                                                              :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: Every GoDeeper Other "Organisation" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Every
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Having

preambleParamText:[Having]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Every
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected Every
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected Every
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting May, Must, or Shant

pDT> IN: Every GoDeeper Other "Organisation" GoDe <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected Every
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Organisation" GoDeeper G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "Organisation" GoDeeper GoDeeper G <…>
someSL> MATCH (COK): Other "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slMultiTerm> MATCH (COK): Other "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slAKA base> MATCH (COK): Other "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: Other "Organisation" GoDeeper GoDeeper G <…>
$*|> MATCH (COK): Other "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
Aka Token> MATCH (COK): Aka
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
$>|> MATCH (COK): Aka
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected Other "You"
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/base> MATCH (COK): Other "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "You" UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (COK): GoDeeper Other "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
PAKA/akapart> MATCH (COK): Aka GoDeeper Other "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|?| optional something> MATCH (COK): Aka GoDeeper Other "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
slAKA optional akapart> MATCH (COK): Aka GoDeeper Other "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper Aka GoDeeper Other "You" UnDeep <…>
|>>/recurse> MATCH (COK): GoDeeper Aka GoDeeper Other "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper GoDeeper Aka GoDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper GoDeeper Aka GoDeeper  <…>
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slAKA> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
undeepers> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: Other "Organisation" GoDeeper GoDeeper G <…>
pAKA> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: Other "Organisation" GoDeeper GoDeeper G <…>
pMultiTermAka> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: Other "Organisation" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented: consuming UnDeeper                                                                                 :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Who GoDeeper Other "is" GoDeepe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :3_1:Who:
someIndentation> IN: GoDeeper Other "Organisation" GoDeeper G <…>
someIndentation> MATCH (COK): GoDeeper Other "Organisation" GoDeeper G <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [Every,Party,TokAll]> IN: Every GoDeeper Other "Organisation" GoDe <…>
pActor [Every,Party,TokAll]> MATCH (COK): Every GoDeeper Other "Organisation" GoDe <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Organisation" :| [],Nothing) :| []))            :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/1a:label directly above                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=19:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************* / term p/b:label to the left of line below, with EOL                                           :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=19:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / expression                                                                            :3_2:Other "is":
****************** / labelPrefix                                                                         :3_2:Other "is":
labelPrefix> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
labelPrefix> MATCH (COK): Other "is"
labelPrefix> VALUE: ("is",[])

****************** \ labelPrefix has returned "is"                                                        :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/1a:label directly above                                                     :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=21:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************* / term p/b:label to the left of line below, with EOL                                 :3_3:GoDeeper:
******************** / someSL                                                                           :3_3:GoDeeper:
********************* / pNumAsText                                                                     :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=21:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "not":
********************** / manyIndentation/leaf?                                                         :3_3:Other "not":
*********************** / expression                                                                  :3_3:Other "not":
************************ / labelPrefix                                                               :3_3:Other "not":
labelPrefix> IN: Other "not" GoDeeper Other "a Public Age <…>
labelPrefix> MATCH (COK): Other "not"
labelPrefix> VALUE: ("not",[])

************************ \ labelPrefix has returned "not"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/1a:label directly above                                           :3_4:GoDeeper:
************************** / $*|                                                                    :3_4:GoDeeper:
*************************** / someSL                                                               :3_4:GoDeeper:
**************************** / pNumAsText                                                         :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=23:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************* / term p/b:label to the left of line below, with EOL                       :3_4:GoDeeper:
************************** / someSL                                                                 :3_4:GoDeeper:
*************************** / pNumAsText                                                           :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=23:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "a Pu:
**************************** / manyIndentation/leaf?                                               :3_4:Other "a Pu:
***************************** / expression                                                        :3_4:Other "a Pu:
****************************** / labelPrefix                                                     :3_4:Other "a Pu:
labelPrefix> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected UnDeeper

****************************** / term p                                                          :3_4:Other "a Pu:
******************************* / term p/1a:label directly above                                :3_4:Other "a Pu:
******************************** / $*|                                                         :3_4:Other "a Pu:
********************************* / someSL                                                    :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

********************************* \ someSL has returned (["a Public Agency"],0)            :4_2:UnDeeper:
********************************* / pNumAsText                                             :4_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "a Public Agency"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "a Public Agency"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=25:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL            :3_4:Other "a Pu:
******************************** / someSL                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

******************************** \ someSL has returned (["a Public Agency"],0)              :4_2:UnDeeper:
******************************** / undeepers                                                :4_2:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
********************************* > sameLine: success!                                     :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                :4_2:UnDeeper:
******************************** / matching EOL                                             :4_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "a Public Agency"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=25:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************* / term p/notLabelTerm                                           :3_4:Other "a Pu:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "a Pu:
********************************* / someIndentation                                           :3_4:Other "a Pu:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "a Pu:
myindented: consuming GoDeeper> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=24:
myindented: consuming GoDeeper> unexpected Other "a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected Other "a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected Other "a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

******************************** / term p/3:plain p                                            :3_4:Other "a Pu:
********************************* / pRelPred                                                  :3_4:Other "a Pu:
********************************** / slRelPred                                               :3_4:Other "a Pu:
*********************************** / nested simpleHorn                                     :3_4:Other "a Pu:
************************************ > |^|                                                 :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:Must:
nested simpleHorn> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "a Public Agency" UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting Means or UnDeeper

*********************************** / RPConstraint                                          :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPBoolStructR                                         :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPMT                                                  :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slAKA                                             :3_4:Other "a Pu:
************************************** / $*|                                             :3_4:Other "a Pu:
*************************************** / slAKA base                                    :3_4:Other "a Pu:
**************************************** / slMultiTerm                                 :3_4:Other "a Pu:
***************************************** / someSL                                    :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

***************************************** \ someSL has returned (["a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

**************************************** \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "a Public Agency"
slAKA base> VALUE: ((["a Public Agency"],0),[])

*************************************** \ slAKA base has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************** \ $*| has returned (["a Public Agency"],0)     :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "a Public Agency"
slAKA> VALUE: ((["a Public Agency"],0),[])

************************************* \ slAKA has returned (["a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
RPMT> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "a Public Agency"
RPMT> VALUE: ((RPMT ["a Public Agency"],0),[])

*********************************** \ RPMT has returned (RPMT ["a Public Agency"],0)     :4_2:UnDeeper:
slRelPred> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "a Public Agency"
slRelPred> VALUE: ((RPMT ["a Public Agency"],0),[])

********************************** \ slRelPred has returned (RPMT ["a Public Agency"],0)  :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "a Public Agency"
pRelPred> VALUE: (RPMT ["a Public Agency"],[])

********************************* \ pRelPred has returned RPMT ["a Public Agency"]         :4_2:UnDeeper:
term p/3:plain p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["a Public Agency"])        :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["a Public Agency"])      :4_2:UnDeeper:
manyIndentation/leaf?> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
someIndentation> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["a Public Agency"])                      :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "not" GoDeeper Other "a Public Age <…>
expression> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
expression> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

*********************** \ expression has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))  :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "not" GoDeeper Other "a Public Age <…>
manyIndentation/leaf?> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
manyIndentation/leaf?> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someIndentation> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
someIndentation> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************* \ someIndentation has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p/notLabelTerm> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

****************** \ term p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))                  :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expression> MATCH (COK): Other "is" GoDeeper Other "not" GoDeeper <…>
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

***************** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
manyIndentation/leaf?> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "is" GoDeeper Other "not" GoDeeper <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Must:
someIndentation> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someIndentation> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*************** \ someIndentation has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/2:someIndentation expr p> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/notLabelTerm> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************ \ term p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))      :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected Must
binary(Or)> expecting Or

************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected Must
binary(And)> expecting And

************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected Must
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected Must
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
expression> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*********** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))    :4_1:Must:
ppp inner> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
ppp inner> MATCH (CERR): GoDeeper Other "is" GoDeeper Other "not" <…>
ppp inner> ERROR:
ppp inner> offset=28:
ppp inner> Label (["is"]) followed by label (["not"]) is not allowed

********** / withPrePost                                                                                        :3_2:GoDeeper:
*********** > |<* starting                                                                                     :3_2:GoDeeper:
*********** / $*|                                                                                              :3_2:GoDeeper:
************ / pre part                                                                                       :3_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :3_2:Other "is":
************** / expectUnDeepers                                                                             :3_2:Other "is":
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is","GD","not","GD","a Public Agency"]                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                              :3_2:Other "is":
************** > aNLK: determined undp_count = 3                                                             :3_2:Other "is":
************** > ->| trying to consume 1 GoDeepers                                                           :3_2:Other "is":
************** / $*|                                                                                         :3_2:Other "is":
$*|> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :3_2:Other "is":
aboveNextLineKeyword> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=20:
aboveNextLineKeyword> unexpected Other "is"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :3_2:Other "is":
************* / aboveNextLineKeyword                                                                           :3_3:GoDeeper:
************** / expectUnDeepers                                                                              :3_3:GoDeeper:
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","not","GD","a Public Agency"]                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :3_3:GoDeeper:
************** > aNLK: determined undp_count = 3                                                              :3_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_3:GoDeeper:
************** / $*|                                                                                          :3_3:GoDeeper:
$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_3:GoDeeper:
************** > ->| success                                                                                   :3_3:Other "not":
************** / |>>/recurse                                                                                   :3_3:Other "not":
|>>/recurse> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected Other "not"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :3_3:Other "not":
*************** / slMultiTerm                                                                                 :3_3:Other "not":
**************** / someSL                                                                                    :3_3:Other "not":
someSL> IN: Other "not" GoDeeper Other "a Public Age <…>
someSL> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
someSL> VALUE: ((["not","a Public Agency"],1),[])

**************** \ someSL has returned (["not","a Public Agency"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> VALUE: ((["not","a Public Agency"],1),[])

*************** \ slMultiTerm has returned (["not","a Public Agency"],1)                                     :4_2:UnDeeper:
*************** > |>>/base got ["not","a Public Agency"]                                                     :4_2:UnDeeper:
|>>/base> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/base> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
|>>/base> VALUE: ((["not","a Public Agency"],1),[])

************** \ |>>/base has returned (["not","a Public Agency"],1)                                          :4_2:UnDeeper:
************** > aNLK: current depth is 2                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :3_3:Other "not":
************** / expectUnDeepers                                                                               :3_3:Other "not":
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["not","GD","a Public Agency"]                                                    :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "not" GoDeeper Other "a Public Age <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                :3_3:Other "not":
************** > aNLK: determined undp_count = 3                                                               :3_3:Other "not":
************** > ->| trying to consume 1 GoDeepers                                                             :3_3:Other "not":
************** / $*|                                                                                           :3_3:Other "not":
$*|> IN: Other "not" GoDeeper Other "a Public Age <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :3_3:Other "not":
aboveNextLineKeyword> IN: Other "not" GoDeeper Other "a Public Age <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=22:
aboveNextLineKeyword> unexpected Other "not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :3_3:Other "not":
************* / aboveNextLineKeyword                                                                             :3_4:GoDeeper:
************** / expectUnDeepers                                                                                :3_4:GoDeeper:
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","a Public Agency"]                                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                 :3_4:GoDeeper:
************** > aNLK: determined undp_count = 3                                                                :3_4:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                              :3_4:GoDeeper:
************** / $*|                                                                                            :3_4:GoDeeper:
$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                        :3_4:GoDeeper:
************** > ->| success                                                                                     :3_4:Other "a Pu:
************** / |>>/recurse                                                                                     :3_4:Other "a Pu:
|>>/recurse> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected Other "a Public Agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :3_4:Other "a Pu:
*************** / slMultiTerm                                                                                   :3_4:Other "a Pu:
**************** / someSL                                                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

**************** \ someSL has returned (["a Public Agency"],0)                                              :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

*************** \ slMultiTerm has returned (["a Public Agency"],0)                                           :4_2:UnDeeper:
*************** > |>>/base got ["a Public Agency"]                                                           :4_2:UnDeeper:
|>>/base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "a Public Agency"
|>>/base> VALUE: ((["a Public Agency"],0),[])

************** \ |>>/base has returned (["a Public Agency"],0)                                                :4_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "a Public Agency"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                    :3_4:GoDeeper:
************* / aboveNextLineKeyword                                                                              :3_4:Other "a Pu:
************** / expectUnDeepers                                                                                 :3_4:Other "a Pu:
*************** > ignoring ["a Public Agency"]                                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                  :3_4:Other "a Pu:
************** > aNLK: determined undp_count = 3                                                                 :3_4:Other "a Pu:
************** > ->| trying to consume 1 GoDeepers                                                               :3_4:Other "a Pu:
************** / $*|                                                                                             :3_4:Other "a Pu:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                         :3_4:Other "a Pu:
aboveNextLineKeyword> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=24:
aboveNextLineKeyword> unexpected Other "a Public Agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                     :3_4:Other "a Pu:
************* / aboveNextLineKeyword                                                                           :4_2:UnDeeper:
************** / expectUnDeepers                                                                              :4_2:UnDeeper:
*************** > ignoring []                                                                                :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :4_2:UnDeeper:
************** > aNLK: determined undp_count = 3                                                              :4_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :4_2:UnDeeper:
************** / $*|                                                                                          :4_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :4_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=25:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :4_2:UnDeeper:
pre part> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=28:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=28:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPrePost> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=28:
withPrePost> unexpected Must
withPrePost> expecting And, GoDeeper, Or, UnDeeper, or Unless

********** / withPreOnly                                                                                        :3_2:GoDeeper:
*********** / $*|                                                                                              :3_2:GoDeeper:
************ / pre part                                                                                       :3_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :3_2:Other "is":
************** / expectUnDeepers                                                                             :3_2:Other "is":
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is","GD","not","GD","a Public Agency"]                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                              :3_2:Other "is":
************** > aNLK: determined undp_count = 3                                                             :3_2:Other "is":
************** > ->| trying to consume 1 GoDeepers                                                           :3_2:Other "is":
************** / $*|                                                                                         :3_2:Other "is":
$*|> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :3_2:Other "is":
aboveNextLineKeyword> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=20:
aboveNextLineKeyword> unexpected Other "is"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :3_2:Other "is":
************* / aboveNextLineKeyword                                                                           :3_3:GoDeeper:
************** / expectUnDeepers                                                                              :3_3:GoDeeper:
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","not","GD","a Public Agency"]                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :3_3:GoDeeper:
************** > aNLK: determined undp_count = 3                                                              :3_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_3:GoDeeper:
************** / $*|                                                                                          :3_3:GoDeeper:
$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_3:GoDeeper:
************** > ->| success                                                                                   :3_3:Other "not":
************** / |>>/recurse                                                                                   :3_3:Other "not":
|>>/recurse> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected Other "not"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :3_3:Other "not":
*************** / slMultiTerm                                                                                 :3_3:Other "not":
**************** / someSL                                                                                    :3_3:Other "not":
someSL> IN: Other "not" GoDeeper Other "a Public Age <…>
someSL> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
someSL> VALUE: ((["not","a Public Agency"],1),[])

**************** \ someSL has returned (["not","a Public Agency"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> VALUE: ((["not","a Public Agency"],1),[])

*************** \ slMultiTerm has returned (["not","a Public Agency"],1)                                     :4_2:UnDeeper:
*************** > |>>/base got ["not","a Public Agency"]                                                     :4_2:UnDeeper:
|>>/base> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/base> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
|>>/base> VALUE: ((["not","a Public Agency"],1),[])

************** \ |>>/base has returned (["not","a Public Agency"],1)                                          :4_2:UnDeeper:
************** > aNLK: current depth is 2                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :3_3:Other "not":
************** / expectUnDeepers                                                                               :3_3:Other "not":
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["not","GD","a Public Agency"]                                                    :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "not" GoDeeper Other "a Public Age <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                :3_3:Other "not":
************** > aNLK: determined undp_count = 3                                                               :3_3:Other "not":
************** > ->| trying to consume 1 GoDeepers                                                             :3_3:Other "not":
************** / $*|                                                                                           :3_3:Other "not":
$*|> IN: Other "not" GoDeeper Other "a Public Age <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :3_3:Other "not":
aboveNextLineKeyword> IN: Other "not" GoDeeper Other "a Public Age <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=22:
aboveNextLineKeyword> unexpected Other "not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :3_3:Other "not":
************* / aboveNextLineKeyword                                                                             :3_4:GoDeeper:
************** / expectUnDeepers                                                                                :3_4:GoDeeper:
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","a Public Agency"]                                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                 :3_4:GoDeeper:
************** > aNLK: determined undp_count = 3                                                                :3_4:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                              :3_4:GoDeeper:
************** / $*|                                                                                            :3_4:GoDeeper:
$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                        :3_4:GoDeeper:
************** > ->| success                                                                                     :3_4:Other "a Pu:
************** / |>>/recurse                                                                                     :3_4:Other "a Pu:
|>>/recurse> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected Other "a Public Agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :3_4:Other "a Pu:
*************** / slMultiTerm                                                                                   :3_4:Other "a Pu:
**************** / someSL                                                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

**************** \ someSL has returned (["a Public Agency"],0)                                              :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

*************** \ slMultiTerm has returned (["a Public Agency"],0)                                           :4_2:UnDeeper:
*************** > |>>/base got ["a Public Agency"]                                                           :4_2:UnDeeper:
|>>/base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "a Public Agency"
|>>/base> VALUE: ((["a Public Agency"],0),[])

************** \ |>>/base has returned (["a Public Agency"],0)                                                :4_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "a Public Agency"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                    :3_4:GoDeeper:
************* / aboveNextLineKeyword                                                                              :3_4:Other "a Pu:
************** / expectUnDeepers                                                                                 :3_4:Other "a Pu:
*************** > ignoring ["a Public Agency"]                                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                  :3_4:Other "a Pu:
************** > aNLK: determined undp_count = 3                                                                 :3_4:Other "a Pu:
************** > ->| trying to consume 1 GoDeepers                                                               :3_4:Other "a Pu:
************** / $*|                                                                                             :3_4:Other "a Pu:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                         :3_4:Other "a Pu:
aboveNextLineKeyword> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=24:
aboveNextLineKeyword> unexpected Other "a Public Agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                     :3_4:Other "a Pu:
************* / aboveNextLineKeyword                                                                           :4_2:UnDeeper:
************** / expectUnDeepers                                                                              :4_2:UnDeeper:
*************** > ignoring []                                                                                :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :4_2:UnDeeper:
************** > aNLK: determined undp_count = 3                                                              :4_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :4_2:UnDeeper:
************** / $*|                                                                                          :4_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :4_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=25:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :4_2:UnDeeper:
pre part> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=28:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=28:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPreOnly> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=28:
withPreOnly> unexpected Must
withPreOnly> expecting And, GoDeeper, Or, UnDeeper, or Unless

pBSR> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=28:
pBSR> Label (["is"]) followed by label (["not"]) is not allowed

preambleBoolStructR [Who,Which,Whose]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (CERR): Who GoDeeper
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=28:
preambleBoolStructR [Who,Which,Whose]> Label (["is"]) followed by label (["not"]) is not allowed

manyIndentation/leaf?> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=28:
manyIndentation/leaf?> Label (["is"]) followed by label (["not"]) is not allowed

******* / manyIndentation/deeper; calling someIndentation                                                         :3_1:Who:
******** / someIndentation                                                                                       :3_1:Who:
********* / myindented: consuming GoDeeper                                                                      :3_1:Who:
myindented: consuming GoDeeper> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=18:
myindented: consuming GoDeeper> unexpected Who
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=18:
someIndentation> unexpected Who
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=18:
manyIndentation/deeper; calling someIndentation> unexpected Who
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :3_1:Who:
WHERE> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected Who
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Having

preambleParamText:[Having]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected Who
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Given

preambleParamText:[Given]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected Who
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Upon

preambleParamText:[Upon]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=18:
preambleParamText:[Upon]> unexpected Who
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Who:
preambleBoolStructR [Unless]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=18:
preambleBoolStructR [Unless]> unexpected Who
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :3_1:Who:
preambleBoolStructR [When,If]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=18:
preambleBoolStructR [When,If]> unexpected Who
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting May, Must, or Shant

pDT> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=18:
pDT> unexpected Who
pDT> expecting May, Must, or Shant

******* / pDoAction/Do                                                                                            :3_1:Who:
pDoAction/Do> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=18:
pDoAction/Do> unexpected Who
pDoAction/Do> expecting Do

regulative permutation with deontic-temporal> IN: Every GoDeeper Other "Organisation" GoDe <…>
regulative permutation with deontic-temporal> MATCH (CERR): Every GoDeeper Other "Organisation" GoDe <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=18:
regulative permutation with deontic-temporal> unexpected Who
regulative permutation with deontic-temporal> expecting Do, Given, Having, If, May, Must, Shant, Unless, Upon, When, or Where

****** / regulative permutation with deontic-action                                                                :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: Every GoDeeper Other "Organisation" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Every
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Having

preambleParamText:[Having]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Every
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected Every
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected Every
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :2_1:Every:
pTemporal/eventually> IN: Every GoDeeper Other "Organisation" GoDe <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=4:
pTemporal/eventually> unexpected Every
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Every GoDeeper Other "Organisation" GoDe <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=4:
pTemporal/specifically> unexpected Every
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :2_1:Every:
pTemporal/vaguely> IN: Every GoDeeper Other "Organisation" GoDe <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=4:
pTemporal/vaguely> unexpected Every
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Organisation" GoDeeper G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "Organisation" GoDeeper GoDeeper G <…>
someSL> MATCH (COK): Other "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slMultiTerm> MATCH (COK): Other "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slAKA base> MATCH (COK): Other "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: Other "Organisation" GoDeeper GoDeeper G <…>
$*|> MATCH (COK): Other "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
Aka Token> MATCH (COK): Aka
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
$>|> MATCH (COK): Aka
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected Other "You"
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/base> MATCH (COK): Other "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "You" UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (COK): GoDeeper Other "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
PAKA/akapart> MATCH (COK): Aka GoDeeper Other "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|?| optional something> MATCH (COK): Aka GoDeeper Other "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
slAKA optional akapart> MATCH (COK): Aka GoDeeper Other "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper Aka GoDeeper Other "You" UnDeep <…>
|>>/recurse> MATCH (COK): GoDeeper Aka GoDeeper Other "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper GoDeeper Aka GoDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper GoDeeper Aka GoDeeper  <…>
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slAKA> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
undeepers> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: Other "Organisation" GoDeeper GoDeeper G <…>
pAKA> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: Other "Organisation" GoDeeper GoDeeper G <…>
pMultiTermAka> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: Other "Organisation" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented: consuming UnDeeper                                                                                 :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Who GoDeeper Other "is" GoDeepe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :3_1:Who:
someIndentation> IN: GoDeeper Other "Organisation" GoDeeper G <…>
someIndentation> MATCH (COK): GoDeeper Other "Organisation" GoDeeper G <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [Every,Party,TokAll]> IN: Every GoDeeper Other "Organisation" GoDe <…>
pActor [Every,Party,TokAll]> MATCH (COK): Every GoDeeper Other "Organisation" GoDe <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Organisation" :| [],Nothing) :| []))            :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/1a:label directly above                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=19:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************* / term p/b:label to the left of line below, with EOL                                           :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=19:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / expression                                                                            :3_2:Other "is":
****************** / labelPrefix                                                                         :3_2:Other "is":
labelPrefix> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
labelPrefix> MATCH (COK): Other "is"
labelPrefix> VALUE: ("is",[])

****************** \ labelPrefix has returned "is"                                                        :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/1a:label directly above                                                     :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=21:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************* / term p/b:label to the left of line below, with EOL                                 :3_3:GoDeeper:
******************** / someSL                                                                           :3_3:GoDeeper:
********************* / pNumAsText                                                                     :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=21:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "not":
********************** / manyIndentation/leaf?                                                         :3_3:Other "not":
*********************** / expression                                                                  :3_3:Other "not":
************************ / labelPrefix                                                               :3_3:Other "not":
labelPrefix> IN: Other "not" GoDeeper Other "a Public Age <…>
labelPrefix> MATCH (COK): Other "not"
labelPrefix> VALUE: ("not",[])

************************ \ labelPrefix has returned "not"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/1a:label directly above                                           :3_4:GoDeeper:
************************** / $*|                                                                    :3_4:GoDeeper:
*************************** / someSL                                                               :3_4:GoDeeper:
**************************** / pNumAsText                                                         :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=23:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************* / term p/b:label to the left of line below, with EOL                       :3_4:GoDeeper:
************************** / someSL                                                                 :3_4:GoDeeper:
*************************** / pNumAsText                                                           :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=23:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "a Pu:
**************************** / manyIndentation/leaf?                                               :3_4:Other "a Pu:
***************************** / expression                                                        :3_4:Other "a Pu:
****************************** / labelPrefix                                                     :3_4:Other "a Pu:
labelPrefix> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected UnDeeper

****************************** / term p                                                          :3_4:Other "a Pu:
******************************* / term p/1a:label directly above                                :3_4:Other "a Pu:
******************************** / $*|                                                         :3_4:Other "a Pu:
********************************* / someSL                                                    :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

********************************* \ someSL has returned (["a Public Agency"],0)            :4_2:UnDeeper:
********************************* / pNumAsText                                             :4_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "a Public Agency"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "a Public Agency"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=25:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL            :3_4:Other "a Pu:
******************************** / someSL                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

******************************** \ someSL has returned (["a Public Agency"],0)              :4_2:UnDeeper:
******************************** / undeepers                                                :4_2:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
********************************* > sameLine: success!                                     :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                :4_2:UnDeeper:
******************************** / matching EOL                                             :4_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "a Public Agency"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=25:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************* / term p/notLabelTerm                                           :3_4:Other "a Pu:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "a Pu:
********************************* / someIndentation                                           :3_4:Other "a Pu:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "a Pu:
myindented: consuming GoDeeper> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=24:
myindented: consuming GoDeeper> unexpected Other "a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected Other "a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected Other "a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

******************************** / term p/3:plain p                                            :3_4:Other "a Pu:
********************************* / pRelPred                                                  :3_4:Other "a Pu:
********************************** / slRelPred                                               :3_4:Other "a Pu:
*********************************** / nested simpleHorn                                     :3_4:Other "a Pu:
************************************ > |^|                                                 :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:Must:
nested simpleHorn> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "a Public Agency" UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting Means or UnDeeper

*********************************** / RPConstraint                                          :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPBoolStructR                                         :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPMT                                                  :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slAKA                                             :3_4:Other "a Pu:
************************************** / $*|                                             :3_4:Other "a Pu:
*************************************** / slAKA base                                    :3_4:Other "a Pu:
**************************************** / slMultiTerm                                 :3_4:Other "a Pu:
***************************************** / someSL                                    :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

***************************************** \ someSL has returned (["a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

**************************************** \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "a Public Agency"
slAKA base> VALUE: ((["a Public Agency"],0),[])

*************************************** \ slAKA base has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************** \ $*| has returned (["a Public Agency"],0)     :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "a Public Agency"
slAKA> VALUE: ((["a Public Agency"],0),[])

************************************* \ slAKA has returned (["a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
RPMT> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "a Public Agency"
RPMT> VALUE: ((RPMT ["a Public Agency"],0),[])

*********************************** \ RPMT has returned (RPMT ["a Public Agency"],0)     :4_2:UnDeeper:
slRelPred> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "a Public Agency"
slRelPred> VALUE: ((RPMT ["a Public Agency"],0),[])

********************************** \ slRelPred has returned (RPMT ["a Public Agency"],0)  :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "a Public Agency"
pRelPred> VALUE: (RPMT ["a Public Agency"],[])

********************************* \ pRelPred has returned RPMT ["a Public Agency"]         :4_2:UnDeeper:
term p/3:plain p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["a Public Agency"])        :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["a Public Agency"])      :4_2:UnDeeper:
manyIndentation/leaf?> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
someIndentation> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["a Public Agency"])                      :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "not" GoDeeper Other "a Public Age <…>
expression> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
expression> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

*********************** \ expression has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))  :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "not" GoDeeper Other "a Public Age <…>
manyIndentation/leaf?> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
manyIndentation/leaf?> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someIndentation> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
someIndentation> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************* \ someIndentation has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p/notLabelTerm> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

****************** \ term p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))                  :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expression> MATCH (COK): Other "is" GoDeeper Other "not" GoDeeper <…>
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

***************** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
manyIndentation/leaf?> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "is" GoDeeper Other "not" GoDeeper <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Must:
someIndentation> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someIndentation> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*************** \ someIndentation has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/2:someIndentation expr p> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/notLabelTerm> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************ \ term p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))      :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected Must
binary(Or)> expecting Or

************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected Must
binary(And)> expecting And

************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected Must
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected Must
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
expression> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*********** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))    :4_1:Must:
ppp inner> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
ppp inner> MATCH (CERR): GoDeeper Other "is" GoDeeper Other "not" <…>
ppp inner> ERROR:
ppp inner> offset=28:
ppp inner> Label (["is"]) followed by label (["not"]) is not allowed

********** / withPrePost                                                                                        :3_2:GoDeeper:
*********** > |<* starting                                                                                     :3_2:GoDeeper:
*********** / $*|                                                                                              :3_2:GoDeeper:
************ / pre part                                                                                       :3_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :3_2:Other "is":
************** / expectUnDeepers                                                                             :3_2:Other "is":
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is","GD","not","GD","a Public Agency"]                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                              :3_2:Other "is":
************** > aNLK: determined undp_count = 3                                                             :3_2:Other "is":
************** > ->| trying to consume 1 GoDeepers                                                           :3_2:Other "is":
************** / $*|                                                                                         :3_2:Other "is":
$*|> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :3_2:Other "is":
aboveNextLineKeyword> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=20:
aboveNextLineKeyword> unexpected Other "is"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :3_2:Other "is":
************* / aboveNextLineKeyword                                                                           :3_3:GoDeeper:
************** / expectUnDeepers                                                                              :3_3:GoDeeper:
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","not","GD","a Public Agency"]                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :3_3:GoDeeper:
************** > aNLK: determined undp_count = 3                                                              :3_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_3:GoDeeper:
************** / $*|                                                                                          :3_3:GoDeeper:
$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_3:GoDeeper:
************** > ->| success                                                                                   :3_3:Other "not":
************** / |>>/recurse                                                                                   :3_3:Other "not":
|>>/recurse> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected Other "not"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :3_3:Other "not":
*************** / slMultiTerm                                                                                 :3_3:Other "not":
**************** / someSL                                                                                    :3_3:Other "not":
someSL> IN: Other "not" GoDeeper Other "a Public Age <…>
someSL> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
someSL> VALUE: ((["not","a Public Agency"],1),[])

**************** \ someSL has returned (["not","a Public Agency"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> VALUE: ((["not","a Public Agency"],1),[])

*************** \ slMultiTerm has returned (["not","a Public Agency"],1)                                     :4_2:UnDeeper:
*************** > |>>/base got ["not","a Public Agency"]                                                     :4_2:UnDeeper:
|>>/base> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/base> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
|>>/base> VALUE: ((["not","a Public Agency"],1),[])

************** \ |>>/base has returned (["not","a Public Agency"],1)                                          :4_2:UnDeeper:
************** > aNLK: current depth is 2                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :3_3:Other "not":
************** / expectUnDeepers                                                                               :3_3:Other "not":
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["not","GD","a Public Agency"]                                                    :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "not" GoDeeper Other "a Public Age <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                :3_3:Other "not":
************** > aNLK: determined undp_count = 3                                                               :3_3:Other "not":
************** > ->| trying to consume 1 GoDeepers                                                             :3_3:Other "not":
************** / $*|                                                                                           :3_3:Other "not":
$*|> IN: Other "not" GoDeeper Other "a Public Age <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :3_3:Other "not":
aboveNextLineKeyword> IN: Other "not" GoDeeper Other "a Public Age <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=22:
aboveNextLineKeyword> unexpected Other "not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :3_3:Other "not":
************* / aboveNextLineKeyword                                                                             :3_4:GoDeeper:
************** / expectUnDeepers                                                                                :3_4:GoDeeper:
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","a Public Agency"]                                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                 :3_4:GoDeeper:
************** > aNLK: determined undp_count = 3                                                                :3_4:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                              :3_4:GoDeeper:
************** / $*|                                                                                            :3_4:GoDeeper:
$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                        :3_4:GoDeeper:
************** > ->| success                                                                                     :3_4:Other "a Pu:
************** / |>>/recurse                                                                                     :3_4:Other "a Pu:
|>>/recurse> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected Other "a Public Agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :3_4:Other "a Pu:
*************** / slMultiTerm                                                                                   :3_4:Other "a Pu:
**************** / someSL                                                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

**************** \ someSL has returned (["a Public Agency"],0)                                              :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

*************** \ slMultiTerm has returned (["a Public Agency"],0)                                           :4_2:UnDeeper:
*************** > |>>/base got ["a Public Agency"]                                                           :4_2:UnDeeper:
|>>/base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "a Public Agency"
|>>/base> VALUE: ((["a Public Agency"],0),[])

************** \ |>>/base has returned (["a Public Agency"],0)                                                :4_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "a Public Agency"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                    :3_4:GoDeeper:
************* / aboveNextLineKeyword                                                                              :3_4:Other "a Pu:
************** / expectUnDeepers                                                                                 :3_4:Other "a Pu:
*************** > ignoring ["a Public Agency"]                                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                  :3_4:Other "a Pu:
************** > aNLK: determined undp_count = 3                                                                 :3_4:Other "a Pu:
************** > ->| trying to consume 1 GoDeepers                                                               :3_4:Other "a Pu:
************** / $*|                                                                                             :3_4:Other "a Pu:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                         :3_4:Other "a Pu:
aboveNextLineKeyword> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=24:
aboveNextLineKeyword> unexpected Other "a Public Agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                     :3_4:Other "a Pu:
************* / aboveNextLineKeyword                                                                           :4_2:UnDeeper:
************** / expectUnDeepers                                                                              :4_2:UnDeeper:
*************** > ignoring []                                                                                :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :4_2:UnDeeper:
************** > aNLK: determined undp_count = 3                                                              :4_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :4_2:UnDeeper:
************** / $*|                                                                                          :4_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :4_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=25:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :4_2:UnDeeper:
pre part> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=28:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=28:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPrePost> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=28:
withPrePost> unexpected Must
withPrePost> expecting And, GoDeeper, Or, UnDeeper, or Unless

********** / withPreOnly                                                                                        :3_2:GoDeeper:
*********** / $*|                                                                                              :3_2:GoDeeper:
************ / pre part                                                                                       :3_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :3_2:Other "is":
************** / expectUnDeepers                                                                             :3_2:Other "is":
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is","GD","not","GD","a Public Agency"]                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                              :3_2:Other "is":
************** > aNLK: determined undp_count = 3                                                             :3_2:Other "is":
************** > ->| trying to consume 1 GoDeepers                                                           :3_2:Other "is":
************** / $*|                                                                                         :3_2:Other "is":
$*|> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :3_2:Other "is":
aboveNextLineKeyword> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=20:
aboveNextLineKeyword> unexpected Other "is"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :3_2:Other "is":
************* / aboveNextLineKeyword                                                                           :3_3:GoDeeper:
************** / expectUnDeepers                                                                              :3_3:GoDeeper:
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","not","GD","a Public Agency"]                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :3_3:GoDeeper:
************** > aNLK: determined undp_count = 3                                                              :3_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_3:GoDeeper:
************** / $*|                                                                                          :3_3:GoDeeper:
$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_3:GoDeeper:
************** > ->| success                                                                                   :3_3:Other "not":
************** / |>>/recurse                                                                                   :3_3:Other "not":
|>>/recurse> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected Other "not"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :3_3:Other "not":
*************** / slMultiTerm                                                                                 :3_3:Other "not":
**************** / someSL                                                                                    :3_3:Other "not":
someSL> IN: Other "not" GoDeeper Other "a Public Age <…>
someSL> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
someSL> VALUE: ((["not","a Public Agency"],1),[])

**************** \ someSL has returned (["not","a Public Agency"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> VALUE: ((["not","a Public Agency"],1),[])

*************** \ slMultiTerm has returned (["not","a Public Agency"],1)                                     :4_2:UnDeeper:
*************** > |>>/base got ["not","a Public Agency"]                                                     :4_2:UnDeeper:
|>>/base> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/base> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
|>>/base> VALUE: ((["not","a Public Agency"],1),[])

************** \ |>>/base has returned (["not","a Public Agency"],1)                                          :4_2:UnDeeper:
************** > aNLK: current depth is 2                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :3_3:Other "not":
************** / expectUnDeepers                                                                               :3_3:Other "not":
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["not","GD","a Public Agency"]                                                    :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "not" GoDeeper Other "a Public Age <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                :3_3:Other "not":
************** > aNLK: determined undp_count = 3                                                               :3_3:Other "not":
************** > ->| trying to consume 1 GoDeepers                                                             :3_3:Other "not":
************** / $*|                                                                                           :3_3:Other "not":
$*|> IN: Other "not" GoDeeper Other "a Public Age <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :3_3:Other "not":
aboveNextLineKeyword> IN: Other "not" GoDeeper Other "a Public Age <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=22:
aboveNextLineKeyword> unexpected Other "not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :3_3:Other "not":
************* / aboveNextLineKeyword                                                                             :3_4:GoDeeper:
************** / expectUnDeepers                                                                                :3_4:GoDeeper:
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","a Public Agency"]                                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                 :3_4:GoDeeper:
************** > aNLK: determined undp_count = 3                                                                :3_4:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                              :3_4:GoDeeper:
************** / $*|                                                                                            :3_4:GoDeeper:
$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                        :3_4:GoDeeper:
************** > ->| success                                                                                     :3_4:Other "a Pu:
************** / |>>/recurse                                                                                     :3_4:Other "a Pu:
|>>/recurse> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected Other "a Public Agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :3_4:Other "a Pu:
*************** / slMultiTerm                                                                                   :3_4:Other "a Pu:
**************** / someSL                                                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

**************** \ someSL has returned (["a Public Agency"],0)                                              :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

*************** \ slMultiTerm has returned (["a Public Agency"],0)                                           :4_2:UnDeeper:
*************** > |>>/base got ["a Public Agency"]                                                           :4_2:UnDeeper:
|>>/base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "a Public Agency"
|>>/base> VALUE: ((["a Public Agency"],0),[])

************** \ |>>/base has returned (["a Public Agency"],0)                                                :4_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "a Public Agency"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                    :3_4:GoDeeper:
************* / aboveNextLineKeyword                                                                              :3_4:Other "a Pu:
************** / expectUnDeepers                                                                                 :3_4:Other "a Pu:
*************** > ignoring ["a Public Agency"]                                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                  :3_4:Other "a Pu:
************** > aNLK: determined undp_count = 3                                                                 :3_4:Other "a Pu:
************** > ->| trying to consume 1 GoDeepers                                                               :3_4:Other "a Pu:
************** / $*|                                                                                             :3_4:Other "a Pu:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                         :3_4:Other "a Pu:
aboveNextLineKeyword> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=24:
aboveNextLineKeyword> unexpected Other "a Public Agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                     :3_4:Other "a Pu:
************* / aboveNextLineKeyword                                                                           :4_2:UnDeeper:
************** / expectUnDeepers                                                                              :4_2:UnDeeper:
*************** > ignoring []                                                                                :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :4_2:UnDeeper:
************** > aNLK: determined undp_count = 3                                                              :4_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :4_2:UnDeeper:
************** / $*|                                                                                          :4_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :4_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=25:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :4_2:UnDeeper:
pre part> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=28:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=28:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPreOnly> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=28:
withPreOnly> unexpected Must
withPreOnly> expecting And, GoDeeper, Or, UnDeeper, or Unless

pBSR> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=28:
pBSR> Label (["is"]) followed by label (["not"]) is not allowed

preambleBoolStructR [Who,Which,Whose]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (CERR): Who GoDeeper
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=28:
preambleBoolStructR [Who,Which,Whose]> Label (["is"]) followed by label (["not"]) is not allowed

manyIndentation/leaf?> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=28:
manyIndentation/leaf?> Label (["is"]) followed by label (["not"]) is not allowed

******* / manyIndentation/deeper; calling someIndentation                                                         :3_1:Who:
******** / someIndentation                                                                                       :3_1:Who:
********* / myindented: consuming GoDeeper                                                                      :3_1:Who:
myindented: consuming GoDeeper> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=18:
myindented: consuming GoDeeper> unexpected Who
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=18:
someIndentation> unexpected Who
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=18:
manyIndentation/deeper; calling someIndentation> unexpected Who
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :3_1:Who:
WHERE> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected Who
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Having

preambleParamText:[Having]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected Who
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Given

preambleParamText:[Given]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected Who
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Upon

preambleParamText:[Upon]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=18:
preambleParamText:[Upon]> unexpected Who
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Who:
preambleBoolStructR [Unless]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=18:
preambleBoolStructR [Unless]> unexpected Who
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :3_1:Who:
preambleBoolStructR [When,If]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=18:
preambleBoolStructR [When,If]> unexpected Who
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :3_1:Who:
pTemporal/eventually> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=18:
pTemporal/eventually> unexpected Who
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=18:
pTemporal/specifically> unexpected Who
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :3_1:Who:
pTemporal/vaguely> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=18:
pTemporal/vaguely> unexpected Who
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :3_1:Who:
pDA> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=18:
pDA> unexpected Who
pDA> expecting May, Must, or Shant

regulative permutation with deontic-action> IN: Every GoDeeper Other "Organisation" GoDe <…>
regulative permutation with deontic-action> MATCH (CERR): Every GoDeeper Other "Organisation" GoDe <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=18:
regulative permutation with deontic-action> unexpected Who
regulative permutation with deontic-action> expecting After, Before, By, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

permutationsReg> IN: Every GoDeeper Other "Organisation" GoDe <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=18:
permutationsReg> unexpected Who
permutationsReg> expecting After, Before, By, Do, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

pRegRuleNormal> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=18:
pRegRuleNormal> unexpected Who
pRegRuleNormal> expecting After, Before, By, Do, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

pRegRule> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRegRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRegRule> ERROR:
pRegRule> offset=18:
pRegRule> unexpected Who
pRegRule> expecting After, Before, By, Do, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Asse:
|>>/recurse> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Assess"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Asse:
******** > |>>/base got "Assess"                                                                                    :2_2:UnDeeper:
|>>/base> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/base> MATCH (COK): Other "Assess"
|>>/base> VALUE: (("Assess",0),[])

******* \ |>>/base has returned ("Assess",0)                                                                         :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

****** \ |>>/recurse has returned ("Assess",1)                                                                        :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

***** \ |>| calling $>> has returned ("Assess",1)                                                                      :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Every:
undeepers> IN: UnDeeper Every GoDeeper Other "Organisat <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Every:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / pHornlike/uponLimb                                                                                            :2_1:Every:
***** / preambleParamText:[Upon]                                                                                    :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Every
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:Every:
***** / preambleParamText:[Given]                                                                                   :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Every
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pTypeDefinition> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected Every
pTypeDefinition> expecting Define, Given, or Upon

*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Asse:
|>>/recurse> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Assess"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Asse:
******** > |>>/base got "Assess"                                                                                    :2_2:UnDeeper:
|>>/base> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/base> MATCH (COK): Other "Assess"
|>>/base> VALUE: (("Assess",0),[])

******* \ |>>/base has returned ("Assess",0)                                                                         :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

****** \ |>>/recurse has returned ("Assess",1)                                                                        :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

***** \ |>| calling $>> has returned ("Assess",1)                                                                      :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Every:
undeepers> IN: UnDeeper Every GoDeeper Other "Organisat <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Every:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / calling myindented pNameParens                                                                                :2_1:Every:
***** / manyIndentation/leaf?                                                                                       :2_1:Every:
****** / pMultiTermAka                                                                                             :2_1:Every:
******* / pAKA                                                                                                    :2_1:Every:
******** / slAKA                                                                                                 :2_1:Every:
********* / $*|                                                                                                 :2_1:Every:
********** / slAKA base                                                                                        :2_1:Every:
*********** / slMultiTerm                                                                                     :2_1:Every:
************ / someSL                                                                                        :2_1:Every:
************* / pNumAsText                                                                                  :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

pAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected Every
pAKA> expecting Other text or TNumber 1234

pMultiTermAka> IN: Every GoDeeper Other "Organisation" GoDe <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected Every
pMultiTermAka> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Every:
****** / someIndentation                                                                                           :2_1:Every:
******* / myindented: consuming GoDeeper                                                                          :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: Every GoDeeper Other "Organisation" GoDe <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected Every
calling myindented pNameParens> expecting GoDeeper, Other text, or TNumber 1234

pConstitutiveRule> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pConstitutiveRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected Every
pConstitutiveRule> expecting GoDeeper, Other text, or TNumber 1234

*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Asse:
|>>/recurse> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Assess"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Asse:
******** > |>>/base got "Assess"                                                                                    :2_2:UnDeeper:
|>>/base> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/base> MATCH (COK): Other "Assess"
|>>/base> VALUE: (("Assess",0),[])

******* \ |>>/base has returned ("Assess",0)                                                                         :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

****** \ |>>/recurse has returned ("Assess",1)                                                                        :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

***** \ |>| calling $>> has returned ("Assess",1)                                                                      :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Every:
undeepers> IN: UnDeeper Every GoDeeper Other "Organisat <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Every:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / pExpect                                                                                                       :2_1:Every:
pExpect> IN: Every GoDeeper Other "Organisation" GoDe <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected Every
pExpect> expecting Expect

pScenarioRule> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pScenarioRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected Every
pScenarioRule> expecting Expect or Given

*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>| calling $>>                                                                                            :1_2:GoDeeper:
******* / |>>/recurse                                                                                              :1_2:GoDeeper:
******** / |>>/recurse                                                                                             :1_2:Other "Asse:
|>>/recurse> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Assess"
|>>/recurse> expecting GoDeeper

******** / |>>/base                                                                                                :1_2:Other "Asse:
********* > |>>/base got "Assess"                                                                                  :2_2:UnDeeper:
|>>/base> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/base> MATCH (COK): Other "Assess"
|>>/base> VALUE: (("Assess",0),[])

******** \ |>>/base has returned ("Assess",0)                                                                       :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

******* \ |>>/recurse has returned ("Assess",1)                                                                      :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

****** \ |>| calling $>> has returned ("Assess",1)                                                                    :2_2:UnDeeper:
****** / |>| calling $>>                                                                                              :2_2:UnDeeper:
******* / |>>/recurse                                                                                                :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                   :2_2:UnDeeper:
******** > |>>/base got Nothing                                                                                     :2_2:UnDeeper:
|>>/base> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******* \ |>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

****** \ |>| calling $>> has returned (Nothing,0)                                                                     :2_2:UnDeeper:
****** / undeepers                                                                                                    :2_2:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :2_2:UnDeeper:
******* > sameLine: success!                                                                                      :2_1:Every:
undeepers> IN: UnDeeper Every GoDeeper Other "Organisat <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :2_1:Every:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

***** \ pRuleLabel has returned ("\167",2,"Assess")                                                                 :2_1:Every:
pSrcRef> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pSrcRef> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pSrcRef> VALUE: ((Just ("\167",2,"Assess"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Assess"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Every:
**** / pHornlike / permute                                                                                           :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Every
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Every
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Every
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Every
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

pHornlike / permute> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=4:
pHornlike / permute> unexpected Every
pHornlike / permute> expecting Decide, Define, Given, GoDeeper, If, Means, Other text, Otherwise, TNumber 1234, Upon, or When

pHornlike> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pHornlike> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pHornlike> ERROR:
pHornlike> offset=4:
pHornlike> unexpected Every
pHornlike> expecting Decide, Define, Given, GoDeeper, If, Means, Other text, Otherwise, TNumber 1234, Upon, or When

*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

**** \ $>| has returned RuleMarker 2 "\167"                                                                           :1_2:GoDeeper:
**** / |>| calling $>>                                                                                                :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Asse:
|>>/recurse> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Assess"
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                    :1_2:Other "Asse:
******* > |>>/base got "Assess"                                                                                      :2_2:UnDeeper:
|>>/base> IN: Other "Assess" UnDeeper Every GoDeeper O <…>
|>>/base> MATCH (COK): Other "Assess"
|>>/base> VALUE: (("Assess",0),[])

****** \ |>>/base has returned ("Assess",0)                                                                           :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

***** \ |>>/recurse has returned ("Assess",1)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Assess" UnDeeper Every G <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Assess"
|>| calling $>>> VALUE: (("Assess",1),[])

**** \ |>| calling $>> has returned ("Assess",1)                                                                        :2_2:UnDeeper:
**** / |>| calling $>>                                                                                                  :2_2:UnDeeper:
***** / |>>/recurse                                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***** / |>>/base                                                                                                       :2_2:UnDeeper:
****** > |>>/base got Nothing                                                                                         :2_2:UnDeeper:
|>>/base> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***** \ |>>/base has returned (Nothing,0)                                                                              :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Every GoDeeper Other "Organisat <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

**** \ |>| calling $>> has returned (Nothing,0)                                                                         :2_2:UnDeeper:
**** / undeepers                                                                                                        :2_2:UnDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                         :2_2:UnDeeper:
***** > sameLine: success!                                                                                          :2_1:Every:
undeepers> IN: UnDeeper Every GoDeeper Other "Organisat <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                     :2_1:Every:
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

*** \ pRuleLabel has returned ("\167",2,"Assess")                                                                     :2_1:Every:
pRule> IN: RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRule> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Asse <…>
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",2,"Assess"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})},[])

** \ pRule has returned RuleGroup {rlabel = Just ("\167",2,"Assess"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:Every:
** / pRule                                                                                                             :2_1:Every:
*** / pRegRule                                                                                                        :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :2_1:Every:
***** / someDeep                                                                                                    :2_1:Every:
****** / someDeep first part calls base directly                                                                   :2_1:Every:
someDeep first part calls base directly> IN: Every GoDeeper Other "Organisation" GoDe <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected Every
someDeep first part calls base directly> expecting Other text

someDeep> IN: Every GoDeeper Other "Organisation" GoDe <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected Every
someDeep> expecting Other text

pRegRuleSugary> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected Every
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :2_1:Every:
***** / permutationsReg                                                                                             :2_1:Every:
****** / regulative permutation with deontic-temporal                                                              :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: Every GoDeeper Other "Organisation" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Every
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Having

preambleParamText:[Having]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Every
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected Every
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected Every
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting May, Must, or Shant

pDT> IN: Every GoDeeper Other "Organisation" GoDe <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected Every
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Organisation" GoDeeper G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "Organisation" GoDeeper GoDeeper G <…>
someSL> MATCH (COK): Other "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slMultiTerm> MATCH (COK): Other "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slAKA base> MATCH (COK): Other "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: Other "Organisation" GoDeeper GoDeeper G <…>
$*|> MATCH (COK): Other "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
Aka Token> MATCH (COK): Aka
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
$>|> MATCH (COK): Aka
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected Other "You"
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/base> MATCH (COK): Other "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "You" UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (COK): GoDeeper Other "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
PAKA/akapart> MATCH (COK): Aka GoDeeper Other "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|?| optional something> MATCH (COK): Aka GoDeeper Other "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
slAKA optional akapart> MATCH (COK): Aka GoDeeper Other "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper Aka GoDeeper Other "You" UnDeep <…>
|>>/recurse> MATCH (COK): GoDeeper Aka GoDeeper Other "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper GoDeeper Aka GoDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper GoDeeper Aka GoDeeper  <…>
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slAKA> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
undeepers> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: Other "Organisation" GoDeeper GoDeeper G <…>
pAKA> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: Other "Organisation" GoDeeper GoDeeper G <…>
pMultiTermAka> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: Other "Organisation" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented: consuming UnDeeper                                                                                 :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Who GoDeeper Other "is" GoDeepe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :3_1:Who:
someIndentation> IN: GoDeeper Other "Organisation" GoDeeper G <…>
someIndentation> MATCH (COK): GoDeeper Other "Organisation" GoDeeper G <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [Every,Party,TokAll]> IN: Every GoDeeper Other "Organisation" GoDe <…>
pActor [Every,Party,TokAll]> MATCH (COK): Every GoDeeper Other "Organisation" GoDe <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Organisation" :| [],Nothing) :| []))            :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/1a:label directly above                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=19:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************* / term p/b:label to the left of line below, with EOL                                           :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=19:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / expression                                                                            :3_2:Other "is":
****************** / labelPrefix                                                                         :3_2:Other "is":
labelPrefix> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
labelPrefix> MATCH (COK): Other "is"
labelPrefix> VALUE: ("is",[])

****************** \ labelPrefix has returned "is"                                                        :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/1a:label directly above                                                     :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=21:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************* / term p/b:label to the left of line below, with EOL                                 :3_3:GoDeeper:
******************** / someSL                                                                           :3_3:GoDeeper:
********************* / pNumAsText                                                                     :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=21:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "not":
********************** / manyIndentation/leaf?                                                         :3_3:Other "not":
*********************** / expression                                                                  :3_3:Other "not":
************************ / labelPrefix                                                               :3_3:Other "not":
labelPrefix> IN: Other "not" GoDeeper Other "a Public Age <…>
labelPrefix> MATCH (COK): Other "not"
labelPrefix> VALUE: ("not",[])

************************ \ labelPrefix has returned "not"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/1a:label directly above                                           :3_4:GoDeeper:
************************** / $*|                                                                    :3_4:GoDeeper:
*************************** / someSL                                                               :3_4:GoDeeper:
**************************** / pNumAsText                                                         :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=23:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************* / term p/b:label to the left of line below, with EOL                       :3_4:GoDeeper:
************************** / someSL                                                                 :3_4:GoDeeper:
*************************** / pNumAsText                                                           :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=23:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "a Pu:
**************************** / manyIndentation/leaf?                                               :3_4:Other "a Pu:
***************************** / expression                                                        :3_4:Other "a Pu:
****************************** / labelPrefix                                                     :3_4:Other "a Pu:
labelPrefix> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected UnDeeper

****************************** / term p                                                          :3_4:Other "a Pu:
******************************* / term p/1a:label directly above                                :3_4:Other "a Pu:
******************************** / $*|                                                         :3_4:Other "a Pu:
********************************* / someSL                                                    :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

********************************* \ someSL has returned (["a Public Agency"],0)            :4_2:UnDeeper:
********************************* / pNumAsText                                             :4_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "a Public Agency"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "a Public Agency"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=25:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL            :3_4:Other "a Pu:
******************************** / someSL                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

******************************** \ someSL has returned (["a Public Agency"],0)              :4_2:UnDeeper:
******************************** / undeepers                                                :4_2:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
********************************* > sameLine: success!                                     :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                :4_2:UnDeeper:
******************************** / matching EOL                                             :4_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "a Public Agency"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=25:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************* / term p/notLabelTerm                                           :3_4:Other "a Pu:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "a Pu:
********************************* / someIndentation                                           :3_4:Other "a Pu:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "a Pu:
myindented: consuming GoDeeper> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=24:
myindented: consuming GoDeeper> unexpected Other "a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected Other "a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected Other "a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

******************************** / term p/3:plain p                                            :3_4:Other "a Pu:
********************************* / pRelPred                                                  :3_4:Other "a Pu:
********************************** / slRelPred                                               :3_4:Other "a Pu:
*********************************** / nested simpleHorn                                     :3_4:Other "a Pu:
************************************ > |^|                                                 :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:Must:
nested simpleHorn> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "a Public Agency" UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting Means or UnDeeper

*********************************** / RPConstraint                                          :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPBoolStructR                                         :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPMT                                                  :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slAKA                                             :3_4:Other "a Pu:
************************************** / $*|                                             :3_4:Other "a Pu:
*************************************** / slAKA base                                    :3_4:Other "a Pu:
**************************************** / slMultiTerm                                 :3_4:Other "a Pu:
***************************************** / someSL                                    :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

***************************************** \ someSL has returned (["a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

**************************************** \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "a Public Agency"
slAKA base> VALUE: ((["a Public Agency"],0),[])

*************************************** \ slAKA base has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************** \ $*| has returned (["a Public Agency"],0)     :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "a Public Agency"
slAKA> VALUE: ((["a Public Agency"],0),[])

************************************* \ slAKA has returned (["a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
RPMT> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "a Public Agency"
RPMT> VALUE: ((RPMT ["a Public Agency"],0),[])

*********************************** \ RPMT has returned (RPMT ["a Public Agency"],0)     :4_2:UnDeeper:
slRelPred> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "a Public Agency"
slRelPred> VALUE: ((RPMT ["a Public Agency"],0),[])

********************************** \ slRelPred has returned (RPMT ["a Public Agency"],0)  :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "a Public Agency"
pRelPred> VALUE: (RPMT ["a Public Agency"],[])

********************************* \ pRelPred has returned RPMT ["a Public Agency"]         :4_2:UnDeeper:
term p/3:plain p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["a Public Agency"])        :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["a Public Agency"])      :4_2:UnDeeper:
manyIndentation/leaf?> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
someIndentation> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["a Public Agency"])                      :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "not" GoDeeper Other "a Public Age <…>
expression> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
expression> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

*********************** \ expression has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))  :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "not" GoDeeper Other "a Public Age <…>
manyIndentation/leaf?> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
manyIndentation/leaf?> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someIndentation> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
someIndentation> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************* \ someIndentation has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p/notLabelTerm> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

****************** \ term p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))                  :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expression> MATCH (COK): Other "is" GoDeeper Other "not" GoDeeper <…>
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

***************** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
manyIndentation/leaf?> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "is" GoDeeper Other "not" GoDeeper <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Must:
someIndentation> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someIndentation> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*************** \ someIndentation has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/2:someIndentation expr p> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/notLabelTerm> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************ \ term p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))      :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected Must
binary(Or)> expecting Or

************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected Must
binary(And)> expecting And

************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected Must
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected Must
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
expression> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*********** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))    :4_1:Must:
ppp inner> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
ppp inner> MATCH (CERR): GoDeeper Other "is" GoDeeper Other "not" <…>
ppp inner> ERROR:
ppp inner> offset=28:
ppp inner> Label (["is"]) followed by label (["not"]) is not allowed

********** / withPrePost                                                                                        :3_2:GoDeeper:
*********** > |<* starting                                                                                     :3_2:GoDeeper:
*********** / $*|                                                                                              :3_2:GoDeeper:
************ / pre part                                                                                       :3_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :3_2:Other "is":
************** / expectUnDeepers                                                                             :3_2:Other "is":
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is","GD","not","GD","a Public Agency"]                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                              :3_2:Other "is":
************** > aNLK: determined undp_count = 3                                                             :3_2:Other "is":
************** > ->| trying to consume 1 GoDeepers                                                           :3_2:Other "is":
************** / $*|                                                                                         :3_2:Other "is":
$*|> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :3_2:Other "is":
aboveNextLineKeyword> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=20:
aboveNextLineKeyword> unexpected Other "is"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :3_2:Other "is":
************* / aboveNextLineKeyword                                                                           :3_3:GoDeeper:
************** / expectUnDeepers                                                                              :3_3:GoDeeper:
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","not","GD","a Public Agency"]                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :3_3:GoDeeper:
************** > aNLK: determined undp_count = 3                                                              :3_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_3:GoDeeper:
************** / $*|                                                                                          :3_3:GoDeeper:
$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_3:GoDeeper:
************** > ->| success                                                                                   :3_3:Other "not":
************** / |>>/recurse                                                                                   :3_3:Other "not":
|>>/recurse> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected Other "not"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :3_3:Other "not":
*************** / slMultiTerm                                                                                 :3_3:Other "not":
**************** / someSL                                                                                    :3_3:Other "not":
someSL> IN: Other "not" GoDeeper Other "a Public Age <…>
someSL> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
someSL> VALUE: ((["not","a Public Agency"],1),[])

**************** \ someSL has returned (["not","a Public Agency"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> VALUE: ((["not","a Public Agency"],1),[])

*************** \ slMultiTerm has returned (["not","a Public Agency"],1)                                     :4_2:UnDeeper:
*************** > |>>/base got ["not","a Public Agency"]                                                     :4_2:UnDeeper:
|>>/base> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/base> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
|>>/base> VALUE: ((["not","a Public Agency"],1),[])

************** \ |>>/base has returned (["not","a Public Agency"],1)                                          :4_2:UnDeeper:
************** > aNLK: current depth is 2                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :3_3:Other "not":
************** / expectUnDeepers                                                                               :3_3:Other "not":
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["not","GD","a Public Agency"]                                                    :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "not" GoDeeper Other "a Public Age <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                :3_3:Other "not":
************** > aNLK: determined undp_count = 3                                                               :3_3:Other "not":
************** > ->| trying to consume 1 GoDeepers                                                             :3_3:Other "not":
************** / $*|                                                                                           :3_3:Other "not":
$*|> IN: Other "not" GoDeeper Other "a Public Age <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :3_3:Other "not":
aboveNextLineKeyword> IN: Other "not" GoDeeper Other "a Public Age <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=22:
aboveNextLineKeyword> unexpected Other "not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :3_3:Other "not":
************* / aboveNextLineKeyword                                                                             :3_4:GoDeeper:
************** / expectUnDeepers                                                                                :3_4:GoDeeper:
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","a Public Agency"]                                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                 :3_4:GoDeeper:
************** > aNLK: determined undp_count = 3                                                                :3_4:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                              :3_4:GoDeeper:
************** / $*|                                                                                            :3_4:GoDeeper:
$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                        :3_4:GoDeeper:
************** > ->| success                                                                                     :3_4:Other "a Pu:
************** / |>>/recurse                                                                                     :3_4:Other "a Pu:
|>>/recurse> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected Other "a Public Agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :3_4:Other "a Pu:
*************** / slMultiTerm                                                                                   :3_4:Other "a Pu:
**************** / someSL                                                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

**************** \ someSL has returned (["a Public Agency"],0)                                              :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

*************** \ slMultiTerm has returned (["a Public Agency"],0)                                           :4_2:UnDeeper:
*************** > |>>/base got ["a Public Agency"]                                                           :4_2:UnDeeper:
|>>/base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "a Public Agency"
|>>/base> VALUE: ((["a Public Agency"],0),[])

************** \ |>>/base has returned (["a Public Agency"],0)                                                :4_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "a Public Agency"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                    :3_4:GoDeeper:
************* / aboveNextLineKeyword                                                                              :3_4:Other "a Pu:
************** / expectUnDeepers                                                                                 :3_4:Other "a Pu:
*************** > ignoring ["a Public Agency"]                                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                  :3_4:Other "a Pu:
************** > aNLK: determined undp_count = 3                                                                 :3_4:Other "a Pu:
************** > ->| trying to consume 1 GoDeepers                                                               :3_4:Other "a Pu:
************** / $*|                                                                                             :3_4:Other "a Pu:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                         :3_4:Other "a Pu:
aboveNextLineKeyword> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=24:
aboveNextLineKeyword> unexpected Other "a Public Agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                     :3_4:Other "a Pu:
************* / aboveNextLineKeyword                                                                           :4_2:UnDeeper:
************** / expectUnDeepers                                                                              :4_2:UnDeeper:
*************** > ignoring []                                                                                :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :4_2:UnDeeper:
************** > aNLK: determined undp_count = 3                                                              :4_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :4_2:UnDeeper:
************** / $*|                                                                                          :4_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :4_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=25:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :4_2:UnDeeper:
pre part> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=28:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=28:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPrePost> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=28:
withPrePost> unexpected Must
withPrePost> expecting And, GoDeeper, Or, UnDeeper, or Unless

********** / withPreOnly                                                                                        :3_2:GoDeeper:
*********** / $*|                                                                                              :3_2:GoDeeper:
************ / pre part                                                                                       :3_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :3_2:Other "is":
************** / expectUnDeepers                                                                             :3_2:Other "is":
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is","GD","not","GD","a Public Agency"]                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                              :3_2:Other "is":
************** > aNLK: determined undp_count = 3                                                             :3_2:Other "is":
************** > ->| trying to consume 1 GoDeepers                                                           :3_2:Other "is":
************** / $*|                                                                                         :3_2:Other "is":
$*|> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :3_2:Other "is":
aboveNextLineKeyword> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=20:
aboveNextLineKeyword> unexpected Other "is"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :3_2:Other "is":
************* / aboveNextLineKeyword                                                                           :3_3:GoDeeper:
************** / expectUnDeepers                                                                              :3_3:GoDeeper:
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","not","GD","a Public Agency"]                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :3_3:GoDeeper:
************** > aNLK: determined undp_count = 3                                                              :3_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_3:GoDeeper:
************** / $*|                                                                                          :3_3:GoDeeper:
$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_3:GoDeeper:
************** > ->| success                                                                                   :3_3:Other "not":
************** / |>>/recurse                                                                                   :3_3:Other "not":
|>>/recurse> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected Other "not"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :3_3:Other "not":
*************** / slMultiTerm                                                                                 :3_3:Other "not":
**************** / someSL                                                                                    :3_3:Other "not":
someSL> IN: Other "not" GoDeeper Other "a Public Age <…>
someSL> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
someSL> VALUE: ((["not","a Public Agency"],1),[])

**************** \ someSL has returned (["not","a Public Agency"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> VALUE: ((["not","a Public Agency"],1),[])

*************** \ slMultiTerm has returned (["not","a Public Agency"],1)                                     :4_2:UnDeeper:
*************** > |>>/base got ["not","a Public Agency"]                                                     :4_2:UnDeeper:
|>>/base> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/base> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
|>>/base> VALUE: ((["not","a Public Agency"],1),[])

************** \ |>>/base has returned (["not","a Public Agency"],1)                                          :4_2:UnDeeper:
************** > aNLK: current depth is 2                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :3_3:Other "not":
************** / expectUnDeepers                                                                               :3_3:Other "not":
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["not","GD","a Public Agency"]                                                    :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "not" GoDeeper Other "a Public Age <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                :3_3:Other "not":
************** > aNLK: determined undp_count = 3                                                               :3_3:Other "not":
************** > ->| trying to consume 1 GoDeepers                                                             :3_3:Other "not":
************** / $*|                                                                                           :3_3:Other "not":
$*|> IN: Other "not" GoDeeper Other "a Public Age <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :3_3:Other "not":
aboveNextLineKeyword> IN: Other "not" GoDeeper Other "a Public Age <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=22:
aboveNextLineKeyword> unexpected Other "not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :3_3:Other "not":
************* / aboveNextLineKeyword                                                                             :3_4:GoDeeper:
************** / expectUnDeepers                                                                                :3_4:GoDeeper:
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","a Public Agency"]                                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                 :3_4:GoDeeper:
************** > aNLK: determined undp_count = 3                                                                :3_4:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                              :3_4:GoDeeper:
************** / $*|                                                                                            :3_4:GoDeeper:
$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                        :3_4:GoDeeper:
************** > ->| success                                                                                     :3_4:Other "a Pu:
************** / |>>/recurse                                                                                     :3_4:Other "a Pu:
|>>/recurse> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected Other "a Public Agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :3_4:Other "a Pu:
*************** / slMultiTerm                                                                                   :3_4:Other "a Pu:
**************** / someSL                                                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

**************** \ someSL has returned (["a Public Agency"],0)                                              :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

*************** \ slMultiTerm has returned (["a Public Agency"],0)                                           :4_2:UnDeeper:
*************** > |>>/base got ["a Public Agency"]                                                           :4_2:UnDeeper:
|>>/base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "a Public Agency"
|>>/base> VALUE: ((["a Public Agency"],0),[])

************** \ |>>/base has returned (["a Public Agency"],0)                                                :4_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "a Public Agency"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                    :3_4:GoDeeper:
************* / aboveNextLineKeyword                                                                              :3_4:Other "a Pu:
************** / expectUnDeepers                                                                                 :3_4:Other "a Pu:
*************** > ignoring ["a Public Agency"]                                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                  :3_4:Other "a Pu:
************** > aNLK: determined undp_count = 3                                                                 :3_4:Other "a Pu:
************** > ->| trying to consume 1 GoDeepers                                                               :3_4:Other "a Pu:
************** / $*|                                                                                             :3_4:Other "a Pu:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                         :3_4:Other "a Pu:
aboveNextLineKeyword> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=24:
aboveNextLineKeyword> unexpected Other "a Public Agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                     :3_4:Other "a Pu:
************* / aboveNextLineKeyword                                                                           :4_2:UnDeeper:
************** / expectUnDeepers                                                                              :4_2:UnDeeper:
*************** > ignoring []                                                                                :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :4_2:UnDeeper:
************** > aNLK: determined undp_count = 3                                                              :4_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :4_2:UnDeeper:
************** / $*|                                                                                          :4_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :4_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=25:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :4_2:UnDeeper:
pre part> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=28:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=28:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPreOnly> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=28:
withPreOnly> unexpected Must
withPreOnly> expecting And, GoDeeper, Or, UnDeeper, or Unless

pBSR> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=28:
pBSR> Label (["is"]) followed by label (["not"]) is not allowed

preambleBoolStructR [Who,Which,Whose]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (CERR): Who GoDeeper
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=28:
preambleBoolStructR [Who,Which,Whose]> Label (["is"]) followed by label (["not"]) is not allowed

manyIndentation/leaf?> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=28:
manyIndentation/leaf?> Label (["is"]) followed by label (["not"]) is not allowed

******* / manyIndentation/deeper; calling someIndentation                                                         :3_1:Who:
******** / someIndentation                                                                                       :3_1:Who:
********* / myindented: consuming GoDeeper                                                                      :3_1:Who:
myindented: consuming GoDeeper> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=18:
myindented: consuming GoDeeper> unexpected Who
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=18:
someIndentation> unexpected Who
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=18:
manyIndentation/deeper; calling someIndentation> unexpected Who
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :3_1:Who:
WHERE> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected Who
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Having

preambleParamText:[Having]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected Who
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Given

preambleParamText:[Given]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected Who
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Upon

preambleParamText:[Upon]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=18:
preambleParamText:[Upon]> unexpected Who
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Who:
preambleBoolStructR [Unless]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=18:
preambleBoolStructR [Unless]> unexpected Who
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :3_1:Who:
preambleBoolStructR [When,If]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=18:
preambleBoolStructR [When,If]> unexpected Who
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting May, Must, or Shant

pDT> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=18:
pDT> unexpected Who
pDT> expecting May, Must, or Shant

******* / pDoAction/Do                                                                                            :3_1:Who:
pDoAction/Do> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=18:
pDoAction/Do> unexpected Who
pDoAction/Do> expecting Do

regulative permutation with deontic-temporal> IN: Every GoDeeper Other "Organisation" GoDe <…>
regulative permutation with deontic-temporal> MATCH (CERR): Every GoDeeper Other "Organisation" GoDe <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=18:
regulative permutation with deontic-temporal> unexpected Who
regulative permutation with deontic-temporal> expecting Do, Given, Having, If, May, Must, Shant, Unless, Upon, When, or Where

****** / regulative permutation with deontic-action                                                                :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: Every GoDeeper Other "Organisation" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Every
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Having

preambleParamText:[Having]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Every
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected Every
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected Every
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :2_1:Every:
pTemporal/eventually> IN: Every GoDeeper Other "Organisation" GoDe <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=4:
pTemporal/eventually> unexpected Every
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Every GoDeeper Other "Organisation" GoDe <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=4:
pTemporal/specifically> unexpected Every
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :2_1:Every:
pTemporal/vaguely> IN: Every GoDeeper Other "Organisation" GoDe <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=4:
pTemporal/vaguely> unexpected Every
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Organisation" GoDeeper G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "Organisation" GoDeeper GoDeeper G <…>
someSL> MATCH (COK): Other "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slMultiTerm> MATCH (COK): Other "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slAKA base> MATCH (COK): Other "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: Other "Organisation" GoDeeper GoDeeper G <…>
$*|> MATCH (COK): Other "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
Aka Token> MATCH (COK): Aka
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
$>|> MATCH (COK): Aka
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected Other "You"
|>>/recurse> expecting GoDeeper

********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/base> MATCH (COK): Other "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "You" UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (COK): GoDeeper Other "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
PAKA/akapart> MATCH (COK): Aka GoDeeper Other "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|?| optional something> MATCH (COK): Aka GoDeeper Other "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
slAKA optional akapart> MATCH (COK): Aka GoDeeper Other "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper Aka GoDeeper Other "You" UnDeep <…>
|>>/recurse> MATCH (COK): GoDeeper Aka GoDeeper Other "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper GoDeeper Aka GoDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper GoDeeper Aka GoDeeper  <…>
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: Other "Organisation" GoDeeper GoDeeper G <…>
slAKA> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper UnDe <…>
undeepers> MATCH (COK): UnDeeper UnDeeper UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: Other "Organisation" GoDeeper GoDeeper G <…>
pAKA> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: Other "Organisation" GoDeeper GoDeeper G <…>
pMultiTermAka> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: Other "Organisation" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> MATCH (COK): Other "Organisation" GoDeeper GoDeeper G <…>
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented: consuming UnDeeper                                                                                 :3_6:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Who GoDeeper Other "is" GoDeepe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :3_1:Who:
someIndentation> IN: GoDeeper Other "Organisation" GoDeeper G <…>
someIndentation> MATCH (COK): GoDeeper Other "Organisation" GoDeeper G <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [Every,Party,TokAll]> IN: Every GoDeeper Other "Organisation" GoDe <…>
pActor [Every,Party,TokAll]> MATCH (COK): Every GoDeeper Other "Organisation" GoDe <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Organisation" :| [],Nothing) :| []))            :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/1a:label directly above                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=19:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************* / term p/b:label to the left of line below, with EOL                                           :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=19:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / expression                                                                            :3_2:Other "is":
****************** / labelPrefix                                                                         :3_2:Other "is":
labelPrefix> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
labelPrefix> MATCH (COK): Other "is"
labelPrefix> VALUE: ("is",[])

****************** \ labelPrefix has returned "is"                                                        :3_3:GoDeeper:
****************** / term p                                                                               :3_3:GoDeeper:
******************* / term p/1a:label directly above                                                     :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=21:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************* / term p/b:label to the left of line below, with EOL                                 :3_3:GoDeeper:
******************** / someSL                                                                           :3_3:GoDeeper:
********************* / pNumAsText                                                                     :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=21:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_3:Other "not":
********************** / manyIndentation/leaf?                                                         :3_3:Other "not":
*********************** / expression                                                                  :3_3:Other "not":
************************ / labelPrefix                                                               :3_3:Other "not":
labelPrefix> IN: Other "not" GoDeeper Other "a Public Age <…>
labelPrefix> MATCH (COK): Other "not"
labelPrefix> VALUE: ("not",[])

************************ \ labelPrefix has returned "not"                                             :3_4:GoDeeper:
************************ / term p                                                                     :3_4:GoDeeper:
************************* / term p/1a:label directly above                                           :3_4:GoDeeper:
************************** / $*|                                                                    :3_4:GoDeeper:
*************************** / someSL                                                               :3_4:GoDeeper:
**************************** / pNumAsText                                                         :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=23:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************************* / term p/b:label to the left of line below, with EOL                       :3_4:GoDeeper:
************************** / someSL                                                                 :3_4:GoDeeper:
*************************** / pNumAsText                                                           :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=23:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************************* / term p/notLabelTerm                                                      :3_4:GoDeeper:
************************** / term p/2:someIndentation expr p                                        :3_4:GoDeeper:
*************************** / someIndentation                                                      :3_4:GoDeeper:
**************************** / myindented: consuming GoDeeper                                     :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_4:Other "a Pu:
**************************** / manyIndentation/leaf?                                               :3_4:Other "a Pu:
***************************** / expression                                                        :3_4:Other "a Pu:
****************************** / labelPrefix                                                     :3_4:Other "a Pu:
labelPrefix> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=25:
labelPrefix> unexpected UnDeeper

****************************** / term p                                                          :3_4:Other "a Pu:
******************************* / term p/1a:label directly above                                :3_4:Other "a Pu:
******************************** / $*|                                                         :3_4:Other "a Pu:
********************************* / someSL                                                    :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

********************************* \ someSL has returned (["a Public Agency"],0)            :4_2:UnDeeper:
********************************* / pNumAsText                                             :4_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (CERR): Other "a Public Agency"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/1a:label directly above> MATCH (CERR): Other "a Public Agency"
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=25:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

******************************* / term p/b:label to the left of line below, with EOL            :3_4:Other "a Pu:
******************************** / someSL                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

******************************** \ someSL has returned (["a Public Agency"],0)              :4_2:UnDeeper:
******************************** / undeepers                                                :4_2:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
********************************* > sameLine: success!                                     :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                :4_2:UnDeeper:
******************************** / matching EOL                                             :4_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "a Public Agency"
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=25:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

******************************* / term p/notLabelTerm                                           :3_4:Other "a Pu:
******************************** / term p/2:someIndentation expr p                             :3_4:Other "a Pu:
********************************* / someIndentation                                           :3_4:Other "a Pu:
********************************** / myindented: consuming GoDeeper                          :3_4:Other "a Pu:
myindented: consuming GoDeeper> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=24:
myindented: consuming GoDeeper> unexpected Other "a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected Other "a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected Other "a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

******************************** / term p/3:plain p                                            :3_4:Other "a Pu:
********************************* / pRelPred                                                  :3_4:Other "a Pu:
********************************** / slRelPred                                               :3_4:Other "a Pu:
*********************************** / nested simpleHorn                                     :3_4:Other "a Pu:
************************************ > |^|                                                 :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |^| deeps                                        :4_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************ \ |^| deeps has returned ([(),(),()],-3)        :4_1:Must:
nested simpleHorn> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "a Public Agency" UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting Means or UnDeeper

*********************************** / RPConstraint                                          :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPBoolStructR                                         :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slMultiTerm                                       :3_4:Other "a Pu:
************************************** / someSL                                          :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

************************************** \ someSL has returned (["a Public Agency"],0)  :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
************************************ / |>| calling $>>                                  :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************* / |>>/base                                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*********************************** / RPMT                                                  :3_4:Other "a Pu:
************************************ / $*|                                                 :3_4:Other "a Pu:
************************************* / slAKA                                             :3_4:Other "a Pu:
************************************** / $*|                                             :3_4:Other "a Pu:
*************************************** / slAKA base                                    :3_4:Other "a Pu:
**************************************** / slMultiTerm                                 :3_4:Other "a Pu:
***************************************** / someSL                                    :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

***************************************** \ someSL has returned (["a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

**************************************** \ slMultiTerm has returned (["a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "a Public Agency"
slAKA base> VALUE: ((["a Public Agency"],0),[])

*************************************** \ slAKA base has returned (["a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************** \ $*| has returned (["a Public Agency"],0)     :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional akapart                     :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / PAKA/akapart                         :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
******************************************** / Aka Token                        :4_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional akapart has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** / |>>/recurse                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                     :4_2:UnDeeper:
*************************************** / slAKA optional typically                   :4_2:UnDeeper:
**************************************** / |?| optional something                   :4_2:UnDeeper:
***************************************** / |>>/recurse                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***************************************** / |>>/base                               :4_2:UnDeeper:
****************************************** / typically                            :4_2:UnDeeper:
******************************************* / $>|                                :4_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************************** \ |?| optional something has returned (Nothing,0) :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************************** \ slAKA optional typically has returned (Nothing,0) :4_2:UnDeeper:
*************************************** > |>>/base got Nothing                       :4_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)            :4_2:UnDeeper:
************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
************************************** > pAKA: entityalias = Nothing                  :4_2:UnDeeper:
slAKA> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "a Public Agency"
slAKA> VALUE: ((["a Public Agency"],0),[])

************************************* \ slAKA has returned (["a Public Agency"],0)     :4_2:UnDeeper:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "a Public Agency"
$*|> VALUE: ((["a Public Agency"],0),[])

************************************ \ $*| has returned (["a Public Agency"],0)         :4_2:UnDeeper:
RPMT> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "a Public Agency"
RPMT> VALUE: ((RPMT ["a Public Agency"],0),[])

*********************************** \ RPMT has returned (RPMT ["a Public Agency"],0)     :4_2:UnDeeper:
slRelPred> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "a Public Agency"
slRelPred> VALUE: ((RPMT ["a Public Agency"],0),[])

********************************** \ slRelPred has returned (RPMT ["a Public Agency"],0)  :4_2:UnDeeper:
********************************** / undeepers                                            :4_2:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
*********************************** > sameLine: success!                                 :4_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                            :4_2:UnDeeper:
pRelPred> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "a Public Agency"
pRelPred> VALUE: (RPMT ["a Public Agency"],[])

********************************* \ pRelPred has returned RPMT ["a Public Agency"]         :4_2:UnDeeper:
term p/3:plain p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************** \ term p/3:plain p has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

******************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
term p> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

****************************** \ term p has returned MyLeaf (RPMT ["a Public Agency"])        :4_2:UnDeeper:
****************************** / binary(Or)                                                   :4_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************************** / binary(And)                                                  :4_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************************** / binary(SetLess)                                              :4_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************************** / binary(SetPlus)                                              :4_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

***************************** \ expression has returned MyLeaf (RPMT ["a Public Agency"])      :4_2:UnDeeper:
manyIndentation/leaf?> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

**************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["a Public Agency"]) :4_2:UnDeeper:
**************************** / myindented: consuming UnDeeper                                   :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_3:UnDeeper:
someIndentation> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
someIndentation> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

*************************** \ someIndentation has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["a Public Agency"])       :4_3:UnDeeper:
term p> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "a Public Agency" UnDeepe <…>
term p> VALUE: (MyLeaf (RPMT ["a Public Agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["a Public Agency"])                      :4_3:UnDeeper:
************************ / binary(Or)                                                                 :4_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                                :4_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                            :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                            :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "not" GoDeeper Other "a Public Age <…>
expression> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
expression> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

*********************** \ expression has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))  :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "not" GoDeeper Other "a Public Age <…>
manyIndentation/leaf?> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
manyIndentation/leaf?> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************** \ manyIndentation/leaf? has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Must GoDeeper Before G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_4:UnDeeper:
someIndentation> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
someIndentation> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
someIndentation> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

********************* \ someIndentation has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************** \ term p/2:someIndentation expr p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])) :4_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p/notLabelTerm> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

******************* \ term p/notLabelTerm has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))   :4_4:UnDeeper:
term p> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
term p> MATCH (COK): GoDeeper Other "not" GoDeeper Other "a P <…>
term p> VALUE: (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])),[])

****************** \ term p has returned MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))                  :4_4:UnDeeper:
****************** / binary(Or)                                                                               :4_4:UnDeeper:
binary(Or)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                              :4_4:UnDeeper:
binary(And)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                          :4_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                          :4_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expression> MATCH (COK): Other "is" GoDeeper Other "not" GoDeeper <…>
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

***************** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
manyIndentation/leaf?> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "is" GoDeeper Other "not" GoDeeper <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_4:UnDeeper:
**************** / myindented: consuming UnDeeper                                                               :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper Before GoDeeper T <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Must:
someIndentation> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
someIndentation> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
someIndentation> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*************** \ someIndentation has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/2:someIndentation expr p> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p/notLabelTerm> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p/notLabelTerm> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************* \ term p/notLabelTerm has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))) :4_1:Must:
term p> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
term p> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
term p> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

************ \ term p has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))      :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected Must
binary(Or)> expecting Or

************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected Must
binary(And)> expecting And

************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected Must
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: Must GoDeeper Before GoDeeper TNumber 30 <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected Must
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
expression> MATCH (COK): GoDeeper Other "is" GoDeeper Other "not" <…>
expression> VALUE: (MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"]))),[])

*********** \ expression has returned MyLabel ["is"] (MyLabel ["not"] (MyLeaf (RPMT ["a Public Agency"])))    :4_1:Must:
ppp inner> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
ppp inner> MATCH (CERR): GoDeeper Other "is" GoDeeper Other "not" <…>
ppp inner> ERROR:
ppp inner> offset=28:
ppp inner> Label (["is"]) followed by label (["not"]) is not allowed

********** / withPrePost                                                                                        :3_2:GoDeeper:
*********** > |<* starting                                                                                     :3_2:GoDeeper:
*********** / $*|                                                                                              :3_2:GoDeeper:
************ / pre part                                                                                       :3_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :3_2:Other "is":
************** / expectUnDeepers                                                                             :3_2:Other "is":
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is","GD","not","GD","a Public Agency"]                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                              :3_2:Other "is":
************** > aNLK: determined undp_count = 3                                                             :3_2:Other "is":
************** > ->| trying to consume 1 GoDeepers                                                           :3_2:Other "is":
************** / $*|                                                                                         :3_2:Other "is":
$*|> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :3_2:Other "is":
aboveNextLineKeyword> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=20:
aboveNextLineKeyword> unexpected Other "is"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :3_2:Other "is":
************* / aboveNextLineKeyword                                                                           :3_3:GoDeeper:
************** / expectUnDeepers                                                                              :3_3:GoDeeper:
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","not","GD","a Public Agency"]                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :3_3:GoDeeper:
************** > aNLK: determined undp_count = 3                                                              :3_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_3:GoDeeper:
************** / $*|                                                                                          :3_3:GoDeeper:
$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_3:GoDeeper:
************** > ->| success                                                                                   :3_3:Other "not":
************** / |>>/recurse                                                                                   :3_3:Other "not":
|>>/recurse> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected Other "not"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :3_3:Other "not":
*************** / slMultiTerm                                                                                 :3_3:Other "not":
**************** / someSL                                                                                    :3_3:Other "not":
someSL> IN: Other "not" GoDeeper Other "a Public Age <…>
someSL> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
someSL> VALUE: ((["not","a Public Agency"],1),[])

**************** \ someSL has returned (["not","a Public Agency"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> VALUE: ((["not","a Public Agency"],1),[])

*************** \ slMultiTerm has returned (["not","a Public Agency"],1)                                     :4_2:UnDeeper:
*************** > |>>/base got ["not","a Public Agency"]                                                     :4_2:UnDeeper:
|>>/base> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/base> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
|>>/base> VALUE: ((["not","a Public Agency"],1),[])

************** \ |>>/base has returned (["not","a Public Agency"],1)                                          :4_2:UnDeeper:
************** > aNLK: current depth is 2                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :3_3:Other "not":
************** / expectUnDeepers                                                                               :3_3:Other "not":
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["not","GD","a Public Agency"]                                                    :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "not" GoDeeper Other "a Public Age <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                :3_3:Other "not":
************** > aNLK: determined undp_count = 3                                                               :3_3:Other "not":
************** > ->| trying to consume 1 GoDeepers                                                             :3_3:Other "not":
************** / $*|                                                                                           :3_3:Other "not":
$*|> IN: Other "not" GoDeeper Other "a Public Age <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :3_3:Other "not":
aboveNextLineKeyword> IN: Other "not" GoDeeper Other "a Public Age <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=22:
aboveNextLineKeyword> unexpected Other "not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :3_3:Other "not":
************* / aboveNextLineKeyword                                                                             :3_4:GoDeeper:
************** / expectUnDeepers                                                                                :3_4:GoDeeper:
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","a Public Agency"]                                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                 :3_4:GoDeeper:
************** > aNLK: determined undp_count = 3                                                                :3_4:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                              :3_4:GoDeeper:
************** / $*|                                                                                            :3_4:GoDeeper:
$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                        :3_4:GoDeeper:
************** > ->| success                                                                                     :3_4:Other "a Pu:
************** / |>>/recurse                                                                                     :3_4:Other "a Pu:
|>>/recurse> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected Other "a Public Agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :3_4:Other "a Pu:
*************** / slMultiTerm                                                                                   :3_4:Other "a Pu:
**************** / someSL                                                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

**************** \ someSL has returned (["a Public Agency"],0)                                              :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

*************** \ slMultiTerm has returned (["a Public Agency"],0)                                           :4_2:UnDeeper:
*************** > |>>/base got ["a Public Agency"]                                                           :4_2:UnDeeper:
|>>/base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "a Public Agency"
|>>/base> VALUE: ((["a Public Agency"],0),[])

************** \ |>>/base has returned (["a Public Agency"],0)                                                :4_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "a Public Agency"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                    :3_4:GoDeeper:
************* / aboveNextLineKeyword                                                                              :3_4:Other "a Pu:
************** / expectUnDeepers                                                                                 :3_4:Other "a Pu:
*************** > ignoring ["a Public Agency"]                                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                  :3_4:Other "a Pu:
************** > aNLK: determined undp_count = 3                                                                 :3_4:Other "a Pu:
************** > ->| trying to consume 1 GoDeepers                                                               :3_4:Other "a Pu:
************** / $*|                                                                                             :3_4:Other "a Pu:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                         :3_4:Other "a Pu:
aboveNextLineKeyword> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=24:
aboveNextLineKeyword> unexpected Other "a Public Agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                     :3_4:Other "a Pu:
************* / aboveNextLineKeyword                                                                           :4_2:UnDeeper:
************** / expectUnDeepers                                                                              :4_2:UnDeeper:
*************** > ignoring []                                                                                :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :4_2:UnDeeper:
************** > aNLK: determined undp_count = 3                                                              :4_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :4_2:UnDeeper:
************** / $*|                                                                                          :4_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :4_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=25:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :4_2:UnDeeper:
pre part> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=28:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=28:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPrePost> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=28:
withPrePost> unexpected Must
withPrePost> expecting And, GoDeeper, Or, UnDeeper, or Unless

********** / withPreOnly                                                                                        :3_2:GoDeeper:
*********** / $*|                                                                                              :3_2:GoDeeper:
************ / pre part                                                                                       :3_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :3_2:Other "is":
************** / expectUnDeepers                                                                             :3_2:Other "is":
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is","GD","not","GD","a Public Agency"]                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                              :3_2:Other "is":
************** > aNLK: determined undp_count = 3                                                             :3_2:Other "is":
************** > ->| trying to consume 1 GoDeepers                                                           :3_2:Other "is":
************** / $*|                                                                                         :3_2:Other "is":
$*|> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :3_2:Other "is":
aboveNextLineKeyword> IN: Other "is" GoDeeper Other "not" GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=20:
aboveNextLineKeyword> unexpected Other "is"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :3_2:Other "is":
************* / aboveNextLineKeyword                                                                           :3_3:GoDeeper:
************** / expectUnDeepers                                                                              :3_3:GoDeeper:
*************** / pNumAsText                                                                                 :3_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","not","GD","a Public Agency"]                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :3_3:GoDeeper:
************** > aNLK: determined undp_count = 3                                                              :3_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_3:GoDeeper:
************** / $*|                                                                                          :3_3:GoDeeper:
$*|> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_3:GoDeeper:
************** > ->| success                                                                                   :3_3:Other "not":
************** / |>>/recurse                                                                                   :3_3:Other "not":
|>>/recurse> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected Other "not"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :3_3:Other "not":
*************** / slMultiTerm                                                                                 :3_3:Other "not":
**************** / someSL                                                                                    :3_3:Other "not":
someSL> IN: Other "not" GoDeeper Other "a Public Age <…>
someSL> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
someSL> VALUE: ((["not","a Public Agency"],1),[])

**************** \ someSL has returned (["not","a Public Agency"],1)                                        :4_2:UnDeeper:
slMultiTerm> IN: Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
slMultiTerm> VALUE: ((["not","a Public Agency"],1),[])

*************** \ slMultiTerm has returned (["not","a Public Agency"],1)                                     :4_2:UnDeeper:
*************** > |>>/base got ["not","a Public Agency"]                                                     :4_2:UnDeeper:
|>>/base> IN: Other "not" GoDeeper Other "a Public Age <…>
|>>/base> MATCH (COK): Other "not" GoDeeper Other "a Public Age <…>
|>>/base> VALUE: ((["not","a Public Agency"],1),[])

************** \ |>>/base has returned (["not","a Public Agency"],1)                                          :4_2:UnDeeper:
************** > aNLK: current depth is 2                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "not" GoDeeper Other "a P <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :3_3:Other "not":
************** / expectUnDeepers                                                                               :3_3:Other "not":
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["not","GD","a Public Agency"]                                                    :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "not" GoDeeper Other "a Public Age <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                :3_3:Other "not":
************** > aNLK: determined undp_count = 3                                                               :3_3:Other "not":
************** > ->| trying to consume 1 GoDeepers                                                             :3_3:Other "not":
************** / $*|                                                                                           :3_3:Other "not":
$*|> IN: Other "not" GoDeeper Other "a Public Age <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :3_3:Other "not":
aboveNextLineKeyword> IN: Other "not" GoDeeper Other "a Public Age <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=22:
aboveNextLineKeyword> unexpected Other "not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :3_3:Other "not":
************* / aboveNextLineKeyword                                                                             :3_4:GoDeeper:
************** / expectUnDeepers                                                                                :3_4:GoDeeper:
*************** / pNumAsText                                                                                   :3_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","a Public Agency"]                                                          :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                 :3_4:GoDeeper:
************** > aNLK: determined undp_count = 3                                                                :3_4:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                              :3_4:GoDeeper:
************** / $*|                                                                                            :3_4:GoDeeper:
$*|> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                        :3_4:GoDeeper:
************** > ->| success                                                                                     :3_4:Other "a Pu:
************** / |>>/recurse                                                                                     :3_4:Other "a Pu:
|>>/recurse> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected Other "a Public Agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                        :3_4:Other "a Pu:
*************** / slMultiTerm                                                                                   :3_4:Other "a Pu:
**************** / someSL                                                                                      :3_4:Other "a Pu:
someSL> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "a Public Agency"
someSL> VALUE: ((["a Public Agency"],0),[])

**************** \ someSL has returned (["a Public Agency"],0)                                              :4_2:UnDeeper:
slMultiTerm> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "a Public Agency"
slMultiTerm> VALUE: ((["a Public Agency"],0),[])

*************** \ slMultiTerm has returned (["a Public Agency"],0)                                           :4_2:UnDeeper:
*************** > |>>/base got ["a Public Agency"]                                                           :4_2:UnDeeper:
|>>/base> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
|>>/base> MATCH (COK): Other "a Public Agency"
|>>/base> VALUE: ((["a Public Agency"],0),[])

************** \ |>>/base has returned (["a Public Agency"],0)                                                :4_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :4_2:UnDeeper:
************** > |<|                                                                                          :4_2:UnDeeper:
************** > |<* starting                                                                                 :4_2:UnDeeper:
************** / |<*/parent                                                                                   :4_2:UnDeeper:
*************** > |<*/recurse                                                                                :4_2:UnDeeper:
*************** / |<*/base                                                                                   :4_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "a Public Agency" UnDeepe <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "a Public Agency"
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=28:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                    :3_4:GoDeeper:
************* / aboveNextLineKeyword                                                                              :3_4:Other "a Pu:
************** / expectUnDeepers                                                                                 :3_4:Other "a Pu:
*************** > ignoring ["a Public Agency"]                                                               :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                                  :3_4:Other "a Pu:
************** > aNLK: determined undp_count = 3                                                                 :3_4:Other "a Pu:
************** > ->| trying to consume 1 GoDeepers                                                               :3_4:Other "a Pu:
************** / $*|                                                                                             :3_4:Other "a Pu:
$*|> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                         :3_4:Other "a Pu:
aboveNextLineKeyword> IN: Other "a Public Agency" UnDeeper UnDeepe <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=24:
aboveNextLineKeyword> unexpected Other "a Public Agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                     :3_4:Other "a Pu:
************* / aboveNextLineKeyword                                                                           :4_2:UnDeeper:
************** / expectUnDeepers                                                                              :4_2:UnDeeper:
*************** > ignoring []                                                                                :4_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper,UnDeeper]                                          :4_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (3,[])

************** \ expectUnDeepers has returned 3                                                               :4_2:UnDeeper:
************** > aNLK: determined undp_count = 3                                                              :4_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :4_2:UnDeeper:
************** / $*|                                                                                          :4_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :4_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper UnDeeper Must GoDeeper <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=25:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :4_2:UnDeeper:
pre part> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=28:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=28:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPreOnly> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=28:
withPreOnly> unexpected Must
withPreOnly> expecting And, GoDeeper, Or, UnDeeper, or Unless

pBSR> IN: GoDeeper Other "is" GoDeeper Other "not" <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=28:
pBSR> Label (["is"]) followed by label (["not"]) is not allowed

preambleBoolStructR [Who,Which,Whose]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (CERR): Who GoDeeper
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=28:
preambleBoolStructR [Who,Which,Whose]> Label (["is"]) followed by label (["not"]) is not allowed

manyIndentation/leaf?> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=28:
manyIndentation/leaf?> Label (["is"]) followed by label (["not"]) is not allowed

******* / manyIndentation/deeper; calling someIndentation                                                         :3_1:Who:
******** / someIndentation                                                                                       :3_1:Who:
********* / myindented: consuming GoDeeper                                                                      :3_1:Who:
myindented: consuming GoDeeper> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=18:
myindented: consuming GoDeeper> unexpected Who
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=18:
someIndentation> unexpected Who
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=18:
manyIndentation/deeper; calling someIndentation> unexpected Who
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :3_1:Who:
WHERE> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected Who
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Having

preambleParamText:[Having]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected Who
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Given

preambleParamText:[Given]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected Who
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting Upon

preambleParamText:[Upon]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=18:
preambleParamText:[Upon]> unexpected Who
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Who:
preambleBoolStructR [Unless]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=18:
preambleBoolStructR [Unless]> unexpected Who
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :3_1:Who:
preambleBoolStructR [When,If]> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=18:
preambleBoolStructR [When,If]> unexpected Who
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :3_1:Who:
pTemporal/eventually> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=18:
pTemporal/eventually> unexpected Who
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :3_1:Who:
******** / $>|                                                                                                   :3_1:Who:
$>|> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected Who
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=18:
pTemporal/specifically> unexpected Who
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :3_1:Who:
pTemporal/vaguely> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=18:
pTemporal/vaguely> unexpected Who
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :3_1:Who:
pDA> IN: Who GoDeeper Other "is" GoDeeper Other " <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=18:
pDA> unexpected Who
pDA> expecting May, Must, or Shant

regulative permutation with deontic-action> IN: Every GoDeeper Other "Organisation" GoDe <…>
regulative permutation with deontic-action> MATCH (CERR): Every GoDeeper Other "Organisation" GoDe <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=18:
regulative permutation with deontic-action> unexpected Who
regulative permutation with deontic-action> expecting After, Before, By, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

permutationsReg> IN: Every GoDeeper Other "Organisation" GoDe <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=18:
permutationsReg> unexpected Who
permutationsReg> expecting After, Before, By, Do, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

pRegRuleNormal> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=18:
pRegRuleNormal> unexpected Who
pRegRuleNormal> expecting After, Before, By, Do, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

pRegRule> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=18:
pRegRule> unexpected Who
pRegRule> expecting After, Before, By, Do, Eventually, Given, Having, If, May, Must, On, Other text, RuleMarker 1 "\167", Shant, Unless, Upon, When, or Where

*** / pTypeDefinition                                                                                                 :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pHornlike/uponLimb                                                                                            :2_1:Every:
***** / preambleParamText:[Upon]                                                                                    :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Every
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:Every:
***** / preambleParamText:[Given]                                                                                   :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Every
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: Every GoDeeper Other "Organisation" GoDe <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected Every
pTypeDefinition> expecting Define, Given, RuleMarker 1 "\167", or Upon

*** / pConstitutiveRule                                                                                               :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

**** / calling myindented pNameParens                                                                                :2_1:Every:
***** / manyIndentation/leaf?                                                                                       :2_1:Every:
****** / pMultiTermAka                                                                                             :2_1:Every:
******* / pAKA                                                                                                    :2_1:Every:
******** / slAKA                                                                                                 :2_1:Every:
********* / $*|                                                                                                 :2_1:Every:
********** / slAKA base                                                                                        :2_1:Every:
*********** / slMultiTerm                                                                                     :2_1:Every:
************ / someSL                                                                                        :2_1:Every:
************* / pNumAsText                                                                                  :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

pAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected Every
pAKA> expecting Other text or TNumber 1234

pMultiTermAka> IN: Every GoDeeper Other "Organisation" GoDe <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected Every
pMultiTermAka> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Every:
****** / someIndentation                                                                                           :2_1:Every:
******* / myindented: consuming GoDeeper                                                                          :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: Every GoDeeper Other "Organisation" GoDe <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected Every
calling myindented pNameParens> expecting GoDeeper, Other text, or TNumber 1234

pConstitutiveRule> IN: Every GoDeeper Other "Organisation" GoDe <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected Every
pConstitutiveRule> expecting GoDeeper, Other text, RuleMarker 1 "\167", or TNumber 1234

*** / pScenarioRule                                                                                                   :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pExpect                                                                                                       :2_1:Every:
pExpect> IN: Every GoDeeper Other "Organisation" GoDe <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected Every
pExpect> expecting Expect

pScenarioRule> IN: Every GoDeeper Other "Organisation" GoDe <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected Every
pScenarioRule> expecting Expect, Given, or RuleMarker 1 "\167"

*** / pHornlike                                                                                                       :2_1:Every:
**** / pSrcRef                                                                                                       :2_1:Every:
***** / pRuleLabel                                                                                                  :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

pSrcRef> IN: Every GoDeeper Other "Organisation" GoDe <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Every:
**** / pHornlike / permute                                                                                           :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Every
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Every
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Every
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Organisation" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Every
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: Every GoDeeper Other "Organisation" GoDe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Organisation" GoDe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Organisation" GoDe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: Every GoDeeper Other "Organisation" GoDe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Organisation" GoDe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Organisation" GoDe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Organisation" GoDe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Organisation" GoDe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Organisation" GoDe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Organisation" GoDe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented: consuming GoDeeper                                                                        :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Organisation" GoDe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

pHornlike / permute> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=4:
pHornlike / permute> unexpected Every
pHornlike / permute> expecting Decide, Define, Given, GoDeeper, If, Means, Other text, Otherwise, TNumber 1234, Upon, or When

pHornlike> IN: Every GoDeeper Other "Organisation" GoDe <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=4:
pHornlike> unexpected Every
pHornlike> expecting Decide, Define, Given, GoDeeper, If, Means, Other text, Otherwise, RuleMarker 1 "\167", TNumber 1234, Upon, or When

*** / pRuleLabel                                                                                                      :2_1:Every:
**** / $>|                                                                                                           :2_1:Every:
$>|> IN: Every GoDeeper Other "Organisation" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

*** / pRule: unwrapping indentation and recursing                                                                     :2_1:Every:
**** / myindented: consuming GoDeeper                                                                                :2_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Organisation" GoDe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

pRule: unwrapping indentation and recursing> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=4:
pRule: unwrapping indentation and recursing> unexpected Every
pRule: unwrapping indentation and recursing> expecting GoDeeper

pRule> IN: Every GoDeeper Other "Organisation" GoDe <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=18:
pRule> unexpected Who
pRule> expecting EOL or regulative rule


PDPA
  pdpadbno-1 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-1
       expected: [[Regulative {subj = Leaf (("Organisation" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is","not","a Public Agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 30) "days"), hence = Just (RuleAlias ["Notification"]), lest = Just (Regulative {subj = Leaf (("the PDPC" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Nothing, deontic = DMay, action = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), temporal = Nothing, hence = Just (Regulative {subj = Leaf (("You" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Nothing, deontic = DMust, action = Leaf (("respond" :| [],Nothing) :| [("to" :| ["the PDPC"],Nothing),("about" :| ["your inaction"],Nothing)]), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []}), lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []}), rlabel = Just ("\167",2,"Assess"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}]]
       but parsing failed with error:
       2:1:
       unexpected Every
       expecting end of input
       §§                                                                              Assess                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
       ✳ EVERY                                                                         Organisation                                                                                                                                                                                                                                    AKA                                                                             You                                                                                                                                                                                                                                                                                                                            
       WHO                                                                             is                                                                              not                                                                             a Public Agency                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
       MUST                                                                            WITHIN                                                                          30                                                                              days                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
       UPON                                                                            becoming aware a data breach may have occurred
       WHEN                                                                            the data breach occurs on or after the date of commencement of PDP(A)A 2020 §
       ->                                                                              assess                                                                          if it is a Notifiable Data Breach
                                                                                       by                                                                              performing                                                                                                                                                      NDB Qualification                                                                                                                                                                                                                                                                                                                                                                                              
       HENCE                                                                           Notification                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
       LEST                                                                                                                                                            the
                                                                                                                                                                                                                                                       ->                                                                                                                                                              demand                                                                          an explanation for your inaction                                                                                                                                                                                                               
                                                                                                                                                                                                                                                       HENCE                                                                           You                                                                             MUST                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                                                                       ->                                                                              respond                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       to                                                                              the PDPC                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       about                                                                           your inaction                                                                                                                                                  
       

  To rerun use: --match "/PDPA/pdpadbno-1/"

Randomized with seed 1635065227

Finished in 0.0975 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

