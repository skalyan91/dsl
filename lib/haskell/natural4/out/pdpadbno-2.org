* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-2/)

* Tokens
[Every,GoDeeper,Other "Data Intermediary",GoDeeper,GoDeeper,Aka,GoDeeper,Other "You",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Which,GoDeeper,Other "is not",GoDeeper,Other "processing personal data on behalf of and for the purposes of a public agency",UnDeeper,UnDeeper,Must,GoDeeper,Other "without undue delay",UnDeeper,Upon,GoDeeper,Other "becoming aware a data breach involving a client Organisation may have occurred",UnDeeper,When,GoDeeper,Other "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13",UnDeeper,Do,GoDeeper,Other "NOTIFY",GoDeeper,Other "the Organisation",UnDeeper,Other "for which",GoDeeper,Other "you act as a Data Intermediary",UnDeeper,UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Data Intermediary" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: Every GoDeeper Other "Data Intermediary" <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected Every
someDeep first part calls base directly> expecting Other text

someDeep> IN: Every GoDeeper Other "Data Intermediary" <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected Every
someDeep> expecting Other text

pRegRuleSugary> IN: Every GoDeeper Other "Data Intermediary" <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected Every
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: Every GoDeeper Other "Data Intermediary" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected Every
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Having

preambleParamText:[Having]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected Every
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected Every
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected Every
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting May, Must, or Shant

pDT> IN: Every GoDeeper Other "Data Intermediary" <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected Every
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Data Intermediary" GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                                :1_4:Aka:
pNumAsText> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected Aka
pNumAsText> expecting number

someSL> IN: Other "Data Intermediary" GoDeeper GoDee <…>
someSL> MATCH (COK): Other "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: Other "Data Intermediary" GoDeeper GoDee <…>
$*|> MATCH (COK): Other "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                    :1_4:GoDeeper:
*************** / |>>/recurse                                                                                   :1_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                      :1_4:Aka:
**************** / slAKA optional akapart                                                                      :1_4:Aka:
***************** / |?| optional something                                                                    :1_4:Aka:
****************** / |>>/recurse                                                                             :1_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                                :1_4:Aka:
******************* / PAKA/akapart                                                                          :1_4:Aka:
******************** / $>|                                                                                 :1_4:Aka:
********************* / Aka Token                                                                         :1_4:Aka:
Aka Token> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
Aka Token> MATCH (COK): Aka
Aka Token> VALUE: (Aka,[])

********************* \ Aka Token has returned Aka                                                         :1_5:GoDeeper:
$>|> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
$>|> MATCH (COK): Aka
$>|> VALUE: (Aka,[])

******************** \ $>| has returned Aka                                                                 :1_5:GoDeeper:
******************** / |>>/recurse                                                                          :1_5:GoDeeper:
********************* / |>>/recurse                                                                         :1_5:Other "You":
|>>/recurse> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "You"
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                            :1_5:Other "You":
********************** / someSL                                                                            :1_5:Other "You":
someSL> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

********************** \ someSL has returned (["You"],0)                                              :2_2:UnDeeper:
********************** > |>>/base got ["You"]                                                         :2_2:UnDeeper:
|>>/base> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/base> MATCH (COK): Other "You"
|>>/base> VALUE: ((["You"],0),[])

********************* \ |>>/base has returned (["You"],0)                                              :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "You" UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (COK): GoDeeper Other "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************** \ |>>/recurse has returned (["You"],1)                                             :2_2:UnDeeper:
PAKA/akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
PAKA/akapart> MATCH (COK): Aka GoDeeper Other "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************* \ PAKA/akapart has returned (["You"],1)                                              :2_2:UnDeeper:
******************* > |>>/base got ["You"]                                                               :2_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((["You"],1),[])

****************** \ |>>/base has returned (["You"],1)                                                    :2_2:UnDeeper:
|?| optional something> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|?| optional something> MATCH (COK): Aka GoDeeper Other "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

***************** \ |?| optional something has returned (Just ["You"],1)                                   :2_2:UnDeeper:
slAKA optional akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
slAKA optional akapart> MATCH (COK): Aka GoDeeper Other "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

**************** \ slAKA optional akapart has returned (Just ["You"],1)                                     :2_2:UnDeeper:
**************** > |>>/base got Just ["You"]                                                                :2_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((Just ["You"],1),[])

*************** \ |>>/base has returned (Just ["You"],1)                                                     :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Aka GoDeeper Other "You" UnDeep <…>
|>>/recurse> MATCH (COK): GoDeeper Aka GoDeeper Other "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************** \ |>>/recurse has returned (Just ["You"],2)                                                    :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> VALUE: ((Just ["You"],3),[])

************* \ |>>/recurse has returned (Just ["You"],3)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
slAKA> VALUE: ((["Data Intermediary"],3),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],3)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                   :2_5:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
undeepers> MATCH (COK): UnDeeper UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                              :2_5:UnDeeper:
pAKA> IN: Other "Data Intermediary" GoDeeper GoDee <…>
pAKA> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                  :2_5:UnDeeper:
pMultiTermAka> IN: Other "Data Intermediary" GoDeeper GoDee <…>
pMultiTermAka> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                           :2_5:UnDeeper:
manyIndentation/leaf?> IN: Other "Data Intermediary" GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                     :2_5:UnDeeper:
********* / myindented: consuming UnDeeper                                                                               :2_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Which GoDeeper Other "is not" G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Which:
someIndentation> IN: GoDeeper Other "Data Intermediary" GoDee <…>
someIndentation> MATCH (COK): GoDeeper Other "Data Intermediary" GoDee <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [Every,Party,TokAll]> IN: Every GoDeeper Other "Data Intermediary" <…>
pActor [Every,Party,TokAll]> MATCH (COK): Every GoDeeper Other "Data Intermediary" <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Data Intermediary" :| [],Nothing) :| []))       :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "is not" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "is not" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "is n:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "is n:
***************** / expression                                                                            :2_2:Other "is n:
****************** / labelPrefix                                                                         :2_2:Other "is n:
labelPrefix> IN: Other "is not" GoDeeper Other "processin <…>
labelPrefix> MATCH (COK): Other "is not"
labelPrefix> VALUE: ("is not",[])

****************** \ labelPrefix has returned "is not"                                                    :2_3:GoDeeper:
****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "processing personal data <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "proc:
********************** / manyIndentation/leaf?                                                         :2_3:Other "proc:
*********************** / expression                                                                  :2_3:Other "proc:
************************ / labelPrefix                                                               :2_3:Other "proc:
labelPrefix> IN: Other "processing personal data on behal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

************************ / term p                                                                    :2_3:Other "proc:
************************* / term p/notLabelTerm                                                     :2_3:Other "proc:
************************** / term p/2:someIndentation expr p                                       :2_3:Other "proc:
*************************** / someIndentation                                                     :2_3:Other "proc:
**************************** / myindented: consuming GoDeeper                                    :2_3:Other "proc:
myindented: consuming GoDeeper> IN: Other "processing personal data on behal <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "processing personal data on behal <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "processing personal data on behal <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
term p/2:someIndentation expr p> expecting GoDeeper

************************** / term p/3:plain p                                                      :2_3:Other "proc:
*************************** / pRelPred                                                            :2_3:Other "proc:
**************************** / slRelPred                                                         :2_3:Other "proc:
***************************** / nested simpleHorn                                               :2_3:Other "proc:
****************************** > |^|                                                           :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |^| deeps                                                    :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

****************************** \ |^| deeps has returned ([(),()],-2)                       :3_1:Must:
nested simpleHorn> IN: Other "processing personal data on behal <…>
nested simpleHorn> MATCH (CERR): Other "processing personal data on behal <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting Means or UnDeeper

***************************** / RPConstraint                                                    :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "processing personal data on behal <…>
RPConstraint> MATCH (CERR): Other "processing personal data on behal <…>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************************** / RPBoolStructR                                                   :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "processing personal data on behal <…>
RPBoolStructR> MATCH (CERR): Other "processing personal data on behal <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************************** / RPMT                                                            :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slAKA                                                       :2_3:Other "proc:
******************************** / $*|                                                       :2_3:Other "proc:
********************************* / slAKA base                                              :2_3:Other "proc:
********************************** / slMultiTerm                                           :2_3:Other "proc:
*********************************** / someSL                                              :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*********************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slAKA base> IN: Other "processing personal data on behal <…>
slAKA base> MATCH (COK): Other "processing personal data on behal <…>
slAKA base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************* \ slAKA base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional akapart                                 :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / PAKA/akapart                                     :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
************************************** / Aka Token                                    :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional akapart has returned (Nothing,0)        :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional typically                               :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / typically                                        :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional typically has returned (Nothing,0)      :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
******************************** > pAKA: entityalias = Nothing                              :3_2:UnDeeper:
slAKA> IN: Other "processing personal data on behal <…>
slAKA> MATCH (COK): Other "processing personal data on behal <…>
slAKA> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slAKA has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
RPMT> IN: Other "processing personal data on behal <…>
RPMT> MATCH (COK): Other "processing personal data on behal <…>
RPMT> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

***************************** \ RPMT has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slRelPred> IN: Other "processing personal data on behal <…>
slRelPred> MATCH (COK): Other "processing personal data on behal <…>
slRelPred> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************************** \ slRelPred has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
**************************** / undeepers                                                        :3_2:UnDeeper:
***************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
***************************** > sameLine: success!                                             :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************************** \ undeepers has returned ()                                        :3_2:UnDeeper:
pRelPred> IN: Other "processing personal data on behal <…>
pRelPred> MATCH (COK): Other "processing personal data on behal <…>
pRelPred> VALUE: (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],[])

*************************** \ pRelPred has returned RPMT ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
term p/3:plain p> IN: Other "processing personal data on behal <…>
term p/3:plain p> MATCH (COK): Other "processing personal data on behal <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************** \ term p/3:plain p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "processing personal data on behal <…>
term p/notLabelTerm> MATCH (COK): Other "processing personal data on behal <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p> IN: Other "processing personal data on behal <…>
term p> MATCH (COK): Other "processing personal data on behal <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
************************ / binary(Or)                                                               :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                              :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                          :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                          :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "processing personal data on behal <…>
expression> MATCH (COK): Other "processing personal data on behal <…>
expression> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

*********************** \ expression has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "processing personal data on behal <…>
manyIndentation/leaf?> MATCH (COK): Other "processing personal data on behal <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
********************** / myindented: consuming UnDeeper                                               :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                           :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "processing personal data <…>
someIndentation> MATCH (COK): GoDeeper Other "processing personal data <…>
someIndentation> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "processing personal data <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "processing personal data <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "processing personal data <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "processing personal data <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p> IN: GoDeeper Other "processing personal data <…>
term p> MATCH (COK): GoDeeper Other "processing personal data <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
****************** / binary(Or)                                                                             :3_3:UnDeeper:
binary(Or)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                            :3_3:UnDeeper:
binary(And)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                        :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                        :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "is not" GoDeeper Other "processin <…>
expression> MATCH (COK): Other "is not" GoDeeper Other "processin <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

***************** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "is not" GoDeeper Other "processin <…>
manyIndentation/leaf?> MATCH (COK): Other "is not" GoDeeper Other "processin <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
**************** / myindented: consuming UnDeeper                                                             :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper Other "without un <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:Must:
someIndentation> IN: GoDeeper Other "is not" GoDeeper Other " <…>
someIndentation> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
someIndentation> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*************** \ someIndentation has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/2:someIndentation expr p> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/notLabelTerm> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p/notLabelTerm> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************* \ term p/notLabelTerm has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************ \ term p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: Must GoDeeper Other "without undue delay <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected Must
binary(Or)> expecting Or

************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: Must GoDeeper Other "without undue delay <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected Must
binary(And)> expecting And

************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: Must GoDeeper Other "without undue delay <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected Must
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: Must GoDeeper Other "without undue delay <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected Must
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "is not" GoDeeper Other " <…>
expression> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*********** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
ppp inner> IN: GoDeeper Other "is not" GoDeeper Other " <…>
ppp inner> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
ppp inner> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
pBSR> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pBSR> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
pBSR> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
manyIndentation/leaf?> IN: Which GoDeeper Other "is not" GoDeeper O <…>
manyIndentation/leaf?> MATCH (COK): Which GoDeeper Other "is not" GoDeeper O <…>
manyIndentation/leaf?> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******* \ manyIndentation/leaf? has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
******* / WHERE                                                                                                   :3_1:Must:
WHERE> IN: Must GoDeeper Other "without undue delay <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected Must
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: Must GoDeeper Other "without undue delay <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper Other "without undue delay <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: Must GoDeeper Other "without undue delay <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper Other "without undue delay <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: Must GoDeeper Other "without undue delay <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper Other "without undue delay <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Must:
preambleBoolStructR [Unless]> IN: Must GoDeeper Other "without undue delay <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected Must
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :3_1:Must:
preambleBoolStructR [When,If]> IN: Must GoDeeper Other "without undue delay <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=19:
preambleBoolStructR [When,If]> unexpected Must
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: Must GoDeeper Other "without undue delay <…>
$>|> MATCH (COK): Must
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :3_2:GoDeeper:
******** / |>| calling $>>                                                                                        :3_2:GoDeeper:
********* / |>>/recurse                                                                                          :3_2:GoDeeper:
********** / |>>/recurse                                                                                         :3_2:Other "with:
|>>/recurse> IN: Other "without undue delay" UnDeeper Upo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected Other "without undue delay"
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                            :3_2:Other "with:
*********** / pTemporal/eventually                                                                              :3_2:Other "with:
pTemporal/eventually> IN: Other "without undue delay" UnDeeper Upo <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=21:
pTemporal/eventually> unexpected Other "without undue delay"
pTemporal/eventually> expecting Eventually

*********** / pTemporal/specifically                                                                            :3_2:Other "with:
************ / $>|                                                                                             :3_2:Other "with:
$>|> IN: Other "without undue delay" UnDeeper Upo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected Other "without undue delay"
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Other "without undue delay" UnDeeper Upo <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=21:
pTemporal/specifically> unexpected Other "without undue delay"
pTemporal/specifically> expecting After, Before, By, or On

*********** / pTemporal/vaguely                                                                                 :3_2:Other "with:
pTemporal/vaguely> IN: Other "without undue delay" UnDeeper Upo <…>
pTemporal/vaguely> MATCH (COK): Other "without undue delay"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "without undue delay"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "without undue delay")     :4_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "without undue delay"))                :4_2:UnDeeper:
|>>/base> IN: Other "without undue delay" UnDeeper Upo <…>
|>>/base> MATCH (COK): Other "without undue delay"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),0)     :4_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "without undue delay" UnD <…>
|>>/recurse> MATCH (COK): GoDeeper Other "without undue delay"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1)    :4_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "without undue delay" UnD <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "without undue delay"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1)  :4_2:UnDeeper:
******** / undeepers                                                                                                :4_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :4_2:UnDeeper:
********* > sameLine: success!                                                                                  :4_1:Upon:
undeepers> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :4_1:Upon:
pDT> IN: Must GoDeeper Other "without undue delay <…>
pDT> MATCH (COK): Must GoDeeper Other "without undue delay <…>
pDT> VALUE: ((DMust,Just (TemporalConstraint TVague (Just 0) "without undue delay")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TVague (Just 0) "without undue delay"))                :4_1:Upon:
******* / WHERE                                                                                                   :4_1:Upon:
WHERE> IN: Upon GoDeeper Other "becoming aware a da <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected Upon
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: Upon GoDeeper Other "becoming aware a da <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Upon
$>|> expecting Having

preambleParamText:[Having]> IN: Upon GoDeeper Other "becoming aware a da <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected Upon
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: Upon GoDeeper Other "becoming aware a da <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Upon
$>|> expecting Given

preambleParamText:[Given]> IN: Upon GoDeeper Other "becoming aware a da <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected Upon
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: Upon GoDeeper Other "becoming aware a da <…>
$>|> MATCH (COK): Upon
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "beco:
|>>/recurse> IN: Other "becoming aware a data breach invo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected Other "becoming aware a data breach involving a client Organisation may have occurred"
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                            :4_2:Other "beco:
*********** / pParamText                                                                                        :4_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :4_2:Other "beco:
************* / pKeyValuesAka                                                                                 :4_2:Other "beco:
************** / slAKA                                                                                       :4_2:Other "beco:
*************** / $*|                                                                                       :4_2:Other "beco:
**************** / slAKA base                                                                              :4_2:Other "beco:
***************** / slKeyValues                                                                           :4_2:Other "beco:
****************** / $*|                                                                                 :4_2:Other "beco:
******************* / someSL                                                                            :4_2:Other "beco:
someSL> IN: Other "becoming aware a data breach invo <…>
someSL> MATCH (COK): Other "becoming aware a data breach invo <…>
someSL> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
$*|> IN: Other "becoming aware a data breach invo <…>
$*|> MATCH (COK): Other "becoming aware a data breach invo <…>
$*|> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / |?| optional something                                                             :5_2:UnDeeper:
******************** / |>>/recurse                                                                      :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :5_2:UnDeeper:
********************* / slTypeSig                                                                      :5_2:UnDeeper:
********************** / $>|                                                                          :5_2:UnDeeper:
$>|> IN: UnDeeper When GoDeeper Other "the data b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper When GoDeeper Other "the data b <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=26:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper When GoDeeper Other "the data b <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :5_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :5_2:UnDeeper:
|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :5_2:UnDeeper:
slKeyValues> IN: Other "becoming aware a data breach invo <…>
slKeyValues> MATCH (COK): Other "becoming aware a data breach invo <…>
slKeyValues> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
slAKA base> IN: Other "becoming aware a data breach invo <…>
slAKA base> MATCH (COK): Other "becoming aware a data breach invo <…>
slAKA base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
$*|> IN: Other "becoming aware a data breach invo <…>
$*|> MATCH (COK): Other "becoming aware a data breach invo <…>
$*|> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
Aka Token> IN: UnDeeper When GoDeeper Other "the data b <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=26:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper When GoDeeper Other "the data b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper When GoDeeper Other "the data b <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=26:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper When GoDeeper Other "the data b <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper When GoDeeper Other "the data b <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional typically                                                                 :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
$>|> IN: UnDeeper When GoDeeper Other "the data b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper When GoDeeper Other "the data b <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=26:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper When GoDeeper Other "the data b <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional typically> IN: UnDeeper When GoDeeper Other "the data b <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :5_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :5_2:UnDeeper:
slAKA> IN: Other "becoming aware a data breach invo <…>
slAKA> MATCH (COK): Other "becoming aware a data breach invo <…>
slAKA> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
************** / undeepers                                                                                    :5_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :5_2:UnDeeper:
*************** > sameLine: success!                                                                         :5_2:UnDeeper:
undeepers> IN: UnDeeper When GoDeeper Other "the data b <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :5_2:UnDeeper:
pKeyValuesAka> IN: Other "becoming aware a data breach invo <…>
pKeyValuesAka> MATCH (COK): Other "becoming aware a data breach invo <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "becoming aware a data breach invo <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "becoming aware a data breach invo <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :5_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :5_2:UnDeeper:
************** / sameMany                                                                                     :5_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :5_2:UnDeeper:
**************** / slAKA                                                                                    :5_2:UnDeeper:
***************** / $*|                                                                                    :5_2:UnDeeper:
****************** / slAKA base                                                                           :5_2:UnDeeper:
******************* / slKeyValues                                                                        :5_2:UnDeeper:
******************** / $*|                                                                              :5_2:UnDeeper:
********************* / someSL                                                                         :5_2:UnDeeper:
********************** / pNumAsText                                                                   :5_2:UnDeeper:
pNumAsText> IN: UnDeeper When GoDeeper Other "the data b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper When GoDeeper Other "the data b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper When GoDeeper Other "the data b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper When GoDeeper Other "the data b <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper When GoDeeper Other "the data b <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper When GoDeeper Other "the data b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper When GoDeeper Other "the data b <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper When GoDeeper Other "the data b <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper When GoDeeper Other "the data b <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :5_2:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper When GoDeeper Other "the data b <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :5_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper When GoDeeper Other "the data b <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :5_2:UnDeeper:
pParamText> IN: Other "becoming aware a data breach invo <…>
pParamText> MATCH (COK): Other "becoming aware a data breach invo <…>
pParamText> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
|>>/base> IN: Other "becoming aware a data breach invo <…>
|>>/base> MATCH (COK): Other "becoming aware a data breach invo <…>
|>>/base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0) :5_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "becoming aware a data br <…>
|>>/recurse> MATCH (COK): GoDeeper Other "becoming aware a data br <…>
|>>/recurse> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "becoming aware a data br <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "becoming aware a data br <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
******** / undeepers                                                                                                :5_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :5_2:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:When:
undeepers> IN: UnDeeper When GoDeeper Other "the data b <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:When:
preambleParamText:[Upon]> IN: Upon GoDeeper Other "becoming aware a da <…>
preambleParamText:[Upon]> MATCH (COK): Upon GoDeeper Other "becoming aware a da <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []) :5_1:When:
******* / preambleParamText:[Upon]                                                                                :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: When GoDeeper Other "the data breach occ <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected When
$>|> expecting Upon

preambleParamText:[Upon]> IN: When GoDeeper Other "the data breach occ <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected When
preambleParamText:[Upon]> expecting Upon

******* / WHERE                                                                                                   :5_1:When:
WHERE> IN: When GoDeeper Other "the data breach occ <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected When
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: When GoDeeper Other "the data breach occ <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected When
$>|> expecting Having

preambleParamText:[Having]> IN: When GoDeeper Other "the data breach occ <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected When
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: When GoDeeper Other "the data breach occ <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected When
$>|> expecting Given

preambleParamText:[Given]> IN: When GoDeeper Other "the data breach occ <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected When
preambleParamText:[Given]> expecting Given

******* / preambleBoolStructR [Unless]                                                                            :5_1:When:
preambleBoolStructR [Unless]> IN: When GoDeeper Other "the data breach occ <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=27:
preambleBoolStructR [Unless]> unexpected When
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :5_1:When:
******** / pBSR                                                                                                   :5_2:GoDeeper:
********* / ppp inner                                                                                            :5_2:GoDeeper:
********** / expression                                                                                         :5_2:GoDeeper:
*********** / labelPrefix                                                                                      :5_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "the data breach occurs o <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=28:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :5_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :5_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :5_2:GoDeeper:
************** / someIndentation                                                                            :5_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the data breach occurs o <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :5_2:Other "the:
*************** / manyIndentation/leaf?                                                                     :5_2:Other "the:
**************** / expression                                                                              :5_2:Other "the:
***************** / labelPrefix                                                                           :5_2:Other "the:
labelPrefix> IN: Other "the data breach occurs on or afte <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=30:
labelPrefix> unexpected UnDeeper

***************** / term p                                                                                :5_2:Other "the:
****************** / term p/notLabelTerm                                                                 :5_2:Other "the:
******************* / term p/2:someIndentation expr p                                                   :5_2:Other "the:
******************** / someIndentation                                                                 :5_2:Other "the:
********************* / myindented: consuming GoDeeper                                                :5_2:Other "the:
myindented: consuming GoDeeper> IN: Other "the data breach occurs on or afte <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=29:
myindented: consuming GoDeeper> unexpected Other "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "the data breach occurs on or afte <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=29:
someIndentation> unexpected Other "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "the data breach occurs on or afte <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=29:
term p/2:someIndentation expr p> unexpected Other "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
term p/2:someIndentation expr p> expecting GoDeeper

******************* / term p/3:plain p                                                                  :5_2:Other "the:
******************** / pRelPred                                                                        :5_2:Other "the:
********************* / slRelPred                                                                     :5_2:Other "the:
********************** / nested simpleHorn                                                           :5_2:Other "the:
*********************** > |^|                                                                       :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: Other "the data breach occurs on or afte <…>
someSL> MATCH (COK): Other "the data breach occurs on or afte <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "the data breach occurs on or afte <…>
slMultiTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |^| deeps                                                                  :6_2:UnDeeper:
|^| deeps> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|^| deeps> MATCH (COK): UnDeeper
|^| deeps> VALUE: (([()],-1),[])

*********************** \ |^| deeps has returned ([()],-1)                                        :6_1:Do:
nested simpleHorn> IN: Other "the data breach occurs on or afte <…>
nested simpleHorn> MATCH (CERR): Other "the data breach occurs on or afte <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting Means or UnDeeper

********************** / RPConstraint                                                                :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: Other "the data breach occurs on or afte <…>
someSL> MATCH (COK): Other "the data breach occurs on or afte <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "the data breach occurs on or afte <…>
slMultiTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |>| calling $>>                                                            :6_2:UnDeeper:
************************ / |>>/recurse                                                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************ / |>>/base                                                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "the data breach occurs on or afte <…>
RPConstraint> MATCH (CERR): Other "the data breach occurs on or afte <…>
RPConstraint> ERROR:
RPConstraint> offset=30:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************** / RPBoolStructR                                                               :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: Other "the data breach occurs on or afte <…>
someSL> MATCH (COK): Other "the data breach occurs on or afte <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "the data breach occurs on or afte <…>
slMultiTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |>| calling $>>                                                            :6_2:UnDeeper:
************************ / |>>/recurse                                                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************ / |>>/base                                                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "the data breach occurs on or afte <…>
RPBoolStructR> MATCH (CERR): Other "the data breach occurs on or afte <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=30:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************** / RPMT                                                                        :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slAKA                                                                   :5_2:Other "the:
************************* / $*|                                                                   :5_2:Other "the:
************************** / slAKA base                                                          :5_2:Other "the:
*************************** / slMultiTerm                                                       :5_2:Other "the:
**************************** / someSL                                                          :5_2:Other "the:
someSL> IN: Other "the data breach occurs on or afte <…>
someSL> MATCH (COK): Other "the data breach occurs on or afte <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

**************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "the data breach occurs on or afte <…>
slMultiTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*************************** \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slAKA base> IN: Other "the data breach occurs on or afte <…>
slAKA base> MATCH (COK): Other "the data breach occurs on or afte <…>
slAKA base> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ slAKA base has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                               :6_2:UnDeeper:
************************** / slAKA optional akapart                                               :6_2:UnDeeper:
*************************** / |?| optional something                                             :6_2:UnDeeper:
**************************** / |>>/recurse                                                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                         :6_2:UnDeeper:
***************************** / PAKA/akapart                                                   :6_2:UnDeeper:
****************************** / $>|                                                          :6_2:UnDeeper:
******************************* / Aka Token                                                  :6_2:UnDeeper:
Aka Token> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=30:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=30:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :6_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                               :6_2:UnDeeper:
************************** / slAKA optional typically                                             :6_2:UnDeeper:
*************************** / |?| optional something                                             :6_2:UnDeeper:
**************************** / |>>/recurse                                                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                         :6_2:UnDeeper:
***************************** / typically                                                      :6_2:UnDeeper:
****************************** / $>|                                                          :6_2:UnDeeper:
$>|> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=30:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :6_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :6_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :6_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :6_2:UnDeeper:
slAKA> IN: Other "the data breach occurs on or afte <…>
slAKA> MATCH (COK): Other "the data breach occurs on or afte <…>
slAKA> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slAKA has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
RPMT> IN: Other "the data breach occurs on or afte <…>
RPMT> MATCH (COK): Other "the data breach occurs on or afte <…>
RPMT> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************** \ RPMT has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slRelPred> IN: Other "the data breach occurs on or afte <…>
slRelPred> MATCH (COK): Other "the data breach occurs on or afte <…>
slRelPred> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ slRelPred has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
********************* / undeepers                                                                      :6_2:UnDeeper:
********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :6_2:UnDeeper:
********************** > sameLine: success!                                                           :6_2:UnDeeper:
undeepers> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************* \ undeepers has returned ()                                                      :6_2:UnDeeper:
pRelPred> IN: Other "the data breach occurs on or afte <…>
pRelPred> MATCH (COK): Other "the data breach occurs on or afte <…>
pRelPred> VALUE: (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],[])

******************** \ pRelPred has returned RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "the data breach occurs on or afte <…>
term p/3:plain p> MATCH (COK): Other "the data breach occurs on or afte <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************* \ term p/3:plain p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "the data breach occurs on or afte <…>
term p/notLabelTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
term p> IN: Other "the data breach occurs on or afte <…>
term p> MATCH (COK): Other "the data breach occurs on or afte <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

***************** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
***************** / binary(Or)                                                                             :6_2:UnDeeper:
binary(Or)> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                            :6_2:UnDeeper:
binary(And)> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                        :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                        :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the data breach occurs on or afte <…>
expression> MATCH (COK): Other "the data breach occurs on or afte <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

**************** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "the data breach occurs on or afte <…>
manyIndentation/leaf?> MATCH (COK): Other "the data breach occurs on or afte <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :6_1:Do:
someIndentation> IN: GoDeeper Other "the data breach occurs o <…>
someIndentation> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
someIndentation> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/2:someIndentation expr p> IN: GoDeeper Other "the data breach occurs o <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/notLabelTerm> IN: GoDeeper Other "the data breach occurs o <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p> IN: GoDeeper Other "the data breach occurs o <…>
term p> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*********** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
*********** / binary(Or)                                                                                      :6_1:Do:
binary(Or)> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected Do
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :6_1:Do:
binary(And)> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected Do
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :6_1:Do:
binary(SetLess)> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected Do
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :6_1:Do:
binary(SetPlus)> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected Do
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the data breach occurs o <…>
expression> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
ppp inner> IN: GoDeeper Other "the data breach occurs o <…>
ppp inner> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
ppp inner> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********* \ ppp inner has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
pBSR> IN: GoDeeper Other "the data breach occurs o <…>
pBSR> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
pBSR> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******** \ pBSR has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
preambleBoolStructR [When,If]> IN: When GoDeeper Other "the data breach occ <…>
preambleBoolStructR [When,If]> MATCH (COK): When GoDeeper Other "the data breach occ <…>
preambleBoolStructR [When,If]> VALUE: ((When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])),[])

******* \ preambleBoolStructR [When,If] has returned (When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :6_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :6_1:Do:
preambleBoolStructR [When,If]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=31:
preambleBoolStructR [When,If]> unexpected Do
preambleBoolStructR [When,If]> expecting If or When

******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=31:
WHERE> unexpected Do
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=31:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

******* / preambleBoolStructR [Unless]                                                                            :6_1:Do:
preambleBoolStructR [Unless]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=31:
preambleBoolStructR [Unless]> unexpected Do
preambleBoolStructR [Unless]> expecting Unless

******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pDoAction/Do> MATCH (COK): Do
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / expression                                                                                       :6_2:GoDeeper:
************ / labelPrefix                                                                                    :6_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=32:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :6_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :6_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :6_2:GoDeeper:
*************** / someIndentation                                                                          :6_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :6_2:Other "NOTI:
**************** / manyIndentation/leaf?                                                                   :6_2:Other "NOTI:
***************** / expression                                                                            :6_2:Other "NOTI:
****************** / labelPrefix                                                                         :6_2:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "the Organ <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

****************** \ labelPrefix has returned "NOTIFY"                                                    :6_3:GoDeeper:
****************** / term p                                                                               :6_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :6_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :6_3:GoDeeper:
********************* / someIndentation                                                                :6_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the Organisation" UnDeep <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :6_3:Other "the:
********************** / manyIndentation/leaf?                                                         :6_3:Other "the:
*********************** / expression                                                                  :6_3:Other "the:
************************ / labelPrefix                                                               :6_3:Other "the:
labelPrefix> IN: Other "the Organisation" UnDeeper Other  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=36:
labelPrefix> unexpected UnDeeper

************************ / term p                                                                    :6_3:Other "the:
************************* / term p/notLabelTerm                                                     :6_3:Other "the:
************************** / term p/2:someIndentation expr p                                       :6_3:Other "the:
*************************** / someIndentation                                                     :6_3:Other "the:
**************************** / myindented: consuming GoDeeper                                    :6_3:Other "the:
myindented: consuming GoDeeper> IN: Other "the Organisation" UnDeeper Other  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=35:
myindented: consuming GoDeeper> unexpected Other "the Organisation"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "the Organisation" UnDeeper Other  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=35:
someIndentation> unexpected Other "the Organisation"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "the Organisation" UnDeeper Other  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=35:
term p/2:someIndentation expr p> unexpected Other "the Organisation"
term p/2:someIndentation expr p> expecting GoDeeper

************************** / term p/3:plain p                                                      :6_3:Other "the:
*************************** / pParamText                                                          :6_3:Other "the:
**************************** / pParamText(flat) first line: pKeyValues                           :6_3:Other "the:
***************************** / pKeyValuesAka                                                   :6_3:Other "the:
****************************** / slAKA                                                         :6_3:Other "the:
******************************* / $*|                                                         :6_3:Other "the:
******************************** / slAKA base                                                :6_3:Other "the:
********************************* / slKeyValues                                             :6_3:Other "the:
********************************** / $*|                                                   :6_3:Other "the:
*********************************** / someSL                                              :6_3:Other "the:
someSL> IN: Other "the Organisation" UnDeeper Other  <…>
someSL> MATCH (COK): Other "the Organisation"
someSL> VALUE: ((["the Organisation"],0),[])

*********************************** \ someSL has returned (["the Organisation"],0)         :7_3:UnDeeper:
$*|> IN: Other "the Organisation" UnDeeper Other  <…>
$*|> MATCH (COK): Other "the Organisation"
$*|> VALUE: ((["the Organisation"],0),[])

********************************** \ $*| has returned (["the Organisation"],0)              :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / |?| optional something                               :7_3:UnDeeper:
************************************ / |>>/recurse                                        :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                           :7_3:UnDeeper:
************************************* / slTypeSig                                        :7_3:UnDeeper:
************************************** / $>|                                            :7_3:UnDeeper:
$>|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=36:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :7_3:UnDeeper:
*********************************** > |>>/base got Nothing                                 :7_3:UnDeeper:
|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                      :7_3:UnDeeper:
slKeyValues> IN: Other "the Organisation" UnDeeper Other  <…>
slKeyValues> MATCH (COK): Other "the Organisation"
slKeyValues> VALUE: ((("the Organisation" :| [],Nothing),0),[])

********************************* \ slKeyValues has returned (("the Organisation" :| [],Nothing),0) :7_3:UnDeeper:
slAKA base> IN: Other "the Organisation" UnDeeper Other  <…>
slAKA base> MATCH (COK): Other "the Organisation"
slAKA base> VALUE: ((("the Organisation" :| [],Nothing),0),[])

******************************** \ slAKA base has returned (("the Organisation" :| [],Nothing),0) :7_3:UnDeeper:
$*|> IN: Other "the Organisation" UnDeeper Other  <…>
$*|> MATCH (COK): Other "the Organisation"
$*|> VALUE: ((("the Organisation" :| [],Nothing),0),[])

******************************* \ $*| has returned (("the Organisation" :| [],Nothing),0)      :7_3:UnDeeper:
******************************* / |>>/recurse                                                  :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                     :7_3:UnDeeper:
******************************** / slAKA optional akapart                                     :7_3:UnDeeper:
********************************* / |?| optional something                                   :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / PAKA/akapart                                         :7_3:UnDeeper:
************************************ / $>|                                                :7_3:UnDeeper:
************************************* / Aka Token                                        :7_3:UnDeeper:
Aka Token> IN: UnDeeper Other "for which" GoDeeper Othe <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=36:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "for which" GoDeeper Othe <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=36:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :7_3:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)            :7_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :7_3:UnDeeper:
|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :7_3:UnDeeper:
******************************* / |>>/recurse                                                  :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                     :7_3:UnDeeper:
******************************** / slAKA optional typically                                   :7_3:UnDeeper:
********************************* / |?| optional something                                   :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / typically                                            :7_3:UnDeeper:
************************************ / $>|                                                :7_3:UnDeeper:
$>|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "for which" GoDeeper Othe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=36:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :7_3:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)          :7_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :7_3:UnDeeper:
|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :7_3:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_3:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                  :7_3:UnDeeper:
slAKA> IN: Other "the Organisation" UnDeeper Other  <…>
slAKA> MATCH (COK): Other "the Organisation"
slAKA> VALUE: ((("the Organisation" :| [],Nothing),0),[])

****************************** \ slAKA has returned (("the Organisation" :| [],Nothing),0)      :7_3:UnDeeper:
****************************** / undeepers                                                      :7_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_3:UnDeeper:
******************************* > sameLine: success!                                           :7_3:UnDeeper:
undeepers> IN: UnDeeper Other "for which" GoDeeper Othe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :7_3:UnDeeper:
pKeyValuesAka> IN: Other "the Organisation" UnDeeper Other  <…>
pKeyValuesAka> MATCH (COK): Other "the Organisation"
pKeyValuesAka> VALUE: (("the Organisation" :| [],Nothing),[])

***************************** \ pKeyValuesAka has returned ("the Organisation" :| [],Nothing)    :7_3:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "the Organisation" UnDeeper Other  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "the Organisation"
pParamText(flat) first line: pKeyValues> VALUE: (("the Organisation" :| [],Nothing),[])

**************************** \ pParamText(flat) first line: pKeyValues has returned ("the Organisation" :| [],Nothing) :7_3:UnDeeper:
**************************** / pParamText(flat) subsequent lines: sameMany pKeyValues             :7_3:UnDeeper:
***************************** / manyIndentation/leaf?                                            :7_3:UnDeeper:
****************************** / sameMany                                                       :7_3:UnDeeper:
******************************* / pKeyValuesAka                                                :7_3:UnDeeper:
******************************** / slAKA                                                      :7_3:UnDeeper:
********************************* / $*|                                                      :7_3:UnDeeper:
********************************** / slAKA base                                             :7_3:UnDeeper:
*********************************** / slKeyValues                                          :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: UnDeeper Other "for which" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=36:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "for which" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=36:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=36:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=36:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=36:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "for which" GoDeeper Othe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=36:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "for which" GoDeeper Othe <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

****************************** \ sameMany has returned []                                       :7_3:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "for which" GoDeeper Othe <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

***************************** \ manyIndentation/leaf? has returned []                            :7_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "for which" GoDeeper Othe <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

**************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_3:UnDeeper:
pParamText> IN: Other "the Organisation" UnDeeper Other  <…>
pParamText> MATCH (COK): Other "the Organisation"
pParamText> VALUE: (("the Organisation" :| [],Nothing) :| [],[])

*************************** \ pParamText has returned ("the Organisation" :| [],Nothing) :| []     :7_3:UnDeeper:
term p/3:plain p> IN: Other "the Organisation" UnDeeper Other  <…>
term p/3:plain p> MATCH (COK): Other "the Organisation"
term p/3:plain p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************** \ term p/3:plain p has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
term p/notLabelTerm> IN: Other "the Organisation" UnDeeper Other  <…>
term p/notLabelTerm> MATCH (COK): Other "the Organisation"
term p/notLabelTerm> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
term p> IN: Other "the Organisation" UnDeeper Other  <…>
term p> MATCH (COK): Other "the Organisation"
term p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])      :7_3:UnDeeper:
************************ / binary(Or)                                                                 :7_3:UnDeeper:
binary(Or)> IN: UnDeeper Other "for which" GoDeeper Othe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                                :7_3:UnDeeper:
binary(And)> IN: UnDeeper Other "for which" GoDeeper Othe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                            :7_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "for which" GoDeeper Othe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                            :7_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "for which" GoDeeper Othe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the Organisation" UnDeeper Other  <…>
expression> MATCH (COK): Other "the Organisation"
expression> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

*********************** \ expression has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])    :7_3:UnDeeper:
manyIndentation/leaf?> IN: Other "the Organisation" UnDeeper Other  <…>
manyIndentation/leaf?> MATCH (COK): Other "the Organisation"
manyIndentation/leaf?> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :7_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "for which" GoDeeper Othe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :7_2:Other "for:
someIndentation> IN: GoDeeper Other "the Organisation" UnDeep <…>
someIndentation> MATCH (COK): GoDeeper Other "the Organisation" UnDeep <…>
someIndentation> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

********************* \ someIndentation has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p/2:someIndentation expr p> IN: GoDeeper Other "the Organisation" UnDeep <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the Organisation" UnDeep <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p/notLabelTerm> IN: GoDeeper Other "the Organisation" UnDeep <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the Organisation" UnDeep <…>
term p/notLabelTerm> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p> IN: GoDeeper Other "the Organisation" UnDeep <…>
term p> MATCH (COK): GoDeeper Other "the Organisation" UnDeep <…>
term p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])               :7_2:Other "for:
****************** / binary(Or)                                                                          :7_2:Other "for:
binary(Or)> IN: Other "for which" GoDeeper Other "you ac <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=37:
binary(Or)> unexpected Other "for which"
binary(Or)> expecting Or

****************** / binary(And)                                                                         :7_2:Other "for:
binary(And)> IN: Other "for which" GoDeeper Other "you ac <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=37:
binary(And)> unexpected Other "for which"
binary(And)> expecting And

****************** / binary(SetLess)                                                                     :7_2:Other "for:
binary(SetLess)> IN: Other "for which" GoDeeper Other "you ac <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=37:
binary(SetLess)> unexpected Other "for which"
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                     :7_2:Other "for:
binary(SetPlus)> IN: Other "for which" GoDeeper Other "you ac <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=37:
binary(SetPlus)> unexpected Other "for which"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "the Organ <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "the Organ <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])),[])

***************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])) :7_2:Other "for:
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "the Organ <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "the Organ <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])) :7_2:Other "for:
**************** / myindented: consuming UnDeeper                                                          :7_2:Other "for:
myindented: consuming UnDeeper> IN: Other "for which" GoDeeper Other "you ac <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=37:
myindented: consuming UnDeeper> unexpected Other "for which"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=37:
someIndentation> unexpected Other "for which"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p/2:someIndentation expr p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=37:
term p/2:someIndentation expr p> unexpected Other "for which"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, or UnDeeper

************** / term p/3:plain p                                                                           :6_2:GoDeeper:
*************** / pParamText                                                                               :6_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :6_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :6_2:GoDeeper:
****************** / slAKA                                                                              :6_2:GoDeeper:
******************* / $*|                                                                              :6_2:GoDeeper:
******************** / slAKA base                                                                     :6_2:GoDeeper:
********************* / slKeyValues                                                                  :6_2:GoDeeper:
********************** / $*|                                                                        :6_2:GoDeeper:
*********************** / someSL                                                                   :6_2:GoDeeper:
************************ / pNumAsText                                                             :6_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=32:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=32:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=32:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=32:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=32:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=32:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=32:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=37:
term p/notLabelTerm> unexpected Other "for which"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=37:
term p> unexpected Other "for which"
term p> expecting And, Or, SetLess, SetPlus, or UnDeeper

expression> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=37:
expression> unexpected Other "for which"
expression> expecting expression

expr pParamText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=37:
expr pParamText> unexpected Other "for which"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=37:
dBoolStructP calling exprP> unexpected Other "for which"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=37:
pAction calling dBoolStructP> unexpected Other "for which"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=37:
pDoAction/pAction> unexpected Other "for which"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: Every GoDeeper Other "Data Intermediary" <…>
regulative permutation with deontic-temporal> MATCH (CERR): Every GoDeeper Other "Data Intermediary" <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=37:
regulative permutation with deontic-temporal> unexpected Other "for which"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: Every GoDeeper Other "Data Intermediary" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected Every
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Having

preambleParamText:[Having]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected Every
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected Every
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected Every
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: Every GoDeeper Other "Data Intermediary" <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected Every
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Every GoDeeper Other "Data Intermediary" <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected Every
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: Every GoDeeper Other "Data Intermediary" <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected Every
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Data Intermediary" GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                                :1_4:Aka:
pNumAsText> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected Aka
pNumAsText> expecting number

someSL> IN: Other "Data Intermediary" GoDeeper GoDee <…>
someSL> MATCH (COK): Other "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: Other "Data Intermediary" GoDeeper GoDee <…>
$*|> MATCH (COK): Other "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                    :1_4:GoDeeper:
*************** / |>>/recurse                                                                                   :1_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                      :1_4:Aka:
**************** / slAKA optional akapart                                                                      :1_4:Aka:
***************** / |?| optional something                                                                    :1_4:Aka:
****************** / |>>/recurse                                                                             :1_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                                :1_4:Aka:
******************* / PAKA/akapart                                                                          :1_4:Aka:
******************** / $>|                                                                                 :1_4:Aka:
********************* / Aka Token                                                                         :1_4:Aka:
Aka Token> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
Aka Token> MATCH (COK): Aka
Aka Token> VALUE: (Aka,[])

********************* \ Aka Token has returned Aka                                                         :1_5:GoDeeper:
$>|> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
$>|> MATCH (COK): Aka
$>|> VALUE: (Aka,[])

******************** \ $>| has returned Aka                                                                 :1_5:GoDeeper:
******************** / |>>/recurse                                                                          :1_5:GoDeeper:
********************* / |>>/recurse                                                                         :1_5:Other "You":
|>>/recurse> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "You"
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                            :1_5:Other "You":
********************** / someSL                                                                            :1_5:Other "You":
someSL> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

********************** \ someSL has returned (["You"],0)                                              :2_2:UnDeeper:
********************** > |>>/base got ["You"]                                                         :2_2:UnDeeper:
|>>/base> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/base> MATCH (COK): Other "You"
|>>/base> VALUE: ((["You"],0),[])

********************* \ |>>/base has returned (["You"],0)                                              :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "You" UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (COK): GoDeeper Other "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************** \ |>>/recurse has returned (["You"],1)                                             :2_2:UnDeeper:
PAKA/akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
PAKA/akapart> MATCH (COK): Aka GoDeeper Other "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************* \ PAKA/akapart has returned (["You"],1)                                              :2_2:UnDeeper:
******************* > |>>/base got ["You"]                                                               :2_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((["You"],1),[])

****************** \ |>>/base has returned (["You"],1)                                                    :2_2:UnDeeper:
|?| optional something> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|?| optional something> MATCH (COK): Aka GoDeeper Other "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

***************** \ |?| optional something has returned (Just ["You"],1)                                   :2_2:UnDeeper:
slAKA optional akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
slAKA optional akapart> MATCH (COK): Aka GoDeeper Other "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

**************** \ slAKA optional akapart has returned (Just ["You"],1)                                     :2_2:UnDeeper:
**************** > |>>/base got Just ["You"]                                                                :2_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((Just ["You"],1),[])

*************** \ |>>/base has returned (Just ["You"],1)                                                     :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Aka GoDeeper Other "You" UnDeep <…>
|>>/recurse> MATCH (COK): GoDeeper Aka GoDeeper Other "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************** \ |>>/recurse has returned (Just ["You"],2)                                                    :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> VALUE: ((Just ["You"],3),[])

************* \ |>>/recurse has returned (Just ["You"],3)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
slAKA> VALUE: ((["Data Intermediary"],3),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],3)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                   :2_5:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
undeepers> MATCH (COK): UnDeeper UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                              :2_5:UnDeeper:
pAKA> IN: Other "Data Intermediary" GoDeeper GoDee <…>
pAKA> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                  :2_5:UnDeeper:
pMultiTermAka> IN: Other "Data Intermediary" GoDeeper GoDee <…>
pMultiTermAka> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                           :2_5:UnDeeper:
manyIndentation/leaf?> IN: Other "Data Intermediary" GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                     :2_5:UnDeeper:
********* / myindented: consuming UnDeeper                                                                               :2_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Which GoDeeper Other "is not" G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Which:
someIndentation> IN: GoDeeper Other "Data Intermediary" GoDee <…>
someIndentation> MATCH (COK): GoDeeper Other "Data Intermediary" GoDee <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [Every,Party,TokAll]> IN: Every GoDeeper Other "Data Intermediary" <…>
pActor [Every,Party,TokAll]> MATCH (COK): Every GoDeeper Other "Data Intermediary" <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Data Intermediary" :| [],Nothing) :| []))       :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "is not" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "is not" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "is n:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "is n:
***************** / expression                                                                            :2_2:Other "is n:
****************** / labelPrefix                                                                         :2_2:Other "is n:
labelPrefix> IN: Other "is not" GoDeeper Other "processin <…>
labelPrefix> MATCH (COK): Other "is not"
labelPrefix> VALUE: ("is not",[])

****************** \ labelPrefix has returned "is not"                                                    :2_3:GoDeeper:
****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "processing personal data <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "proc:
********************** / manyIndentation/leaf?                                                         :2_3:Other "proc:
*********************** / expression                                                                  :2_3:Other "proc:
************************ / labelPrefix                                                               :2_3:Other "proc:
labelPrefix> IN: Other "processing personal data on behal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

************************ / term p                                                                    :2_3:Other "proc:
************************* / term p/notLabelTerm                                                     :2_3:Other "proc:
************************** / term p/2:someIndentation expr p                                       :2_3:Other "proc:
*************************** / someIndentation                                                     :2_3:Other "proc:
**************************** / myindented: consuming GoDeeper                                    :2_3:Other "proc:
myindented: consuming GoDeeper> IN: Other "processing personal data on behal <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "processing personal data on behal <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "processing personal data on behal <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
term p/2:someIndentation expr p> expecting GoDeeper

************************** / term p/3:plain p                                                      :2_3:Other "proc:
*************************** / pRelPred                                                            :2_3:Other "proc:
**************************** / slRelPred                                                         :2_3:Other "proc:
***************************** / nested simpleHorn                                               :2_3:Other "proc:
****************************** > |^|                                                           :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |^| deeps                                                    :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

****************************** \ |^| deeps has returned ([(),()],-2)                       :3_1:Must:
nested simpleHorn> IN: Other "processing personal data on behal <…>
nested simpleHorn> MATCH (CERR): Other "processing personal data on behal <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting Means or UnDeeper

***************************** / RPConstraint                                                    :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "processing personal data on behal <…>
RPConstraint> MATCH (CERR): Other "processing personal data on behal <…>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************************** / RPBoolStructR                                                   :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "processing personal data on behal <…>
RPBoolStructR> MATCH (CERR): Other "processing personal data on behal <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************************** / RPMT                                                            :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slAKA                                                       :2_3:Other "proc:
******************************** / $*|                                                       :2_3:Other "proc:
********************************* / slAKA base                                              :2_3:Other "proc:
********************************** / slMultiTerm                                           :2_3:Other "proc:
*********************************** / someSL                                              :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*********************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slAKA base> IN: Other "processing personal data on behal <…>
slAKA base> MATCH (COK): Other "processing personal data on behal <…>
slAKA base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************* \ slAKA base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional akapart                                 :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / PAKA/akapart                                     :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
************************************** / Aka Token                                    :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional akapart has returned (Nothing,0)        :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional typically                               :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / typically                                        :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional typically has returned (Nothing,0)      :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
******************************** > pAKA: entityalias = Nothing                              :3_2:UnDeeper:
slAKA> IN: Other "processing personal data on behal <…>
slAKA> MATCH (COK): Other "processing personal data on behal <…>
slAKA> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slAKA has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
RPMT> IN: Other "processing personal data on behal <…>
RPMT> MATCH (COK): Other "processing personal data on behal <…>
RPMT> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

***************************** \ RPMT has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slRelPred> IN: Other "processing personal data on behal <…>
slRelPred> MATCH (COK): Other "processing personal data on behal <…>
slRelPred> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************************** \ slRelPred has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
**************************** / undeepers                                                        :3_2:UnDeeper:
***************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
***************************** > sameLine: success!                                             :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************************** \ undeepers has returned ()                                        :3_2:UnDeeper:
pRelPred> IN: Other "processing personal data on behal <…>
pRelPred> MATCH (COK): Other "processing personal data on behal <…>
pRelPred> VALUE: (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],[])

*************************** \ pRelPred has returned RPMT ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
term p/3:plain p> IN: Other "processing personal data on behal <…>
term p/3:plain p> MATCH (COK): Other "processing personal data on behal <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************** \ term p/3:plain p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "processing personal data on behal <…>
term p/notLabelTerm> MATCH (COK): Other "processing personal data on behal <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p> IN: Other "processing personal data on behal <…>
term p> MATCH (COK): Other "processing personal data on behal <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
************************ / binary(Or)                                                               :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                              :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                          :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                          :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "processing personal data on behal <…>
expression> MATCH (COK): Other "processing personal data on behal <…>
expression> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

*********************** \ expression has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "processing personal data on behal <…>
manyIndentation/leaf?> MATCH (COK): Other "processing personal data on behal <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
********************** / myindented: consuming UnDeeper                                               :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                           :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "processing personal data <…>
someIndentation> MATCH (COK): GoDeeper Other "processing personal data <…>
someIndentation> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "processing personal data <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "processing personal data <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "processing personal data <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "processing personal data <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p> IN: GoDeeper Other "processing personal data <…>
term p> MATCH (COK): GoDeeper Other "processing personal data <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
****************** / binary(Or)                                                                             :3_3:UnDeeper:
binary(Or)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                            :3_3:UnDeeper:
binary(And)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                        :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                        :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "is not" GoDeeper Other "processin <…>
expression> MATCH (COK): Other "is not" GoDeeper Other "processin <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

***************** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "is not" GoDeeper Other "processin <…>
manyIndentation/leaf?> MATCH (COK): Other "is not" GoDeeper Other "processin <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
**************** / myindented: consuming UnDeeper                                                             :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper Other "without un <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:Must:
someIndentation> IN: GoDeeper Other "is not" GoDeeper Other " <…>
someIndentation> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
someIndentation> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*************** \ someIndentation has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/2:someIndentation expr p> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/notLabelTerm> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p/notLabelTerm> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************* \ term p/notLabelTerm has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************ \ term p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: Must GoDeeper Other "without undue delay <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected Must
binary(Or)> expecting Or

************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: Must GoDeeper Other "without undue delay <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected Must
binary(And)> expecting And

************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: Must GoDeeper Other "without undue delay <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected Must
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: Must GoDeeper Other "without undue delay <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected Must
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "is not" GoDeeper Other " <…>
expression> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*********** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
ppp inner> IN: GoDeeper Other "is not" GoDeeper Other " <…>
ppp inner> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
ppp inner> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
pBSR> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pBSR> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
pBSR> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
manyIndentation/leaf?> IN: Which GoDeeper Other "is not" GoDeeper O <…>
manyIndentation/leaf?> MATCH (COK): Which GoDeeper Other "is not" GoDeeper O <…>
manyIndentation/leaf?> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******* \ manyIndentation/leaf? has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
******* / WHERE                                                                                                   :3_1:Must:
WHERE> IN: Must GoDeeper Other "without undue delay <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected Must
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: Must GoDeeper Other "without undue delay <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper Other "without undue delay <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: Must GoDeeper Other "without undue delay <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper Other "without undue delay <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: Must GoDeeper Other "without undue delay <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper Other "without undue delay <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :3_1:Must:
preambleBoolStructR [Unless]> IN: Must GoDeeper Other "without undue delay <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected Must
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :3_1:Must:
preambleBoolStructR [When,If]> IN: Must GoDeeper Other "without undue delay <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=19:
preambleBoolStructR [When,If]> unexpected Must
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :3_1:Must:
pTemporal/eventually> IN: Must GoDeeper Other "without undue delay <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=19:
pTemporal/eventually> unexpected Must
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: Must GoDeeper Other "without undue delay <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected Must
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Must GoDeeper Other "without undue delay <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=19:
pTemporal/specifically> unexpected Must
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :3_1:Must:
pTemporal/vaguely> IN: Must GoDeeper Other "without undue delay <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=19:
pTemporal/vaguely> unexpected Must
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :3_1:Must:
******** / pAction calling dBoolStructP                                                                           :3_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :3_2:GoDeeper:
********** / expr pParamText                                                                                    :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "without undue delay" UnD <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=20:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "without undue delay" UnD <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "with:
**************** / manyIndentation/leaf?                                                                   :3_2:Other "with:
***************** / expression                                                                            :3_2:Other "with:
****************** / labelPrefix                                                                         :3_2:Other "with:
labelPrefix> IN: Other "without undue delay" UnDeeper Upo <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=22:
labelPrefix> unexpected UnDeeper

****************** / term p                                                                              :3_2:Other "with:
******************* / term p/notLabelTerm                                                               :3_2:Other "with:
******************** / term p/2:someIndentation expr p                                                 :3_2:Other "with:
********************* / someIndentation                                                               :3_2:Other "with:
********************** / myindented: consuming GoDeeper                                              :3_2:Other "with:
myindented: consuming GoDeeper> IN: Other "without undue delay" UnDeeper Upo <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=21:
myindented: consuming GoDeeper> unexpected Other "without undue delay"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "without undue delay" UnDeeper Upo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=21:
someIndentation> unexpected Other "without undue delay"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "without undue delay" UnDeeper Upo <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=21:
term p/2:someIndentation expr p> unexpected Other "without undue delay"
term p/2:someIndentation expr p> expecting GoDeeper

******************** / term p/3:plain p                                                                :3_2:Other "with:
********************* / pParamText                                                                    :3_2:Other "with:
********************** / pParamText(flat) first line: pKeyValues                                     :3_2:Other "with:
*********************** / pKeyValuesAka                                                             :3_2:Other "with:
************************ / slAKA                                                                   :3_2:Other "with:
************************* / $*|                                                                   :3_2:Other "with:
************************** / slAKA base                                                          :3_2:Other "with:
*************************** / slKeyValues                                                       :3_2:Other "with:
**************************** / $*|                                                             :3_2:Other "with:
***************************** / someSL                                                        :3_2:Other "with:
someSL> IN: Other "without undue delay" UnDeeper Upo <…>
someSL> MATCH (COK): Other "without undue delay"
someSL> VALUE: ((["without undue delay"],0),[])

***************************** \ someSL has returned (["without undue delay"],0)                :4_2:UnDeeper:
$*|> IN: Other "without undue delay" UnDeeper Upo <…>
$*|> MATCH (COK): Other "without undue delay"
$*|> VALUE: ((["without undue delay"],0),[])

**************************** \ $*| has returned (["without undue delay"],0)                     :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                         :4_2:UnDeeper:
***************************** / |?| optional something                                         :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************** / |>>/base                                                     :4_2:UnDeeper:
******************************* / slTypeSig                                                  :4_2:UnDeeper:
******************************** / $>|                                                      :4_2:UnDeeper:
$>|> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=22:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :4_2:UnDeeper:
***************************** > |>>/base got Nothing                                           :4_2:UnDeeper:
|>>/base> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                :4_2:UnDeeper:
slKeyValues> IN: Other "without undue delay" UnDeeper Upo <…>
slKeyValues> MATCH (COK): Other "without undue delay"
slKeyValues> VALUE: ((("without undue delay" :| [],Nothing),0),[])

*************************** \ slKeyValues has returned (("without undue delay" :| [],Nothing),0) :4_2:UnDeeper:
slAKA base> IN: Other "without undue delay" UnDeeper Upo <…>
slAKA base> MATCH (COK): Other "without undue delay"
slAKA base> VALUE: ((("without undue delay" :| [],Nothing),0),[])

************************** \ slAKA base has returned (("without undue delay" :| [],Nothing),0)    :4_2:UnDeeper:
$*|> IN: Other "without undue delay" UnDeeper Upo <…>
$*|> MATCH (COK): Other "without undue delay"
$*|> VALUE: ((("without undue delay" :| [],Nothing),0),[])

************************* \ $*| has returned (("without undue delay" :| [],Nothing),0)             :4_2:UnDeeper:
************************* / |>>/recurse                                                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                               :4_2:UnDeeper:
************************** / slAKA optional akapart                                               :4_2:UnDeeper:
*************************** / |?| optional something                                             :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                         :4_2:UnDeeper:
***************************** / PAKA/akapart                                                   :4_2:UnDeeper:
****************************** / $>|                                                          :4_2:UnDeeper:
******************************* / Aka Token                                                  :4_2:UnDeeper:
Aka Token> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :4_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :4_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :4_2:UnDeeper:
|>>/base> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :4_2:UnDeeper:
************************* / |>>/recurse                                                            :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                               :4_2:UnDeeper:
************************** / slAKA optional typically                                             :4_2:UnDeeper:
*************************** / |?| optional something                                             :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
|>>/recurse> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                         :4_2:UnDeeper:
***************************** / typically                                                      :4_2:UnDeeper:
****************************** / $>|                                                          :4_2:UnDeeper:
$>|> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :4_2:UnDeeper:
slAKA optional typically> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :4_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :4_2:UnDeeper:
|>>/base> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :4_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :4_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :4_2:UnDeeper:
slAKA> IN: Other "without undue delay" UnDeeper Upo <…>
slAKA> MATCH (COK): Other "without undue delay"
slAKA> VALUE: ((("without undue delay" :| [],Nothing),0),[])

************************ \ slAKA has returned (("without undue delay" :| [],Nothing),0)             :4_2:UnDeeper:
************************ / undeepers                                                                :4_2:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
************************* > sameLine: success!                                                     :4_2:UnDeeper:
undeepers> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                :4_2:UnDeeper:
pKeyValuesAka> IN: Other "without undue delay" UnDeeper Upo <…>
pKeyValuesAka> MATCH (COK): Other "without undue delay"
pKeyValuesAka> VALUE: (("without undue delay" :| [],Nothing),[])

*********************** \ pKeyValuesAka has returned ("without undue delay" :| [],Nothing)           :4_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "without undue delay" UnDeeper Upo <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "without undue delay"
pParamText(flat) first line: pKeyValues> VALUE: (("without undue delay" :| [],Nothing),[])

********************** \ pParamText(flat) first line: pKeyValues has returned ("without undue delay" :| [],Nothing) :4_2:UnDeeper:
********************** / pParamText(flat) subsequent lines: sameMany pKeyValues                       :4_2:UnDeeper:
*********************** / manyIndentation/leaf?                                                      :4_2:UnDeeper:
************************ / sameMany                                                                 :4_2:UnDeeper:
************************* / pKeyValuesAka                                                          :4_2:UnDeeper:
************************** / slAKA                                                                :4_2:UnDeeper:
*************************** / $*|                                                                :4_2:UnDeeper:
**************************** / slAKA base                                                       :4_2:UnDeeper:
***************************** / slKeyValues                                                    :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / someSL                                                     :4_2:UnDeeper:
******************************** / pNumAsText                                               :4_2:UnDeeper:
pNumAsText> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=22:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=22:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************ \ sameMany has returned []                                                 :4_2:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************** \ manyIndentation/leaf? has returned []                                      :4_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []       :4_2:UnDeeper:
pParamText> IN: Other "without undue delay" UnDeeper Upo <…>
pParamText> MATCH (COK): Other "without undue delay"
pParamText> VALUE: (("without undue delay" :| [],Nothing) :| [],[])

********************* \ pParamText has returned ("without undue delay" :| [],Nothing) :| []            :4_2:UnDeeper:
term p/3:plain p> IN: Other "without undue delay" UnDeeper Upo <…>
term p/3:plain p> MATCH (COK): Other "without undue delay"
term p/3:plain p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

******************** \ term p/3:plain p has returned MyLeaf (("without undue delay" :| [],Nothing) :| []) :4_2:UnDeeper:
term p/notLabelTerm> IN: Other "without undue delay" UnDeeper Upo <…>
term p/notLabelTerm> MATCH (COK): Other "without undue delay"
term p/notLabelTerm> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("without undue delay" :| [],Nothing) :| []) :4_2:UnDeeper:
term p> IN: Other "without undue delay" UnDeeper Upo <…>
term p> MATCH (COK): Other "without undue delay"
term p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])             :4_2:UnDeeper:
****************** / binary(Or)                                                                           :4_2:UnDeeper:
binary(Or)> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=22:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                          :4_2:UnDeeper:
binary(And)> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=22:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                      :4_2:UnDeeper:
binary(SetLess)> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=22:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                      :4_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=22:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "without undue delay" UnDeeper Upo <…>
expression> MATCH (COK): Other "without undue delay"
expression> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

***************** \ expression has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])           :4_2:UnDeeper:
manyIndentation/leaf?> IN: Other "without undue delay" UnDeeper Upo <…>
manyIndentation/leaf?> MATCH (COK): Other "without undue delay"
manyIndentation/leaf?> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])  :4_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Upon GoDeeper Other "becoming a <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Upon:
someIndentation> IN: GoDeeper Other "without undue delay" UnD <…>
someIndentation> MATCH (COK): GoDeeper Other "without undue delay" UnD <…>
someIndentation> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

*************** \ someIndentation has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])       :4_1:Upon:
term p/2:someIndentation expr p> IN: GoDeeper Other "without undue delay" UnD <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "without undue delay" UnD <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (("without undue delay" :| [],Nothing) :| []) :4_1:Upon:
term p/notLabelTerm> IN: GoDeeper Other "without undue delay" UnD <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "without undue delay" UnD <…>
term p/notLabelTerm> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

************* \ term p/notLabelTerm has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])       :4_1:Upon:
term p> IN: GoDeeper Other "without undue delay" UnD <…>
term p> MATCH (COK): GoDeeper Other "without undue delay" UnD <…>
term p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

************ \ term p has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])                      :4_1:Upon:
************ / binary(Or)                                                                                    :4_1:Upon:
binary(Or)> IN: Upon GoDeeper Other "becoming aware a da <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected Upon
binary(Or)> expecting Or

************ / binary(And)                                                                                   :4_1:Upon:
binary(And)> IN: Upon GoDeeper Other "becoming aware a da <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected Upon
binary(And)> expecting And

************ / binary(SetLess)                                                                               :4_1:Upon:
binary(SetLess)> IN: Upon GoDeeper Other "becoming aware a da <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected Upon
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                               :4_1:Upon:
binary(SetPlus)> IN: Upon GoDeeper Other "becoming aware a da <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected Upon
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "without undue delay" UnD <…>
expression> MATCH (COK): GoDeeper Other "without undue delay" UnD <…>
expression> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

*********** \ expression has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])                    :4_1:Upon:
expr pParamText> IN: GoDeeper Other "without undue delay" UnD <…>
expr pParamText> MATCH (COK): GoDeeper Other "without undue delay" UnD <…>
expr pParamText> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

********** \ expr pParamText has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])                 :4_1:Upon:
dBoolStructP calling exprP> IN: GoDeeper Other "without undue delay" UnD <…>
dBoolStructP calling exprP> MATCH (COK): GoDeeper Other "without undue delay" UnD <…>
dBoolStructP calling exprP> VALUE: (Leaf (("without undue delay" :| [],Nothing) :| []),[])

********* \ dBoolStructP calling exprP has returned Leaf (("without undue delay" :| [],Nothing) :| [])          :4_1:Upon:
pAction calling dBoolStructP> IN: GoDeeper Other "without undue delay" UnD <…>
pAction calling dBoolStructP> MATCH (COK): GoDeeper Other "without undue delay" UnD <…>
pAction calling dBoolStructP> VALUE: (Leaf (("without undue delay" :| [],Nothing) :| []),[])

******** \ pAction calling dBoolStructP has returned Leaf (("without undue delay" :| [],Nothing) :| [])          :4_1:Upon:
pDA> IN: Must GoDeeper Other "without undue delay <…>
pDA> MATCH (COK): Must GoDeeper Other "without undue delay <…>
pDA> VALUE: ((DMust,Leaf (("without undue delay" :| [],Nothing) :| [])),[])

******* \ pDA has returned (DMust,Leaf (("without undue delay" :| [],Nothing) :| []))                             :4_1:Upon:
******* / WHERE                                                                                                   :4_1:Upon:
WHERE> IN: Upon GoDeeper Other "becoming aware a da <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected Upon
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: Upon GoDeeper Other "becoming aware a da <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Upon
$>|> expecting Having

preambleParamText:[Having]> IN: Upon GoDeeper Other "becoming aware a da <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected Upon
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: Upon GoDeeper Other "becoming aware a da <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected Upon
$>|> expecting Given

preambleParamText:[Given]> IN: Upon GoDeeper Other "becoming aware a da <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected Upon
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: Upon GoDeeper Other "becoming aware a da <…>
$>|> MATCH (COK): Upon
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "beco:
|>>/recurse> IN: Other "becoming aware a data breach invo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected Other "becoming aware a data breach involving a client Organisation may have occurred"
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                            :4_2:Other "beco:
*********** / pParamText                                                                                        :4_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :4_2:Other "beco:
************* / pKeyValuesAka                                                                                 :4_2:Other "beco:
************** / slAKA                                                                                       :4_2:Other "beco:
*************** / $*|                                                                                       :4_2:Other "beco:
**************** / slAKA base                                                                              :4_2:Other "beco:
***************** / slKeyValues                                                                           :4_2:Other "beco:
****************** / $*|                                                                                 :4_2:Other "beco:
******************* / someSL                                                                            :4_2:Other "beco:
someSL> IN: Other "becoming aware a data breach invo <…>
someSL> MATCH (COK): Other "becoming aware a data breach invo <…>
someSL> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
$*|> IN: Other "becoming aware a data breach invo <…>
$*|> MATCH (COK): Other "becoming aware a data breach invo <…>
$*|> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / |?| optional something                                                             :5_2:UnDeeper:
******************** / |>>/recurse                                                                      :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                         :5_2:UnDeeper:
********************* / slTypeSig                                                                      :5_2:UnDeeper:
********************** / $>|                                                                          :5_2:UnDeeper:
$>|> IN: UnDeeper When GoDeeper Other "the data b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper When GoDeeper Other "the data b <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=26:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper When GoDeeper Other "the data b <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :5_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :5_2:UnDeeper:
|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :5_2:UnDeeper:
slKeyValues> IN: Other "becoming aware a data breach invo <…>
slKeyValues> MATCH (COK): Other "becoming aware a data breach invo <…>
slKeyValues> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
slAKA base> IN: Other "becoming aware a data breach invo <…>
slAKA base> MATCH (COK): Other "becoming aware a data breach invo <…>
slAKA base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
$*|> IN: Other "becoming aware a data breach invo <…>
$*|> MATCH (COK): Other "becoming aware a data breach invo <…>
$*|> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
Aka Token> IN: UnDeeper When GoDeeper Other "the data b <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=26:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper When GoDeeper Other "the data b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper When GoDeeper Other "the data b <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=26:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper When GoDeeper Other "the data b <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper When GoDeeper Other "the data b <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional typically                                                                 :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
$>|> IN: UnDeeper When GoDeeper Other "the data b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper When GoDeeper Other "the data b <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=26:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper When GoDeeper Other "the data b <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional typically> IN: UnDeeper When GoDeeper Other "the data b <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: UnDeeper When GoDeeper Other "the data b <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :5_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :5_2:UnDeeper:
slAKA> IN: Other "becoming aware a data breach invo <…>
slAKA> MATCH (COK): Other "becoming aware a data breach invo <…>
slAKA> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
************** / undeepers                                                                                    :5_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :5_2:UnDeeper:
*************** > sameLine: success!                                                                         :5_2:UnDeeper:
undeepers> IN: UnDeeper When GoDeeper Other "the data b <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :5_2:UnDeeper:
pKeyValuesAka> IN: Other "becoming aware a data breach invo <…>
pKeyValuesAka> MATCH (COK): Other "becoming aware a data breach invo <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "becoming aware a data breach invo <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "becoming aware a data breach invo <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :5_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :5_2:UnDeeper:
************** / sameMany                                                                                     :5_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :5_2:UnDeeper:
**************** / slAKA                                                                                    :5_2:UnDeeper:
***************** / $*|                                                                                    :5_2:UnDeeper:
****************** / slAKA base                                                                           :5_2:UnDeeper:
******************* / slKeyValues                                                                        :5_2:UnDeeper:
******************** / $*|                                                                              :5_2:UnDeeper:
********************* / someSL                                                                         :5_2:UnDeeper:
********************** / pNumAsText                                                                   :5_2:UnDeeper:
pNumAsText> IN: UnDeeper When GoDeeper Other "the data b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper When GoDeeper Other "the data b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper When GoDeeper Other "the data b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper When GoDeeper Other "the data b <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper When GoDeeper Other "the data b <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper When GoDeeper Other "the data b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper When GoDeeper Other "the data b <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper When GoDeeper Other "the data b <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper When GoDeeper Other "the data b <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :5_2:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper When GoDeeper Other "the data b <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :5_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper When GoDeeper Other "the data b <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :5_2:UnDeeper:
pParamText> IN: Other "becoming aware a data breach invo <…>
pParamText> MATCH (COK): Other "becoming aware a data breach invo <…>
pParamText> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
|>>/base> IN: Other "becoming aware a data breach invo <…>
|>>/base> MATCH (COK): Other "becoming aware a data breach invo <…>
|>>/base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0) :5_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "becoming aware a data br <…>
|>>/recurse> MATCH (COK): GoDeeper Other "becoming aware a data br <…>
|>>/recurse> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "becoming aware a data br <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "becoming aware a data br <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
******** / undeepers                                                                                                :5_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :5_2:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:When:
undeepers> IN: UnDeeper When GoDeeper Other "the data b <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:When:
preambleParamText:[Upon]> IN: Upon GoDeeper Other "becoming aware a da <…>
preambleParamText:[Upon]> MATCH (COK): Upon GoDeeper Other "becoming aware a da <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []) :5_1:When:
******* / preambleParamText:[Upon]                                                                                :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: When GoDeeper Other "the data breach occ <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected When
$>|> expecting Upon

preambleParamText:[Upon]> IN: When GoDeeper Other "the data breach occ <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected When
preambleParamText:[Upon]> expecting Upon

******* / WHERE                                                                                                   :5_1:When:
WHERE> IN: When GoDeeper Other "the data breach occ <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected When
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: When GoDeeper Other "the data breach occ <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected When
$>|> expecting Having

preambleParamText:[Having]> IN: When GoDeeper Other "the data breach occ <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected When
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: When GoDeeper Other "the data breach occ <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected When
$>|> expecting Given

preambleParamText:[Given]> IN: When GoDeeper Other "the data breach occ <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected When
preambleParamText:[Given]> expecting Given

******* / preambleBoolStructR [Unless]                                                                            :5_1:When:
preambleBoolStructR [Unless]> IN: When GoDeeper Other "the data breach occ <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=27:
preambleBoolStructR [Unless]> unexpected When
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :5_1:When:
******** / pBSR                                                                                                   :5_2:GoDeeper:
********* / ppp inner                                                                                            :5_2:GoDeeper:
********** / expression                                                                                         :5_2:GoDeeper:
*********** / labelPrefix                                                                                      :5_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "the data breach occurs o <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=28:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

*********** / term p                                                                                           :5_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :5_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :5_2:GoDeeper:
************** / someIndentation                                                                            :5_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the data breach occurs o <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :5_2:Other "the:
*************** / manyIndentation/leaf?                                                                     :5_2:Other "the:
**************** / expression                                                                              :5_2:Other "the:
***************** / labelPrefix                                                                           :5_2:Other "the:
labelPrefix> IN: Other "the data breach occurs on or afte <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=30:
labelPrefix> unexpected UnDeeper

***************** / term p                                                                                :5_2:Other "the:
****************** / term p/notLabelTerm                                                                 :5_2:Other "the:
******************* / term p/2:someIndentation expr p                                                   :5_2:Other "the:
******************** / someIndentation                                                                 :5_2:Other "the:
********************* / myindented: consuming GoDeeper                                                :5_2:Other "the:
myindented: consuming GoDeeper> IN: Other "the data breach occurs on or afte <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=29:
myindented: consuming GoDeeper> unexpected Other "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "the data breach occurs on or afte <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=29:
someIndentation> unexpected Other "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "the data breach occurs on or afte <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=29:
term p/2:someIndentation expr p> unexpected Other "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
term p/2:someIndentation expr p> expecting GoDeeper

******************* / term p/3:plain p                                                                  :5_2:Other "the:
******************** / pRelPred                                                                        :5_2:Other "the:
********************* / slRelPred                                                                     :5_2:Other "the:
********************** / nested simpleHorn                                                           :5_2:Other "the:
*********************** > |^|                                                                       :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: Other "the data breach occurs on or afte <…>
someSL> MATCH (COK): Other "the data breach occurs on or afte <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "the data breach occurs on or afte <…>
slMultiTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |^| deeps                                                                  :6_2:UnDeeper:
|^| deeps> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|^| deeps> MATCH (COK): UnDeeper
|^| deeps> VALUE: (([()],-1),[])

*********************** \ |^| deeps has returned ([()],-1)                                        :6_1:Do:
nested simpleHorn> IN: Other "the data breach occurs on or afte <…>
nested simpleHorn> MATCH (CERR): Other "the data breach occurs on or afte <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting Means or UnDeeper

********************** / RPConstraint                                                                :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: Other "the data breach occurs on or afte <…>
someSL> MATCH (COK): Other "the data breach occurs on or afte <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "the data breach occurs on or afte <…>
slMultiTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |>| calling $>>                                                            :6_2:UnDeeper:
************************ / |>>/recurse                                                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************ / |>>/base                                                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "the data breach occurs on or afte <…>
RPConstraint> MATCH (CERR): Other "the data breach occurs on or afte <…>
RPConstraint> ERROR:
RPConstraint> offset=30:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************** / RPBoolStructR                                                               :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: Other "the data breach occurs on or afte <…>
someSL> MATCH (COK): Other "the data breach occurs on or afte <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "the data breach occurs on or afte <…>
slMultiTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |>| calling $>>                                                            :6_2:UnDeeper:
************************ / |>>/recurse                                                              :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************ / |>>/base                                                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "the data breach occurs on or afte <…>
RPBoolStructR> MATCH (CERR): Other "the data breach occurs on or afte <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=30:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********************** / RPMT                                                                        :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slAKA                                                                   :5_2:Other "the:
************************* / $*|                                                                   :5_2:Other "the:
************************** / slAKA base                                                          :5_2:Other "the:
*************************** / slMultiTerm                                                       :5_2:Other "the:
**************************** / someSL                                                          :5_2:Other "the:
someSL> IN: Other "the data breach occurs on or afte <…>
someSL> MATCH (COK): Other "the data breach occurs on or afte <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

**************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: Other "the data breach occurs on or afte <…>
slMultiTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*************************** \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slAKA base> IN: Other "the data breach occurs on or afte <…>
slAKA base> MATCH (COK): Other "the data breach occurs on or afte <…>
slAKA base> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ slAKA base has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                               :6_2:UnDeeper:
************************** / slAKA optional akapart                                               :6_2:UnDeeper:
*************************** / |?| optional something                                             :6_2:UnDeeper:
**************************** / |>>/recurse                                                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                         :6_2:UnDeeper:
***************************** / PAKA/akapart                                                   :6_2:UnDeeper:
****************************** / $>|                                                          :6_2:UnDeeper:
******************************* / Aka Token                                                  :6_2:UnDeeper:
Aka Token> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=30:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=30:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :6_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :6_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************* / |>>/base                                                               :6_2:UnDeeper:
************************** / slAKA optional typically                                             :6_2:UnDeeper:
*************************** / |?| optional something                                             :6_2:UnDeeper:
**************************** / |>>/recurse                                                      :6_2:UnDeeper:
|>>/recurse> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************** / |>>/base                                                         :6_2:UnDeeper:
***************************** / typically                                                      :6_2:UnDeeper:
****************************** / $>|                                                          :6_2:UnDeeper:
$>|> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=30:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :6_2:UnDeeper:
slAKA optional typically> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :6_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :6_2:UnDeeper:
|>>/base> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :6_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :6_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :6_2:UnDeeper:
slAKA> IN: Other "the data breach occurs on or afte <…>
slAKA> MATCH (COK): Other "the data breach occurs on or afte <…>
slAKA> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slAKA has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: Other "the data breach occurs on or afte <…>
$*|> MATCH (COK): Other "the data breach occurs on or afte <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
RPMT> IN: Other "the data breach occurs on or afte <…>
RPMT> MATCH (COK): Other "the data breach occurs on or afte <…>
RPMT> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************** \ RPMT has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slRelPred> IN: Other "the data breach occurs on or afte <…>
slRelPred> MATCH (COK): Other "the data breach occurs on or afte <…>
slRelPred> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ slRelPred has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
********************* / undeepers                                                                      :6_2:UnDeeper:
********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :6_2:UnDeeper:
********************** > sameLine: success!                                                           :6_2:UnDeeper:
undeepers> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************* \ undeepers has returned ()                                                      :6_2:UnDeeper:
pRelPred> IN: Other "the data breach occurs on or afte <…>
pRelPred> MATCH (COK): Other "the data breach occurs on or afte <…>
pRelPred> VALUE: (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],[])

******************** \ pRelPred has returned RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"] :6_2:UnDeeper:
term p/3:plain p> IN: Other "the data breach occurs on or afte <…>
term p/3:plain p> MATCH (COK): Other "the data breach occurs on or afte <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************* \ term p/3:plain p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: Other "the data breach occurs on or afte <…>
term p/notLabelTerm> MATCH (COK): Other "the data breach occurs on or afte <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
term p> IN: Other "the data breach occurs on or afte <…>
term p> MATCH (COK): Other "the data breach occurs on or afte <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

***************** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
***************** / binary(Or)                                                                             :6_2:UnDeeper:
binary(Or)> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

***************** / binary(And)                                                                            :6_2:UnDeeper:
binary(And)> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

***************** / binary(SetLess)                                                                        :6_2:UnDeeper:
binary(SetLess)> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

***************** / binary(SetPlus)                                                                        :6_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the data breach occurs on or afte <…>
expression> MATCH (COK): Other "the data breach occurs on or afte <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

**************** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: Other "the data breach occurs on or afte <…>
manyIndentation/leaf?> MATCH (COK): Other "the data breach occurs on or afte <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Do GoDeeper Other "NOTIFY" GoDe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :6_1:Do:
someIndentation> IN: GoDeeper Other "the data breach occurs o <…>
someIndentation> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
someIndentation> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/2:someIndentation expr p> IN: GoDeeper Other "the data breach occurs o <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/notLabelTerm> IN: GoDeeper Other "the data breach occurs o <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p> IN: GoDeeper Other "the data breach occurs o <…>
term p> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*********** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
*********** / binary(Or)                                                                                      :6_1:Do:
binary(Or)> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected Do
binary(Or)> expecting Or

*********** / binary(And)                                                                                     :6_1:Do:
binary(And)> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected Do
binary(And)> expecting And

*********** / binary(SetLess)                                                                                 :6_1:Do:
binary(SetLess)> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected Do
binary(SetLess)> expecting SetLess

*********** / binary(SetPlus)                                                                                 :6_1:Do:
binary(SetPlus)> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected Do
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "the data breach occurs o <…>
expression> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
ppp inner> IN: GoDeeper Other "the data breach occurs o <…>
ppp inner> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
ppp inner> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********* \ ppp inner has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
pBSR> IN: GoDeeper Other "the data breach occurs o <…>
pBSR> MATCH (COK): GoDeeper Other "the data breach occurs o <…>
pBSR> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******** \ pBSR has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
preambleBoolStructR [When,If]> IN: When GoDeeper Other "the data breach occ <…>
preambleBoolStructR [When,If]> MATCH (COK): When GoDeeper Other "the data breach occ <…>
preambleBoolStructR [When,If]> VALUE: ((When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])),[])

******* \ preambleBoolStructR [When,If] has returned (When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :6_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :6_1:Do:
preambleBoolStructR [When,If]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=31:
preambleBoolStructR [When,If]> unexpected Do
preambleBoolStructR [When,If]> expecting If or When

******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=31:
WHERE> unexpected Do
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=31:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

******* / preambleBoolStructR [Unless]                                                                            :6_1:Do:
preambleBoolStructR [Unless]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=31:
preambleBoolStructR [Unless]> unexpected Do
preambleBoolStructR [Unless]> expecting Unless

******* / pTemporal/eventually                                                                                    :6_1:Do:
pTemporal/eventually> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=31:
pTemporal/eventually> unexpected Do
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=31:
pTemporal/specifically> unexpected Do
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :6_1:Do:
pTemporal/vaguely> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=31:
pTemporal/vaguely> unexpected Do
pTemporal/vaguely> expecting Other text

regulative permutation with deontic-action> IN: Every GoDeeper Other "Data Intermediary" <…>
regulative permutation with deontic-action> MATCH (COK): Every GoDeeper Other "Data Intermediary" <…>
regulative permutation with deontic-action> VALUE: (RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []} :6_1:Do:
permutationsReg> IN: Every GoDeeper Other "Data Intermediary" <…>
permutationsReg> MATCH (COK): Every GoDeeper Other "Data Intermediary" <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []} :6_1:Do:
***** / pHenceLest-Hence                                                                                            :6_1:Do:
pHenceLest-Hence> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHenceLest-Hence> MATCH (EERR): <EMPTY>
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=31:
pHenceLest-Hence> unexpected Do
pHenceLest-Hence> expecting Hence

***** / pHenceLest-Lest                                                                                             :6_1:Do:
pHenceLest-Lest> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHenceLest-Lest> MATCH (EERR): <EMPTY>
pHenceLest-Lest> ERROR:
pHenceLest-Lest> offset=31:
pHenceLest-Lest> unexpected Do
pHenceLest-Lest> expecting Lest

****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []} :6_1:Do:
****   pRegRuleNormal: the positive preamble is Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :6_1:Do:
****   pRegRuleNormal: the negative preamble is Nothing                                                             :6_1:Do:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :6_1:Do:
pRegRuleNormal> IN: Every GoDeeper Other "Data Intermediary" <…>
pRegRuleNormal> MATCH (COK): Every GoDeeper Other "Data Intermediary" <…>
pRegRuleNormal> VALUE: (Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :6_1:Do:
pRegRule> IN: Every GoDeeper Other "Data Intermediary" <…>
pRegRule> MATCH (COK): Every GoDeeper Other "Data Intermediary" <…>
pRegRule> VALUE: (Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*** \ pRegRule has returned Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :6_1:Do:
pRule> IN: Every GoDeeper Other "Data Intermediary" <…>
pRule> MATCH (COK): Every GoDeeper Other "Data Intermediary" <…>
pRule> VALUE: (Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

** \ pRule has returned Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :6_1:Do:
** / pRule                                                                                                             :6_1:Do:
*** / pRegRule                                                                                                        :6_1:Do:
**** / pRuleLabel                                                                                                    :6_1:Do:
***** / $>|                                                                                                         :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected Do
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :6_1:Do:
***** / someDeep                                                                                                    :6_1:Do:
****** / someDeep first part calls base directly                                                                   :6_1:Do:
someDeep first part calls base directly> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=31:
someDeep first part calls base directly> unexpected Do
someDeep first part calls base directly> expecting Other text

someDeep> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=31:
someDeep> unexpected Do
someDeep> expecting Other text

pRegRuleSugary> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=31:
pRegRuleSugary> unexpected Do
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :6_1:Do:
***** / permutationsReg                                                                                             :6_1:Do:
****** / regulative permutation with deontic-temporal                                                              :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=31:
WHERE> unexpected Do
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=31:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :6_1:Do:
preambleBoolStructR [Unless]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=31:
preambleBoolStructR [Unless]> unexpected Do
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :6_1:Do:
preambleBoolStructR [When,If]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=31:
preambleBoolStructR [When,If]> unexpected Do
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting May, Must, or Shant

pDT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=31:
pDT> unexpected Do
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :6_1:Do:
pActor [Every,Party,TokAll]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=31:
pActor [Every,Party,TokAll]> unexpected Do
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pDoAction/Do> MATCH (COK): Do
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / expression                                                                                       :6_2:GoDeeper:
************ / labelPrefix                                                                                    :6_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=32:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :6_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :6_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :6_2:GoDeeper:
*************** / someIndentation                                                                          :6_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :6_2:Other "NOTI:
**************** / manyIndentation/leaf?                                                                   :6_2:Other "NOTI:
***************** / expression                                                                            :6_2:Other "NOTI:
****************** / labelPrefix                                                                         :6_2:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "the Organ <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

****************** \ labelPrefix has returned "NOTIFY"                                                    :6_3:GoDeeper:
****************** / term p                                                                               :6_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :6_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :6_3:GoDeeper:
********************* / someIndentation                                                                :6_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the Organisation" UnDeep <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :6_3:Other "the:
********************** / manyIndentation/leaf?                                                         :6_3:Other "the:
*********************** / expression                                                                  :6_3:Other "the:
************************ / labelPrefix                                                               :6_3:Other "the:
labelPrefix> IN: Other "the Organisation" UnDeeper Other  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=36:
labelPrefix> unexpected UnDeeper

************************ / term p                                                                    :6_3:Other "the:
************************* / term p/notLabelTerm                                                     :6_3:Other "the:
************************** / term p/2:someIndentation expr p                                       :6_3:Other "the:
*************************** / someIndentation                                                     :6_3:Other "the:
**************************** / myindented: consuming GoDeeper                                    :6_3:Other "the:
myindented: consuming GoDeeper> IN: Other "the Organisation" UnDeeper Other  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=35:
myindented: consuming GoDeeper> unexpected Other "the Organisation"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "the Organisation" UnDeeper Other  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=35:
someIndentation> unexpected Other "the Organisation"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "the Organisation" UnDeeper Other  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=35:
term p/2:someIndentation expr p> unexpected Other "the Organisation"
term p/2:someIndentation expr p> expecting GoDeeper

************************** / term p/3:plain p                                                      :6_3:Other "the:
*************************** / pParamText                                                          :6_3:Other "the:
**************************** / pParamText(flat) first line: pKeyValues                           :6_3:Other "the:
***************************** / pKeyValuesAka                                                   :6_3:Other "the:
****************************** / slAKA                                                         :6_3:Other "the:
******************************* / $*|                                                         :6_3:Other "the:
******************************** / slAKA base                                                :6_3:Other "the:
********************************* / slKeyValues                                             :6_3:Other "the:
********************************** / $*|                                                   :6_3:Other "the:
*********************************** / someSL                                              :6_3:Other "the:
someSL> IN: Other "the Organisation" UnDeeper Other  <…>
someSL> MATCH (COK): Other "the Organisation"
someSL> VALUE: ((["the Organisation"],0),[])

*********************************** \ someSL has returned (["the Organisation"],0)         :7_3:UnDeeper:
$*|> IN: Other "the Organisation" UnDeeper Other  <…>
$*|> MATCH (COK): Other "the Organisation"
$*|> VALUE: ((["the Organisation"],0),[])

********************************** \ $*| has returned (["the Organisation"],0)              :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / |?| optional something                               :7_3:UnDeeper:
************************************ / |>>/recurse                                        :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                           :7_3:UnDeeper:
************************************* / slTypeSig                                        :7_3:UnDeeper:
************************************** / $>|                                            :7_3:UnDeeper:
$>|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=36:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :7_3:UnDeeper:
*********************************** > |>>/base got Nothing                                 :7_3:UnDeeper:
|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                      :7_3:UnDeeper:
slKeyValues> IN: Other "the Organisation" UnDeeper Other  <…>
slKeyValues> MATCH (COK): Other "the Organisation"
slKeyValues> VALUE: ((("the Organisation" :| [],Nothing),0),[])

********************************* \ slKeyValues has returned (("the Organisation" :| [],Nothing),0) :7_3:UnDeeper:
slAKA base> IN: Other "the Organisation" UnDeeper Other  <…>
slAKA base> MATCH (COK): Other "the Organisation"
slAKA base> VALUE: ((("the Organisation" :| [],Nothing),0),[])

******************************** \ slAKA base has returned (("the Organisation" :| [],Nothing),0) :7_3:UnDeeper:
$*|> IN: Other "the Organisation" UnDeeper Other  <…>
$*|> MATCH (COK): Other "the Organisation"
$*|> VALUE: ((("the Organisation" :| [],Nothing),0),[])

******************************* \ $*| has returned (("the Organisation" :| [],Nothing),0)      :7_3:UnDeeper:
******************************* / |>>/recurse                                                  :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                     :7_3:UnDeeper:
******************************** / slAKA optional akapart                                     :7_3:UnDeeper:
********************************* / |?| optional something                                   :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / PAKA/akapart                                         :7_3:UnDeeper:
************************************ / $>|                                                :7_3:UnDeeper:
************************************* / Aka Token                                        :7_3:UnDeeper:
Aka Token> IN: UnDeeper Other "for which" GoDeeper Othe <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=36:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "for which" GoDeeper Othe <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=36:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :7_3:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)            :7_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :7_3:UnDeeper:
|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :7_3:UnDeeper:
******************************* / |>>/recurse                                                  :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                     :7_3:UnDeeper:
******************************** / slAKA optional typically                                   :7_3:UnDeeper:
********************************* / |?| optional something                                   :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / typically                                            :7_3:UnDeeper:
************************************ / $>|                                                :7_3:UnDeeper:
$>|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "for which" GoDeeper Othe <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=36:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :7_3:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)          :7_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :7_3:UnDeeper:
|>>/base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :7_3:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_3:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                  :7_3:UnDeeper:
slAKA> IN: Other "the Organisation" UnDeeper Other  <…>
slAKA> MATCH (COK): Other "the Organisation"
slAKA> VALUE: ((("the Organisation" :| [],Nothing),0),[])

****************************** \ slAKA has returned (("the Organisation" :| [],Nothing),0)      :7_3:UnDeeper:
****************************** / undeepers                                                      :7_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_3:UnDeeper:
******************************* > sameLine: success!                                           :7_3:UnDeeper:
undeepers> IN: UnDeeper Other "for which" GoDeeper Othe <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :7_3:UnDeeper:
pKeyValuesAka> IN: Other "the Organisation" UnDeeper Other  <…>
pKeyValuesAka> MATCH (COK): Other "the Organisation"
pKeyValuesAka> VALUE: (("the Organisation" :| [],Nothing),[])

***************************** \ pKeyValuesAka has returned ("the Organisation" :| [],Nothing)    :7_3:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "the Organisation" UnDeeper Other  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "the Organisation"
pParamText(flat) first line: pKeyValues> VALUE: (("the Organisation" :| [],Nothing),[])

**************************** \ pParamText(flat) first line: pKeyValues has returned ("the Organisation" :| [],Nothing) :7_3:UnDeeper:
**************************** / pParamText(flat) subsequent lines: sameMany pKeyValues             :7_3:UnDeeper:
***************************** / manyIndentation/leaf?                                            :7_3:UnDeeper:
****************************** / sameMany                                                       :7_3:UnDeeper:
******************************* / pKeyValuesAka                                                :7_3:UnDeeper:
******************************** / slAKA                                                      :7_3:UnDeeper:
********************************* / $*|                                                      :7_3:UnDeeper:
********************************** / slAKA base                                             :7_3:UnDeeper:
*********************************** / slKeyValues                                          :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: UnDeeper Other "for which" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=36:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "for which" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=36:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=36:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=36:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "for which" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "for which" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=36:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "for which" GoDeeper Othe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=36:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "for which" GoDeeper Othe <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

****************************** \ sameMany has returned []                                       :7_3:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "for which" GoDeeper Othe <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

***************************** \ manyIndentation/leaf? has returned []                            :7_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "for which" GoDeeper Othe <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

**************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_3:UnDeeper:
pParamText> IN: Other "the Organisation" UnDeeper Other  <…>
pParamText> MATCH (COK): Other "the Organisation"
pParamText> VALUE: (("the Organisation" :| [],Nothing) :| [],[])

*************************** \ pParamText has returned ("the Organisation" :| [],Nothing) :| []     :7_3:UnDeeper:
term p/3:plain p> IN: Other "the Organisation" UnDeeper Other  <…>
term p/3:plain p> MATCH (COK): Other "the Organisation"
term p/3:plain p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************** \ term p/3:plain p has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
term p/notLabelTerm> IN: Other "the Organisation" UnDeeper Other  <…>
term p/notLabelTerm> MATCH (COK): Other "the Organisation"
term p/notLabelTerm> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
term p> IN: Other "the Organisation" UnDeeper Other  <…>
term p> MATCH (COK): Other "the Organisation"
term p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])      :7_3:UnDeeper:
************************ / binary(Or)                                                                 :7_3:UnDeeper:
binary(Or)> IN: UnDeeper Other "for which" GoDeeper Othe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                                :7_3:UnDeeper:
binary(And)> IN: UnDeeper Other "for which" GoDeeper Othe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                            :7_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "for which" GoDeeper Othe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                            :7_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "for which" GoDeeper Othe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the Organisation" UnDeeper Other  <…>
expression> MATCH (COK): Other "the Organisation"
expression> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

*********************** \ expression has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])    :7_3:UnDeeper:
manyIndentation/leaf?> IN: Other "the Organisation" UnDeeper Other  <…>
manyIndentation/leaf?> MATCH (COK): Other "the Organisation"
manyIndentation/leaf?> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :7_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "for which" GoDeeper Othe <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :7_2:Other "for:
someIndentation> IN: GoDeeper Other "the Organisation" UnDeep <…>
someIndentation> MATCH (COK): GoDeeper Other "the Organisation" UnDeep <…>
someIndentation> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

********************* \ someIndentation has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p/2:someIndentation expr p> IN: GoDeeper Other "the Organisation" UnDeep <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the Organisation" UnDeep <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p/notLabelTerm> IN: GoDeeper Other "the Organisation" UnDeep <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the Organisation" UnDeep <…>
term p/notLabelTerm> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p> IN: GoDeeper Other "the Organisation" UnDeep <…>
term p> MATCH (COK): GoDeeper Other "the Organisation" UnDeep <…>
term p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])               :7_2:Other "for:
****************** / binary(Or)                                                                          :7_2:Other "for:
binary(Or)> IN: Other "for which" GoDeeper Other "you ac <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=37:
binary(Or)> unexpected Other "for which"
binary(Or)> expecting Or

****************** / binary(And)                                                                         :7_2:Other "for:
binary(And)> IN: Other "for which" GoDeeper Other "you ac <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=37:
binary(And)> unexpected Other "for which"
binary(And)> expecting And

****************** / binary(SetLess)                                                                     :7_2:Other "for:
binary(SetLess)> IN: Other "for which" GoDeeper Other "you ac <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=37:
binary(SetLess)> unexpected Other "for which"
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                     :7_2:Other "for:
binary(SetPlus)> IN: Other "for which" GoDeeper Other "you ac <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=37:
binary(SetPlus)> unexpected Other "for which"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "the Organ <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "the Organ <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])),[])

***************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])) :7_2:Other "for:
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "the Organ <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "the Organ <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])) :7_2:Other "for:
**************** / myindented: consuming UnDeeper                                                          :7_2:Other "for:
myindented: consuming UnDeeper> IN: Other "for which" GoDeeper Other "you ac <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=37:
myindented: consuming UnDeeper> unexpected Other "for which"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=37:
someIndentation> unexpected Other "for which"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p/2:someIndentation expr p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=37:
term p/2:someIndentation expr p> unexpected Other "for which"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, or UnDeeper

************** / term p/3:plain p                                                                           :6_2:GoDeeper:
*************** / pParamText                                                                               :6_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :6_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :6_2:GoDeeper:
****************** / slAKA                                                                              :6_2:GoDeeper:
******************* / $*|                                                                              :6_2:GoDeeper:
******************** / slAKA base                                                                     :6_2:GoDeeper:
********************* / slKeyValues                                                                  :6_2:GoDeeper:
********************** / $*|                                                                        :6_2:GoDeeper:
*********************** / someSL                                                                   :6_2:GoDeeper:
************************ / pNumAsText                                                             :6_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=32:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=32:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=32:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=32:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=32:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=32:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=32:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=37:
term p/notLabelTerm> unexpected Other "for which"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=37:
term p> unexpected Other "for which"
term p> expecting And, Or, SetLess, SetPlus, or UnDeeper

expression> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=37:
expression> unexpected Other "for which"
expression> expecting expression

expr pParamText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=37:
expr pParamText> unexpected Other "for which"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=37:
dBoolStructP calling exprP> unexpected Other "for which"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=37:
pAction calling dBoolStructP> unexpected Other "for which"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=37:
pDoAction/pAction> unexpected Other "for which"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
regulative permutation with deontic-temporal> MATCH (CERR): Do
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=37:
regulative permutation with deontic-temporal> unexpected Other "for which"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=31:
WHERE> unexpected Do
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=31:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :6_1:Do:
preambleBoolStructR [Unless]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=31:
preambleBoolStructR [Unless]> unexpected Do
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :6_1:Do:
preambleBoolStructR [When,If]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=31:
preambleBoolStructR [When,If]> unexpected Do
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :6_1:Do:
pTemporal/eventually> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=31:
pTemporal/eventually> unexpected Do
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=31:
pTemporal/specifically> unexpected Do
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :6_1:Do:
pTemporal/vaguely> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=31:
pTemporal/vaguely> unexpected Do
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :6_1:Do:
pActor [Every,Party,TokAll]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=31:
pActor [Every,Party,TokAll]> unexpected Do
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDA                                                                                                     :6_1:Do:
pDA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=31:
pDA> unexpected Do
pDA> expecting May, Must, or Shant

regulative permutation with deontic-action> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=31:
regulative permutation with deontic-action> unexpected Do
regulative permutation with deontic-action> expecting After, Before, By, Eventually, Every, Given, Having, If, May, Must, On, Other text, Party, Shant, TokAll, Unless, Upon, When, or Where

permutationsReg> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=37:
permutationsReg> unexpected Other "for which"
permutationsReg> expecting expression

pRegRuleNormal> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=37:
pRegRuleNormal> unexpected Other "for which"
pRegRuleNormal> expecting expression

pRegRule> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=37:
pRegRule> unexpected Other "for which"
pRegRule> expecting RuleMarker 1 "\167" or expression

*** / pTypeDefinition                                                                                                 :6_1:Do:
**** / pRuleLabel                                                                                                    :6_1:Do:
***** / $>|                                                                                                         :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected Do
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pHornlike/uponLimb                                                                                            :6_1:Do:
***** / preambleParamText:[Upon]                                                                                    :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=31:
pHornlike/uponLimb> unexpected Do
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :6_1:Do:
***** / preambleParamText:[Given]                                                                                   :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=31:
pHornlike/givenLimb> unexpected Do
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=31:
pTypeDefinition> unexpected Do
pTypeDefinition> expecting Define, Given, RuleMarker 1 "\167", or Upon

*** / pConstitutiveRule                                                                                               :6_1:Do:
**** / pRuleLabel                                                                                                    :6_1:Do:
***** / $>|                                                                                                         :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected Do
pRuleLabel> expecting RuleMarker 1 "\167"

**** / calling myindented pNameParens                                                                                :6_1:Do:
***** / manyIndentation/leaf?                                                                                       :6_1:Do:
****** / pMultiTermAka                                                                                             :6_1:Do:
******* / pAKA                                                                                                    :6_1:Do:
******** / slAKA                                                                                                 :6_1:Do:
********* / $*|                                                                                                 :6_1:Do:
********** / slAKA base                                                                                        :6_1:Do:
*********** / slMultiTerm                                                                                     :6_1:Do:
************ / someSL                                                                                        :6_1:Do:
************* / pNumAsText                                                                                  :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

pAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=31:
pAKA> unexpected Do
pAKA> expecting other text or number

pMultiTermAka> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=31:
pMultiTermAka> unexpected Do
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected Do
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :6_1:Do:
****** / someIndentation                                                                                           :6_1:Do:
******* / myindented: consuming GoDeeper                                                                          :6_1:Do:
myindented: consuming GoDeeper> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected Do
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected Do
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected Do
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=31:
calling myindented pNameParens> unexpected Do
calling myindented pNameParens> expecting GoDeeper or other text or number

pConstitutiveRule> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=31:
pConstitutiveRule> unexpected Do
pConstitutiveRule> expecting GoDeeper, RuleMarker 1 "\167", or other text or number

*** / pScenarioRule                                                                                                   :6_1:Do:
**** / pRuleLabel                                                                                                    :6_1:Do:
***** / $>|                                                                                                         :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected Do
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pExpect                                                                                                       :6_1:Do:
pExpect> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=31:
pExpect> unexpected Do
pExpect> expecting Expect

pScenarioRule> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=31:
pScenarioRule> unexpected Do
pScenarioRule> expecting Expect, Given, or RuleMarker 1 "\167"

*** / pHornlike                                                                                                       :6_1:Do:
**** / pSrcRef                                                                                                       :6_1:Do:
***** / pRuleLabel                                                                                                  :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected Do
pRuleLabel> expecting RuleMarker 1 "\167"

pSrcRef> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 6, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 6, version = Nothing})) :6_1:Do:
**** / pHornlike / permute                                                                                           :6_1:Do:
***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected Do
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected Do
Otherwise> expecting Otherwise

whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected Do
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :6_1:Do:
****** / preambleParamText:[Upon]                                                                                  :6_1:Do:
******* / $>|                                                                                                     :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=31:
pHornlike/uponLimb> unexpected Do
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected Do
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected Do
Otherwise> expecting Otherwise

whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected Do
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/givenLimb                                                                                         :6_1:Do:
****** / preambleParamText:[Given]                                                                                 :6_1:Do:
******* / $>|                                                                                                     :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=31:
pHornlike/givenLimb> unexpected Do
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected Do
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected Do
Otherwise> expecting Otherwise

whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected Do
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected Do
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

pRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected Do
pRelPred> expecting other text or number

optIndented> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected Do
optIndented> expecting other text or number

optIndentedTuple> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected Do
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected Do
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected Do
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

relPredSamelineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected Do
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected Do
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected Do
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected Do
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected Do
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected Do
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected Do
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

pRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected Do
pRelPred> expecting other text or number

optIndented> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected Do
optIndented> expecting other text or number

optIndentedTuple> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected Do
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected Do
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected Do
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

relPredSamelineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected Do
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected Do
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected Do
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected Do
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected Do
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected Do
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/givenLimb                                                                                         :6_1:Do:
****** / preambleParamText:[Given]                                                                                 :6_1:Do:
******* / $>|                                                                                                     :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=31:
pHornlike/givenLimb> unexpected Do
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected Do
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected Do
Otherwise> expecting Otherwise

whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected Do
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :6_1:Do:
****** / preambleParamText:[Upon]                                                                                  :6_1:Do:
******* / $>|                                                                                                     :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=31:
pHornlike/uponLimb> unexpected Do
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected Do
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected Do
Otherwise> expecting Otherwise

whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected Do
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected Do
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

pRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected Do
pRelPred> expecting other text or number

optIndented> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected Do
optIndented> expecting other text or number

optIndentedTuple> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected Do
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected Do
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected Do
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

relPredSamelineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected Do
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected Do
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected Do
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected Do
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected Do
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected Do
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected Do
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

pRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected Do
pRelPred> expecting other text or number

optIndented> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected Do
optIndented> expecting other text or number

optIndentedTuple> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected Do
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected Do
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected Do
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

relPredSamelineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected Do
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected Do
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected Do
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected Do
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected Do
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected Do
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected Do
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

pRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected Do
pRelPred> expecting other text or number

optIndented> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected Do
optIndented> expecting other text or number

optIndentedTuple> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected Do
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected Do
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected Do
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

nested simpleHorn> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPConstraint> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected Do
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPBoolStructR> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected Do
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected Do
pNumAsText> expecting number

someSL> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected Do
someSL> expecting other text or number

slMultiTerm> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected Do
slMultiTerm> expecting other text or number

slAKA base> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected Do
slAKA base> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

slAKA> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected Do
slAKA> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

RPMT> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected Do
RPMT> expecting other text or number

slRelPred> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected Do
slRelPred> expecting other text or number

$*|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected Do
$*|> expecting other text or number

relPredSamelineWhen> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected Do
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected Do
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected Do
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected Do
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected Do
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected Do
pHornlike/someStructure> expecting Decide, Define, GoDeeper, or other text or number

pHornlike / permute> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=31:
pHornlike / permute> unexpected Do
pHornlike / permute> expecting Decide, Define, Given, GoDeeper, If, Means, Otherwise, Upon, When, or other text or number

pHornlike> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=31:
pHornlike> unexpected Do
pHornlike> expecting Decide, Define, Given, GoDeeper, If, Means, Otherwise, RuleMarker 1 "\167", Upon, When, or other text or number

*** / pRuleLabel                                                                                                      :6_1:Do:
**** / $>|                                                                                                           :6_1:Do:
$>|> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected Do
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected Do
pRuleLabel> expecting RuleMarker 1 "\167"

*** / pRule: unwrapping indentation and recursing                                                                     :6_1:Do:
**** / myindented: consuming GoDeeper                                                                                :6_1:Do:
myindented: consuming GoDeeper> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected Do
myindented: consuming GoDeeper> expecting GoDeeper

pRule: unwrapping indentation and recursing> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=31:
pRule: unwrapping indentation and recursing> unexpected Do
pRule: unwrapping indentation and recursing> expecting GoDeeper

pRule> IN: Do GoDeeper Other "NOTIFY" GoDeeper Othe <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=37:
pRule> unexpected Other "for which"
pRule> expecting EOL or regulative rule


PDPA
  pdpadbno-2 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-2
       expected: [[Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("NOTIFY" :| ["the Organisation"],Nothing) :| [("for which" :| ["you act as a Data Intermediary"],Nothing)]), temporal = Just (TemporalConstraint TVague (Just 0) "without undue delay"), hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}]]
       but parsing failed with error:
       6:1:
       unexpected Do
       expecting After, And, Before, By, Eventually, Given, Having, Hence, If, Lest, On, Or, Other text, SetLess, SetPlus, Unless, When, Where, or end of input
       EVERY                                                                           Data Intermediary                                                                                                                                               AKA                                                                             You                                                                            
       WHICH                                                                           is not                                                                          processing personal data on behalf of and for the purposes of a public agency                                                                                                                                                                  
       MUST                                                                            without undue delay                                                                                                                                                                                                                                                                                                            
       UPON                                                                            becoming aware a data breach involving a client Organisation may have occurred                                                                                                                                                                                                                                                 
       WHEN                                                                            the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13                                                                                                                                                                                                                                                
       ✳ ➔                                                                             NOTIFY                                                                          the Organisation                                                                                                                                                                                                                               
                                                                                       for which                                                                       you act as a Data Intermediary                                                                                                                                                                                                                 
       

  To rerun use: --match "/PDPA/pdpadbno-2/"

Randomized with seed 289852108

Finished in 0.0681 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

