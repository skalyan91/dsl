* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-2/)

* Tokens
[Every,GoDeeper,Other "Data Intermediary",GoDeeper,GoDeeper,Aka,GoDeeper,Other "You",UnDeeper,UnDeeper,UnDeeper,UnDeeper,Which,GoDeeper,Other "is not",GoDeeper,Other "processing personal data on behalf of and for the purposes of a public agency",UnDeeper,UnDeeper,Must,GoDeeper,Other "without undue delay",UnDeeper,Upon,GoDeeper,Other "becoming aware a data breach involving a client Organisation may have occurred",UnDeeper,When,GoDeeper,Other "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13",UnDeeper,Do,GoDeeper,Other "NOTIFY",GoDeeper,Other "the Organisation",UnDeeper,Other "for which",GoDeeper,Other "you act as a Data Intermediary",UnDeeper,UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Data Intermediary" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: Every GoDeeper Other "Data Intermediary" <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected Every
someDeep first part calls base directly> expecting Other text

someDeep> IN: Every GoDeeper Other "Data Intermediary" <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected Every
someDeep> expecting Other text

pRegRuleSugary> IN: Every GoDeeper Other "Data Intermediary" <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected Every
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: Every GoDeeper Other "Data Intermediary" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected Every
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Having

preambleParamText:[Having]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected Every
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected Every
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected Every
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting May, Must, or Shant

pDT> IN: Every GoDeeper Other "Data Intermediary" <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected Every
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Data Intermediary" GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                                :1_4:Aka:
pNumAsText> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "Data Intermediary" GoDeeper GoDee <…>
someSL> MATCH (COK): Other "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: Other "Data Intermediary" GoDeeper GoDee <…>
$*|> MATCH (COK): Other "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                    :1_4:GoDeeper:
*************** / |>>/recurse                                                                                   :1_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                      :1_4:Aka:
**************** / slAKA optional akapart                                                                      :1_4:Aka:
***************** / |?| optional something                                                                    :1_4:Aka:
****************** / |>>/recurse                                                                             :1_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                                :1_4:Aka:
******************* / PAKA/akapart                                                                          :1_4:Aka:
******************** / $>|                                                                                 :1_4:Aka:
********************* / Aka Token                                                                         :1_4:Aka:
Aka Token> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
Aka Token> MATCH (COK): Aka
Aka Token> VALUE: (Aka,[])

********************* \ Aka Token has returned Aka                                                         :1_5:GoDeeper:
$>|> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
$>|> MATCH (COK): Aka
$>|> VALUE: (Aka,[])

******************** \ $>| has returned Aka                                                                 :1_5:GoDeeper:
******************** / |>>/recurse                                                                          :1_5:GoDeeper:
********************* / |>>/recurse                                                                         :1_5:Other "You":
|>>/recurse> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "You"
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                            :1_5:Other "You":
********************** / someSL                                                                            :1_5:Other "You":
someSL> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

********************** \ someSL has returned (["You"],0)                                              :2_2:UnDeeper:
********************** > |>>/base got ["You"]                                                         :2_2:UnDeeper:
|>>/base> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/base> MATCH (COK): Other "You"
|>>/base> VALUE: ((["You"],0),[])

********************* \ |>>/base has returned (["You"],0)                                              :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "You" UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (COK): GoDeeper Other "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************** \ |>>/recurse has returned (["You"],1)                                             :2_2:UnDeeper:
PAKA/akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
PAKA/akapart> MATCH (COK): Aka GoDeeper Other "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************* \ PAKA/akapart has returned (["You"],1)                                              :2_2:UnDeeper:
******************* > |>>/base got ["You"]                                                               :2_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((["You"],1),[])

****************** \ |>>/base has returned (["You"],1)                                                    :2_2:UnDeeper:
|?| optional something> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|?| optional something> MATCH (COK): Aka GoDeeper Other "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

***************** \ |?| optional something has returned (Just ["You"],1)                                   :2_2:UnDeeper:
slAKA optional akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
slAKA optional akapart> MATCH (COK): Aka GoDeeper Other "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

**************** \ slAKA optional akapart has returned (Just ["You"],1)                                     :2_2:UnDeeper:
**************** > |>>/base got Just ["You"]                                                                :2_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((Just ["You"],1),[])

*************** \ |>>/base has returned (Just ["You"],1)                                                     :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Aka GoDeeper Other "You" UnDeep <…>
|>>/recurse> MATCH (COK): GoDeeper Aka GoDeeper Other "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************** \ |>>/recurse has returned (Just ["You"],2)                                                    :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> VALUE: ((Just ["You"],3),[])

************* \ |>>/recurse has returned (Just ["You"],3)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
slAKA> VALUE: ((["Data Intermediary"],3),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],3)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                   :2_5:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
undeepers> MATCH (COK): UnDeeper UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                              :2_5:UnDeeper:
pAKA> IN: Other "Data Intermediary" GoDeeper GoDee <…>
pAKA> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                  :2_5:UnDeeper:
pMultiTermAka> IN: Other "Data Intermediary" GoDeeper GoDee <…>
pMultiTermAka> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                           :2_5:UnDeeper:
manyIndentation/leaf?> IN: Other "Data Intermediary" GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                     :2_5:UnDeeper:
********* / myindented: consuming UnDeeper                                                                               :2_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Which GoDeeper Other "is not" G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Which:
someIndentation> IN: GoDeeper Other "Data Intermediary" GoDee <…>
someIndentation> MATCH (COK): GoDeeper Other "Data Intermediary" GoDee <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [Every,Party,TokAll]> IN: Every GoDeeper Other "Data Intermediary" <…>
pActor [Every,Party,TokAll]> MATCH (COK): Every GoDeeper Other "Data Intermediary" <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Data Intermediary" :| [],Nothing) :| []))       :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "is not" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/1a:label directly above                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is not" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "is not" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=13:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************* / term p/b:label to the left of line below, with EOL                                           :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is not" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=13:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "is not" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "is n:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "is n:
***************** / expression                                                                            :2_2:Other "is n:
****************** / labelPrefix                                                                         :2_2:Other "is n:
labelPrefix> IN: Other "is not" GoDeeper Other "processin <…>
labelPrefix> MATCH (COK): Other "is not"
labelPrefix> VALUE: ("is not",[])

****************** \ labelPrefix has returned "is not"                                                    :2_3:GoDeeper:
****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/1a:label directly above                                                     :2_3:GoDeeper:
******************** / $*|                                                                              :2_3:GoDeeper:
********************* / someSL                                                                         :2_3:GoDeeper:
********************** / pNumAsText                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "processing personal data <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "processing personal data <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "processing personal data <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=15:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************* / term p/b:label to the left of line below, with EOL                                 :2_3:GoDeeper:
******************** / someSL                                                                           :2_3:GoDeeper:
********************* / pNumAsText                                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "processing personal data <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "processing personal data <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=15:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "processing personal data <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "proc:
********************** / manyIndentation/leaf?                                                         :2_3:Other "proc:
*********************** / expression                                                                  :2_3:Other "proc:
************************ / labelPrefix                                                               :2_3:Other "proc:
labelPrefix> IN: Other "processing personal data on behal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

************************ / term p                                                                    :2_3:Other "proc:
************************* / term p/1a:label directly above                                          :2_3:Other "proc:
************************** / $*|                                                                   :2_3:Other "proc:
*************************** / someSL                                                              :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
*************************** / pNumAsText                                                         :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (CERR): Other "processing personal data on behal <…>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "processing personal data on behal <…>
term p/1a:label directly above> MATCH (CERR): Other "processing personal data on behal <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=17:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

************************* / term p/b:label to the left of line below, with EOL                      :2_3:Other "proc:
************************** / someSL                                                                :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************** / undeepers                                                            :3_2:UnDeeper:
*************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
*************************** > sameLine: success!                                                 :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************** \ undeepers has returned ()                                            :3_2:UnDeeper:
************************** / matching EOL                                                         :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=17:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "processing personal data on behal <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "processing personal data on behal <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=17:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

************************* / term p/notLabelTerm                                                     :2_3:Other "proc:
************************** / term p/2:someIndentation expr p                                       :2_3:Other "proc:
*************************** / someIndentation                                                     :2_3:Other "proc:
**************************** / myindented: consuming GoDeeper                                    :2_3:Other "proc:
myindented: consuming GoDeeper> IN: Other "processing personal data on behal <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "processing personal data on behal <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "processing personal data on behal <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
term p/2:someIndentation expr p> expecting GoDeeper

************************** / term p/3:plain p                                                      :2_3:Other "proc:
*************************** / pRelPred                                                            :2_3:Other "proc:
**************************** / slRelPred                                                         :2_3:Other "proc:
***************************** / nested simpleHorn                                               :2_3:Other "proc:
****************************** > |^|                                                           :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |^| deeps                                                    :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

****************************** \ |^| deeps has returned ([(),()],-2)                       :3_1:Must:
nested simpleHorn> IN: Other "processing personal data on behal <…>
nested simpleHorn> MATCH (CERR): Other "processing personal data on behal <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting Means or UnDeeper

***************************** / RPConstraint                                                    :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "processing personal data on behal <…>
RPConstraint> MATCH (CERR): Other "processing personal data on behal <…>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************************** / RPBoolStructR                                                   :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "processing personal data on behal <…>
RPBoolStructR> MATCH (CERR): Other "processing personal data on behal <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************************** / RPMT                                                            :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slAKA                                                       :2_3:Other "proc:
******************************** / $*|                                                       :2_3:Other "proc:
********************************* / slAKA base                                              :2_3:Other "proc:
********************************** / slMultiTerm                                           :2_3:Other "proc:
*********************************** / someSL                                              :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*********************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slAKA base> IN: Other "processing personal data on behal <…>
slAKA base> MATCH (COK): Other "processing personal data on behal <…>
slAKA base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************* \ slAKA base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional akapart                                 :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / PAKA/akapart                                     :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
************************************** / Aka Token                                    :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional akapart has returned (Nothing,0)        :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional typically                               :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / typically                                        :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional typically has returned (Nothing,0)      :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
******************************** > pAKA: entityalias = Nothing                              :3_2:UnDeeper:
slAKA> IN: Other "processing personal data on behal <…>
slAKA> MATCH (COK): Other "processing personal data on behal <…>
slAKA> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slAKA has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
RPMT> IN: Other "processing personal data on behal <…>
RPMT> MATCH (COK): Other "processing personal data on behal <…>
RPMT> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

***************************** \ RPMT has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slRelPred> IN: Other "processing personal data on behal <…>
slRelPred> MATCH (COK): Other "processing personal data on behal <…>
slRelPred> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************************** \ slRelPred has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
**************************** / undeepers                                                        :3_2:UnDeeper:
***************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
***************************** > sameLine: success!                                             :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************************** \ undeepers has returned ()                                        :3_2:UnDeeper:
pRelPred> IN: Other "processing personal data on behal <…>
pRelPred> MATCH (COK): Other "processing personal data on behal <…>
pRelPred> VALUE: (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],[])

*************************** \ pRelPred has returned RPMT ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
term p/3:plain p> IN: Other "processing personal data on behal <…>
term p/3:plain p> MATCH (COK): Other "processing personal data on behal <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************** \ term p/3:plain p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "processing personal data on behal <…>
term p/notLabelTerm> MATCH (COK): Other "processing personal data on behal <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p> IN: Other "processing personal data on behal <…>
term p> MATCH (COK): Other "processing personal data on behal <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
************************ / binary(Or)                                                               :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                              :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                          :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                          :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "processing personal data on behal <…>
expression> MATCH (COK): Other "processing personal data on behal <…>
expression> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

*********************** \ expression has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "processing personal data on behal <…>
manyIndentation/leaf?> MATCH (COK): Other "processing personal data on behal <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
********************** / myindented: consuming UnDeeper                                               :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                           :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "processing personal data <…>
someIndentation> MATCH (COK): GoDeeper Other "processing personal data <…>
someIndentation> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "processing personal data <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "processing personal data <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "processing personal data <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "processing personal data <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p> IN: GoDeeper Other "processing personal data <…>
term p> MATCH (COK): GoDeeper Other "processing personal data <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
****************** / binary(Or)                                                                             :3_3:UnDeeper:
binary(Or)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                            :3_3:UnDeeper:
binary(And)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                        :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                        :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "is not" GoDeeper Other "processin <…>
expression> MATCH (COK): Other "is not" GoDeeper Other "processin <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

***************** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "is not" GoDeeper Other "processin <…>
manyIndentation/leaf?> MATCH (COK): Other "is not" GoDeeper Other "processin <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
**************** / myindented: consuming UnDeeper                                                             :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper Other "without un <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:Must:
someIndentation> IN: GoDeeper Other "is not" GoDeeper Other " <…>
someIndentation> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
someIndentation> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*************** \ someIndentation has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/2:someIndentation expr p> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/notLabelTerm> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p/notLabelTerm> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************* \ term p/notLabelTerm has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************ \ term p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: Must GoDeeper Other "without undue delay <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected Must
binary(Or)> expecting Or

************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: Must GoDeeper Other "without undue delay <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected Must
binary(And)> expecting And

************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: Must GoDeeper Other "without undue delay <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected Must
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: Must GoDeeper Other "without undue delay <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected Must
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "is not" GoDeeper Other " <…>
expression> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*********** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
ppp inner> IN: GoDeeper Other "is not" GoDeeper Other " <…>
ppp inner> MATCH (CERR): GoDeeper Other "is not" GoDeeper Other " <…>
ppp inner> ERROR:
ppp inner> offset=19:
ppp inner> Label (["is not"]) followed by leaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) is not allowed

********** / withPrePost                                                                                        :2_2:GoDeeper:
*********** > |<* starting                                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / pre part                                                                                       :2_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :2_2:Other "is n:
************** / expectUnDeepers                                                                             :2_2:Other "is n:
*************** / pNumAsText                                                                                 :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is not","GD","processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: Other "is not" GoDeeper Other "processin <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                              :2_2:Other "is n:
************** > aNLK: determined undp_count = 2                                                             :2_2:Other "is n:
************** > ->| trying to consume 1 GoDeepers                                                           :2_2:Other "is n:
************** / $*|                                                                                         :2_2:Other "is n:
$*|> IN: Other "is not" GoDeeper Other "processin <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :2_2:Other "is n:
aboveNextLineKeyword> IN: Other "is not" GoDeeper Other "processin <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Other "is not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :2_2:Other "is n:
************* / aboveNextLineKeyword                                                                           :2_3:GoDeeper:
************** / expectUnDeepers                                                                              :2_3:GoDeeper:
*************** / pNumAsText                                                                                 :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: GoDeeper Other "processing personal data <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                               :2_3:GoDeeper:
************** > aNLK: determined undp_count = 2                                                              :2_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :2_3:GoDeeper:
************** / $*|                                                                                          :2_3:GoDeeper:
$*|> IN: GoDeeper Other "processing personal data <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :2_3:GoDeeper:
************** > ->| success                                                                                   :2_3:Other "proc:
************** / |>>/recurse                                                                                   :2_3:Other "proc:
|>>/recurse> IN: Other "processing personal data on behal <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :2_3:Other "proc:
*************** / slMultiTerm                                                                                 :2_3:Other "proc:
**************** / someSL                                                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
*************** > |>>/base got ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
|>>/base> IN: Other "processing personal data on behal <…>
|>>/base> MATCH (COK): Other "processing personal data on behal <…>
|>>/base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

************** \ |>>/base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :3_2:UnDeeper:
************** > |<|                                                                                          :3_2:UnDeeper:
************** > |<* starting                                                                                 :3_2:UnDeeper:
************** / |<*/parent                                                                                   :3_2:UnDeeper:
*************** > |<*/recurse                                                                                :3_2:UnDeeper:
*************** / |<*/base                                                                                   :3_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=17:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=19:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "processing personal data <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "processing personal data <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=19:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :2_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :2_3:Other "proc:
************** / expectUnDeepers                                                                               :2_3:Other "proc:
*************** > ignoring ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: Other "processing personal data on behal <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                                :2_3:Other "proc:
************** > aNLK: determined undp_count = 2                                                               :2_3:Other "proc:
************** > ->| trying to consume 1 GoDeepers                                                             :2_3:Other "proc:
************** / $*|                                                                                           :2_3:Other "proc:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :2_3:Other "proc:
aboveNextLineKeyword> IN: Other "processing personal data on behal <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=16:
aboveNextLineKeyword> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :2_3:Other "proc:
************* / aboveNextLineKeyword                                                                           :3_2:UnDeeper:
************** / expectUnDeepers                                                                              :3_2:UnDeeper:
*************** > ignoring []                                                                                :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                               :3_2:UnDeeper:
************** > aNLK: determined undp_count = 2                                                              :3_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_2:UnDeeper:
************** / $*|                                                                                          :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=17:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_2:UnDeeper:
pre part> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=19:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is not" GoDeeper Other " <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=19:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPrePost> IN: GoDeeper Other "is not" GoDeeper Other " <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=19:
withPrePost> unexpected Must
withPrePost> expecting And, GoDeeper, Or, UnDeeper, or Unless

********** / withPreOnly                                                                                        :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / pre part                                                                                       :2_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :2_2:Other "is n:
************** / expectUnDeepers                                                                             :2_2:Other "is n:
*************** / pNumAsText                                                                                 :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is not","GD","processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: Other "is not" GoDeeper Other "processin <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                              :2_2:Other "is n:
************** > aNLK: determined undp_count = 2                                                             :2_2:Other "is n:
************** > ->| trying to consume 1 GoDeepers                                                           :2_2:Other "is n:
************** / $*|                                                                                         :2_2:Other "is n:
$*|> IN: Other "is not" GoDeeper Other "processin <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :2_2:Other "is n:
aboveNextLineKeyword> IN: Other "is not" GoDeeper Other "processin <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Other "is not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :2_2:Other "is n:
************* / aboveNextLineKeyword                                                                           :2_3:GoDeeper:
************** / expectUnDeepers                                                                              :2_3:GoDeeper:
*************** / pNumAsText                                                                                 :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: GoDeeper Other "processing personal data <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                               :2_3:GoDeeper:
************** > aNLK: determined undp_count = 2                                                              :2_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :2_3:GoDeeper:
************** / $*|                                                                                          :2_3:GoDeeper:
$*|> IN: GoDeeper Other "processing personal data <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :2_3:GoDeeper:
************** > ->| success                                                                                   :2_3:Other "proc:
************** / |>>/recurse                                                                                   :2_3:Other "proc:
|>>/recurse> IN: Other "processing personal data on behal <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :2_3:Other "proc:
*************** / slMultiTerm                                                                                 :2_3:Other "proc:
**************** / someSL                                                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
*************** > |>>/base got ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
|>>/base> IN: Other "processing personal data on behal <…>
|>>/base> MATCH (COK): Other "processing personal data on behal <…>
|>>/base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

************** \ |>>/base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :3_2:UnDeeper:
************** > |<|                                                                                          :3_2:UnDeeper:
************** > |<* starting                                                                                 :3_2:UnDeeper:
************** / |<*/parent                                                                                   :3_2:UnDeeper:
*************** > |<*/recurse                                                                                :3_2:UnDeeper:
*************** / |<*/base                                                                                   :3_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=17:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=19:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "processing personal data <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "processing personal data <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=19:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :2_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :2_3:Other "proc:
************** / expectUnDeepers                                                                               :2_3:Other "proc:
*************** > ignoring ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: Other "processing personal data on behal <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                                :2_3:Other "proc:
************** > aNLK: determined undp_count = 2                                                               :2_3:Other "proc:
************** > ->| trying to consume 1 GoDeepers                                                             :2_3:Other "proc:
************** / $*|                                                                                           :2_3:Other "proc:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :2_3:Other "proc:
aboveNextLineKeyword> IN: Other "processing personal data on behal <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=16:
aboveNextLineKeyword> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :2_3:Other "proc:
************* / aboveNextLineKeyword                                                                           :3_2:UnDeeper:
************** / expectUnDeepers                                                                              :3_2:UnDeeper:
*************** > ignoring []                                                                                :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                               :3_2:UnDeeper:
************** > aNLK: determined undp_count = 2                                                              :3_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_2:UnDeeper:
************** / $*|                                                                                          :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=17:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_2:UnDeeper:
pre part> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=19:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is not" GoDeeper Other " <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=19:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPreOnly> IN: GoDeeper Other "is not" GoDeeper Other " <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=19:
withPreOnly> unexpected Must
withPreOnly> expecting And, GoDeeper, Or, UnDeeper, or Unless

pBSR> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=19:
pBSR> Label (["is not"]) followed by leaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) is not allowed

preambleBoolStructR [Who,Which,Whose]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (CERR): Which GoDeeper
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=19:
preambleBoolStructR [Who,Which,Whose]> Label (["is not"]) followed by leaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) is not allowed

manyIndentation/leaf?> IN: Which GoDeeper Other "is not" GoDeeper O <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=19:
manyIndentation/leaf?> Label (["is not"]) followed by leaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) is not allowed

******* / manyIndentation/deeper; calling someIndentation                                                         :2_1:Which:
******** / someIndentation                                                                                       :2_1:Which:
********* / myindented: consuming GoDeeper                                                                      :2_1:Which:
myindented: consuming GoDeeper> IN: Which GoDeeper Other "is not" GoDeeper O <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Which
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Which GoDeeper Other "is not" GoDeeper O <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Which
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Which GoDeeper Other "is not" GoDeeper O <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Which
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :2_1:Which:
WHERE> IN: Which GoDeeper Other "is not" GoDeeper O <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=12:
WHERE> unexpected Which
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Which:
******** / $>|                                                                                                   :2_1:Which:
$>|> IN: Which GoDeeper Other "is not" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Which
$>|> expecting Having

preambleParamText:[Having]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=12:
preambleParamText:[Having]> unexpected Which
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Which:
******** / $>|                                                                                                   :2_1:Which:
$>|> IN: Which GoDeeper Other "is not" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Which
$>|> expecting Given

preambleParamText:[Given]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=12:
preambleParamText:[Given]> unexpected Which
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Which:
******** / $>|                                                                                                   :2_1:Which:
$>|> IN: Which GoDeeper Other "is not" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Which
$>|> expecting Upon

preambleParamText:[Upon]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=12:
preambleParamText:[Upon]> unexpected Which
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Which:
preambleBoolStructR [Unless]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=12:
preambleBoolStructR [Unless]> unexpected Which
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Which:
preambleBoolStructR [When,If]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=12:
preambleBoolStructR [When,If]> unexpected Which
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :2_1:Which:
******** / $>|                                                                                                   :2_1:Which:
$>|> IN: Which GoDeeper Other "is not" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Which
$>|> expecting May, Must, or Shant

pDT> IN: Which GoDeeper Other "is not" GoDeeper O <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=12:
pDT> unexpected Which
pDT> expecting May, Must, or Shant

******* / pDoAction/Do                                                                                            :2_1:Which:
pDoAction/Do> IN: Which GoDeeper Other "is not" GoDeeper O <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=12:
pDoAction/Do> unexpected Which
pDoAction/Do> expecting Do

regulative permutation with deontic-temporal> IN: Every GoDeeper Other "Data Intermediary" <…>
regulative permutation with deontic-temporal> MATCH (CERR): Every GoDeeper Other "Data Intermediary" <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=12:
regulative permutation with deontic-temporal> unexpected Which
regulative permutation with deontic-temporal> expecting Do, Given, Having, If, May, Must, Shant, Unless, Upon, When, or Where

****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: Every GoDeeper Other "Data Intermediary" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected Every
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Having

preambleParamText:[Having]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected Every
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected Every
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected Every
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: Every GoDeeper Other "Data Intermediary" <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected Every
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Every GoDeeper Other "Data Intermediary" <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected Every
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: Every GoDeeper Other "Data Intermediary" <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected Every
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "Data Intermediary" GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                                :1_4:Aka:
pNumAsText> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected Aka
pNumAsText> expecting TNumber 1234

someSL> IN: Other "Data Intermediary" GoDeeper GoDee <…>
someSL> MATCH (COK): Other "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: Other "Data Intermediary" GoDeeper GoDee <…>
$*|> MATCH (COK): Other "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                    :1_4:GoDeeper:
*************** / |>>/recurse                                                                                   :1_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

*************** / |>>/base                                                                                      :1_4:Aka:
**************** / slAKA optional akapart                                                                      :1_4:Aka:
***************** / |?| optional something                                                                    :1_4:Aka:
****************** / |>>/recurse                                                                             :1_4:Aka:
|>>/recurse> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected Aka
|>>/recurse> expecting GoDeeper

****************** / |>>/base                                                                                :1_4:Aka:
******************* / PAKA/akapart                                                                          :1_4:Aka:
******************** / $>|                                                                                 :1_4:Aka:
********************* / Aka Token                                                                         :1_4:Aka:
Aka Token> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
Aka Token> MATCH (COK): Aka
Aka Token> VALUE: (Aka,[])

********************* \ Aka Token has returned Aka                                                         :1_5:GoDeeper:
$>|> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
$>|> MATCH (COK): Aka
$>|> VALUE: (Aka,[])

******************** \ $>| has returned Aka                                                                 :1_5:GoDeeper:
******************** / |>>/recurse                                                                          :1_5:GoDeeper:
********************* / |>>/recurse                                                                         :1_5:Other "You":
|>>/recurse> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected Other "You"
|>>/recurse> expecting GoDeeper

********************* / |>>/base                                                                            :1_5:Other "You":
********************** / someSL                                                                            :1_5:Other "You":
someSL> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

********************** \ someSL has returned (["You"],0)                                              :2_2:UnDeeper:
********************** > |>>/base got ["You"]                                                         :2_2:UnDeeper:
|>>/base> IN: Other "You" UnDeeper UnDeeper UnDeeper U <…>
|>>/base> MATCH (COK): Other "You"
|>>/base> VALUE: ((["You"],0),[])

********************* \ |>>/base has returned (["You"],0)                                              :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "You" UnDeeper UnDeeper U <…>
|>>/recurse> MATCH (COK): GoDeeper Other "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************** \ |>>/recurse has returned (["You"],1)                                             :2_2:UnDeeper:
PAKA/akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
PAKA/akapart> MATCH (COK): Aka GoDeeper Other "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************* \ PAKA/akapart has returned (["You"],1)                                              :2_2:UnDeeper:
******************* > |>>/base got ["You"]                                                               :2_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((["You"],1),[])

****************** \ |>>/base has returned (["You"],1)                                                    :2_2:UnDeeper:
|?| optional something> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|?| optional something> MATCH (COK): Aka GoDeeper Other "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

***************** \ |?| optional something has returned (Just ["You"],1)                                   :2_2:UnDeeper:
slAKA optional akapart> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
slAKA optional akapart> MATCH (COK): Aka GoDeeper Other "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

**************** \ slAKA optional akapart has returned (Just ["You"],1)                                     :2_2:UnDeeper:
**************** > |>>/base got Just ["You"]                                                                :2_2:UnDeeper:
|>>/base> IN: Aka GoDeeper Other "You" UnDeeper UnDeep <…>
|>>/base> MATCH (COK): Aka GoDeeper Other "You"
|>>/base> VALUE: ((Just ["You"],1),[])

*************** \ |>>/base has returned (Just ["You"],1)                                                     :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Aka GoDeeper Other "You" UnDeep <…>
|>>/recurse> MATCH (COK): GoDeeper Aka GoDeeper Other "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************** \ |>>/recurse has returned (Just ["You"],2)                                                    :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Aka GoDeeper Other "Yo <…>
|>>/recurse> VALUE: ((Just ["You"],3),[])

************* \ |>>/recurse has returned (Just ["You"],3)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: Other "Data Intermediary" GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
slAKA> VALUE: ((["Data Intermediary"],3),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],3)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                   :2_5:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper Whic <…>
undeepers> MATCH (COK): UnDeeper UnDeeper UnDeeper
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                              :2_5:UnDeeper:
pAKA> IN: Other "Data Intermediary" GoDeeper GoDee <…>
pAKA> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                  :2_5:UnDeeper:
pMultiTermAka> IN: Other "Data Intermediary" GoDeeper GoDee <…>
pMultiTermAka> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                           :2_5:UnDeeper:
manyIndentation/leaf?> IN: Other "Data Intermediary" GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (COK): Other "Data Intermediary" GoDeeper GoDee <…>
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                     :2_5:UnDeeper:
********* / myindented: consuming UnDeeper                                                                               :2_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Which GoDeeper Other "is not" G <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Which:
someIndentation> IN: GoDeeper Other "Data Intermediary" GoDee <…>
someIndentation> MATCH (COK): GoDeeper Other "Data Intermediary" GoDee <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [Every,Party,TokAll]> IN: Every GoDeeper Other "Data Intermediary" <…>
pActor [Every,Party,TokAll]> MATCH (COK): Every GoDeeper Other "Data Intermediary" <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Data Intermediary" :| [],Nothing) :| []))       :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: GoDeeper Other "is not" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/1a:label directly above                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is not" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "is not" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=13:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

************* / term p/b:label to the left of line below, with EOL                                           :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "is not" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=13:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "is not" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "is n:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "is n:
***************** / expression                                                                            :2_2:Other "is n:
****************** / labelPrefix                                                                         :2_2:Other "is n:
labelPrefix> IN: Other "is not" GoDeeper Other "processin <…>
labelPrefix> MATCH (COK): Other "is not"
labelPrefix> VALUE: ("is not",[])

****************** \ labelPrefix has returned "is not"                                                    :2_3:GoDeeper:
****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/1a:label directly above                                                     :2_3:GoDeeper:
******************** / $*|                                                                              :2_3:GoDeeper:
********************* / someSL                                                                         :2_3:GoDeeper:
********************** / pNumAsText                                                                   :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "processing personal data <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

$*|> IN: GoDeeper Other "processing personal data <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected GoDeeper
$*|> expecting Other text or TNumber 1234

term p/1a:label directly above> IN: GoDeeper Other "processing personal data <…>
term p/1a:label directly above> MATCH (EERR): <EMPTY>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=15:
term p/1a:label directly above> unexpected GoDeeper
term p/1a:label directly above> expecting Other text or TNumber 1234

******************* / term p/b:label to the left of line below, with EOL                                 :2_3:GoDeeper:
******************** / someSL                                                                           :2_3:GoDeeper:
********************* / pNumAsText                                                                     :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

someSL> IN: GoDeeper Other "processing personal data <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected GoDeeper
someSL> expecting Other text or TNumber 1234

term p/b:label to the left of line below, with EOL> IN: GoDeeper Other "processing personal data <…>
term p/b:label to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=15:
term p/b:label to the left of line below, with EOL> unexpected GoDeeper
term p/b:label to the left of line below, with EOL> expecting Other text or TNumber 1234

******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "processing personal data <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "proc:
********************** / manyIndentation/leaf?                                                         :2_3:Other "proc:
*********************** / expression                                                                  :2_3:Other "proc:
************************ / labelPrefix                                                               :2_3:Other "proc:
labelPrefix> IN: Other "processing personal data on behal <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected UnDeeper

************************ / term p                                                                    :2_3:Other "proc:
************************* / term p/1a:label directly above                                          :2_3:Other "proc:
************************** / $*|                                                                   :2_3:Other "proc:
*************************** / someSL                                                              :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
*************************** / pNumAsText                                                         :3_2:UnDeeper:
pNumAsText> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting TNumber 1234

$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (CERR): Other "processing personal data on behal <…>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected UnDeeper
$*|> expecting GoDeeper, Other text, or TNumber 1234

term p/1a:label directly above> IN: Other "processing personal data on behal <…>
term p/1a:label directly above> MATCH (CERR): Other "processing personal data on behal <…>
term p/1a:label directly above> ERROR:
term p/1a:label directly above> offset=17:
term p/1a:label directly above> unexpected UnDeeper
term p/1a:label directly above> expecting GoDeeper, Other text, or TNumber 1234

************************* / term p/b:label to the left of line below, with EOL                      :2_3:Other "proc:
************************** / someSL                                                                :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************** / undeepers                                                            :3_2:UnDeeper:
*************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
*************************** > sameLine: success!                                                 :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************** \ undeepers has returned ()                                            :3_2:UnDeeper:
************************** / matching EOL                                                         :3_2:UnDeeper:
matching EOL> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=17:
matching EOL> unexpected UnDeeper
matching EOL> expecting EOL

term p/b:label to the left of line below, with EOL> IN: Other "processing personal data on behal <…>
term p/b:label to the left of line below, with EOL> MATCH (CERR): Other "processing personal data on behal <…>
term p/b:label to the left of line below, with EOL> ERROR:
term p/b:label to the left of line below, with EOL> offset=17:
term p/b:label to the left of line below, with EOL> unexpected UnDeeper
term p/b:label to the left of line below, with EOL> expecting EOL or GoDeeper

************************* / term p/notLabelTerm                                                     :2_3:Other "proc:
************************** / term p/2:someIndentation expr p                                       :2_3:Other "proc:
*************************** / someIndentation                                                     :2_3:Other "proc:
**************************** / myindented: consuming GoDeeper                                    :2_3:Other "proc:
myindented: consuming GoDeeper> IN: Other "processing personal data on behal <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "processing personal data on behal <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "processing personal data on behal <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
term p/2:someIndentation expr p> expecting GoDeeper

************************** / term p/3:plain p                                                      :2_3:Other "proc:
*************************** / pRelPred                                                            :2_3:Other "proc:
**************************** / slRelPred                                                         :2_3:Other "proc:
***************************** / nested simpleHorn                                               :2_3:Other "proc:
****************************** > |^|                                                           :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |^| deeps                                                    :3_2:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

****************************** \ |^| deeps has returned ([(),()],-2)                       :3_1:Must:
nested simpleHorn> IN: Other "processing personal data on behal <…>
nested simpleHorn> MATCH (CERR): Other "processing personal data on behal <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting Means or UnDeeper

***************************** / RPConstraint                                                    :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "processing personal data on behal <…>
RPConstraint> MATCH (CERR): Other "processing personal data on behal <…>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************************** / RPBoolStructR                                                   :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "processing personal data on behal <…>
RPBoolStructR> MATCH (CERR): Other "processing personal data on behal <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

***************************** / RPMT                                                            :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slAKA                                                       :2_3:Other "proc:
******************************** / $*|                                                       :2_3:Other "proc:
********************************* / slAKA base                                              :2_3:Other "proc:
********************************** / slMultiTerm                                           :2_3:Other "proc:
*********************************** / someSL                                              :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*********************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slAKA base> IN: Other "processing personal data on behal <…>
slAKA base> MATCH (COK): Other "processing personal data on behal <…>
slAKA base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************* \ slAKA base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional akapart                                 :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / PAKA/akapart                                     :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
************************************** / Aka Token                                    :3_2:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional akapart has returned (Nothing,0)        :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional typically                               :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / typically                                        :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
$>|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional typically has returned (Nothing,0)      :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
******************************** > pAKA: entityalias = Nothing                              :3_2:UnDeeper:
slAKA> IN: Other "processing personal data on behal <…>
slAKA> MATCH (COK): Other "processing personal data on behal <…>
slAKA> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slAKA has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (COK): Other "processing personal data on behal <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
RPMT> IN: Other "processing personal data on behal <…>
RPMT> MATCH (COK): Other "processing personal data on behal <…>
RPMT> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

***************************** \ RPMT has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slRelPred> IN: Other "processing personal data on behal <…>
slRelPred> MATCH (COK): Other "processing personal data on behal <…>
slRelPred> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************************** \ slRelPred has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
**************************** / undeepers                                                        :3_2:UnDeeper:
***************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
***************************** > sameLine: success!                                             :3_2:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************************** \ undeepers has returned ()                                        :3_2:UnDeeper:
pRelPred> IN: Other "processing personal data on behal <…>
pRelPred> MATCH (COK): Other "processing personal data on behal <…>
pRelPred> VALUE: (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],[])

*************************** \ pRelPred has returned RPMT ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
term p/3:plain p> IN: Other "processing personal data on behal <…>
term p/3:plain p> MATCH (COK): Other "processing personal data on behal <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************** \ term p/3:plain p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p/notLabelTerm> IN: Other "processing personal data on behal <…>
term p/notLabelTerm> MATCH (COK): Other "processing personal data on behal <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p> IN: Other "processing personal data on behal <…>
term p> MATCH (COK): Other "processing personal data on behal <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
************************ / binary(Or)                                                               :3_2:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************ / binary(And)                                                              :3_2:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************ / binary(SetLess)                                                          :3_2:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************ / binary(SetPlus)                                                          :3_2:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "processing personal data on behal <…>
expression> MATCH (COK): Other "processing personal data on behal <…>
expression> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

*********************** \ expression has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
manyIndentation/leaf?> IN: Other "processing personal data on behal <…>
manyIndentation/leaf?> MATCH (COK): Other "processing personal data on behal <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
********************** / myindented: consuming UnDeeper                                               :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                           :3_3:UnDeeper:
someIndentation> IN: GoDeeper Other "processing personal data <…>
someIndentation> MATCH (COK): GoDeeper Other "processing personal data <…>
someIndentation> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "processing personal data <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "processing personal data <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "processing personal data <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "processing personal data <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p> IN: GoDeeper Other "processing personal data <…>
term p> MATCH (COK): GoDeeper Other "processing personal data <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
****************** / binary(Or)                                                                             :3_3:UnDeeper:
binary(Or)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

****************** / binary(And)                                                                            :3_3:UnDeeper:
binary(And)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

****************** / binary(SetLess)                                                                        :3_3:UnDeeper:
binary(SetLess)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

****************** / binary(SetPlus)                                                                        :3_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper Must GoDeeper Other "without un <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "is not" GoDeeper Other "processin <…>
expression> MATCH (COK): Other "is not" GoDeeper Other "processin <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

***************** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
manyIndentation/leaf?> IN: Other "is not" GoDeeper Other "processin <…>
manyIndentation/leaf?> MATCH (COK): Other "is not" GoDeeper Other "processin <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
**************** / myindented: consuming UnDeeper                                                             :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Must GoDeeper Other "without un <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:Must:
someIndentation> IN: GoDeeper Other "is not" GoDeeper Other " <…>
someIndentation> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
someIndentation> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*************** \ someIndentation has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/2:someIndentation expr p> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/notLabelTerm> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p/notLabelTerm> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************* \ term p/notLabelTerm has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p> IN: GoDeeper Other "is not" GoDeeper Other " <…>
term p> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
term p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************ \ term p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: Must GoDeeper Other "without undue delay <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected Must
binary(Or)> expecting Or

************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: Must GoDeeper Other "without undue delay <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected Must
binary(And)> expecting And

************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: Must GoDeeper Other "without undue delay <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected Must
binary(SetLess)> expecting SetLess

************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: Must GoDeeper Other "without undue delay <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected Must
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "is not" GoDeeper Other " <…>
expression> MATCH (COK): GoDeeper Other "is not" GoDeeper Other " <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*********** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
ppp inner> IN: GoDeeper Other "is not" GoDeeper Other " <…>
ppp inner> MATCH (CERR): GoDeeper Other "is not" GoDeeper Other " <…>
ppp inner> ERROR:
ppp inner> offset=19:
ppp inner> Label (["is not"]) followed by leaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) is not allowed

********** / withPrePost                                                                                        :2_2:GoDeeper:
*********** > |<* starting                                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / pre part                                                                                       :2_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :2_2:Other "is n:
************** / expectUnDeepers                                                                             :2_2:Other "is n:
*************** / pNumAsText                                                                                 :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is not","GD","processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: Other "is not" GoDeeper Other "processin <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                              :2_2:Other "is n:
************** > aNLK: determined undp_count = 2                                                             :2_2:Other "is n:
************** > ->| trying to consume 1 GoDeepers                                                           :2_2:Other "is n:
************** / $*|                                                                                         :2_2:Other "is n:
$*|> IN: Other "is not" GoDeeper Other "processin <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :2_2:Other "is n:
aboveNextLineKeyword> IN: Other "is not" GoDeeper Other "processin <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Other "is not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :2_2:Other "is n:
************* / aboveNextLineKeyword                                                                           :2_3:GoDeeper:
************** / expectUnDeepers                                                                              :2_3:GoDeeper:
*************** / pNumAsText                                                                                 :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: GoDeeper Other "processing personal data <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                               :2_3:GoDeeper:
************** > aNLK: determined undp_count = 2                                                              :2_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :2_3:GoDeeper:
************** / $*|                                                                                          :2_3:GoDeeper:
$*|> IN: GoDeeper Other "processing personal data <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :2_3:GoDeeper:
************** > ->| success                                                                                   :2_3:Other "proc:
************** / |>>/recurse                                                                                   :2_3:Other "proc:
|>>/recurse> IN: Other "processing personal data on behal <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :2_3:Other "proc:
*************** / slMultiTerm                                                                                 :2_3:Other "proc:
**************** / someSL                                                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
*************** > |>>/base got ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
|>>/base> IN: Other "processing personal data on behal <…>
|>>/base> MATCH (COK): Other "processing personal data on behal <…>
|>>/base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

************** \ |>>/base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :3_2:UnDeeper:
************** > |<|                                                                                          :3_2:UnDeeper:
************** > |<* starting                                                                                 :3_2:UnDeeper:
************** / |<*/parent                                                                                   :3_2:UnDeeper:
*************** > |<*/recurse                                                                                :3_2:UnDeeper:
*************** / |<*/base                                                                                   :3_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=17:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=19:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "processing personal data <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "processing personal data <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=19:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :2_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :2_3:Other "proc:
************** / expectUnDeepers                                                                               :2_3:Other "proc:
*************** > ignoring ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: Other "processing personal data on behal <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                                :2_3:Other "proc:
************** > aNLK: determined undp_count = 2                                                               :2_3:Other "proc:
************** > ->| trying to consume 1 GoDeepers                                                             :2_3:Other "proc:
************** / $*|                                                                                           :2_3:Other "proc:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :2_3:Other "proc:
aboveNextLineKeyword> IN: Other "processing personal data on behal <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=16:
aboveNextLineKeyword> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :2_3:Other "proc:
************* / aboveNextLineKeyword                                                                           :3_2:UnDeeper:
************** / expectUnDeepers                                                                              :3_2:UnDeeper:
*************** > ignoring []                                                                                :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                               :3_2:UnDeeper:
************** > aNLK: determined undp_count = 2                                                              :3_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_2:UnDeeper:
************** / $*|                                                                                          :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=17:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_2:UnDeeper:
pre part> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=19:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is not" GoDeeper Other " <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=19:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPrePost> IN: GoDeeper Other "is not" GoDeeper Other " <…>
withPrePost> MATCH (CERR): GoDeeper
withPrePost> ERROR:
withPrePost> offset=19:
withPrePost> unexpected Must
withPrePost> expecting And, GoDeeper, Or, UnDeeper, or Unless

********** / withPreOnly                                                                                        :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / pre part                                                                                       :2_2:GoDeeper:
************* / aboveNextLineKeyword                                                                          :2_2:Other "is n:
************** / expectUnDeepers                                                                             :2_2:Other "is n:
*************** / pNumAsText                                                                                 :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["is not","GD","processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: Other "is not" GoDeeper Other "processin <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                              :2_2:Other "is n:
************** > aNLK: determined undp_count = 2                                                             :2_2:Other "is n:
************** > ->| trying to consume 1 GoDeepers                                                           :2_2:Other "is n:
************** / $*|                                                                                         :2_2:Other "is n:
$*|> IN: Other "is not" GoDeeper Other "processin <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                     :2_2:Other "is n:
aboveNextLineKeyword> IN: Other "is not" GoDeeper Other "processin <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=14:
aboveNextLineKeyword> unexpected Other "is not"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                 :2_2:Other "is n:
************* / aboveNextLineKeyword                                                                           :2_3:GoDeeper:
************** / expectUnDeepers                                                                              :2_3:GoDeeper:
*************** / pNumAsText                                                                                 :2_3:GoDeeper:
pNumAsText> IN: GoDeeper Other "processing personal data <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting TNumber 1234

*************** > ignoring ["GD","processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: GoDeeper Other "processing personal data <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                               :2_3:GoDeeper:
************** > aNLK: determined undp_count = 2                                                              :2_3:GoDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :2_3:GoDeeper:
************** / $*|                                                                                          :2_3:GoDeeper:
$*|> IN: GoDeeper Other "processing personal data <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :2_3:GoDeeper:
************** > ->| success                                                                                   :2_3:Other "proc:
************** / |>>/recurse                                                                                   :2_3:Other "proc:
|>>/recurse> IN: Other "processing personal data on behal <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                      :2_3:Other "proc:
*************** / slMultiTerm                                                                                 :2_3:Other "proc:
**************** / someSL                                                                                    :2_3:Other "proc:
someSL> IN: Other "processing personal data on behal <…>
someSL> MATCH (COK): Other "processing personal data on behal <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: Other "processing personal data on behal <…>
slMultiTerm> MATCH (COK): Other "processing personal data on behal <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
*************** > |>>/base got ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
|>>/base> IN: Other "processing personal data on behal <…>
|>>/base> MATCH (COK): Other "processing personal data on behal <…>
|>>/base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

************** \ |>>/base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************** > aNLK: current depth is 1                                                                     :3_2:UnDeeper:
************** > |<|                                                                                          :3_2:UnDeeper:
************** > |<* starting                                                                                 :3_2:UnDeeper:
************** / |<*/parent                                                                                   :3_2:UnDeeper:
*************** > |<*/recurse                                                                                :3_2:UnDeeper:
*************** / |<*/base                                                                                   :3_2:UnDeeper:
|<*/base> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=17:
|<*/base> unexpected UnDeeper
|<*/base> expecting And, Or, or Unless

|<*/parent> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=19:
|<*/parent> unexpected Must
|<*/parent> expecting And, Or, UnDeeper, or Unless

aboveNextLineKeyword> IN: GoDeeper Other "processing personal data <…>
aboveNextLineKeyword> MATCH (CERR): GoDeeper Other "processing personal data <…>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=19:
aboveNextLineKeyword> unexpected Must
aboveNextLineKeyword> expecting And, GoDeeper, Or, UnDeeper, or Unless

************* > /*= lookAhead failed, delegating to plain /+=                                                  :2_3:GoDeeper:
************* / aboveNextLineKeyword                                                                            :2_3:Other "proc:
************** / expectUnDeepers                                                                               :2_3:Other "proc:
*************** > ignoring ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: Other "processing personal data on behal <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                                :2_3:Other "proc:
************** > aNLK: determined undp_count = 2                                                               :2_3:Other "proc:
************** > ->| trying to consume 1 GoDeepers                                                             :2_3:Other "proc:
************** / $*|                                                                                           :2_3:Other "proc:
$*|> IN: Other "processing personal data on behal <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                       :2_3:Other "proc:
aboveNextLineKeyword> IN: Other "processing personal data on behal <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=16:
aboveNextLineKeyword> unexpected Other "processing personal data on behalf of and for the purposes of a public agency"
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                   :2_3:Other "proc:
************* / aboveNextLineKeyword                                                                           :3_2:UnDeeper:
************** / expectUnDeepers                                                                              :3_2:UnDeeper:
*************** > ignoring []                                                                                :3_2:UnDeeper:
*************** > matched undeepers [UnDeeper,UnDeeper]                                                   :3_1:Must:
expectUnDeepers> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
expectUnDeepers> MATCH (EOK): <EMPTY>
expectUnDeepers> VALUE: (2,[])

************** \ expectUnDeepers has returned 2                                                               :3_2:UnDeeper:
************** > aNLK: determined undp_count = 2                                                              :3_2:UnDeeper:
************** > ->| trying to consume 1 GoDeepers                                                            :3_2:UnDeeper:
************** / $*|                                                                                          :3_2:UnDeeper:
$*|> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
$*|> MATCH (EOK): <EMPTY>
$*|> VALUE: (((),0),[])

************** \ $*| has returned ((),0)                                                                      :3_2:UnDeeper:
aboveNextLineKeyword> IN: UnDeeper UnDeeper Must GoDeeper Other "w <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=17:
aboveNextLineKeyword> unexpected UnDeeper
aboveNextLineKeyword> expecting GoDeeper

************* > /*= lookAhead failed, delegating to plain /+=                                                  :3_2:UnDeeper:
pre part> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pre part> MATCH (CERR): GoDeeper
pre part> ERROR:
pre part> offset=19:
pre part> unexpected Must
pre part> expecting And, GoDeeper, Or, UnDeeper, or Unless

$*|> IN: GoDeeper Other "is not" GoDeeper Other " <…>
$*|> MATCH (CERR): GoDeeper
$*|> ERROR:
$*|> offset=19:
$*|> unexpected Must
$*|> expecting And, GoDeeper, Or, UnDeeper, or Unless

withPreOnly> IN: GoDeeper Other "is not" GoDeeper Other " <…>
withPreOnly> MATCH (CERR): GoDeeper
withPreOnly> ERROR:
withPreOnly> offset=19:
withPreOnly> unexpected Must
withPreOnly> expecting And, GoDeeper, Or, UnDeeper, or Unless

pBSR> IN: GoDeeper Other "is not" GoDeeper Other " <…>
pBSR> MATCH (CERR): GoDeeper
pBSR> ERROR:
pBSR> offset=19:
pBSR> Label (["is not"]) followed by leaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) is not allowed

preambleBoolStructR [Who,Which,Whose]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (CERR): Which GoDeeper
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=19:
preambleBoolStructR [Who,Which,Whose]> Label (["is not"]) followed by leaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) is not allowed

manyIndentation/leaf?> IN: Which GoDeeper Other "is not" GoDeeper O <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=19:
manyIndentation/leaf?> Label (["is not"]) followed by leaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) is not allowed

******* / manyIndentation/deeper; calling someIndentation                                                         :2_1:Which:
******** / someIndentation                                                                                       :2_1:Which:
********* / myindented: consuming GoDeeper                                                                      :2_1:Which:
myindented: consuming GoDeeper> IN: Which GoDeeper Other "is not" GoDeeper O <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected Which
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Which GoDeeper Other "is not" GoDeeper O <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected Which
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Which GoDeeper Other "is not" GoDeeper O <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=12:
manyIndentation/deeper; calling someIndentation> unexpected Which
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

******* / WHERE                                                                                                   :2_1:Which:
WHERE> IN: Which GoDeeper Other "is not" GoDeeper O <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=12:
WHERE> unexpected Which
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Which:
******** / $>|                                                                                                   :2_1:Which:
$>|> IN: Which GoDeeper Other "is not" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Which
$>|> expecting Having

preambleParamText:[Having]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=12:
preambleParamText:[Having]> unexpected Which
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Which:
******** / $>|                                                                                                   :2_1:Which:
$>|> IN: Which GoDeeper Other "is not" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Which
$>|> expecting Given

preambleParamText:[Given]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=12:
preambleParamText:[Given]> unexpected Which
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Which:
******** / $>|                                                                                                   :2_1:Which:
$>|> IN: Which GoDeeper Other "is not" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Which
$>|> expecting Upon

preambleParamText:[Upon]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=12:
preambleParamText:[Upon]> unexpected Which
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Which:
preambleBoolStructR [Unless]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=12:
preambleBoolStructR [Unless]> unexpected Which
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Which:
preambleBoolStructR [When,If]> IN: Which GoDeeper Other "is not" GoDeeper O <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=12:
preambleBoolStructR [When,If]> unexpected Which
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :2_1:Which:
pTemporal/eventually> IN: Which GoDeeper Other "is not" GoDeeper O <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=12:
pTemporal/eventually> unexpected Which
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :2_1:Which:
******** / $>|                                                                                                   :2_1:Which:
$>|> IN: Which GoDeeper Other "is not" GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected Which
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Which GoDeeper Other "is not" GoDeeper O <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=12:
pTemporal/specifically> unexpected Which
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :2_1:Which:
pTemporal/vaguely> IN: Which GoDeeper Other "is not" GoDeeper O <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=12:
pTemporal/vaguely> unexpected Which
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :2_1:Which:
pDA> IN: Which GoDeeper Other "is not" GoDeeper O <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=12:
pDA> unexpected Which
pDA> expecting May, Must, or Shant

regulative permutation with deontic-action> IN: Every GoDeeper Other "Data Intermediary" <…>
regulative permutation with deontic-action> MATCH (CERR): Every GoDeeper Other "Data Intermediary" <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=12:
regulative permutation with deontic-action> unexpected Which
regulative permutation with deontic-action> expecting After, Before, By, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

permutationsReg> IN: Every GoDeeper Other "Data Intermediary" <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=12:
permutationsReg> unexpected Which
permutationsReg> expecting After, Before, By, Do, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

pRegRuleNormal> IN: Every GoDeeper Other "Data Intermediary" <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=12:
pRegRuleNormal> unexpected Which
pRegRuleNormal> expecting After, Before, By, Do, Eventually, Given, Having, If, May, Must, On, Other text, Shant, Unless, Upon, When, or Where

pRegRule> IN: Every GoDeeper Other "Data Intermediary" <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=12:
pRegRule> unexpected Which
pRegRule> expecting After, Before, By, Do, Eventually, Given, Having, If, May, Must, On, Other text, RuleMarker 1 "\167", Shant, Unless, Upon, When, or Where

*** / pTypeDefinition                                                                                                 :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Data Intermediary" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pHornlike/uponLimb                                                                                            :1_1:Every:
***** / preambleParamText:[Upon]                                                                                    :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected Every
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :1_1:Every:
***** / preambleParamText:[Given]                                                                                   :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected Every
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: Every GoDeeper Other "Data Intermediary" <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected Every
pTypeDefinition> expecting Define, Given, RuleMarker 1 "\167", or Upon

*** / pConstitutiveRule                                                                                               :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Data Intermediary" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

**** / calling myindented pNameParens                                                                                :1_1:Every:
***** / manyIndentation/leaf?                                                                                       :1_1:Every:
****** / pMultiTermAka                                                                                             :1_1:Every:
******* / pAKA                                                                                                    :1_1:Every:
******** / slAKA                                                                                                 :1_1:Every:
********* / $*|                                                                                                 :1_1:Every:
********** / slAKA base                                                                                        :1_1:Every:
*********** / slMultiTerm                                                                                     :1_1:Every:
************ / someSL                                                                                        :1_1:Every:
************* / pNumAsText                                                                                  :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

pAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected Every
pAKA> expecting Other text or TNumber 1234

pMultiTermAka> IN: Every GoDeeper Other "Data Intermediary" <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected Every
pMultiTermAka> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Every:
****** / someIndentation                                                                                           :1_1:Every:
******* / myindented: consuming GoDeeper                                                                          :1_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Data Intermediary" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: Every GoDeeper Other "Data Intermediary" <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected Every
calling myindented pNameParens> expecting GoDeeper, Other text, or TNumber 1234

pConstitutiveRule> IN: Every GoDeeper Other "Data Intermediary" <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected Every
pConstitutiveRule> expecting GoDeeper, Other text, RuleMarker 1 "\167", or TNumber 1234

*** / pScenarioRule                                                                                                   :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Data Intermediary" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pExpect                                                                                                       :1_1:Every:
pExpect> IN: Every GoDeeper Other "Data Intermediary" <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=0:
pExpect> unexpected Every
pExpect> expecting Expect

pScenarioRule> IN: Every GoDeeper Other "Data Intermediary" <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected Every
pScenarioRule> expecting Expect, Given, or RuleMarker 1 "\167"

*** / pHornlike                                                                                                       :1_1:Every:
**** / pSrcRef                                                                                                       :1_1:Every:
***** / pRuleLabel                                                                                                  :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Data Intermediary" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

pSrcRef> IN: Every GoDeeper Other "Data Intermediary" <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Every:
**** / pHornlike / permute                                                                                           :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Data Intermediary" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: Every GoDeeper Other "Data Intermediary" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected Every
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Data Intermediary" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: Every GoDeeper Other "Data Intermediary" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected Every
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Data Intermediary" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: Every GoDeeper Other "Data Intermediary" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Data Intermediary" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Data Intermediary" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Given

preambleParamText:[Given]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected Every
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected Every
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Data Intermediary" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: Every GoDeeper Other "Data Intermediary" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Upon

preambleParamText:[Upon]> IN: Every GoDeeper Other "Data Intermediary" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected Every
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected Every
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: Every GoDeeper Other "Data Intermediary" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected Every
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: Every GoDeeper Other "Data Intermediary" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected Every
Otherwise> expecting Otherwise

whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected Every
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Data Intermediary" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Data Intermediary" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected Every
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

pRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected Every
pRelPred> expecting Other text or TNumber 1234

optIndented> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected Every
optIndented> expecting Other text or TNumber 1234

optIndentedTuple> IN: Every GoDeeper Other "Data Intermediary" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected Every
optIndentedTuple> expecting Other text or TNumber 1234

pRelPred optIndentedTuple whenCase> IN: Every GoDeeper Other "Data Intermediary" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected Every
pRelPred optIndentedTuple whenCase> expecting Other text or TNumber 1234

relPredNextlineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected Every
relPredNextlineWhen> expecting Other text or TNumber 1234

******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

nested simpleHorn> IN: Every GoDeeper Other "Data Intermediary" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected Every
nested simpleHorn> expecting Other text or TNumber 1234

********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPConstraint> IN: Every GoDeeper Other "Data Intermediary" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected Every
RPConstraint> expecting Other text or TNumber 1234

********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPBoolStructR> IN: Every GoDeeper Other "Data Intermediary" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected Every
RPBoolStructR> expecting Other text or TNumber 1234

********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: Every GoDeeper Other "Data Intermediary" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected Every
pNumAsText> expecting TNumber 1234

someSL> IN: Every GoDeeper Other "Data Intermediary" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected Every
someSL> expecting Other text or TNumber 1234

slMultiTerm> IN: Every GoDeeper Other "Data Intermediary" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected Every
slMultiTerm> expecting Other text or TNumber 1234

slAKA base> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected Every
slAKA base> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

slAKA> IN: Every GoDeeper Other "Data Intermediary" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected Every
slAKA> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

RPMT> IN: Every GoDeeper Other "Data Intermediary" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected Every
RPMT> expecting Other text or TNumber 1234

slRelPred> IN: Every GoDeeper Other "Data Intermediary" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected Every
slRelPred> expecting Other text or TNumber 1234

$*|> IN: Every GoDeeper Other "Data Intermediary" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected Every
$*|> expecting Other text or TNumber 1234

relPredSamelineWhen> IN: Every GoDeeper Other "Data Intermediary" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected Every
relPredSamelineWhen> expecting Other text or TNumber 1234

manyIndentation/leaf?> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected Every
manyIndentation/leaf?> expecting Other text or TNumber 1234

****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented: consuming GoDeeper                                                                        :1_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Data Intermediary" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected Every
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Every GoDeeper Other "Data Intermediary" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected Every
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected Every
pHornlike/someStructure> expecting Decide, Define, GoDeeper, Other text, or TNumber 1234

pHornlike / permute> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=0:
pHornlike / permute> unexpected Every
pHornlike / permute> expecting Decide, Define, Given, GoDeeper, If, Means, Other text, Otherwise, TNumber 1234, Upon, or When

pHornlike> IN: Every GoDeeper Other "Data Intermediary" <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=0:
pHornlike> unexpected Every
pHornlike> expecting Decide, Define, Given, GoDeeper, If, Means, Other text, Otherwise, RuleMarker 1 "\167", TNumber 1234, Upon, or When

*** / pRuleLabel                                                                                                      :1_1:Every:
**** / $>|                                                                                                           :1_1:Every:
$>|> IN: Every GoDeeper Other "Data Intermediary" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected Every
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Every GoDeeper Other "Data Intermediary" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected Every
pRuleLabel> expecting RuleMarker 1 "\167"

*** / pRule: unwrapping indentation and recursing                                                                     :1_1:Every:
**** / myindented: consuming GoDeeper                                                                                :1_1:Every:
myindented: consuming GoDeeper> IN: Every GoDeeper Other "Data Intermediary" <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=0:
myindented: consuming GoDeeper> unexpected Every
myindented: consuming GoDeeper> expecting GoDeeper

pRule: unwrapping indentation and recursing> IN: Every GoDeeper Other "Data Intermediary" <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=0:
pRule: unwrapping indentation and recursing> unexpected Every
pRule: unwrapping indentation and recursing> expecting GoDeeper

pRule> IN: Every GoDeeper Other "Data Intermediary" <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=12:
pRule> unexpected Which
pRule> expecting EOL or regulative rule


PDPA
  pdpadbno-2 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-2
       expected: [[Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("NOTIFY" :| ["the Organisation"],Nothing) :| [("for which" :| ["you act as a Data Intermediary"],Nothing)]), temporal = Just (TemporalConstraint TVague (Just 0) "without undue delay"), hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}]]
       but parsing failed with error:
       2:1:
       unexpected Which
       expecting EOL or regulative rule
       EVERY                                                                           Data Intermediary                                                                                                                                               AKA                                                                             You                                                                            
       ✳ WHICH                                                                         is not                                                                          processing personal data on behalf of and for the purposes of a public agency                                                                                                                                                                  
       MUST                                                                            without undue delay                                                                                                                                                                                                                                                                                                            
       UPON                                                                            becoming aware a data breach involving a client Organisation may have occurred                                                                                                                                                                                                                                                 
       WHEN                                                                            the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13                                                                                                                                                                                                                                                
       ➔                                                                               NOTIFY                                                                          the Organisation                                                                                                                                                                                                                               
                                                                                       for which                                                                       you act as a Data Intermediary                                                                                                                                                                                                                 
       

  To rerun use: --match "/PDPA/pdpadbno-2/"

Randomized with seed 952553222

Finished in 0.0539 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

