* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-2/)

* Tokens
EVERY
    ( "Data Intermediary"
        (
            ( AKA ( "You" ) )
        )
    ) WHICH
    ( "is not" ( "processing personal data on behalf of and for the purposes of a public agency" ) ) MUST ( "without undue delay" ) UPON ( "becoming aware a data breach involving a client Organisation may have occurred" ) WHEN ( "the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13" ) DO
    ( "NOTIFY" ( "the Organisation" ) "for which" ( "you act as a Data Intermediary" ) )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

someDeep> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

pRegRuleSugary> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Data Intermediary" ( ( AKA ( "You" )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                                :1_4:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected AKA
pNumAsText> expecting number

someSL> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
someSL> MATCH (COK): "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slMultiTerm> MATCH (COK): "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slAKA base> MATCH (COK): "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
$*|> MATCH (COK): "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                    :1_4:GoDeeper:
*************** / |>>/recurse                                                                                   :1_4:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :1_4:Aka:
**************** / slAKA optional akapart                                                                      :1_4:Aka:
***************** / |?| optional something                                                                    :1_4:Aka:
****************** / |>>/recurse                                                                             :1_4:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

****************** / |>>/base                                                                                :1_4:Aka:
******************* / PAKA/akapart                                                                          :1_4:Aka:
******************** / $>|                                                                                 :1_4:Aka:
********************* / Aka Token                                                                         :1_4:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************* \ Aka Token has returned Aka                                                         :1_5:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

******************** \ $>| has returned Aka                                                                 :1_5:GoDeeper:
******************** / |>>/recurse                                                                          :1_5:GoDeeper:
********************* / |>>/recurse                                                                         :1_5:Other "You":
|>>/recurse> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************* / |>>/base                                                                            :1_5:Other "You":
********************** / someSL                                                                            :1_5:Other "You":
someSL> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

********************** \ someSL has returned (["You"],0)                                              :2_2:UnDeeper:
********************** > |>>/base got ["You"]                                                         :2_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************* \ |>>/base has returned (["You"],0)                                              :2_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) WHICH ( "is not" ( "proc <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************** \ |>>/recurse has returned (["You"],1)                                             :2_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************* \ PAKA/akapart has returned (["You"],1)                                              :2_2:UnDeeper:
******************* > |>>/base got ["You"]                                                               :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

****************** \ |>>/base has returned (["You"],1)                                                    :2_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

***************** \ |?| optional something has returned (Just ["You"],1)                                   :2_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

**************** \ slAKA optional akapart has returned (Just ["You"],1)                                     :2_2:UnDeeper:
**************** > |>>/base got Just ["You"]                                                                :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

*************** \ |>>/base has returned (Just ["You"],1)                                                     :2_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) WHICH ( "is not" ( <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************** \ |>>/recurse has returned (Just ["You"],2)                                                    :2_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) WHICH ( "is not" <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************* \ |>>/recurse has returned (Just ["You"],3)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slAKA> MATCH (COK): "Data Intermediary" ( ( AKA ( "You"
slAKA> VALUE: ((["Data Intermediary"],3),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],3)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                   :2_5:UnDeeper:
undeepers> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                              :2_5:UnDeeper:
pAKA> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pAKA> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                  :2_5:UnDeeper:
pMultiTermAka> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pMultiTermAka> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                           :2_5:UnDeeper:
manyIndentation/leaf?> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
manyIndentation/leaf?> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                     :2_5:UnDeeper:
********* / myindented: consuming UnDeeper                                                                               :2_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHICH ( "is not" ( "processing persona <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Which:
someIndentation> IN: ( "Data Intermediary" ( ( AKA ( "You" )  <…>
someIndentation> MATCH (COK): ( "Data Intermediary" ( ( AKA ( "You" )  <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [Every,Party,TokAll]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Data Intermediary" :| [],Nothing) :| []))       :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( "is not" ( "processing personal data o <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is not" ( "processing personal data o <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "is n:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "is n:
***************** / expression                                                                            :2_2:Other "is n:
****************** / labelPrefix                                                                         :2_2:Other "is n:
labelPrefix> IN: "is not" ( "processing personal data on  <…>
labelPrefix> MATCH (COK): "is not"
labelPrefix> VALUE: ("is not",[])

****************** \ labelPrefix has returned "is not"                                                    :2_3:GoDeeper:
****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "processing personal data on behalf of <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "proc:
********************** / manyIndentation/leaf?                                                         :2_3:Other "proc:
*********************** / expression                                                                  :2_3:Other "proc:
************************ / labelPrefix                                                               :2_3:Other "proc:
labelPrefix> IN: "processing personal data on behalf of a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected )

************************ / term p                                                                    :2_3:Other "proc:
************************* / term p/notLabelTerm                                                     :2_3:Other "proc:
************************** / term p/2:someIndentation expr p                                       :2_3:Other "proc:
*************************** / someIndentation                                                     :2_3:Other "proc:
**************************** / myindented: consuming GoDeeper                                    :2_3:Other "proc:
myindented: consuming GoDeeper> IN: "processing personal data on behalf of a <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected "processing personal data on behalf of and for the purposes of a public agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "processing personal data on behalf of a <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "processing personal data on behalf of and for the purposes of a public agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "processing personal data on behalf of a <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "processing personal data on behalf of and for the purposes of a public agency"
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :2_3:Other "proc:
*************************** / pRelPred                                                            :2_3:Other "proc:
**************************** / slRelPred                                                         :2_3:Other "proc:
***************************** / nested simpleHorn                                               :2_3:Other "proc:
****************************** > |^|                                                           :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: "processing personal data on behalf of a <…>
someSL> MATCH (COK): "processing personal data on behalf of a <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processing personal data on behalf of a <…>
slMultiTerm> MATCH (COK): "processing personal data on behalf of a <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |^| deeps                                                    :3_2:UnDeeper:
|^| deeps> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

****************************** \ |^| deeps has returned ([(),()],-2)                       :3_1:Must:
nested simpleHorn> IN: "processing personal data on behalf of a <…>
nested simpleHorn> MATCH (CERR): "processing personal data on behalf of a <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

***************************** / RPConstraint                                                    :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: "processing personal data on behalf of a <…>
someSL> MATCH (COK): "processing personal data on behalf of a <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processing personal data on behalf of a <…>
slMultiTerm> MATCH (COK): "processing personal data on behalf of a <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "processing personal data on behalf of a <…>
RPConstraint> MATCH (CERR): "processing personal data on behalf of a <…>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************** / RPBoolStructR                                                   :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: "processing personal data on behalf of a <…>
someSL> MATCH (COK): "processing personal data on behalf of a <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processing personal data on behalf of a <…>
slMultiTerm> MATCH (COK): "processing personal data on behalf of a <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "processing personal data on behalf of a <…>
RPBoolStructR> MATCH (CERR): "processing personal data on behalf of a <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************** / RPMT                                                            :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slAKA                                                       :2_3:Other "proc:
******************************** / $*|                                                       :2_3:Other "proc:
********************************* / slAKA base                                              :2_3:Other "proc:
********************************** / slMultiTerm                                           :2_3:Other "proc:
*********************************** / someSL                                              :2_3:Other "proc:
someSL> IN: "processing personal data on behalf of a <…>
someSL> MATCH (COK): "processing personal data on behalf of a <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*********************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processing personal data on behalf of a <…>
slMultiTerm> MATCH (COK): "processing personal data on behalf of a <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slAKA base> IN: "processing personal data on behalf of a <…>
slAKA base> MATCH (COK): "processing personal data on behalf of a <…>
slAKA base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************* \ slAKA base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional akapart                                 :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / PAKA/akapart                                     :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
************************************** / Aka Token                                    :3_2:UnDeeper:
Aka Token> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional akapart has returned (Nothing,0)        :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional typically                               :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / typically                                        :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
$>|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional typically> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional typically has returned (Nothing,0)      :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
******************************** > pAKA: entityalias = Nothing                              :3_2:UnDeeper:
slAKA> IN: "processing personal data on behalf of a <…>
slAKA> MATCH (COK): "processing personal data on behalf of a <…>
slAKA> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slAKA has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
RPMT> IN: "processing personal data on behalf of a <…>
RPMT> MATCH (COK): "processing personal data on behalf of a <…>
RPMT> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

***************************** \ RPMT has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slRelPred> IN: "processing personal data on behalf of a <…>
slRelPred> MATCH (COK): "processing personal data on behalf of a <…>
slRelPred> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************************** \ slRelPred has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
**************************** / undeepers                                                        :3_2:UnDeeper:
***************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
***************************** > sameLine: success!                                             :3_2:UnDeeper:
undeepers> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************************** \ undeepers has returned ()                                        :3_2:UnDeeper:
pRelPred> IN: "processing personal data on behalf of a <…>
pRelPred> MATCH (COK): "processing personal data on behalf of a <…>
pRelPred> VALUE: (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],[])

*************************** \ pRelPred has returned RPMT ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
term p/3:plain p> IN: "processing personal data on behalf of a <…>
term p/3:plain p> MATCH (COK): "processing personal data on behalf of a <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************** \ term p/3:plain p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p/notLabelTerm> IN: "processing personal data on behalf of a <…>
term p/notLabelTerm> MATCH (COK): "processing personal data on behalf of a <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p> IN: "processing personal data on behalf of a <…>
term p> MATCH (COK): "processing personal data on behalf of a <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
************************ / binary(Or)                                                               :3_2:UnDeeper:
binary(Or)> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                              :3_2:UnDeeper:
binary(And)> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                          :3_2:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                          :3_2:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "processing personal data on behalf of a <…>
expression> MATCH (COK): "processing personal data on behalf of a <…>
expression> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

*********************** \ expression has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
manyIndentation/leaf?> IN: "processing personal data on behalf of a <…>
manyIndentation/leaf?> MATCH (COK): "processing personal data on behalf of a <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
********************** / myindented: consuming UnDeeper                                               :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                           :3_3:UnDeeper:
someIndentation> IN: ( "processing personal data on behalf of <…>
someIndentation> MATCH (COK): ( "processing personal data on behalf of <…>
someIndentation> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "processing personal data on behalf of <…>
term p/2:someIndentation expr p> MATCH (COK): ( "processing personal data on behalf of <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/notLabelTerm> IN: ( "processing personal data on behalf of <…>
term p/notLabelTerm> MATCH (COK): ( "processing personal data on behalf of <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p> IN: ( "processing personal data on behalf of <…>
term p> MATCH (COK): ( "processing personal data on behalf of <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
****************** / binary(Or)                                                                             :3_3:UnDeeper:
binary(Or)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                            :3_3:UnDeeper:
binary(And)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                        :3_3:UnDeeper:
binary(SetLess)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                        :3_3:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is not" ( "processing personal data on  <…>
expression> MATCH (COK): "is not" ( "processing personal data on  <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

***************** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
manyIndentation/leaf?> IN: "is not" ( "processing personal data on  <…>
manyIndentation/leaf?> MATCH (COK): "is not" ( "processing personal data on  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
**************** / myindented: consuming UnDeeper                                                             :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( "without undue delay" ) UPON (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:Must:
someIndentation> IN: ( "is not" ( "processing personal data o <…>
someIndentation> MATCH (COK): ( "is not" ( "processing personal data o <…>
someIndentation> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*************** \ someIndentation has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/2:someIndentation expr p> IN: ( "is not" ( "processing personal data o <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/notLabelTerm> IN: ( "is not" ( "processing personal data o <…>
term p/notLabelTerm> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p/notLabelTerm> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************* \ term p/notLabelTerm has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p> IN: ( "is not" ( "processing personal data o <…>
term p> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************ \ term p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

expression> IN: ( "is not" ( "processing personal data o <…>
expression> MATCH (COK): ( "is not" ( "processing personal data o <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*********** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
ppp inner> IN: ( "is not" ( "processing personal data o <…>
ppp inner> MATCH (COK): ( "is not" ( "processing personal data o <…>
ppp inner> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
pBSR> IN: ( "is not" ( "processing personal data o <…>
pBSR> MATCH (COK): ( "is not" ( "processing personal data o <…>
pBSR> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHICH ( "is not" ( "processing personal  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHICH ( "is not" ( "processing personal  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
manyIndentation/leaf?> IN: WHICH ( "is not" ( "processing personal  <…>
manyIndentation/leaf?> MATCH (COK): WHICH ( "is not" ( "processing personal  <…>
manyIndentation/leaf?> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******* \ manyIndentation/leaf? has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
******* / WHERE                                                                                                   :3_1:Must:
WHERE> IN: MUST ( "without undue delay" ) UPON ( "b <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :3_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :3_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=19:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :3_2:GoDeeper:
******** / |>| calling $>>                                                                                        :3_2:GoDeeper:
********* / |>>/recurse                                                                                          :3_2:GoDeeper:
********** / |>>/recurse                                                                                         :3_2:Other "with:
|>>/recurse> IN: "without undue delay" ) UPON ( "becoming <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected "without undue delay"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :3_2:Other "with:
*********** / pTemporal/eventually                                                                              :3_2:Other "with:
pTemporal/eventually> IN: "without undue delay" ) UPON ( "becoming <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=21:
pTemporal/eventually> unexpected "without undue delay"
pTemporal/eventually> expecting EVENTUALLY

*********** / pTemporal/specifically                                                                            :3_2:Other "with:
************ / $>|                                                                                             :3_2:Other "with:
$>|> IN: "without undue delay" ) UPON ( "becoming <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected "without undue delay"
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: "without undue delay" ) UPON ( "becoming <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=21:
pTemporal/specifically> unexpected "without undue delay"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** / pTemporal/vaguely                                                                                 :3_2:Other "with:
pTemporal/vaguely> IN: "without undue delay" ) UPON ( "becoming <…>
pTemporal/vaguely> MATCH (COK): "without undue delay"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "without undue delay"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "without undue delay")     :4_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "without undue delay"))                :4_2:UnDeeper:
|>>/base> IN: "without undue delay" ) UPON ( "becoming <…>
|>>/base> MATCH (COK): "without undue delay"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),0)     :4_2:UnDeeper:
|>>/recurse> IN: ( "without undue delay" ) UPON ( "becomi <…>
|>>/recurse> MATCH (COK): ( "without undue delay"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1)    :4_2:UnDeeper:
|>| calling $>>> IN: ( "without undue delay" ) UPON ( "becomi <…>
|>| calling $>>> MATCH (COK): ( "without undue delay"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1)  :4_2:UnDeeper:
******** / undeepers                                                                                                :4_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :4_2:UnDeeper:
********* > sameLine: success!                                                                                  :4_1:Upon:
undeepers> IN: ) UPON ( "becoming aware a data breach i <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :4_1:Upon:
pDT> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pDT> MATCH (COK): MUST ( "without undue delay" )
pDT> VALUE: ((DMust,Just (TemporalConstraint TVague (Just 0) "without undue delay")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TVague (Just 0) "without undue delay"))                :4_1:Upon:
******* / WHERE                                                                                                   :4_1:Upon:
WHERE> IN: UPON ( "becoming aware a data breach inv <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected UPON
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UPON
$>|> expecting HAVING

preambleParamText:[Having]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected UPON
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UPON
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected UPON
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (COK): UPON
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "beco:
|>>/recurse> IN: "becoming aware a data breach involving  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected "becoming aware a data breach involving a client Organisation may have occurred"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Other "beco:
*********** / pParamText                                                                                        :4_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :4_2:Other "beco:
************* / pKeyValuesAka                                                                                 :4_2:Other "beco:
************** / slAKA                                                                                       :4_2:Other "beco:
*************** / $*|                                                                                       :4_2:Other "beco:
**************** / slAKA base                                                                              :4_2:Other "beco:
***************** / slKeyValues                                                                           :4_2:Other "beco:
****************** / $*|                                                                                 :4_2:Other "beco:
******************* / someSL                                                                            :4_2:Other "beco:
someSL> IN: "becoming aware a data breach involving  <…>
someSL> MATCH (COK): "becoming aware a data breach involving  <…>
someSL> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / |?| optional something                                                             :5_2:UnDeeper:
******************** / |>>/recurse                                                                      :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :5_2:UnDeeper:
********************* / slTypeSig                                                                      :5_2:UnDeeper:
********************** / $>|                                                                          :5_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) WHEN ( "the data breach occurs on or a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=26:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :5_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :5_2:UnDeeper:
slKeyValues> IN: "becoming aware a data breach involving  <…>
slKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
slKeyValues> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
slAKA base> IN: "becoming aware a data breach involving  <…>
slAKA base> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
Aka Token> IN: ) WHEN ( "the data breach occurs on or a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=26:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=26:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional typically                                                                 :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHEN ( "the data breach occurs on or a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=26:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional typically> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :5_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :5_2:UnDeeper:
slAKA> IN: "becoming aware a data breach involving  <…>
slAKA> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
************** / undeepers                                                                                    :5_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :5_2:UnDeeper:
*************** > sameLine: success!                                                                         :5_2:UnDeeper:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :5_2:UnDeeper:
pKeyValuesAka> IN: "becoming aware a data breach involving  <…>
pKeyValuesAka> MATCH (COK): "becoming aware a data breach involving  <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :5_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :5_2:UnDeeper:
************** / sameMany                                                                                     :5_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :5_2:UnDeeper:
**************** / slAKA                                                                                    :5_2:UnDeeper:
***************** / $*|                                                                                    :5_2:UnDeeper:
****************** / slAKA base                                                                           :5_2:UnDeeper:
******************* / slKeyValues                                                                        :5_2:UnDeeper:
******************** / $*|                                                                              :5_2:UnDeeper:
********************* / someSL                                                                         :5_2:UnDeeper:
********************** / pNumAsText                                                                   :5_2:UnDeeper:
pNumAsText> IN: ) WHEN ( "the data breach occurs on or a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) WHEN ( "the data breach occurs on or a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) WHEN ( "the data breach occurs on or a <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) WHEN ( "the data breach occurs on or a <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :5_2:UnDeeper:
manyIndentation/leaf?> IN: ) WHEN ( "the data breach occurs on or a <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :5_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :5_2:UnDeeper:
pParamText> IN: "becoming aware a data breach involving  <…>
pParamText> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
|>>/base> IN: "becoming aware a data breach involving  <…>
|>>/base> MATCH (COK): "becoming aware a data breach involving  <…>
|>>/base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0) :5_2:UnDeeper:
|>>/recurse> IN: ( "becoming aware a data breach involvin <…>
|>>/recurse> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>>/recurse> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
|>| calling $>>> IN: ( "becoming aware a data breach involvin <…>
|>| calling $>>> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
******** / undeepers                                                                                                :5_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :5_2:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:When:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:When:
preambleParamText:[Upon]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> MATCH (COK): UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []) :5_1:When:
******* / preambleParamText:[Upon]                                                                                :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected WHEN
$>|> expecting UPON

preambleParamText:[Upon]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected WHEN
preambleParamText:[Upon]> expecting UPON

******* / WHERE                                                                                                   :5_1:When:
WHERE> IN: WHEN ( "the data breach occurs on or aft <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected WHEN
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected WHEN
$>|> expecting HAVING

preambleParamText:[Having]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected WHEN
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected WHEN
$>|> expecting GIVEN

preambleParamText:[Given]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected WHEN
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :5_1:When:
preambleBoolStructR [Unless]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=27:
preambleBoolStructR [Unless]> unexpected WHEN
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :5_1:When:
******** / pBSR                                                                                                   :5_2:GoDeeper:
********* / ppp inner                                                                                            :5_2:GoDeeper:
********** / expression                                                                                         :5_2:GoDeeper:
*********** / labelPrefix                                                                                      :5_2:GoDeeper:
labelPrefix> IN: ( "the data breach occurs on or after th <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=28:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :5_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :5_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :5_2:GoDeeper:
************** / someIndentation                                                                            :5_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "the data breach occurs on or after th <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :5_2:Other "the:
*************** / manyIndentation/leaf?                                                                     :5_2:Other "the:
**************** / expression                                                                              :5_2:Other "the:
***************** / labelPrefix                                                                           :5_2:Other "the:
labelPrefix> IN: "the data breach occurs on or after the  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=30:
labelPrefix> unexpected )

***************** / term p                                                                                :5_2:Other "the:
****************** / term p/notLabelTerm                                                                 :5_2:Other "the:
******************* / term p/2:someIndentation expr p                                                   :5_2:Other "the:
******************** / someIndentation                                                                 :5_2:Other "the:
********************* / myindented: consuming GoDeeper                                                :5_2:Other "the:
myindented: consuming GoDeeper> IN: "the data breach occurs on or after the  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=29:
myindented: consuming GoDeeper> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "the data breach occurs on or after the  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=29:
someIndentation> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "the data breach occurs on or after the  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=29:
term p/2:someIndentation expr p> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
term p/2:someIndentation expr p> expecting (

******************* / term p/3:plain p                                                                  :5_2:Other "the:
******************** / pRelPred                                                                        :5_2:Other "the:
********************* / slRelPred                                                                     :5_2:Other "the:
********************** / nested simpleHorn                                                           :5_2:Other "the:
*********************** > |^|                                                                       :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |^| deeps                                                                  :6_2:UnDeeper:
|^| deeps> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*********************** \ |^| deeps has returned ([()],-1)                                        :6_1:Do:
nested simpleHorn> IN: "the data breach occurs on or after the  <…>
nested simpleHorn> MATCH (CERR): "the data breach occurs on or after the  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting ) or MEANS

********************** / RPConstraint                                                                :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |>| calling $>>                                                            :6_2:UnDeeper:
************************ / |>>/recurse                                                              :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ / |>>/base                                                                 :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "the data breach occurs on or after the  <…>
RPConstraint> MATCH (CERR): "the data breach occurs on or after the  <…>
RPConstraint> ERROR:
RPConstraint> offset=30:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************** / RPBoolStructR                                                               :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |>| calling $>>                                                            :6_2:UnDeeper:
************************ / |>>/recurse                                                              :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ / |>>/base                                                                 :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "the data breach occurs on or after the  <…>
RPBoolStructR> MATCH (CERR): "the data breach occurs on or after the  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=30:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************** / RPMT                                                                        :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slAKA                                                                   :5_2:Other "the:
************************* / $*|                                                                   :5_2:Other "the:
************************** / slAKA base                                                          :5_2:Other "the:
*************************** / slMultiTerm                                                       :5_2:Other "the:
**************************** / someSL                                                          :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

**************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*************************** \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slAKA base> IN: "the data breach occurs on or after the  <…>
slAKA base> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA base> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ slAKA base has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :6_2:UnDeeper:
************************** / slAKA optional akapart                                               :6_2:UnDeeper:
*************************** / |?| optional something                                             :6_2:UnDeeper:
**************************** / |>>/recurse                                                      :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :6_2:UnDeeper:
***************************** / PAKA/akapart                                                   :6_2:UnDeeper:
****************************** / $>|                                                          :6_2:UnDeeper:
******************************* / Aka Token                                                  :6_2:UnDeeper:
Aka Token> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=30:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=30:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :6_2:UnDeeper:
slAKA optional akapart> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :6_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :6_2:UnDeeper:
************************** / slAKA optional typically                                             :6_2:UnDeeper:
*************************** / |?| optional something                                             :6_2:UnDeeper:
**************************** / |>>/recurse                                                      :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :6_2:UnDeeper:
***************************** / typically                                                      :6_2:UnDeeper:
****************************** / $>|                                                          :6_2:UnDeeper:
$>|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=30:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :6_2:UnDeeper:
slAKA optional typically> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :6_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :6_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :6_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :6_2:UnDeeper:
slAKA> IN: "the data breach occurs on or after the  <…>
slAKA> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slAKA has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
RPMT> IN: "the data breach occurs on or after the  <…>
RPMT> MATCH (COK): "the data breach occurs on or after the  <…>
RPMT> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************** \ RPMT has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slRelPred> IN: "the data breach occurs on or after the  <…>
slRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
slRelPred> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ slRelPred has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
********************* / undeepers                                                                      :6_2:UnDeeper:
********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :6_2:UnDeeper:
********************** > sameLine: success!                                                           :6_2:UnDeeper:
undeepers> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************* \ undeepers has returned ()                                                      :6_2:UnDeeper:
pRelPred> IN: "the data breach occurs on or after the  <…>
pRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
pRelPred> VALUE: (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],[])

******************** \ pRelPred has returned RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"] :6_2:UnDeeper:
term p/3:plain p> IN: "the data breach occurs on or after the  <…>
term p/3:plain p> MATCH (COK): "the data breach occurs on or after the  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************* \ term p/3:plain p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: "the data breach occurs on or after the  <…>
term p/notLabelTerm> MATCH (COK): "the data breach occurs on or after the  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
term p> IN: "the data breach occurs on or after the  <…>
term p> MATCH (COK): "the data breach occurs on or after the  <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

***************** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
***************** / binary(Or)                                                                             :6_2:UnDeeper:
binary(Or)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                            :6_2:UnDeeper:
binary(And)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                        :6_2:UnDeeper:
binary(SetLess)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                        :6_2:UnDeeper:
binary(SetPlus)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "the data breach occurs on or after the  <…>
expression> MATCH (COK): "the data breach occurs on or after the  <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

**************** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: "the data breach occurs on or after the  <…>
manyIndentation/leaf?> MATCH (COK): "the data breach occurs on or after the  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :6_1:Do:
someIndentation> IN: ( "the data breach occurs on or after th <…>
someIndentation> MATCH (COK): ( "the data breach occurs on or after th <…>
someIndentation> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/2:someIndentation expr p> IN: ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/notLabelTerm> IN: ( "the data breach occurs on or after th <…>
term p/notLabelTerm> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p> IN: ( "the data breach occurs on or after th <…>
term p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*********** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
*********** / binary(Or)                                                                                      :6_1:Do:
binary(Or)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected DO
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :6_1:Do:
binary(And)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected DO
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :6_1:Do:
binary(SetLess)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected DO
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :6_1:Do:
binary(SetPlus)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected DO
binary(SetPlus)> expecting PLUS

expression> IN: ( "the data breach occurs on or after th <…>
expression> MATCH (COK): ( "the data breach occurs on or after th <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
ppp inner> IN: ( "the data breach occurs on or after th <…>
ppp inner> MATCH (COK): ( "the data breach occurs on or after th <…>
ppp inner> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********* \ ppp inner has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
pBSR> IN: ( "the data breach occurs on or after th <…>
pBSR> MATCH (COK): ( "the data breach occurs on or after th <…>
pBSR> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******** \ pBSR has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
preambleBoolStructR [When,If]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> MATCH (COK): WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> VALUE: ((When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])),[])

******* \ preambleBoolStructR [When,If] has returned (When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :6_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :6_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=31:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=31:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=31:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :6_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=31:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / expression                                                                                       :6_2:GoDeeper:
************ / labelPrefix                                                                                    :6_2:GoDeeper:
labelPrefix> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=32:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :6_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :6_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :6_2:GoDeeper:
*************** / someIndentation                                                                          :6_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :6_2:Other "NOTI:
**************** / manyIndentation/leaf?                                                                   :6_2:Other "NOTI:
***************** / expression                                                                            :6_2:Other "NOTI:
****************** / labelPrefix                                                                         :6_2:Other "NOTI:
labelPrefix> IN: "NOTIFY" ( "the Organisation" ) "for whi <…>
labelPrefix> MATCH (COK): "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

****************** \ labelPrefix has returned "NOTIFY"                                                    :6_3:GoDeeper:
****************** / term p                                                                               :6_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :6_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :6_3:GoDeeper:
********************* / someIndentation                                                                :6_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "the Organisation" ) "for which" ( "yo <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :6_3:Other "the:
********************** / manyIndentation/leaf?                                                         :6_3:Other "the:
*********************** / expression                                                                  :6_3:Other "the:
************************ / labelPrefix                                                               :6_3:Other "the:
labelPrefix> IN: "the Organisation" ) "for which" ( "you  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=36:
labelPrefix> unexpected )

************************ / term p                                                                    :6_3:Other "the:
************************* / term p/notLabelTerm                                                     :6_3:Other "the:
************************** / term p/2:someIndentation expr p                                       :6_3:Other "the:
*************************** / someIndentation                                                     :6_3:Other "the:
**************************** / myindented: consuming GoDeeper                                    :6_3:Other "the:
myindented: consuming GoDeeper> IN: "the Organisation" ) "for which" ( "you  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=35:
myindented: consuming GoDeeper> unexpected "the Organisation"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "the Organisation" ) "for which" ( "you  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=35:
someIndentation> unexpected "the Organisation"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "the Organisation" ) "for which" ( "you  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=35:
term p/2:someIndentation expr p> unexpected "the Organisation"
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :6_3:Other "the:
*************************** / pParamText                                                          :6_3:Other "the:
**************************** / pParamText(flat) first line: pKeyValues                           :6_3:Other "the:
***************************** / pKeyValuesAka                                                   :6_3:Other "the:
****************************** / slAKA                                                         :6_3:Other "the:
******************************* / $*|                                                         :6_3:Other "the:
******************************** / slAKA base                                                :6_3:Other "the:
********************************* / slKeyValues                                             :6_3:Other "the:
********************************** / $*|                                                   :6_3:Other "the:
*********************************** / someSL                                              :6_3:Other "the:
someSL> IN: "the Organisation" ) "for which" ( "you  <…>
someSL> MATCH (COK): "the Organisation"
someSL> VALUE: ((["the Organisation"],0),[])

*********************************** \ someSL has returned (["the Organisation"],0)         :7_3:UnDeeper:
$*|> IN: "the Organisation" ) "for which" ( "you  <…>
$*|> MATCH (COK): "the Organisation"
$*|> VALUE: ((["the Organisation"],0),[])

********************************** \ $*| has returned (["the Organisation"],0)              :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / |?| optional something                               :7_3:UnDeeper:
************************************ / |>>/recurse                                        :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                           :7_3:UnDeeper:
************************************* / slTypeSig                                        :7_3:UnDeeper:
************************************** / $>|                                            :7_3:UnDeeper:
$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "for which" ( "you act as a Data Inter <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=36:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :7_3:UnDeeper:
*********************************** > |>>/base got Nothing                                 :7_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                      :7_3:UnDeeper:
slKeyValues> IN: "the Organisation" ) "for which" ( "you  <…>
slKeyValues> MATCH (COK): "the Organisation"
slKeyValues> VALUE: ((("the Organisation" :| [],Nothing),0),[])

********************************* \ slKeyValues has returned (("the Organisation" :| [],Nothing),0) :7_3:UnDeeper:
slAKA base> IN: "the Organisation" ) "for which" ( "you  <…>
slAKA base> MATCH (COK): "the Organisation"
slAKA base> VALUE: ((("the Organisation" :| [],Nothing),0),[])

******************************** \ slAKA base has returned (("the Organisation" :| [],Nothing),0) :7_3:UnDeeper:
$*|> IN: "the Organisation" ) "for which" ( "you  <…>
$*|> MATCH (COK): "the Organisation"
$*|> VALUE: ((("the Organisation" :| [],Nothing),0),[])

******************************* \ $*| has returned (("the Organisation" :| [],Nothing),0)      :7_3:UnDeeper:
******************************* / |>>/recurse                                                  :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :7_3:UnDeeper:
******************************** / slAKA optional akapart                                     :7_3:UnDeeper:
********************************* / |?| optional something                                   :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / PAKA/akapart                                         :7_3:UnDeeper:
************************************ / $>|                                                :7_3:UnDeeper:
************************************* / Aka Token                                        :7_3:UnDeeper:
Aka Token> IN: ) "for which" ( "you act as a Data Inter <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=36:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "for which" ( "you act as a Data Inter <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=36:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :7_3:UnDeeper:
slAKA optional akapart> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)            :7_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :7_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :7_3:UnDeeper:
******************************* / |>>/recurse                                                  :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :7_3:UnDeeper:
******************************** / slAKA optional typically                                   :7_3:UnDeeper:
********************************* / |?| optional something                                   :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / typically                                            :7_3:UnDeeper:
************************************ / $>|                                                :7_3:UnDeeper:
$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "for which" ( "you act as a Data Inter <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=36:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :7_3:UnDeeper:
slAKA optional typically> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)          :7_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :7_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :7_3:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_3:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                  :7_3:UnDeeper:
slAKA> IN: "the Organisation" ) "for which" ( "you  <…>
slAKA> MATCH (COK): "the Organisation"
slAKA> VALUE: ((("the Organisation" :| [],Nothing),0),[])

****************************** \ slAKA has returned (("the Organisation" :| [],Nothing),0)      :7_3:UnDeeper:
****************************** / undeepers                                                      :7_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_3:UnDeeper:
******************************* > sameLine: success!                                           :7_3:UnDeeper:
undeepers> IN: ) "for which" ( "you act as a Data Inter <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :7_3:UnDeeper:
pKeyValuesAka> IN: "the Organisation" ) "for which" ( "you  <…>
pKeyValuesAka> MATCH (COK): "the Organisation"
pKeyValuesAka> VALUE: (("the Organisation" :| [],Nothing),[])

***************************** \ pKeyValuesAka has returned ("the Organisation" :| [],Nothing)    :7_3:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "the Organisation" ) "for which" ( "you  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "the Organisation"
pParamText(flat) first line: pKeyValues> VALUE: (("the Organisation" :| [],Nothing),[])

**************************** \ pParamText(flat) first line: pKeyValues has returned ("the Organisation" :| [],Nothing) :7_3:UnDeeper:
**************************** / pParamText(flat) subsequent lines: sameMany pKeyValues             :7_3:UnDeeper:
***************************** / manyIndentation/leaf?                                            :7_3:UnDeeper:
****************************** / sameMany                                                       :7_3:UnDeeper:
******************************* / pKeyValuesAka                                                :7_3:UnDeeper:
******************************** / slAKA                                                      :7_3:UnDeeper:
********************************* / $*|                                                      :7_3:UnDeeper:
********************************** / slAKA base                                             :7_3:UnDeeper:
*********************************** / slKeyValues                                          :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: ) "for which" ( "you act as a Data Inter <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=36:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "for which" ( "you act as a Data Inter <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=36:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "for which" ( "you act as a Data Inter <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "for which" ( "you act as a Data Inter <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=36:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=36:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "for which" ( "you act as a Data Inter <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=36:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "for which" ( "you act as a Data Inter <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=36:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "for which" ( "you act as a Data Inter <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

****************************** \ sameMany has returned []                                       :7_3:UnDeeper:
manyIndentation/leaf?> IN: ) "for which" ( "you act as a Data Inter <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

***************************** \ manyIndentation/leaf? has returned []                            :7_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "for which" ( "you act as a Data Inter <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

**************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_3:UnDeeper:
pParamText> IN: "the Organisation" ) "for which" ( "you  <…>
pParamText> MATCH (COK): "the Organisation"
pParamText> VALUE: (("the Organisation" :| [],Nothing) :| [],[])

*************************** \ pParamText has returned ("the Organisation" :| [],Nothing) :| []     :7_3:UnDeeper:
term p/3:plain p> IN: "the Organisation" ) "for which" ( "you  <…>
term p/3:plain p> MATCH (COK): "the Organisation"
term p/3:plain p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************** \ term p/3:plain p has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
term p/notLabelTerm> IN: "the Organisation" ) "for which" ( "you  <…>
term p/notLabelTerm> MATCH (COK): "the Organisation"
term p/notLabelTerm> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
term p> IN: "the Organisation" ) "for which" ( "you  <…>
term p> MATCH (COK): "the Organisation"
term p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])      :7_3:UnDeeper:
************************ / binary(Or)                                                                 :7_3:UnDeeper:
binary(Or)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :7_3:UnDeeper:
binary(And)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :7_3:UnDeeper:
binary(SetLess)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :7_3:UnDeeper:
binary(SetPlus)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "the Organisation" ) "for which" ( "you  <…>
expression> MATCH (COK): "the Organisation"
expression> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

*********************** \ expression has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])    :7_3:UnDeeper:
manyIndentation/leaf?> IN: "the Organisation" ) "for which" ( "you  <…>
manyIndentation/leaf?> MATCH (COK): "the Organisation"
manyIndentation/leaf?> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :7_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) "for which" ( "you act as a Data Inter <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :7_2:Other "for:
someIndentation> IN: ( "the Organisation" ) "for which" ( "yo <…>
someIndentation> MATCH (COK): ( "the Organisation" )
someIndentation> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

********************* \ someIndentation has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p/2:someIndentation expr p> IN: ( "the Organisation" ) "for which" ( "yo <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the Organisation" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p/notLabelTerm> IN: ( "the Organisation" ) "for which" ( "yo <…>
term p/notLabelTerm> MATCH (COK): ( "the Organisation" )
term p/notLabelTerm> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p> IN: ( "the Organisation" ) "for which" ( "yo <…>
term p> MATCH (COK): ( "the Organisation" )
term p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])               :7_2:Other "for:
****************** / binary(Or)                                                                          :7_2:Other "for:
binary(Or)> IN: "for which" ( "you act as a Data Interme <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=37:
binary(Or)> unexpected "for which"
binary(Or)> expecting OR

****************** / binary(And)                                                                         :7_2:Other "for:
binary(And)> IN: "for which" ( "you act as a Data Interme <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=37:
binary(And)> unexpected "for which"
binary(And)> expecting AND

****************** / binary(SetLess)                                                                     :7_2:Other "for:
binary(SetLess)> IN: "for which" ( "you act as a Data Interme <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=37:
binary(SetLess)> unexpected "for which"
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                     :7_2:Other "for:
binary(SetPlus)> IN: "for which" ( "you act as a Data Interme <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=37:
binary(SetPlus)> unexpected "for which"
binary(SetPlus)> expecting PLUS

expression> IN: "NOTIFY" ( "the Organisation" ) "for whi <…>
expression> MATCH (COK): "NOTIFY" ( "the Organisation" )
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])),[])

***************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])) :7_2:Other "for:
manyIndentation/leaf?> IN: "NOTIFY" ( "the Organisation" ) "for whi <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "the Organisation" )
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])) :7_2:Other "for:
**************** / myindented: consuming UnDeeper                                                          :7_2:Other "for:
myindented: consuming UnDeeper> IN: "for which" ( "you act as a Data Interme <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=37:
myindented: consuming UnDeeper> unexpected "for which"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
someIndentation> MATCH (CERR): ( "NOTIFY" ( "the Organisation" )
someIndentation> ERROR:
someIndentation> offset=37:
someIndentation> unexpected "for which"
someIndentation> expecting ), AND, LESS, OR, or PLUS

term p/2:someIndentation expr p> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
term p/2:someIndentation expr p> MATCH (CERR): ( "NOTIFY" ( "the Organisation" )
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=37:
term p/2:someIndentation expr p> unexpected "for which"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, or PLUS

************** / term p/3:plain p                                                                           :6_2:GoDeeper:
*************** / pParamText                                                                               :6_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :6_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :6_2:GoDeeper:
****************** / slAKA                                                                              :6_2:GoDeeper:
******************* / $*|                                                                              :6_2:GoDeeper:
******************** / slAKA base                                                                     :6_2:GoDeeper:
********************* / slKeyValues                                                                  :6_2:GoDeeper:
********************** / $*|                                                                        :6_2:GoDeeper:
*********************** / someSL                                                                   :6_2:GoDeeper:
************************ / pNumAsText                                                             :6_2:GoDeeper:
pNumAsText> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=32:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=32:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=32:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=32:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=32:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=32:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=32:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=37:
term p/notLabelTerm> unexpected "for which"
term p/notLabelTerm> expecting ), AND, LESS, OR, or PLUS

term p> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=37:
term p> unexpected "for which"
term p> expecting ), AND, LESS, OR, or PLUS

expression> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=37:
expression> unexpected "for which"
expression> expecting expression

expr pParamText> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=37:
expr pParamText> unexpected "for which"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=37:
dBoolStructP calling exprP> unexpected "for which"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=37:
pAction calling dBoolStructP> unexpected "for which"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=37:
pDoAction/pAction> unexpected "for which"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=37:
regulative permutation with deontic-temporal> unexpected "for which"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Data Intermediary" ( ( AKA ( "You" )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                                :1_4:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected AKA
pNumAsText> expecting number

someSL> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
someSL> MATCH (COK): "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slMultiTerm> MATCH (COK): "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slAKA base> MATCH (COK): "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
$*|> MATCH (COK): "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                    :1_4:GoDeeper:
*************** / |>>/recurse                                                                                   :1_4:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

*************** / |>>/base                                                                                      :1_4:Aka:
**************** / slAKA optional akapart                                                                      :1_4:Aka:
***************** / |?| optional something                                                                    :1_4:Aka:
****************** / |>>/recurse                                                                             :1_4:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

****************** / |>>/base                                                                                :1_4:Aka:
******************* / PAKA/akapart                                                                          :1_4:Aka:
******************** / $>|                                                                                 :1_4:Aka:
********************* / Aka Token                                                                         :1_4:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************* \ Aka Token has returned Aka                                                         :1_5:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

******************** \ $>| has returned Aka                                                                 :1_5:GoDeeper:
******************** / |>>/recurse                                                                          :1_5:GoDeeper:
********************* / |>>/recurse                                                                         :1_5:Other "You":
|>>/recurse> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************* / |>>/base                                                                            :1_5:Other "You":
********************** / someSL                                                                            :1_5:Other "You":
someSL> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

********************** \ someSL has returned (["You"],0)                                              :2_2:UnDeeper:
********************** > |>>/base got ["You"]                                                         :2_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************* \ |>>/base has returned (["You"],0)                                              :2_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) WHICH ( "is not" ( "proc <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************** \ |>>/recurse has returned (["You"],1)                                             :2_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************* \ PAKA/akapart has returned (["You"],1)                                              :2_2:UnDeeper:
******************* > |>>/base got ["You"]                                                               :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

****************** \ |>>/base has returned (["You"],1)                                                    :2_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

***************** \ |?| optional something has returned (Just ["You"],1)                                   :2_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

**************** \ slAKA optional akapart has returned (Just ["You"],1)                                     :2_2:UnDeeper:
**************** > |>>/base got Just ["You"]                                                                :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

*************** \ |>>/base has returned (Just ["You"],1)                                                     :2_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) WHICH ( "is not" ( <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************** \ |>>/recurse has returned (Just ["You"],2)                                                    :2_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) WHICH ( "is not" <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************* \ |>>/recurse has returned (Just ["You"],3)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slAKA> MATCH (COK): "Data Intermediary" ( ( AKA ( "You"
slAKA> VALUE: ((["Data Intermediary"],3),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],3)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                   :2_5:UnDeeper:
undeepers> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                              :2_5:UnDeeper:
pAKA> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pAKA> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                  :2_5:UnDeeper:
pMultiTermAka> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pMultiTermAka> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                           :2_5:UnDeeper:
manyIndentation/leaf?> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
manyIndentation/leaf?> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                     :2_5:UnDeeper:
********* / myindented: consuming UnDeeper                                                                               :2_5:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHICH ( "is not" ( "processing persona <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Which:
someIndentation> IN: ( "Data Intermediary" ( ( AKA ( "You" )  <…>
someIndentation> MATCH (COK): ( "Data Intermediary" ( ( AKA ( "You" )  <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [Every,Party,TokAll]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Data Intermediary" :| [],Nothing) :| []))       :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( "is not" ( "processing personal data o <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "is not" ( "processing personal data o <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "is n:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "is n:
***************** / expression                                                                            :2_2:Other "is n:
****************** / labelPrefix                                                                         :2_2:Other "is n:
labelPrefix> IN: "is not" ( "processing personal data on  <…>
labelPrefix> MATCH (COK): "is not"
labelPrefix> VALUE: ("is not",[])

****************** \ labelPrefix has returned "is not"                                                    :2_3:GoDeeper:
****************** / term p                                                                               :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "processing personal data on behalf of <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :2_3:Other "proc:
********************** / manyIndentation/leaf?                                                         :2_3:Other "proc:
*********************** / expression                                                                  :2_3:Other "proc:
************************ / labelPrefix                                                               :2_3:Other "proc:
labelPrefix> IN: "processing personal data on behalf of a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected )

************************ / term p                                                                    :2_3:Other "proc:
************************* / term p/notLabelTerm                                                     :2_3:Other "proc:
************************** / term p/2:someIndentation expr p                                       :2_3:Other "proc:
*************************** / someIndentation                                                     :2_3:Other "proc:
**************************** / myindented: consuming GoDeeper                                    :2_3:Other "proc:
myindented: consuming GoDeeper> IN: "processing personal data on behalf of a <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected "processing personal data on behalf of and for the purposes of a public agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "processing personal data on behalf of a <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "processing personal data on behalf of and for the purposes of a public agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "processing personal data on behalf of a <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "processing personal data on behalf of and for the purposes of a public agency"
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :2_3:Other "proc:
*************************** / pRelPred                                                            :2_3:Other "proc:
**************************** / slRelPred                                                         :2_3:Other "proc:
***************************** / nested simpleHorn                                               :2_3:Other "proc:
****************************** > |^|                                                           :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: "processing personal data on behalf of a <…>
someSL> MATCH (COK): "processing personal data on behalf of a <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processing personal data on behalf of a <…>
slMultiTerm> MATCH (COK): "processing personal data on behalf of a <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |^| deeps                                                    :3_2:UnDeeper:
|^| deeps> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

****************************** \ |^| deeps has returned ([(),()],-2)                       :3_1:Must:
nested simpleHorn> IN: "processing personal data on behalf of a <…>
nested simpleHorn> MATCH (CERR): "processing personal data on behalf of a <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

***************************** / RPConstraint                                                    :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: "processing personal data on behalf of a <…>
someSL> MATCH (COK): "processing personal data on behalf of a <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processing personal data on behalf of a <…>
slMultiTerm> MATCH (COK): "processing personal data on behalf of a <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "processing personal data on behalf of a <…>
RPConstraint> MATCH (CERR): "processing personal data on behalf of a <…>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************** / RPBoolStructR                                                   :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slMultiTerm                                                 :2_3:Other "proc:
******************************** / someSL                                                    :2_3:Other "proc:
someSL> IN: "processing personal data on behalf of a <…>
someSL> MATCH (COK): "processing personal data on behalf of a <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processing personal data on behalf of a <…>
slMultiTerm> MATCH (COK): "processing personal data on behalf of a <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
****************************** / |>| calling $>>                                              :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                   :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "processing personal data on behalf of a <…>
RPBoolStructR> MATCH (CERR): "processing personal data on behalf of a <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************** / RPMT                                                            :2_3:Other "proc:
****************************** / $*|                                                           :2_3:Other "proc:
******************************* / slAKA                                                       :2_3:Other "proc:
******************************** / $*|                                                       :2_3:Other "proc:
********************************* / slAKA base                                              :2_3:Other "proc:
********************************** / slMultiTerm                                           :2_3:Other "proc:
*********************************** / someSL                                              :2_3:Other "proc:
someSL> IN: "processing personal data on behalf of a <…>
someSL> MATCH (COK): "processing personal data on behalf of a <…>
someSL> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

*********************************** \ someSL has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processing personal data on behalf of a <…>
slMultiTerm> MATCH (COK): "processing personal data on behalf of a <…>
slMultiTerm> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************** \ slMultiTerm has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slAKA base> IN: "processing personal data on behalf of a <…>
slAKA base> MATCH (COK): "processing personal data on behalf of a <…>
slAKA base> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

********************************* \ slAKA base has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional akapart                                 :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / PAKA/akapart                                     :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
************************************** / Aka Token                                    :3_2:UnDeeper:
Aka Token> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional akapart has returned (Nothing,0)        :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** / |>>/base                                                 :3_2:UnDeeper:
********************************* / slAKA optional typically                               :3_2:UnDeeper:
********************************** / |?| optional something                               :3_2:UnDeeper:
*********************************** / |>>/recurse                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** / |>>/base                                           :3_2:UnDeeper:
************************************ / typically                                        :3_2:UnDeeper:
************************************* / $>|                                            :3_2:UnDeeper:
$>|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************** \ |?| optional something has returned (Nothing,0)      :3_2:UnDeeper:
slAKA optional typically> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************* \ slAKA optional typically has returned (Nothing,0)      :3_2:UnDeeper:
********************************* > |>>/base got Nothing                                   :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************** \ |>>/base has returned (Nothing,0)                        :3_2:UnDeeper:
******************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
******************************** > pAKA: entityalias = Nothing                              :3_2:UnDeeper:
slAKA> IN: "processing personal data on behalf of a <…>
slAKA> MATCH (COK): "processing personal data on behalf of a <…>
slAKA> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

******************************* \ slAKA has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processing personal data on behalf of a <…>
$*|> MATCH (COK): "processing personal data on behalf of a <…>
$*|> VALUE: ((["processing personal data on behalf of and for the purposes of a public agency"],0),[])

****************************** \ $*| has returned (["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
RPMT> IN: "processing personal data on behalf of a <…>
RPMT> MATCH (COK): "processing personal data on behalf of a <…>
RPMT> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

***************************** \ RPMT has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slRelPred> IN: "processing personal data on behalf of a <…>
slRelPred> MATCH (COK): "processing personal data on behalf of a <…>
slRelPred> VALUE: ((RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0),[])

**************************** \ slRelPred has returned (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
**************************** / undeepers                                                        :3_2:UnDeeper:
***************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_2:UnDeeper:
***************************** > sameLine: success!                                             :3_2:UnDeeper:
undeepers> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

**************************** \ undeepers has returned ()                                        :3_2:UnDeeper:
pRelPred> IN: "processing personal data on behalf of a <…>
pRelPred> MATCH (COK): "processing personal data on behalf of a <…>
pRelPred> VALUE: (RPMT ["processing personal data on behalf of and for the purposes of a public agency"],[])

*************************** \ pRelPred has returned RPMT ["processing personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
term p/3:plain p> IN: "processing personal data on behalf of a <…>
term p/3:plain p> MATCH (COK): "processing personal data on behalf of a <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************** \ term p/3:plain p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p/notLabelTerm> IN: "processing personal data on behalf of a <…>
term p/notLabelTerm> MATCH (COK): "processing personal data on behalf of a <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p> IN: "processing personal data on behalf of a <…>
term p> MATCH (COK): "processing personal data on behalf of a <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

************************ \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
************************ / binary(Or)                                                               :3_2:UnDeeper:
binary(Or)> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                              :3_2:UnDeeper:
binary(And)> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                          :3_2:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                          :3_2:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "processing personal data on behalf of a <…>
expression> MATCH (COK): "processing personal data on behalf of a <…>
expression> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

*********************** \ expression has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
manyIndentation/leaf?> IN: "processing personal data on behalf of a <…>
manyIndentation/leaf?> MATCH (COK): "processing personal data on behalf of a <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
********************** / myindented: consuming UnDeeper                                               :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                           :3_3:UnDeeper:
someIndentation> IN: ( "processing personal data on behalf of <…>
someIndentation> MATCH (COK): ( "processing personal data on behalf of <…>
someIndentation> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "processing personal data on behalf of <…>
term p/2:someIndentation expr p> MATCH (COK): ( "processing personal data on behalf of <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/notLabelTerm> IN: ( "processing personal data on behalf of <…>
term p/notLabelTerm> MATCH (COK): ( "processing personal data on behalf of <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p> IN: ( "processing personal data on behalf of <…>
term p> MATCH (COK): ( "processing personal data on behalf of <…>
term p> VALUE: (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ term p has returned MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
****************** / binary(Or)                                                                             :3_3:UnDeeper:
binary(Or)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                            :3_3:UnDeeper:
binary(And)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                        :3_3:UnDeeper:
binary(SetLess)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                        :3_3:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "is not" ( "processing personal data on  <…>
expression> MATCH (COK): "is not" ( "processing personal data on  <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

***************** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
manyIndentation/leaf?> IN: "is not" ( "processing personal data on  <…>
manyIndentation/leaf?> MATCH (COK): "is not" ( "processing personal data on  <…>
manyIndentation/leaf?> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_3:UnDeeper:
**************** / myindented: consuming UnDeeper                                                             :3_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( "without undue delay" ) UPON (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:Must:
someIndentation> IN: ( "is not" ( "processing personal data o <…>
someIndentation> MATCH (COK): ( "is not" ( "processing personal data o <…>
someIndentation> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*************** \ someIndentation has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/2:someIndentation expr p> IN: ( "is not" ( "processing personal data o <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************** \ term p/2:someIndentation expr p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p/notLabelTerm> IN: ( "is not" ( "processing personal data o <…>
term p/notLabelTerm> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p/notLabelTerm> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************* \ term p/notLabelTerm has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
term p> IN: ( "is not" ( "processing personal data o <…>
term p> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

************ \ term p has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

expression> IN: ( "is not" ( "processing personal data o <…>
expression> MATCH (COK): ( "is not" ( "processing personal data o <…>
expression> VALUE: (MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])),[])

*********** \ expression has returned MyLabel ["is not"] (MyLeaf (RPMT ["processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
ppp inner> IN: ( "is not" ( "processing personal data o <…>
ppp inner> MATCH (COK): ( "is not" ( "processing personal data o <…>
ppp inner> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
pBSR> IN: ( "is not" ( "processing personal data o <…>
pBSR> MATCH (COK): ( "is not" ( "processing personal data o <…>
pBSR> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHICH ( "is not" ( "processing personal  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHICH ( "is not" ( "processing personal  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
manyIndentation/leaf?> IN: WHICH ( "is not" ( "processing personal  <…>
manyIndentation/leaf?> MATCH (COK): WHICH ( "is not" ( "processing personal  <…>
manyIndentation/leaf?> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******* \ manyIndentation/leaf? has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
******* / WHERE                                                                                                   :3_1:Must:
WHERE> IN: MUST ( "without undue delay" ) UPON ( "b <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :3_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :3_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=19:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :3_1:Must:
pTemporal/eventually> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=19:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=19:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :3_1:Must:
pTemporal/vaguely> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=19:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :3_1:Must:
******** / pAction calling dBoolStructP                                                                           :3_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :3_2:GoDeeper:
********** / expr pParamText                                                                                    :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: ( "without undue delay" ) UPON ( "becomi <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=20:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "without undue delay" ) UPON ( "becomi <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "with:
**************** / manyIndentation/leaf?                                                                   :3_2:Other "with:
***************** / expression                                                                            :3_2:Other "with:
****************** / labelPrefix                                                                         :3_2:Other "with:
labelPrefix> IN: "without undue delay" ) UPON ( "becoming <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=22:
labelPrefix> unexpected )

****************** / term p                                                                              :3_2:Other "with:
******************* / term p/notLabelTerm                                                               :3_2:Other "with:
******************** / term p/2:someIndentation expr p                                                 :3_2:Other "with:
********************* / someIndentation                                                               :3_2:Other "with:
********************** / myindented: consuming GoDeeper                                              :3_2:Other "with:
myindented: consuming GoDeeper> IN: "without undue delay" ) UPON ( "becoming <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=21:
myindented: consuming GoDeeper> unexpected "without undue delay"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "without undue delay" ) UPON ( "becoming <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=21:
someIndentation> unexpected "without undue delay"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "without undue delay" ) UPON ( "becoming <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=21:
term p/2:someIndentation expr p> unexpected "without undue delay"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :3_2:Other "with:
********************* / pParamText                                                                    :3_2:Other "with:
********************** / pParamText(flat) first line: pKeyValues                                     :3_2:Other "with:
*********************** / pKeyValuesAka                                                             :3_2:Other "with:
************************ / slAKA                                                                   :3_2:Other "with:
************************* / $*|                                                                   :3_2:Other "with:
************************** / slAKA base                                                          :3_2:Other "with:
*************************** / slKeyValues                                                       :3_2:Other "with:
**************************** / $*|                                                             :3_2:Other "with:
***************************** / someSL                                                        :3_2:Other "with:
someSL> IN: "without undue delay" ) UPON ( "becoming <…>
someSL> MATCH (COK): "without undue delay"
someSL> VALUE: ((["without undue delay"],0),[])

***************************** \ someSL has returned (["without undue delay"],0)                :4_2:UnDeeper:
$*|> IN: "without undue delay" ) UPON ( "becoming <…>
$*|> MATCH (COK): "without undue delay"
$*|> VALUE: ((["without undue delay"],0),[])

**************************** \ $*| has returned (["without undue delay"],0)                     :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :4_2:UnDeeper:
***************************** / |?| optional something                                         :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
******************************* / slTypeSig                                                  :4_2:UnDeeper:
******************************** / $>|                                                      :4_2:UnDeeper:
$>|> IN: ) UPON ( "becoming aware a data breach i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) UPON ( "becoming aware a data breach i <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=22:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) UPON ( "becoming aware a data breach i <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :4_2:UnDeeper:
***************************** > |>>/base got Nothing                                           :4_2:UnDeeper:
|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                :4_2:UnDeeper:
slKeyValues> IN: "without undue delay" ) UPON ( "becoming <…>
slKeyValues> MATCH (COK): "without undue delay"
slKeyValues> VALUE: ((("without undue delay" :| [],Nothing),0),[])

*************************** \ slKeyValues has returned (("without undue delay" :| [],Nothing),0) :4_2:UnDeeper:
slAKA base> IN: "without undue delay" ) UPON ( "becoming <…>
slAKA base> MATCH (COK): "without undue delay"
slAKA base> VALUE: ((("without undue delay" :| [],Nothing),0),[])

************************** \ slAKA base has returned (("without undue delay" :| [],Nothing),0)    :4_2:UnDeeper:
$*|> IN: "without undue delay" ) UPON ( "becoming <…>
$*|> MATCH (COK): "without undue delay"
$*|> VALUE: ((("without undue delay" :| [],Nothing),0),[])

************************* \ $*| has returned (("without undue delay" :| [],Nothing),0)             :4_2:UnDeeper:
************************* / |>>/recurse                                                            :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :4_2:UnDeeper:
************************** / slAKA optional akapart                                               :4_2:UnDeeper:
*************************** / |?| optional something                                             :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :4_2:UnDeeper:
***************************** / PAKA/akapart                                                   :4_2:UnDeeper:
****************************** / $>|                                                          :4_2:UnDeeper:
******************************* / Aka Token                                                  :4_2:UnDeeper:
Aka Token> IN: ) UPON ( "becoming aware a data breach i <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) UPON ( "becoming aware a data breach i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) UPON ( "becoming aware a data breach i <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) UPON ( "becoming aware a data breach i <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :4_2:UnDeeper:
slAKA optional akapart> IN: ) UPON ( "becoming aware a data breach i <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :4_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :4_2:UnDeeper:
|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :4_2:UnDeeper:
************************* / |>>/recurse                                                            :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :4_2:UnDeeper:
************************** / slAKA optional typically                                             :4_2:UnDeeper:
*************************** / |?| optional something                                             :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :4_2:UnDeeper:
***************************** / typically                                                      :4_2:UnDeeper:
****************************** / $>|                                                          :4_2:UnDeeper:
$>|> IN: ) UPON ( "becoming aware a data breach i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) UPON ( "becoming aware a data breach i <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) UPON ( "becoming aware a data breach i <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :4_2:UnDeeper:
slAKA optional typically> IN: ) UPON ( "becoming aware a data breach i <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :4_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :4_2:UnDeeper:
|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :4_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :4_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :4_2:UnDeeper:
slAKA> IN: "without undue delay" ) UPON ( "becoming <…>
slAKA> MATCH (COK): "without undue delay"
slAKA> VALUE: ((("without undue delay" :| [],Nothing),0),[])

************************ \ slAKA has returned (("without undue delay" :| [],Nothing),0)             :4_2:UnDeeper:
************************ / undeepers                                                                :4_2:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
************************* > sameLine: success!                                                     :4_2:UnDeeper:
undeepers> IN: ) UPON ( "becoming aware a data breach i <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                :4_2:UnDeeper:
pKeyValuesAka> IN: "without undue delay" ) UPON ( "becoming <…>
pKeyValuesAka> MATCH (COK): "without undue delay"
pKeyValuesAka> VALUE: (("without undue delay" :| [],Nothing),[])

*********************** \ pKeyValuesAka has returned ("without undue delay" :| [],Nothing)           :4_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "without undue delay" ) UPON ( "becoming <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "without undue delay"
pParamText(flat) first line: pKeyValues> VALUE: (("without undue delay" :| [],Nothing),[])

********************** \ pParamText(flat) first line: pKeyValues has returned ("without undue delay" :| [],Nothing) :4_2:UnDeeper:
********************** / pParamText(flat) subsequent lines: sameMany pKeyValues                       :4_2:UnDeeper:
*********************** / manyIndentation/leaf?                                                      :4_2:UnDeeper:
************************ / sameMany                                                                 :4_2:UnDeeper:
************************* / pKeyValuesAka                                                          :4_2:UnDeeper:
************************** / slAKA                                                                :4_2:UnDeeper:
*************************** / $*|                                                                :4_2:UnDeeper:
**************************** / slAKA base                                                       :4_2:UnDeeper:
***************************** / slKeyValues                                                    :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / someSL                                                     :4_2:UnDeeper:
******************************** / pNumAsText                                               :4_2:UnDeeper:
pNumAsText> IN: ) UPON ( "becoming aware a data breach i <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) UPON ( "becoming aware a data breach i <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) UPON ( "becoming aware a data breach i <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) UPON ( "becoming aware a data breach i <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=22:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) UPON ( "becoming aware a data breach i <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) UPON ( "becoming aware a data breach i <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) UPON ( "becoming aware a data breach i <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) UPON ( "becoming aware a data breach i <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=22:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) UPON ( "becoming aware a data breach i <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************ \ sameMany has returned []                                                 :4_2:UnDeeper:
manyIndentation/leaf?> IN: ) UPON ( "becoming aware a data breach i <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************** \ manyIndentation/leaf? has returned []                                      :4_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) UPON ( "becoming aware a data breach i <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []       :4_2:UnDeeper:
pParamText> IN: "without undue delay" ) UPON ( "becoming <…>
pParamText> MATCH (COK): "without undue delay"
pParamText> VALUE: (("without undue delay" :| [],Nothing) :| [],[])

********************* \ pParamText has returned ("without undue delay" :| [],Nothing) :| []            :4_2:UnDeeper:
term p/3:plain p> IN: "without undue delay" ) UPON ( "becoming <…>
term p/3:plain p> MATCH (COK): "without undue delay"
term p/3:plain p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

******************** \ term p/3:plain p has returned MyLeaf (("without undue delay" :| [],Nothing) :| []) :4_2:UnDeeper:
term p/notLabelTerm> IN: "without undue delay" ) UPON ( "becoming <…>
term p/notLabelTerm> MATCH (COK): "without undue delay"
term p/notLabelTerm> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("without undue delay" :| [],Nothing) :| []) :4_2:UnDeeper:
term p> IN: "without undue delay" ) UPON ( "becoming <…>
term p> MATCH (COK): "without undue delay"
term p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])             :4_2:UnDeeper:
****************** / binary(Or)                                                                           :4_2:UnDeeper:
binary(Or)> IN: ) UPON ( "becoming aware a data breach i <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=22:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :4_2:UnDeeper:
binary(And)> IN: ) UPON ( "becoming aware a data breach i <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=22:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :4_2:UnDeeper:
binary(SetLess)> IN: ) UPON ( "becoming aware a data breach i <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=22:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :4_2:UnDeeper:
binary(SetPlus)> IN: ) UPON ( "becoming aware a data breach i <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=22:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "without undue delay" ) UPON ( "becoming <…>
expression> MATCH (COK): "without undue delay"
expression> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

***************** \ expression has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])           :4_2:UnDeeper:
manyIndentation/leaf?> IN: "without undue delay" ) UPON ( "becoming <…>
manyIndentation/leaf?> MATCH (COK): "without undue delay"
manyIndentation/leaf?> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])  :4_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) UPON ( "becoming aware a data breach i <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Upon:
someIndentation> IN: ( "without undue delay" ) UPON ( "becomi <…>
someIndentation> MATCH (COK): ( "without undue delay" )
someIndentation> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

*************** \ someIndentation has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])       :4_1:Upon:
term p/2:someIndentation expr p> IN: ( "without undue delay" ) UPON ( "becomi <…>
term p/2:someIndentation expr p> MATCH (COK): ( "without undue delay" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (("without undue delay" :| [],Nothing) :| []) :4_1:Upon:
term p/notLabelTerm> IN: ( "without undue delay" ) UPON ( "becomi <…>
term p/notLabelTerm> MATCH (COK): ( "without undue delay" )
term p/notLabelTerm> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

************* \ term p/notLabelTerm has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])       :4_1:Upon:
term p> IN: ( "without undue delay" ) UPON ( "becomi <…>
term p> MATCH (COK): ( "without undue delay" )
term p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

************ \ term p has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])                      :4_1:Upon:
************ / binary(Or)                                                                                    :4_1:Upon:
binary(Or)> IN: UPON ( "becoming aware a data breach inv <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=23:
binary(Or)> unexpected UPON
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:Upon:
binary(And)> IN: UPON ( "becoming aware a data breach inv <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=23:
binary(And)> unexpected UPON
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:Upon:
binary(SetLess)> IN: UPON ( "becoming aware a data breach inv <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=23:
binary(SetLess)> unexpected UPON
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:Upon:
binary(SetPlus)> IN: UPON ( "becoming aware a data breach inv <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=23:
binary(SetPlus)> unexpected UPON
binary(SetPlus)> expecting PLUS

expression> IN: ( "without undue delay" ) UPON ( "becomi <…>
expression> MATCH (COK): ( "without undue delay" )
expression> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

*********** \ expression has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])                    :4_1:Upon:
expr pParamText> IN: ( "without undue delay" ) UPON ( "becomi <…>
expr pParamText> MATCH (COK): ( "without undue delay" )
expr pParamText> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

********** \ expr pParamText has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])                 :4_1:Upon:
dBoolStructP calling exprP> IN: ( "without undue delay" ) UPON ( "becomi <…>
dBoolStructP calling exprP> MATCH (COK): ( "without undue delay" )
dBoolStructP calling exprP> VALUE: (Leaf (("without undue delay" :| [],Nothing) :| []),[])

********* \ dBoolStructP calling exprP has returned Leaf (("without undue delay" :| [],Nothing) :| [])          :4_1:Upon:
pAction calling dBoolStructP> IN: ( "without undue delay" ) UPON ( "becomi <…>
pAction calling dBoolStructP> MATCH (COK): ( "without undue delay" )
pAction calling dBoolStructP> VALUE: (Leaf (("without undue delay" :| [],Nothing) :| []),[])

******** \ pAction calling dBoolStructP has returned Leaf (("without undue delay" :| [],Nothing) :| [])          :4_1:Upon:
pDA> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pDA> MATCH (COK): MUST ( "without undue delay" )
pDA> VALUE: ((DMust,Leaf (("without undue delay" :| [],Nothing) :| [])),[])

******* \ pDA has returned (DMust,Leaf (("without undue delay" :| [],Nothing) :| []))                             :4_1:Upon:
******* / WHERE                                                                                                   :4_1:Upon:
WHERE> IN: UPON ( "becoming aware a data breach inv <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected UPON
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UPON
$>|> expecting HAVING

preambleParamText:[Having]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected UPON
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UPON
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected UPON
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (COK): UPON
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "beco:
|>>/recurse> IN: "becoming aware a data breach involving  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected "becoming aware a data breach involving a client Organisation may have occurred"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Other "beco:
*********** / pParamText                                                                                        :4_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :4_2:Other "beco:
************* / pKeyValuesAka                                                                                 :4_2:Other "beco:
************** / slAKA                                                                                       :4_2:Other "beco:
*************** / $*|                                                                                       :4_2:Other "beco:
**************** / slAKA base                                                                              :4_2:Other "beco:
***************** / slKeyValues                                                                           :4_2:Other "beco:
****************** / $*|                                                                                 :4_2:Other "beco:
******************* / someSL                                                                            :4_2:Other "beco:
someSL> IN: "becoming aware a data breach involving  <…>
someSL> MATCH (COK): "becoming aware a data breach involving  <…>
someSL> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / |?| optional something                                                             :5_2:UnDeeper:
******************** / |>>/recurse                                                                      :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :5_2:UnDeeper:
********************* / slTypeSig                                                                      :5_2:UnDeeper:
********************** / $>|                                                                          :5_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) WHEN ( "the data breach occurs on or a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=26:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :5_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :5_2:UnDeeper:
slKeyValues> IN: "becoming aware a data breach involving  <…>
slKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
slKeyValues> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
slAKA base> IN: "becoming aware a data breach involving  <…>
slAKA base> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
Aka Token> IN: ) WHEN ( "the data breach occurs on or a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=26:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=26:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional typically                                                                 :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) WHEN ( "the data breach occurs on or a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=26:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional typically> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :5_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :5_2:UnDeeper:
slAKA> IN: "becoming aware a data breach involving  <…>
slAKA> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
************** / undeepers                                                                                    :5_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :5_2:UnDeeper:
*************** > sameLine: success!                                                                         :5_2:UnDeeper:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :5_2:UnDeeper:
pKeyValuesAka> IN: "becoming aware a data breach involving  <…>
pKeyValuesAka> MATCH (COK): "becoming aware a data breach involving  <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :5_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :5_2:UnDeeper:
************** / sameMany                                                                                     :5_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :5_2:UnDeeper:
**************** / slAKA                                                                                    :5_2:UnDeeper:
***************** / $*|                                                                                    :5_2:UnDeeper:
****************** / slAKA base                                                                           :5_2:UnDeeper:
******************* / slKeyValues                                                                        :5_2:UnDeeper:
******************** / $*|                                                                              :5_2:UnDeeper:
********************* / someSL                                                                         :5_2:UnDeeper:
********************** / pNumAsText                                                                   :5_2:UnDeeper:
pNumAsText> IN: ) WHEN ( "the data breach occurs on or a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) WHEN ( "the data breach occurs on or a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) WHEN ( "the data breach occurs on or a <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) WHEN ( "the data breach occurs on or a <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :5_2:UnDeeper:
manyIndentation/leaf?> IN: ) WHEN ( "the data breach occurs on or a <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :5_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :5_2:UnDeeper:
pParamText> IN: "becoming aware a data breach involving  <…>
pParamText> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
|>>/base> IN: "becoming aware a data breach involving  <…>
|>>/base> MATCH (COK): "becoming aware a data breach involving  <…>
|>>/base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0) :5_2:UnDeeper:
|>>/recurse> IN: ( "becoming aware a data breach involvin <…>
|>>/recurse> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>>/recurse> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
|>| calling $>>> IN: ( "becoming aware a data breach involvin <…>
|>| calling $>>> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
******** / undeepers                                                                                                :5_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :5_2:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:When:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:When:
preambleParamText:[Upon]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> MATCH (COK): UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []) :5_1:When:
******* / preambleParamText:[Upon]                                                                                :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected WHEN
$>|> expecting UPON

preambleParamText:[Upon]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected WHEN
preambleParamText:[Upon]> expecting UPON

******* / WHERE                                                                                                   :5_1:When:
WHERE> IN: WHEN ( "the data breach occurs on or aft <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected WHEN
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected WHEN
$>|> expecting HAVING

preambleParamText:[Having]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected WHEN
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected WHEN
$>|> expecting GIVEN

preambleParamText:[Given]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected WHEN
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :5_1:When:
preambleBoolStructR [Unless]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=27:
preambleBoolStructR [Unless]> unexpected WHEN
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :5_1:When:
******** / pBSR                                                                                                   :5_2:GoDeeper:
********* / ppp inner                                                                                            :5_2:GoDeeper:
********** / expression                                                                                         :5_2:GoDeeper:
*********** / labelPrefix                                                                                      :5_2:GoDeeper:
labelPrefix> IN: ( "the data breach occurs on or after th <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=28:
labelPrefix> unexpected (
labelPrefix> expecting Other text

*********** / term p                                                                                           :5_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :5_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :5_2:GoDeeper:
************** / someIndentation                                                                            :5_2:GoDeeper:
*************** / myindented: consuming GoDeeper                                                           :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "the data breach occurs on or after th <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented: consuming GoDeeper has returned GoDeeper                                      :5_2:Other "the:
*************** / manyIndentation/leaf?                                                                     :5_2:Other "the:
**************** / expression                                                                              :5_2:Other "the:
***************** / labelPrefix                                                                           :5_2:Other "the:
labelPrefix> IN: "the data breach occurs on or after the  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=30:
labelPrefix> unexpected )

***************** / term p                                                                                :5_2:Other "the:
****************** / term p/notLabelTerm                                                                 :5_2:Other "the:
******************* / term p/2:someIndentation expr p                                                   :5_2:Other "the:
******************** / someIndentation                                                                 :5_2:Other "the:
********************* / myindented: consuming GoDeeper                                                :5_2:Other "the:
myindented: consuming GoDeeper> IN: "the data breach occurs on or after the  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=29:
myindented: consuming GoDeeper> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "the data breach occurs on or after the  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=29:
someIndentation> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "the data breach occurs on or after the  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=29:
term p/2:someIndentation expr p> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
term p/2:someIndentation expr p> expecting (

******************* / term p/3:plain p                                                                  :5_2:Other "the:
******************** / pRelPred                                                                        :5_2:Other "the:
********************* / slRelPred                                                                     :5_2:Other "the:
********************** / nested simpleHorn                                                           :5_2:Other "the:
*********************** > |^|                                                                       :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |^| deeps                                                                  :6_2:UnDeeper:
|^| deeps> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*********************** \ |^| deeps has returned ([()],-1)                                        :6_1:Do:
nested simpleHorn> IN: "the data breach occurs on or after the  <…>
nested simpleHorn> MATCH (CERR): "the data breach occurs on or after the  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting ) or MEANS

********************** / RPConstraint                                                                :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |>| calling $>>                                                            :6_2:UnDeeper:
************************ / |>>/recurse                                                              :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ / |>>/base                                                                 :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "the data breach occurs on or after the  <…>
RPConstraint> MATCH (CERR): "the data breach occurs on or after the  <…>
RPConstraint> ERROR:
RPConstraint> offset=30:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************** / RPBoolStructR                                                               :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slMultiTerm                                                             :5_2:Other "the:
************************* / someSL                                                                :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
*********************** / |>| calling $>>                                                            :6_2:UnDeeper:
************************ / |>>/recurse                                                              :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ / |>>/base                                                                 :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "the data breach occurs on or after the  <…>
RPBoolStructR> MATCH (CERR): "the data breach occurs on or after the  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=30:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************** / RPMT                                                                        :5_2:Other "the:
*********************** / $*|                                                                       :5_2:Other "the:
************************ / slAKA                                                                   :5_2:Other "the:
************************* / $*|                                                                   :5_2:Other "the:
************************** / slAKA base                                                          :5_2:Other "the:
*************************** / slMultiTerm                                                       :5_2:Other "the:
**************************** / someSL                                                          :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

**************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*************************** \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slAKA base> IN: "the data breach occurs on or after the  <…>
slAKA base> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA base> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ slAKA base has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :6_2:UnDeeper:
************************** / slAKA optional akapart                                               :6_2:UnDeeper:
*************************** / |?| optional something                                             :6_2:UnDeeper:
**************************** / |>>/recurse                                                      :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :6_2:UnDeeper:
***************************** / PAKA/akapart                                                   :6_2:UnDeeper:
****************************** / $>|                                                          :6_2:UnDeeper:
******************************* / Aka Token                                                  :6_2:UnDeeper:
Aka Token> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=30:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=30:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :6_2:UnDeeper:
slAKA optional akapart> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :6_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :6_2:UnDeeper:
************************** / slAKA optional typically                                             :6_2:UnDeeper:
*************************** / |?| optional something                                             :6_2:UnDeeper:
**************************** / |>>/recurse                                                      :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :6_2:UnDeeper:
***************************** / typically                                                      :6_2:UnDeeper:
****************************** / $>|                                                          :6_2:UnDeeper:
$>|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=30:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :6_2:UnDeeper:
slAKA optional typically> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :6_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :6_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :6_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :6_2:UnDeeper:
slAKA> IN: "the data breach occurs on or after the  <…>
slAKA> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ slAKA has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
RPMT> IN: "the data breach occurs on or after the  <…>
RPMT> MATCH (COK): "the data breach occurs on or after the  <…>
RPMT> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************** \ RPMT has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slRelPred> IN: "the data breach occurs on or after the  <…>
slRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
slRelPred> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ slRelPred has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
********************* / undeepers                                                                      :6_2:UnDeeper:
********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :6_2:UnDeeper:
********************** > sameLine: success!                                                           :6_2:UnDeeper:
undeepers> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************* \ undeepers has returned ()                                                      :6_2:UnDeeper:
pRelPred> IN: "the data breach occurs on or after the  <…>
pRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
pRelPred> VALUE: (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],[])

******************** \ pRelPred has returned RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"] :6_2:UnDeeper:
term p/3:plain p> IN: "the data breach occurs on or after the  <…>
term p/3:plain p> MATCH (COK): "the data breach occurs on or after the  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************* \ term p/3:plain p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: "the data breach occurs on or after the  <…>
term p/notLabelTerm> MATCH (COK): "the data breach occurs on or after the  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

****************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
term p> IN: "the data breach occurs on or after the  <…>
term p> MATCH (COK): "the data breach occurs on or after the  <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

***************** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
***************** / binary(Or)                                                                             :6_2:UnDeeper:
binary(Or)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected )
binary(Or)> expecting OR

***************** / binary(And)                                                                            :6_2:UnDeeper:
binary(And)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected )
binary(And)> expecting AND

***************** / binary(SetLess)                                                                        :6_2:UnDeeper:
binary(SetLess)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

***************** / binary(SetPlus)                                                                        :6_2:UnDeeper:
binary(SetPlus)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "the data breach occurs on or after the  <…>
expression> MATCH (COK): "the data breach occurs on or after the  <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

**************** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: "the data breach occurs on or after the  <…>
manyIndentation/leaf?> MATCH (COK): "the data breach occurs on or after the  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
*************** / myindented: consuming UnDeeper                                                             :6_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented: consuming UnDeeper has returned UnDeeper                                    :6_1:Do:
someIndentation> IN: ( "the data breach occurs on or after th <…>
someIndentation> MATCH (COK): ( "the data breach occurs on or after th <…>
someIndentation> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/2:someIndentation expr p> IN: ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/notLabelTerm> IN: ( "the data breach occurs on or after th <…>
term p/notLabelTerm> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p> IN: ( "the data breach occurs on or after th <…>
term p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*********** \ term p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
*********** / binary(Or)                                                                                      :6_1:Do:
binary(Or)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected DO
binary(Or)> expecting OR

*********** / binary(And)                                                                                     :6_1:Do:
binary(And)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected DO
binary(And)> expecting AND

*********** / binary(SetLess)                                                                                 :6_1:Do:
binary(SetLess)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected DO
binary(SetLess)> expecting LESS

*********** / binary(SetPlus)                                                                                 :6_1:Do:
binary(SetPlus)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected DO
binary(SetPlus)> expecting PLUS

expression> IN: ( "the data breach occurs on or after th <…>
expression> MATCH (COK): ( "the data breach occurs on or after th <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
ppp inner> IN: ( "the data breach occurs on or after th <…>
ppp inner> MATCH (COK): ( "the data breach occurs on or after th <…>
ppp inner> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********* \ ppp inner has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
pBSR> IN: ( "the data breach occurs on or after th <…>
pBSR> MATCH (COK): ( "the data breach occurs on or after th <…>
pBSR> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******** \ pBSR has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
preambleBoolStructR [When,If]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> MATCH (COK): WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> VALUE: ((When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])),[])

******* \ preambleBoolStructR [When,If] has returned (When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :6_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :6_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=31:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=31:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=31:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :6_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=31:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / pTemporal/eventually                                                                                    :6_1:Do:
pTemporal/eventually> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=31:
pTemporal/eventually> unexpected DO
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=31:
pTemporal/specifically> unexpected DO
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :6_1:Do:
pTemporal/vaguely> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=31:
pTemporal/vaguely> unexpected DO
pTemporal/vaguely> expecting Other text

regulative permutation with deontic-action> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
regulative permutation with deontic-action> MATCH (COK): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
regulative permutation with deontic-action> VALUE: (RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []} :6_1:Do:
permutationsReg> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
permutationsReg> MATCH (COK): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []} :6_1:Do:
***** / pHenceLest-Hence                                                                                            :6_1:Do:
pHenceLest-Hence> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHenceLest-Hence> MATCH (EERR): <EMPTY>
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=31:
pHenceLest-Hence> unexpected DO
pHenceLest-Hence> expecting HENCE

***** / pHenceLest-Lest                                                                                             :6_1:Do:
pHenceLest-Lest> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHenceLest-Lest> MATCH (EERR): <EMPTY>
pHenceLest-Lest> ERROR:
pHenceLest-Lest> offset=31:
pHenceLest-Lest> unexpected DO
pHenceLest-Lest> expecting LEST

****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), rbwhere = []} :6_1:Do:
****   pRegRuleNormal: the positive preamble is Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :6_1:Do:
****   pRegRuleNormal: the negative preamble is Nothing                                                             :6_1:Do:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :6_1:Do:
pRegRuleNormal> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRegRuleNormal> MATCH (COK): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRegRuleNormal> VALUE: (Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :6_1:Do:
pRegRule> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRegRule> MATCH (COK): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRegRule> VALUE: (Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*** \ pRegRule has returned Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :6_1:Do:
pRule> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRule> MATCH (COK): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRule> VALUE: (Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

** \ pRule has returned Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :6_1:Do:
** / pRule                                                                                                             :6_1:Do:
*** / pRegRule                                                                                                        :6_1:Do:
**** / pRuleLabel                                                                                                    :6_1:Do:
***** / $>|                                                                                                         :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :6_1:Do:
***** / someDeep                                                                                                    :6_1:Do:
****** / someDeep first part calls base directly                                                                   :6_1:Do:
someDeep first part calls base directly> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=31:
someDeep first part calls base directly> unexpected DO
someDeep first part calls base directly> expecting Other text

someDeep> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=31:
someDeep> unexpected DO
someDeep> expecting Other text

pRegRuleSugary> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=31:
pRegRuleSugary> unexpected DO
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :6_1:Do:
***** / permutationsReg                                                                                             :6_1:Do:
****** / regulative permutation with deontic-temporal                                                              :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=31:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=31:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :6_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=31:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :6_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=31:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting MAY, MUST, or SHANT

pDT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=31:
pDT> unexpected DO
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :6_1:Do:
pActor [Every,Party,TokAll]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=31:
pActor [Every,Party,TokAll]> unexpected DO
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :6_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :6_2:GoDeeper:
********** / expr pParamText                                                                                    :6_2:GoDeeper:
*********** / expression                                                                                       :6_2:GoDeeper:
************ / labelPrefix                                                                                    :6_2:GoDeeper:
labelPrefix> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=32:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :6_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :6_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :6_2:GoDeeper:
*************** / someIndentation                                                                          :6_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :6_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :6_2:Other "NOTI:
**************** / manyIndentation/leaf?                                                                   :6_2:Other "NOTI:
***************** / expression                                                                            :6_2:Other "NOTI:
****************** / labelPrefix                                                                         :6_2:Other "NOTI:
labelPrefix> IN: "NOTIFY" ( "the Organisation" ) "for whi <…>
labelPrefix> MATCH (COK): "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

****************** \ labelPrefix has returned "NOTIFY"                                                    :6_3:GoDeeper:
****************** / term p                                                                               :6_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :6_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :6_3:GoDeeper:
********************* / someIndentation                                                                :6_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "the Organisation" ) "for which" ( "yo <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :6_3:Other "the:
********************** / manyIndentation/leaf?                                                         :6_3:Other "the:
*********************** / expression                                                                  :6_3:Other "the:
************************ / labelPrefix                                                               :6_3:Other "the:
labelPrefix> IN: "the Organisation" ) "for which" ( "you  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=36:
labelPrefix> unexpected )

************************ / term p                                                                    :6_3:Other "the:
************************* / term p/notLabelTerm                                                     :6_3:Other "the:
************************** / term p/2:someIndentation expr p                                       :6_3:Other "the:
*************************** / someIndentation                                                     :6_3:Other "the:
**************************** / myindented: consuming GoDeeper                                    :6_3:Other "the:
myindented: consuming GoDeeper> IN: "the Organisation" ) "for which" ( "you  <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=35:
myindented: consuming GoDeeper> unexpected "the Organisation"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "the Organisation" ) "for which" ( "you  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=35:
someIndentation> unexpected "the Organisation"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "the Organisation" ) "for which" ( "you  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=35:
term p/2:someIndentation expr p> unexpected "the Organisation"
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :6_3:Other "the:
*************************** / pParamText                                                          :6_3:Other "the:
**************************** / pParamText(flat) first line: pKeyValues                           :6_3:Other "the:
***************************** / pKeyValuesAka                                                   :6_3:Other "the:
****************************** / slAKA                                                         :6_3:Other "the:
******************************* / $*|                                                         :6_3:Other "the:
******************************** / slAKA base                                                :6_3:Other "the:
********************************* / slKeyValues                                             :6_3:Other "the:
********************************** / $*|                                                   :6_3:Other "the:
*********************************** / someSL                                              :6_3:Other "the:
someSL> IN: "the Organisation" ) "for which" ( "you  <…>
someSL> MATCH (COK): "the Organisation"
someSL> VALUE: ((["the Organisation"],0),[])

*********************************** \ someSL has returned (["the Organisation"],0)         :7_3:UnDeeper:
$*|> IN: "the Organisation" ) "for which" ( "you  <…>
$*|> MATCH (COK): "the Organisation"
$*|> VALUE: ((["the Organisation"],0),[])

********************************** \ $*| has returned (["the Organisation"],0)              :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / |?| optional something                               :7_3:UnDeeper:
************************************ / |>>/recurse                                        :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                           :7_3:UnDeeper:
************************************* / slTypeSig                                        :7_3:UnDeeper:
************************************** / $>|                                            :7_3:UnDeeper:
$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "for which" ( "you act as a Data Inter <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=36:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :7_3:UnDeeper:
*********************************** > |>>/base got Nothing                                 :7_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                      :7_3:UnDeeper:
slKeyValues> IN: "the Organisation" ) "for which" ( "you  <…>
slKeyValues> MATCH (COK): "the Organisation"
slKeyValues> VALUE: ((("the Organisation" :| [],Nothing),0),[])

********************************* \ slKeyValues has returned (("the Organisation" :| [],Nothing),0) :7_3:UnDeeper:
slAKA base> IN: "the Organisation" ) "for which" ( "you  <…>
slAKA base> MATCH (COK): "the Organisation"
slAKA base> VALUE: ((("the Organisation" :| [],Nothing),0),[])

******************************** \ slAKA base has returned (("the Organisation" :| [],Nothing),0) :7_3:UnDeeper:
$*|> IN: "the Organisation" ) "for which" ( "you  <…>
$*|> MATCH (COK): "the Organisation"
$*|> VALUE: ((("the Organisation" :| [],Nothing),0),[])

******************************* \ $*| has returned (("the Organisation" :| [],Nothing),0)      :7_3:UnDeeper:
******************************* / |>>/recurse                                                  :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :7_3:UnDeeper:
******************************** / slAKA optional akapart                                     :7_3:UnDeeper:
********************************* / |?| optional something                                   :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / PAKA/akapart                                         :7_3:UnDeeper:
************************************ / $>|                                                :7_3:UnDeeper:
************************************* / Aka Token                                        :7_3:UnDeeper:
Aka Token> IN: ) "for which" ( "you act as a Data Inter <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=36:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "for which" ( "you act as a Data Inter <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=36:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :7_3:UnDeeper:
slAKA optional akapart> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)            :7_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :7_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :7_3:UnDeeper:
******************************* / |>>/recurse                                                  :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :7_3:UnDeeper:
******************************** / slAKA optional typically                                   :7_3:UnDeeper:
********************************* / |?| optional something                                   :7_3:UnDeeper:
********************************** / |>>/recurse                                            :7_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=36:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :7_3:UnDeeper:
*********************************** / typically                                            :7_3:UnDeeper:
************************************ / $>|                                                :7_3:UnDeeper:
$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "for which" ( "you act as a Data Inter <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=36:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=36:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :7_3:UnDeeper:
slAKA optional typically> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)          :7_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :7_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :7_3:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :7_3:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                  :7_3:UnDeeper:
slAKA> IN: "the Organisation" ) "for which" ( "you  <…>
slAKA> MATCH (COK): "the Organisation"
slAKA> VALUE: ((("the Organisation" :| [],Nothing),0),[])

****************************** \ slAKA has returned (("the Organisation" :| [],Nothing),0)      :7_3:UnDeeper:
****************************** / undeepers                                                      :7_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_3:UnDeeper:
******************************* > sameLine: success!                                           :7_3:UnDeeper:
undeepers> IN: ) "for which" ( "you act as a Data Inter <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :7_3:UnDeeper:
pKeyValuesAka> IN: "the Organisation" ) "for which" ( "you  <…>
pKeyValuesAka> MATCH (COK): "the Organisation"
pKeyValuesAka> VALUE: (("the Organisation" :| [],Nothing),[])

***************************** \ pKeyValuesAka has returned ("the Organisation" :| [],Nothing)    :7_3:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "the Organisation" ) "for which" ( "you  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "the Organisation"
pParamText(flat) first line: pKeyValues> VALUE: (("the Organisation" :| [],Nothing),[])

**************************** \ pParamText(flat) first line: pKeyValues has returned ("the Organisation" :| [],Nothing) :7_3:UnDeeper:
**************************** / pParamText(flat) subsequent lines: sameMany pKeyValues             :7_3:UnDeeper:
***************************** / manyIndentation/leaf?                                            :7_3:UnDeeper:
****************************** / sameMany                                                       :7_3:UnDeeper:
******************************* / pKeyValuesAka                                                :7_3:UnDeeper:
******************************** / slAKA                                                      :7_3:UnDeeper:
********************************* / $*|                                                      :7_3:UnDeeper:
********************************** / slAKA base                                             :7_3:UnDeeper:
*********************************** / slKeyValues                                          :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: ) "for which" ( "you act as a Data Inter <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=36:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "for which" ( "you act as a Data Inter <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=36:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "for which" ( "you act as a Data Inter <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "for which" ( "you act as a Data Inter <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=36:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=36:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "for which" ( "you act as a Data Inter <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=36:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "for which" ( "you act as a Data Inter <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=36:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "for which" ( "you act as a Data Inter <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

****************************** \ sameMany has returned []                                       :7_3:UnDeeper:
manyIndentation/leaf?> IN: ) "for which" ( "you act as a Data Inter <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

***************************** \ manyIndentation/leaf? has returned []                            :7_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "for which" ( "you act as a Data Inter <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

**************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_3:UnDeeper:
pParamText> IN: "the Organisation" ) "for which" ( "you  <…>
pParamText> MATCH (COK): "the Organisation"
pParamText> VALUE: (("the Organisation" :| [],Nothing) :| [],[])

*************************** \ pParamText has returned ("the Organisation" :| [],Nothing) :| []     :7_3:UnDeeper:
term p/3:plain p> IN: "the Organisation" ) "for which" ( "you  <…>
term p/3:plain p> MATCH (COK): "the Organisation"
term p/3:plain p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************** \ term p/3:plain p has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
term p/notLabelTerm> IN: "the Organisation" ) "for which" ( "you  <…>
term p/notLabelTerm> MATCH (COK): "the Organisation"
term p/notLabelTerm> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
term p> IN: "the Organisation" ) "for which" ( "you  <…>
term p> MATCH (COK): "the Organisation"
term p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])      :7_3:UnDeeper:
************************ / binary(Or)                                                                 :7_3:UnDeeper:
binary(Or)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=36:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :7_3:UnDeeper:
binary(And)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=36:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :7_3:UnDeeper:
binary(SetLess)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=36:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :7_3:UnDeeper:
binary(SetPlus)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=36:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "the Organisation" ) "for which" ( "you  <…>
expression> MATCH (COK): "the Organisation"
expression> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

*********************** \ expression has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])    :7_3:UnDeeper:
manyIndentation/leaf?> IN: "the Organisation" ) "for which" ( "you  <…>
manyIndentation/leaf?> MATCH (COK): "the Organisation"
manyIndentation/leaf?> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :7_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) "for which" ( "you act as a Data Inter <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :7_2:Other "for:
someIndentation> IN: ( "the Organisation" ) "for which" ( "yo <…>
someIndentation> MATCH (COK): ( "the Organisation" )
someIndentation> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

********************* \ someIndentation has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p/2:someIndentation expr p> IN: ( "the Organisation" ) "for which" ( "yo <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the Organisation" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p/notLabelTerm> IN: ( "the Organisation" ) "for which" ( "yo <…>
term p/notLabelTerm> MATCH (COK): ( "the Organisation" )
term p/notLabelTerm> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("the Organisation" :| [],Nothing) :| []) :7_2:Other "for:
term p> IN: ( "the Organisation" ) "for which" ( "yo <…>
term p> MATCH (COK): ( "the Organisation" )
term p> VALUE: (MyLeaf (("the Organisation" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("the Organisation" :| [],Nothing) :| [])               :7_2:Other "for:
****************** / binary(Or)                                                                          :7_2:Other "for:
binary(Or)> IN: "for which" ( "you act as a Data Interme <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=37:
binary(Or)> unexpected "for which"
binary(Or)> expecting OR

****************** / binary(And)                                                                         :7_2:Other "for:
binary(And)> IN: "for which" ( "you act as a Data Interme <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=37:
binary(And)> unexpected "for which"
binary(And)> expecting AND

****************** / binary(SetLess)                                                                     :7_2:Other "for:
binary(SetLess)> IN: "for which" ( "you act as a Data Interme <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=37:
binary(SetLess)> unexpected "for which"
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                     :7_2:Other "for:
binary(SetPlus)> IN: "for which" ( "you act as a Data Interme <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=37:
binary(SetPlus)> unexpected "for which"
binary(SetPlus)> expecting PLUS

expression> IN: "NOTIFY" ( "the Organisation" ) "for whi <…>
expression> MATCH (COK): "NOTIFY" ( "the Organisation" )
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])),[])

***************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])) :7_2:Other "for:
manyIndentation/leaf?> IN: "NOTIFY" ( "the Organisation" ) "for whi <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "the Organisation" )
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the Organisation" :| [],Nothing) :| [])) :7_2:Other "for:
**************** / myindented: consuming UnDeeper                                                          :7_2:Other "for:
myindented: consuming UnDeeper> IN: "for which" ( "you act as a Data Interme <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=37:
myindented: consuming UnDeeper> unexpected "for which"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
someIndentation> MATCH (CERR): ( "NOTIFY" ( "the Organisation" )
someIndentation> ERROR:
someIndentation> offset=37:
someIndentation> unexpected "for which"
someIndentation> expecting ), AND, LESS, OR, or PLUS

term p/2:someIndentation expr p> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
term p/2:someIndentation expr p> MATCH (CERR): ( "NOTIFY" ( "the Organisation" )
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=37:
term p/2:someIndentation expr p> unexpected "for which"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, or PLUS

************** / term p/3:plain p                                                                           :6_2:GoDeeper:
*************** / pParamText                                                                               :6_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :6_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :6_2:GoDeeper:
****************** / slAKA                                                                              :6_2:GoDeeper:
******************* / $*|                                                                              :6_2:GoDeeper:
******************** / slAKA base                                                                     :6_2:GoDeeper:
********************* / slKeyValues                                                                  :6_2:GoDeeper:
********************** / $*|                                                                        :6_2:GoDeeper:
*********************** / someSL                                                                   :6_2:GoDeeper:
************************ / pNumAsText                                                             :6_2:GoDeeper:
pNumAsText> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=32:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=32:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=32:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=32:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=32:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=32:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=32:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=37:
term p/notLabelTerm> unexpected "for which"
term p/notLabelTerm> expecting ), AND, LESS, OR, or PLUS

term p> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=37:
term p> unexpected "for which"
term p> expecting ), AND, LESS, OR, or PLUS

expression> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=37:
expression> unexpected "for which"
expression> expecting expression

expr pParamText> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=37:
expr pParamText> unexpected "for which"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=37:
dBoolStructP calling exprP> unexpected "for which"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=37:
pAction calling dBoolStructP> unexpected "for which"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=37:
pDoAction/pAction> unexpected "for which"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
regulative permutation with deontic-temporal> MATCH (CERR): DO
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=37:
regulative permutation with deontic-temporal> unexpected "for which"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=31:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=31:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :6_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=31:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :6_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=31:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :6_1:Do:
pTemporal/eventually> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=31:
pTemporal/eventually> unexpected DO
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=31:
pTemporal/specifically> unexpected DO
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :6_1:Do:
pTemporal/vaguely> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=31:
pTemporal/vaguely> unexpected DO
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :6_1:Do:
pActor [Every,Party,TokAll]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=31:
pActor [Every,Party,TokAll]> unexpected DO
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* / pDA                                                                                                     :6_1:Do:
pDA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=31:
pDA> unexpected DO
pDA> expecting MAY, MUST, or SHANT

regulative permutation with deontic-action> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=31:
regulative permutation with deontic-action> unexpected DO
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

permutationsReg> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=37:
permutationsReg> unexpected "for which"
permutationsReg> expecting expression

pRegRuleNormal> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=37:
pRegRuleNormal> unexpected "for which"
pRegRuleNormal> expecting expression

pRegRule> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=37:
pRegRule> unexpected "for which"
pRegRule> expecting expression or §

*** / pTypeDefinition                                                                                                 :6_1:Do:
**** / pRuleLabel                                                                                                    :6_1:Do:
***** / $>|                                                                                                         :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

**** / pHornlike/uponLimb                                                                                            :6_1:Do:
***** / preambleParamText:[Upon]                                                                                    :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=31:
pHornlike/uponLimb> unexpected DO
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :6_1:Do:
***** / preambleParamText:[Given]                                                                                   :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=31:
pHornlike/givenLimb> unexpected DO
pHornlike/givenLimb> expecting GIVEN

pTypeDefinition> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=31:
pTypeDefinition> unexpected DO
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** / pConstitutiveRule                                                                                               :6_1:Do:
**** / pRuleLabel                                                                                                    :6_1:Do:
***** / $>|                                                                                                         :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

**** / calling myindented pNameParens                                                                                :6_1:Do:
***** / manyIndentation/leaf?                                                                                       :6_1:Do:
****** / pMultiTermAka                                                                                             :6_1:Do:
******* / pAKA                                                                                                    :6_1:Do:
******** / slAKA                                                                                                 :6_1:Do:
********* / $*|                                                                                                 :6_1:Do:
********** / slAKA base                                                                                        :6_1:Do:
*********** / slMultiTerm                                                                                     :6_1:Do:
************ / someSL                                                                                        :6_1:Do:
************* / pNumAsText                                                                                  :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

pAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=31:
pAKA> unexpected DO
pAKA> expecting other text or number

pMultiTermAka> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=31:
pMultiTermAka> unexpected DO
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :6_1:Do:
****** / someIndentation                                                                                           :6_1:Do:
******* / myindented: consuming GoDeeper                                                                          :6_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=31:
calling myindented pNameParens> unexpected DO
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=31:
pConstitutiveRule> unexpected DO
pConstitutiveRule> expecting (, other text or number, or §

*** / pScenarioRule                                                                                                   :6_1:Do:
**** / pRuleLabel                                                                                                    :6_1:Do:
***** / $>|                                                                                                         :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

**** / pExpect                                                                                                       :6_1:Do:
pExpect> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=31:
pExpect> unexpected DO
pExpect> expecting EXPECT

pScenarioRule> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=31:
pScenarioRule> unexpected DO
pScenarioRule> expecting EXPECT, GIVEN, or §

*** / pHornlike                                                                                                       :6_1:Do:
**** / pSrcRef                                                                                                       :6_1:Do:
***** / pRuleLabel                                                                                                  :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

pSrcRef> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 6, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 6, version = Nothing})) :6_1:Do:
**** / pHornlike / permute                                                                                           :6_1:Do:
***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :6_1:Do:
****** / preambleParamText:[Upon]                                                                                  :6_1:Do:
******* / $>|                                                                                                     :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=31:
pHornlike/uponLimb> unexpected DO
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/givenLimb                                                                                         :6_1:Do:
****** / preambleParamText:[Given]                                                                                 :6_1:Do:
******* / $>|                                                                                                     :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=31:
pHornlike/givenLimb> unexpected DO
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/givenLimb                                                                                         :6_1:Do:
****** / preambleParamText:[Given]                                                                                 :6_1:Do:
******* / $>|                                                                                                     :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=31:
pHornlike/givenLimb> unexpected DO
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :6_1:Do:
****** / preambleParamText:[Upon]                                                                                  :6_1:Do:
******* / $>|                                                                                                     :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=31:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=31:
pHornlike/uponLimb> unexpected DO
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :6_1:Do:
****** / whenMeansIf                                                                                               :6_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=31:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :6_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=31:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=31:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :6_1:Do:
****** / $>|                                                                                                       :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=31:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :6_1:Do:
****** / manyIndentation/leaf?                                                                                     :6_1:Do:
******* / relPredNextlineWhen                                                                                     :6_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :6_1:Do:
********* / optIndentedTuple                                                                                    :6_1:Do:
********** / optIndented                                                                                       :6_1:Do:
*********** / pRelPred                                                                                        :6_1:Do:
************ / slRelPred                                                                                     :6_1:Do:
************* / nested simpleHorn                                                                           :6_1:Do:
************** > |^|                                                                                       :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :6_1:Do:
************** / $*|                                                                                       :6_1:Do:
*************** / slAKA                                                                                   :6_1:Do:
**************** / $*|                                                                                   :6_1:Do:
***************** / slAKA base                                                                          :6_1:Do:
****************** / slMultiTerm                                                                       :6_1:Do:
******************* / someSL                                                                          :6_1:Do:
******************** / pNumAsText                                                                    :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=31:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=31:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=31:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=31:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :6_1:Do:
******** / $*|                                                                                                   :6_1:Do:
********* / slRelPred                                                                                           :6_1:Do:
********** / nested simpleHorn                                                                                 :6_1:Do:
*********** > |^|                                                                                             :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slMultiTerm                                                                                   :6_1:Do:
************* / someSL                                                                                      :6_1:Do:
************** / pNumAsText                                                                                :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :6_1:Do:
*********** / $*|                                                                                             :6_1:Do:
************ / slAKA                                                                                         :6_1:Do:
************* / $*|                                                                                         :6_1:Do:
************** / slAKA base                                                                                :6_1:Do:
*************** / slMultiTerm                                                                             :6_1:Do:
**************** / someSL                                                                                :6_1:Do:
***************** / pNumAsText                                                                          :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=31:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=31:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :6_1:Do:
******* / someIndentation                                                                                         :6_1:Do:
******** / myindented: consuming GoDeeper                                                                        :6_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=31:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=31:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

pHornlike / permute> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=31:
pHornlike / permute> unexpected DO
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

pHornlike> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=31:
pHornlike> unexpected DO
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** / pRuleLabel                                                                                                      :6_1:Do:
**** / $>|                                                                                                           :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=31:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

*** / pRule: unwrapping indentation and recursing                                                                     :6_1:Do:
**** / myindented: consuming GoDeeper                                                                                :6_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=31:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

pRule: unwrapping indentation and recursing> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=31:
pRule: unwrapping indentation and recursing> unexpected DO
pRule: unwrapping indentation and recursing> expecting (

pRule> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=37:
pRule> unexpected "for which"
pRule> expecting EOL or regulative rule


PDPA
  pdpadbno-2 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-2
       expected: [[Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("NOTIFY" :| ["the Organisation"],Nothing) :| [("for which" :| ["you act as a Data Intermediary"],Nothing)]), temporal = Just (TemporalConstraint TVague (Just 0) "without undue delay"), hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}]]
       but parsing failed with error:
       6:1:
       unexpected DO
       expecting AFTER, AND, BEFORE, BY, EVENTUALLY, GIVEN, HAVING, HENCE, IF, LESS, LEST, ON, OR, Other text, PLUS, UNLESS, WHEN, WHERE, or end of input
       EVERY                                                                           Data Intermediary                                                                                                                                               AKA                                                                             You                                                                            
       WHICH                                                                           is not                                                                          processing personal data on behalf of and for the purposes of a public agency                                                                                                                                                                  
       MUST                                                                            without undue delay                                                                                                                                                                                                                                                                                                            
       UPON                                                                            becoming aware a data breach involving a client Organisation may have occurred                                                                                                                                                                                                                                                 
       WHEN                                                                            the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13                                                                                                                                                                                                                                                
       ✳ ➔                                                                             NOTIFY                                                                          the Organisation                                                                                                                                                                                                                               
                                                                                       for which                                                                       you act as a Data Intermediary                                                                                                                                                                                                                 
       

  To rerun use: --match "/PDPA/pdpadbno-2/"

Randomized with seed 78094025

Finished in 0.0700 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

