* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-3/)

* Tokens
EVERY
    ( "Data Intermediary"
        ( AKA ( "You" ) )
    ) WHICH ( "processes personal data on behalf of and for the purposes of a public agency" ) MUST ( "without undue delay" ) UPON ( "becoming aware a data breach involving a client public agency may have occurred" ) DO
    ( "NOTIFY" ( "the Public Agency" ) "for which" ( "you act as a Data Intermediary" ) )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

pRuleLabel> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

someDeep> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

pRegRuleSugary> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

pDT> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Data Intermediary" ( AKA ( "You" ) )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                              :1_3:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected AKA
pNumAsText> expecting number

someSL> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
someSL> MATCH (COK): "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
slMultiTerm> MATCH (COK): "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
slAKA base> MATCH (COK): "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
$*|> MATCH (COK): "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                   :1_3:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

************** / |>>/base                                                                                      :1_3:Aka:
*************** / slAKA optional akapart                                                                      :1_3:Aka:
**************** / |?| optional something                                                                    :1_3:Aka:
***************** / |>>/recurse                                                                             :1_3:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

***************** / |>>/base                                                                                :1_3:Aka:
****************** / PAKA/akapart                                                                          :1_3:Aka:
******************* / $>|                                                                                 :1_3:Aka:
******************** / Aka Token                                                                         :1_3:Aka:
Aka Token> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

******************** \ Aka Token has returned Aka                                                         :1_4:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

******************* \ $>| has returned Aka                                                                 :1_4:GoDeeper:
******************* / |>>/recurse                                                                          :1_4:GoDeeper:
******************** / |>>/recurse                                                                         :1_4:Other "You":
|>>/recurse> IN: "You" ) ) ) WHICH ( "processes personal  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

******************** / |>>/base                                                                            :1_4:Other "You":
********************* / someSL                                                                            :1_4:Other "You":
someSL> IN: "You" ) ) ) WHICH ( "processes personal  <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

********************* \ someSL has returned (["You"],0)                                                :2_2:UnDeeper:
********************* > |>>/base got ["You"]                                                           :2_2:UnDeeper:
|>>/base> IN: "You" ) ) ) WHICH ( "processes personal  <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

******************** \ |>>/base has returned (["You"],0)                                                :2_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) WHICH ( "processes persona <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************* \ |>>/recurse has returned (["You"],1)                                               :2_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

****************** \ PAKA/akapart has returned (["You"],1)                                                :2_2:UnDeeper:
****************** > |>>/base got ["You"]                                                                 :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

***************** \ |>>/base has returned (["You"],1)                                                      :2_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

**************** \ |?| optional something has returned (Just ["You"],1)                                     :2_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

*************** \ slAKA optional akapart has returned (Just ["You"],1)                                       :2_2:UnDeeper:
*************** > |>>/base got Just ["You"]                                                                  :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

************** \ |>>/base has returned (Just ["You"],1)                                                       :2_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) WHICH ( "processes p <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************* \ |>>/recurse has returned (Just ["You"],2)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) WHICH ( "processes personal data o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) WHICH ( "processes personal data o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) ) ) WHICH ( "processes personal data o <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) WHICH ( "processes personal data o <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) WHICH ( "processes personal data o <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) WHICH ( "processes personal data o <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) ) ) WHICH ( "processes personal data o <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) ) ) WHICH ( "processes personal data o <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
slAKA> MATCH (COK): "Data Intermediary" ( AKA ( "You"
slAKA> VALUE: ((["Data Intermediary"],2),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],2)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                 :2_4:UnDeeper:
undeepers> IN: ) ) ) WHICH ( "processes personal data o <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                            :2_4:UnDeeper:
pAKA> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
pAKA> MATCH (COK): "Data Intermediary" ( AKA ( "You" ) )
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                :2_4:UnDeeper:
pMultiTermAka> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
pMultiTermAka> MATCH (COK): "Data Intermediary" ( AKA ( "You" ) )
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                         :2_4:UnDeeper:
manyIndentation/leaf?> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
manyIndentation/leaf?> MATCH (COK): "Data Intermediary" ( AKA ( "You" ) )
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                   :2_4:UnDeeper:
********* / myindented: consuming UnDeeper                                                                             :2_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHICH ( "processes personal data on be <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Which:
someIndentation> IN: ( "Data Intermediary" ( AKA ( "You" ) )  <…>
someIndentation> MATCH (COK): ( "Data Intermediary" ( AKA ( "You" ) )  <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [Every,Party,TokAll]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "Data Intermediary" ( AKA ( "You <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Data Intermediary" :| [],Nothing) :| []))       :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( "processes personal data on behalf of  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "processes personal data on behalf of  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "proc:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "proc:
***************** / expression                                                                            :2_2:Other "proc:
****************** / labelPrefix                                                                         :2_2:Other "proc:
labelPrefix> IN: "processes personal data on behalf of an <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected )

****************** / term p                                                                              :2_2:Other "proc:
******************* / term p/notLabelTerm                                                               :2_2:Other "proc:
******************** / term p/2:someIndentation expr p                                                 :2_2:Other "proc:
********************* / someIndentation                                                               :2_2:Other "proc:
********************** / myindented: consuming GoDeeper                                              :2_2:Other "proc:
myindented: consuming GoDeeper> IN: "processes personal data on behalf of an <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected "processes personal data on behalf of and for the purposes of a public agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "processes personal data on behalf of an <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected "processes personal data on behalf of and for the purposes of a public agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "processes personal data on behalf of an <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=12:
term p/2:someIndentation expr p> unexpected "processes personal data on behalf of and for the purposes of a public agency"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :2_2:Other "proc:
********************* / pRelPred                                                                      :2_2:Other "proc:
********************** / slRelPred                                                                   :2_2:Other "proc:
*********************** / nested simpleHorn                                                         :2_2:Other "proc:
************************ > |^|                                                                     :2_2:Other "proc:
************************ / $*|                                                                     :2_2:Other "proc:
************************* / slMultiTerm                                                           :2_2:Other "proc:
************************** / someSL                                                              :2_2:Other "proc:
someSL> IN: "processes personal data on behalf of an <…>
someSL> MATCH (COK): "processes personal data on behalf of an <…>
someSL> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ someSL has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processes personal data on behalf of an <…>
slMultiTerm> MATCH (COK): "processes personal data on behalf of an <…>
slMultiTerm> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************* \ slMultiTerm has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************ \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************ / |^| deeps                                                                :3_2:UnDeeper:
|^| deeps> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************ \ |^| deeps has returned ([()],-1)                                      :3_1:Must:
nested simpleHorn> IN: "processes personal data on behalf of an <…>
nested simpleHorn> MATCH (CERR): "processes personal data on behalf of an <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

*********************** / RPConstraint                                                              :2_2:Other "proc:
************************ / $*|                                                                     :2_2:Other "proc:
************************* / slMultiTerm                                                           :2_2:Other "proc:
************************** / someSL                                                              :2_2:Other "proc:
someSL> IN: "processes personal data on behalf of an <…>
someSL> MATCH (COK): "processes personal data on behalf of an <…>
someSL> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ someSL has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processes personal data on behalf of an <…>
slMultiTerm> MATCH (COK): "processes personal data on behalf of an <…>
slMultiTerm> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************* \ slMultiTerm has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************ \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / |>>/recurse                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :3_2:UnDeeper:
|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "processes personal data on behalf of an <…>
RPConstraint> MATCH (CERR): "processes personal data on behalf of an <…>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** / RPBoolStructR                                                             :2_2:Other "proc:
************************ / $*|                                                                     :2_2:Other "proc:
************************* / slMultiTerm                                                           :2_2:Other "proc:
************************** / someSL                                                              :2_2:Other "proc:
someSL> IN: "processes personal data on behalf of an <…>
someSL> MATCH (COK): "processes personal data on behalf of an <…>
someSL> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ someSL has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processes personal data on behalf of an <…>
slMultiTerm> MATCH (COK): "processes personal data on behalf of an <…>
slMultiTerm> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************* \ slMultiTerm has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************ \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / |>>/recurse                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :3_2:UnDeeper:
|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "processes personal data on behalf of an <…>
RPBoolStructR> MATCH (CERR): "processes personal data on behalf of an <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** / RPMT                                                                      :2_2:Other "proc:
************************ / $*|                                                                     :2_2:Other "proc:
************************* / slAKA                                                                 :2_2:Other "proc:
************************** / $*|                                                                 :2_2:Other "proc:
*************************** / slAKA base                                                        :2_2:Other "proc:
**************************** / slMultiTerm                                                     :2_2:Other "proc:
***************************** / someSL                                                        :2_2:Other "proc:
someSL> IN: "processes personal data on behalf of an <…>
someSL> MATCH (COK): "processes personal data on behalf of an <…>
someSL> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

***************************** \ someSL has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processes personal data on behalf of an <…>
slMultiTerm> MATCH (COK): "processes personal data on behalf of an <…>
slMultiTerm> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

**************************** \ slMultiTerm has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slAKA base> IN: "processes personal data on behalf of an <…>
slAKA base> MATCH (COK): "processes personal data on behalf of an <…>
slAKA base> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

*************************** \ slAKA base has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** / |>>/base                                                             :3_2:UnDeeper:
*************************** / slAKA optional akapart                                             :3_2:UnDeeper:
**************************** / |?| optional something                                           :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / PAKA/akapart                                                 :3_2:UnDeeper:
******************************* / $>|                                                        :3_2:UnDeeper:
******************************** / Aka Token                                                :3_2:UnDeeper:
Aka Token> IN: ) MUST ( "without undue delay" ) UPON (  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=13:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) MUST ( "without undue delay" ) UPON (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) MUST ( "without undue delay" ) UPON (  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=13:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :3_2:UnDeeper:
slAKA optional akapart> IN: ) MUST ( "without undue delay" ) UPON (  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional akapart has returned (Nothing,0)                    :3_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :3_2:UnDeeper:
|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** / |>>/base                                                             :3_2:UnDeeper:
*************************** / slAKA optional typically                                           :3_2:UnDeeper:
**************************** / |?| optional something                                           :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / typically                                                    :3_2:UnDeeper:
******************************* / $>|                                                        :3_2:UnDeeper:
$>|> IN: ) MUST ( "without undue delay" ) UPON (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) MUST ( "without undue delay" ) UPON (  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :3_2:UnDeeper:
slAKA optional typically> IN: ) MUST ( "without undue delay" ) UPON (  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional typically has returned (Nothing,0)                  :3_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :3_2:UnDeeper:
|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :3_2:UnDeeper:
************************** > slAKA: proceeding after base and entityalias are retrieved ...       :3_2:UnDeeper:
************************** > pAKA: entityalias = Nothing                                          :3_2:UnDeeper:
slAKA> IN: "processes personal data on behalf of an <…>
slAKA> MATCH (COK): "processes personal data on behalf of an <…>
slAKA> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************* \ slAKA has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************ \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
RPMT> IN: "processes personal data on behalf of an <…>
RPMT> MATCH (COK): "processes personal data on behalf of an <…>
RPMT> VALUE: ((RPMT ["processes personal data on behalf of and for the purposes of a public agency"],0),[])

*********************** \ RPMT has returned (RPMT ["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slRelPred> IN: "processes personal data on behalf of an <…>
slRelPred> MATCH (COK): "processes personal data on behalf of an <…>
slRelPred> VALUE: ((RPMT ["processes personal data on behalf of and for the purposes of a public agency"],0),[])

********************** \ slRelPred has returned (RPMT ["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :3_2:UnDeeper:
*********************** > sameLine: success!                                                         :3_2:UnDeeper:
undeepers> IN: ) MUST ( "without undue delay" ) UPON (  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                    :3_2:UnDeeper:
pRelPred> IN: "processes personal data on behalf of an <…>
pRelPred> MATCH (COK): "processes personal data on behalf of an <…>
pRelPred> VALUE: (RPMT ["processes personal data on behalf of and for the purposes of a public agency"],[])

********************* \ pRelPred has returned RPMT ["processes personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
term p/3:plain p> IN: "processes personal data on behalf of an <…>
term p/3:plain p> MATCH (COK): "processes personal data on behalf of an <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/3:plain p has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p/notLabelTerm> IN: "processes personal data on behalf of an <…>
term p/notLabelTerm> MATCH (COK): "processes personal data on behalf of an <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p> IN: "processes personal data on behalf of an <…>
term p> MATCH (COK): "processes personal data on behalf of an <…>
term p> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ term p has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
****************** / binary(Or)                                                                           :3_2:UnDeeper:
binary(Or)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :3_2:UnDeeper:
binary(And)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :3_2:UnDeeper:
binary(SetLess)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :3_2:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "processes personal data on behalf of an <…>
expression> MATCH (COK): "processes personal data on behalf of an <…>
expression> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

***************** \ expression has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
manyIndentation/leaf?> IN: "processes personal data on behalf of an <…>
manyIndentation/leaf?> MATCH (COK): "processes personal data on behalf of an <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( "without undue delay" ) UPON (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:Must:
someIndentation> IN: ( "processes personal data on behalf of  <…>
someIndentation> MATCH (COK): ( "processes personal data on behalf of  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p/2:someIndentation expr p> IN: ( "processes personal data on behalf of  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "processes personal data on behalf of  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p/notLabelTerm> IN: ( "processes personal data on behalf of  <…>
term p/notLabelTerm> MATCH (COK): ( "processes personal data on behalf of  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p> IN: ( "processes personal data on behalf of  <…>
term p> MATCH (COK): ( "processes personal data on behalf of  <…>
term p> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

************ \ term p has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

expression> IN: ( "processes personal data on behalf of  <…>
expression> MATCH (COK): ( "processes personal data on behalf of  <…>
expression> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

*********** \ expression has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
ppp inner> IN: ( "processes personal data on behalf of  <…>
ppp inner> MATCH (COK): ( "processes personal data on behalf of  <…>
ppp inner> VALUE: (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
pBSR> IN: ( "processes personal data on behalf of  <…>
pBSR> MATCH (COK): ( "processes personal data on behalf of  <…>
pBSR> VALUE: (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHICH ( "processes personal data on beha <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHICH ( "processes personal data on beha <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
manyIndentation/leaf?> IN: WHICH ( "processes personal data on beha <…>
manyIndentation/leaf?> MATCH (COK): WHICH ( "processes personal data on beha <…>
manyIndentation/leaf?> VALUE: ((Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])),[])

******* \ manyIndentation/leaf? has returned (Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
******* / WHERE                                                                                                   :3_1:Must:
WHERE> IN: MUST ( "without undue delay" ) UPON ( "b <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=14:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=14:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=14:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=14:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :3_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=14:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :3_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=14:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :3_2:GoDeeper:
******** / |>| calling $>>                                                                                        :3_2:GoDeeper:
********* / |>>/recurse                                                                                          :3_2:GoDeeper:
********** / |>>/recurse                                                                                         :3_2:Other "with:
|>>/recurse> IN: "without undue delay" ) UPON ( "becoming <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected "without undue delay"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :3_2:Other "with:
*********** / pTemporal/eventually                                                                              :3_2:Other "with:
pTemporal/eventually> IN: "without undue delay" ) UPON ( "becoming <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=16:
pTemporal/eventually> unexpected "without undue delay"
pTemporal/eventually> expecting EVENTUALLY

*********** / pTemporal/specifically                                                                            :3_2:Other "with:
************ / $>|                                                                                             :3_2:Other "with:
$>|> IN: "without undue delay" ) UPON ( "becoming <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=16:
$>|> unexpected "without undue delay"
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: "without undue delay" ) UPON ( "becoming <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=16:
pTemporal/specifically> unexpected "without undue delay"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** / pTemporal/vaguely                                                                                 :3_2:Other "with:
pTemporal/vaguely> IN: "without undue delay" ) UPON ( "becoming <…>
pTemporal/vaguely> MATCH (COK): "without undue delay"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "without undue delay"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "without undue delay")     :4_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "without undue delay"))                :4_2:UnDeeper:
|>>/base> IN: "without undue delay" ) UPON ( "becoming <…>
|>>/base> MATCH (COK): "without undue delay"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),0)     :4_2:UnDeeper:
|>>/recurse> IN: ( "without undue delay" ) UPON ( "becomi <…>
|>>/recurse> MATCH (COK): ( "without undue delay"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1)    :4_2:UnDeeper:
|>| calling $>>> IN: ( "without undue delay" ) UPON ( "becomi <…>
|>| calling $>>> MATCH (COK): ( "without undue delay"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1)  :4_2:UnDeeper:
******** / undeepers                                                                                                :4_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :4_2:UnDeeper:
********* > sameLine: success!                                                                                  :4_1:Upon:
undeepers> IN: ) UPON ( "becoming aware a data breach i <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :4_1:Upon:
pDT> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pDT> MATCH (COK): MUST ( "without undue delay" )
pDT> VALUE: ((DMust,Just (TemporalConstraint TVague (Just 0) "without undue delay")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TVague (Just 0) "without undue delay"))                :4_1:Upon:
******* / WHERE                                                                                                   :4_1:Upon:
WHERE> IN: UPON ( "becoming aware a data breach inv <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected UPON
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected UPON
$>|> expecting HAVING

preambleParamText:[Having]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected UPON
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected UPON
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected UPON
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (COK): UPON
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "beco:
|>>/recurse> IN: "becoming aware a data breach involving  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=20:
|>>/recurse> unexpected "becoming aware a data breach involving a client public agency may have occurred"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Other "beco:
*********** / pParamText                                                                                        :4_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :4_2:Other "beco:
************* / pKeyValuesAka                                                                                 :4_2:Other "beco:
************** / slAKA                                                                                       :4_2:Other "beco:
*************** / $*|                                                                                       :4_2:Other "beco:
**************** / slAKA base                                                                              :4_2:Other "beco:
***************** / slKeyValues                                                                           :4_2:Other "beco:
****************** / $*|                                                                                 :4_2:Other "beco:
******************* / someSL                                                                            :4_2:Other "beco:
someSL> IN: "becoming aware a data breach involving  <…>
someSL> MATCH (COK): "becoming aware a data breach involving  <…>
someSL> VALUE: ((["becoming aware a data breach involving a client public agency may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach involving a client public agency may have occurred"],0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((["becoming aware a data breach involving a client public agency may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach involving a client public agency may have occurred"],0) :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / |?| optional something                                                             :5_2:UnDeeper:
******************** / |>>/recurse                                                                      :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :5_2:UnDeeper:
********************* / slTypeSig                                                                      :5_2:UnDeeper:
********************** / $>|                                                                          :5_2:UnDeeper:
$>|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=21:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :5_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :5_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :5_2:UnDeeper:
slKeyValues> IN: "becoming aware a data breach involving  <…>
slKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
slKeyValues> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
slAKA base> IN: "becoming aware a data breach involving  <…>
slAKA base> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA base> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
Aka Token> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=21:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=21:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional akapart> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional typically                                                                 :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
$>|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=21:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional typically> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :5_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :5_2:UnDeeper:
slAKA> IN: "becoming aware a data breach involving  <…>
slAKA> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
************** / undeepers                                                                                    :5_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :5_2:UnDeeper:
*************** > sameLine: success!                                                                         :5_2:UnDeeper:
undeepers> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :5_2:UnDeeper:
pKeyValuesAka> IN: "becoming aware a data breach involving  <…>
pKeyValuesAka> MATCH (COK): "becoming aware a data breach involving  <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :5_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :5_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :5_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :5_2:UnDeeper:
************** / sameMany                                                                                     :5_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :5_2:UnDeeper:
**************** / slAKA                                                                                    :5_2:UnDeeper:
***************** / $*|                                                                                    :5_2:UnDeeper:
****************** / slAKA base                                                                           :5_2:UnDeeper:
******************* / slKeyValues                                                                        :5_2:UnDeeper:
******************** / $*|                                                                              :5_2:UnDeeper:
********************* / someSL                                                                         :5_2:UnDeeper:
********************** / pNumAsText                                                                   :5_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=21:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=21:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=21:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=21:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :5_2:UnDeeper:
manyIndentation/leaf?> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :5_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :5_2:UnDeeper:
pParamText> IN: "becoming aware a data breach involving  <…>
pParamText> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText> VALUE: (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
|>>/base> IN: "becoming aware a data breach involving  <…>
|>>/base> MATCH (COK): "becoming aware a data breach involving  <…>
|>>/base> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],0) :5_2:UnDeeper:
|>>/recurse> IN: ( "becoming aware a data breach involvin <…>
|>>/recurse> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>>/recurse> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
|>| calling $>>> IN: ( "becoming aware a data breach involvin <…>
|>| calling $>>> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
******** / undeepers                                                                                                :5_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :5_2:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:Do:
undeepers> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:Do:
preambleParamText:[Upon]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> MATCH (COK): UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []) :5_1:Do:
******* / preambleParamText:[Upon]                                                                                :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=22:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* / WHERE                                                                                                   :5_1:Do:
WHERE> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=22:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=22:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=22:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :5_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=22:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :5_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=22:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDoAction/Do                                                                                            :5_1:Do:
pDoAction/Do> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :5_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :5_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :5_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :5_2:GoDeeper:
********** / expr pParamText                                                                                    :5_2:GoDeeper:
*********** / expression                                                                                       :5_2:GoDeeper:
************ / labelPrefix                                                                                    :5_2:GoDeeper:
labelPrefix> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :5_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :5_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :5_2:GoDeeper:
*************** / someIndentation                                                                          :5_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :5_2:Other "NOTI:
**************** / manyIndentation/leaf?                                                                   :5_2:Other "NOTI:
***************** / expression                                                                            :5_2:Other "NOTI:
****************** / labelPrefix                                                                         :5_2:Other "NOTI:
labelPrefix> IN: "NOTIFY" ( "the Public Agency" ) "for wh <…>
labelPrefix> MATCH (COK): "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

****************** \ labelPrefix has returned "NOTIFY"                                                    :5_3:GoDeeper:
****************** / term p                                                                               :5_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :5_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :5_3:GoDeeper:
********************* / someIndentation                                                                :5_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "the Public Agency" ) "for which" ( "y <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :5_3:Other "the:
********************** / manyIndentation/leaf?                                                         :5_3:Other "the:
*********************** / expression                                                                  :5_3:Other "the:
************************ / labelPrefix                                                               :5_3:Other "the:
labelPrefix> IN: "the Public Agency" ) "for which" ( "you <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected )

************************ / term p                                                                    :5_3:Other "the:
************************* / term p/notLabelTerm                                                     :5_3:Other "the:
************************** / term p/2:someIndentation expr p                                       :5_3:Other "the:
*************************** / someIndentation                                                     :5_3:Other "the:
**************************** / myindented: consuming GoDeeper                                    :5_3:Other "the:
myindented: consuming GoDeeper> IN: "the Public Agency" ) "for which" ( "you <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected "the Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "the Public Agency" ) "for which" ( "you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected "the Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "the Public Agency" ) "for which" ( "you <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected "the Public Agency"
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :5_3:Other "the:
*************************** / pParamText                                                          :5_3:Other "the:
**************************** / pParamText(flat) first line: pKeyValues                           :5_3:Other "the:
***************************** / pKeyValuesAka                                                   :5_3:Other "the:
****************************** / slAKA                                                         :5_3:Other "the:
******************************* / $*|                                                         :5_3:Other "the:
******************************** / slAKA base                                                :5_3:Other "the:
********************************* / slKeyValues                                             :5_3:Other "the:
********************************** / $*|                                                   :5_3:Other "the:
*********************************** / someSL                                              :5_3:Other "the:
someSL> IN: "the Public Agency" ) "for which" ( "you <…>
someSL> MATCH (COK): "the Public Agency"
someSL> VALUE: ((["the Public Agency"],0),[])

*********************************** \ someSL has returned (["the Public Agency"],0)        :6_3:UnDeeper:
$*|> IN: "the Public Agency" ) "for which" ( "you <…>
$*|> MATCH (COK): "the Public Agency"
$*|> VALUE: ((["the Public Agency"],0),[])

********************************** \ $*| has returned (["the Public Agency"],0)             :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :6_3:UnDeeper:
*********************************** / |?| optional something                               :6_3:UnDeeper:
************************************ / |>>/recurse                                        :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                           :6_3:UnDeeper:
************************************* / slTypeSig                                        :6_3:UnDeeper:
************************************** / $>|                                            :6_3:UnDeeper:
$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "for which" ( "you act as a Data Inter <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=27:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=27:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :6_3:UnDeeper:
*********************************** > |>>/base got Nothing                                 :6_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                      :6_3:UnDeeper:
slKeyValues> IN: "the Public Agency" ) "for which" ( "you <…>
slKeyValues> MATCH (COK): "the Public Agency"
slKeyValues> VALUE: ((("the Public Agency" :| [],Nothing),0),[])

********************************* \ slKeyValues has returned (("the Public Agency" :| [],Nothing),0) :6_3:UnDeeper:
slAKA base> IN: "the Public Agency" ) "for which" ( "you <…>
slAKA base> MATCH (COK): "the Public Agency"
slAKA base> VALUE: ((("the Public Agency" :| [],Nothing),0),[])

******************************** \ slAKA base has returned (("the Public Agency" :| [],Nothing),0) :6_3:UnDeeper:
$*|> IN: "the Public Agency" ) "for which" ( "you <…>
$*|> MATCH (COK): "the Public Agency"
$*|> VALUE: ((("the Public Agency" :| [],Nothing),0),[])

******************************* \ $*| has returned (("the Public Agency" :| [],Nothing),0)     :6_3:UnDeeper:
******************************* / |>>/recurse                                                  :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :6_3:UnDeeper:
******************************** / slAKA optional akapart                                     :6_3:UnDeeper:
********************************* / |?| optional something                                   :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :6_3:UnDeeper:
*********************************** / PAKA/akapart                                         :6_3:UnDeeper:
************************************ / $>|                                                :6_3:UnDeeper:
************************************* / Aka Token                                        :6_3:UnDeeper:
Aka Token> IN: ) "for which" ( "you act as a Data Inter <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=27:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "for which" ( "you act as a Data Inter <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=27:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=27:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :6_3:UnDeeper:
slAKA optional akapart> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)            :6_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :6_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :6_3:UnDeeper:
******************************* / |>>/recurse                                                  :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :6_3:UnDeeper:
******************************** / slAKA optional typically                                   :6_3:UnDeeper:
********************************* / |?| optional something                                   :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :6_3:UnDeeper:
*********************************** / typically                                            :6_3:UnDeeper:
************************************ / $>|                                                :6_3:UnDeeper:
$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "for which" ( "you act as a Data Inter <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=27:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=27:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :6_3:UnDeeper:
slAKA optional typically> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)          :6_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :6_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :6_3:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :6_3:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                  :6_3:UnDeeper:
slAKA> IN: "the Public Agency" ) "for which" ( "you <…>
slAKA> MATCH (COK): "the Public Agency"
slAKA> VALUE: ((("the Public Agency" :| [],Nothing),0),[])

****************************** \ slAKA has returned (("the Public Agency" :| [],Nothing),0)     :6_3:UnDeeper:
****************************** / undeepers                                                      :6_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_3:UnDeeper:
******************************* > sameLine: success!                                           :6_3:UnDeeper:
undeepers> IN: ) "for which" ( "you act as a Data Inter <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :6_3:UnDeeper:
pKeyValuesAka> IN: "the Public Agency" ) "for which" ( "you <…>
pKeyValuesAka> MATCH (COK): "the Public Agency"
pKeyValuesAka> VALUE: (("the Public Agency" :| [],Nothing),[])

***************************** \ pKeyValuesAka has returned ("the Public Agency" :| [],Nothing)   :6_3:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "the Public Agency" ) "for which" ( "you <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "the Public Agency"
pParamText(flat) first line: pKeyValues> VALUE: (("the Public Agency" :| [],Nothing),[])

**************************** \ pParamText(flat) first line: pKeyValues has returned ("the Public Agency" :| [],Nothing) :6_3:UnDeeper:
**************************** / pParamText(flat) subsequent lines: sameMany pKeyValues             :6_3:UnDeeper:
***************************** / manyIndentation/leaf?                                            :6_3:UnDeeper:
****************************** / sameMany                                                       :6_3:UnDeeper:
******************************* / pKeyValuesAka                                                :6_3:UnDeeper:
******************************** / slAKA                                                      :6_3:UnDeeper:
********************************* / $*|                                                      :6_3:UnDeeper:
********************************** / slAKA base                                             :6_3:UnDeeper:
*********************************** / slKeyValues                                          :6_3:UnDeeper:
************************************ / $*|                                                :6_3:UnDeeper:
************************************* / someSL                                           :6_3:UnDeeper:
************************************** / pNumAsText                                     :6_3:UnDeeper:
pNumAsText> IN: ) "for which" ( "you act as a Data Inter <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "for which" ( "you act as a Data Inter <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "for which" ( "you act as a Data Inter <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "for which" ( "you act as a Data Inter <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=27:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "for which" ( "you act as a Data Inter <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "for which" ( "you act as a Data Inter <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=27:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "for which" ( "you act as a Data Inter <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

****************************** \ sameMany has returned []                                       :6_3:UnDeeper:
manyIndentation/leaf?> IN: ) "for which" ( "you act as a Data Inter <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

***************************** \ manyIndentation/leaf? has returned []                            :6_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "for which" ( "you act as a Data Inter <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

**************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :6_3:UnDeeper:
pParamText> IN: "the Public Agency" ) "for which" ( "you <…>
pParamText> MATCH (COK): "the Public Agency"
pParamText> VALUE: (("the Public Agency" :| [],Nothing) :| [],[])

*************************** \ pParamText has returned ("the Public Agency" :| [],Nothing) :| []    :6_3:UnDeeper:
term p/3:plain p> IN: "the Public Agency" ) "for which" ( "you <…>
term p/3:plain p> MATCH (COK): "the Public Agency"
term p/3:plain p> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

************************** \ term p/3:plain p has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_3:UnDeeper:
term p/notLabelTerm> IN: "the Public Agency" ) "for which" ( "you <…>
term p/notLabelTerm> MATCH (COK): "the Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_3:UnDeeper:
term p> IN: "the Public Agency" ) "for which" ( "you <…>
term p> MATCH (COK): "the Public Agency"
term p> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("the Public Agency" :| [],Nothing) :| [])     :6_3:UnDeeper:
************************ / binary(Or)                                                                 :6_3:UnDeeper:
binary(Or)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :6_3:UnDeeper:
binary(And)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :6_3:UnDeeper:
binary(SetLess)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :6_3:UnDeeper:
binary(SetPlus)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "the Public Agency" ) "for which" ( "you <…>
expression> MATCH (COK): "the Public Agency"
expression> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

*********************** \ expression has returned MyLeaf (("the Public Agency" :| [],Nothing) :| [])   :6_3:UnDeeper:
manyIndentation/leaf?> IN: "the Public Agency" ) "for which" ( "you <…>
manyIndentation/leaf?> MATCH (COK): "the Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) "for which" ( "you act as a Data Inter <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :6_2:Other "for:
someIndentation> IN: ( "the Public Agency" ) "for which" ( "y <…>
someIndentation> MATCH (COK): ( "the Public Agency" )
someIndentation> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

********************* \ someIndentation has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_2:Other "for:
term p/2:someIndentation expr p> IN: ( "the Public Agency" ) "for which" ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_2:Other "for:
term p/notLabelTerm> IN: ( "the Public Agency" ) "for which" ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "the Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_2:Other "for:
term p> IN: ( "the Public Agency" ) "for which" ( "y <…>
term p> MATCH (COK): ( "the Public Agency" )
term p> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("the Public Agency" :| [],Nothing) :| [])              :6_2:Other "for:
****************** / binary(Or)                                                                          :6_2:Other "for:
binary(Or)> IN: "for which" ( "you act as a Data Interme <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected "for which"
binary(Or)> expecting OR

****************** / binary(And)                                                                         :6_2:Other "for:
binary(And)> IN: "for which" ( "you act as a Data Interme <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected "for which"
binary(And)> expecting AND

****************** / binary(SetLess)                                                                     :6_2:Other "for:
binary(SetLess)> IN: "for which" ( "you act as a Data Interme <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected "for which"
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                     :6_2:Other "for:
binary(SetPlus)> IN: "for which" ( "you act as a Data Interme <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected "for which"
binary(SetPlus)> expecting PLUS

expression> IN: "NOTIFY" ( "the Public Agency" ) "for wh <…>
expression> MATCH (COK): "NOTIFY" ( "the Public Agency" )
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Public Agency" :| [],Nothing) :| [])),[])

***************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the Public Agency" :| [],Nothing) :| [])) :6_2:Other "for:
manyIndentation/leaf?> IN: "NOTIFY" ( "the Public Agency" ) "for wh <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "the Public Agency" )
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Public Agency" :| [],Nothing) :| [])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the Public Agency" :| [],Nothing) :| [])) :6_2:Other "for:
**************** / myindented: consuming UnDeeper                                                          :6_2:Other "for:
myindented: consuming UnDeeper> IN: "for which" ( "you act as a Data Interme <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=28:
myindented: consuming UnDeeper> unexpected "for which"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
someIndentation> MATCH (CERR): ( "NOTIFY" ( "the Public Agency" )
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected "for which"
someIndentation> expecting ), AND, LESS, OR, or PLUS

term p/2:someIndentation expr p> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
term p/2:someIndentation expr p> MATCH (CERR): ( "NOTIFY" ( "the Public Agency" )
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected "for which"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, or PLUS

************** / term p/3:plain p                                                                           :5_2:GoDeeper:
*************** / pParamText                                                                               :5_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :5_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :5_2:GoDeeper:
****************** / slAKA                                                                              :5_2:GoDeeper:
******************* / $*|                                                                              :5_2:GoDeeper:
******************** / slAKA base                                                                     :5_2:GoDeeper:
********************* / slKeyValues                                                                  :5_2:GoDeeper:
********************** / $*|                                                                        :5_2:GoDeeper:
*********************** / someSL                                                                   :5_2:GoDeeper:
************************ / pNumAsText                                                             :5_2:GoDeeper:
pNumAsText> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=23:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=23:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=23:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=23:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=28:
term p/notLabelTerm> unexpected "for which"
term p/notLabelTerm> expecting ), AND, LESS, OR, or PLUS

term p> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=28:
term p> unexpected "for which"
term p> expecting ), AND, LESS, OR, or PLUS

expression> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=28:
expression> unexpected "for which"
expression> expecting expression

expr pParamText> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=28:
expr pParamText> unexpected "for which"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=28:
dBoolStructP calling exprP> unexpected "for which"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=28:
pAction calling dBoolStructP> unexpected "for which"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=28:
pDoAction/pAction> unexpected "for which"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "Data Intermediary" ( AKA ( "You <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=28:
regulative permutation with deontic-temporal> unexpected "for which"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

preambleParamText:[Having]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

preambleParamText:[Given]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

preambleParamText:[Upon]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented: consuming GoDeeper                                                                       :1_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "Data Intermediary" ( AKA ( "You" ) )  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented: consuming GoDeeper has returned GoDeeper                                                  :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                              :1_3:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected AKA
pNumAsText> expecting number

someSL> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
someSL> MATCH (COK): "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
slMultiTerm> MATCH (COK): "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
slAKA base> MATCH (COK): "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
$*|> MATCH (COK): "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                   :1_3:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

************** / |>>/base                                                                                      :1_3:Aka:
*************** / slAKA optional akapart                                                                      :1_3:Aka:
**************** / |?| optional something                                                                    :1_3:Aka:
***************** / |>>/recurse                                                                             :1_3:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

***************** / |>>/base                                                                                :1_3:Aka:
****************** / PAKA/akapart                                                                          :1_3:Aka:
******************* / $>|                                                                                 :1_3:Aka:
******************** / Aka Token                                                                         :1_3:Aka:
Aka Token> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

******************** \ Aka Token has returned Aka                                                         :1_4:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

******************* \ $>| has returned Aka                                                                 :1_4:GoDeeper:
******************* / |>>/recurse                                                                          :1_4:GoDeeper:
******************** / |>>/recurse                                                                         :1_4:Other "You":
|>>/recurse> IN: "You" ) ) ) WHICH ( "processes personal  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

******************** / |>>/base                                                                            :1_4:Other "You":
********************* / someSL                                                                            :1_4:Other "You":
someSL> IN: "You" ) ) ) WHICH ( "processes personal  <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

********************* \ someSL has returned (["You"],0)                                                :2_2:UnDeeper:
********************* > |>>/base got ["You"]                                                           :2_2:UnDeeper:
|>>/base> IN: "You" ) ) ) WHICH ( "processes personal  <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

******************** \ |>>/base has returned (["You"],0)                                                :2_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) WHICH ( "processes persona <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************* \ |>>/recurse has returned (["You"],1)                                               :2_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

****************** \ PAKA/akapart has returned (["You"],1)                                                :2_2:UnDeeper:
****************** > |>>/base got ["You"]                                                                 :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

***************** \ |>>/base has returned (["You"],1)                                                      :2_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

**************** \ |?| optional something has returned (Just ["You"],1)                                     :2_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

*************** \ slAKA optional akapart has returned (Just ["You"],1)                                       :2_2:UnDeeper:
*************** > |>>/base got Just ["You"]                                                                  :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) WHICH ( "processes per <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

************** \ |>>/base has returned (Just ["You"],1)                                                       :2_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) WHICH ( "processes p <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************* \ |>>/recurse has returned (Just ["You"],2)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) WHICH ( "processes personal data o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) WHICH ( "processes personal data o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) ) ) WHICH ( "processes personal data o <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) ) ) WHICH ( "processes personal data o <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) ) ) WHICH ( "processes personal data o <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) ) ) WHICH ( "processes personal data o <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) ) ) WHICH ( "processes personal data o <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) ) ) WHICH ( "processes personal data o <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
slAKA> MATCH (COK): "Data Intermediary" ( AKA ( "You"
slAKA> VALUE: ((["Data Intermediary"],2),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],2)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                 :2_4:UnDeeper:
undeepers> IN: ) ) ) WHICH ( "processes personal data o <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                            :2_4:UnDeeper:
pAKA> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
pAKA> MATCH (COK): "Data Intermediary" ( AKA ( "You" ) )
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                :2_4:UnDeeper:
pMultiTermAka> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
pMultiTermAka> MATCH (COK): "Data Intermediary" ( AKA ( "You" ) )
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                         :2_4:UnDeeper:
manyIndentation/leaf?> IN: "Data Intermediary" ( AKA ( "You" ) ) )  <…>
manyIndentation/leaf?> MATCH (COK): "Data Intermediary" ( AKA ( "You" ) )
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                   :2_4:UnDeeper:
********* / myindented: consuming UnDeeper                                                                             :2_4:UnDeeper:
myindented: consuming UnDeeper> IN: ) WHICH ( "processes personal data on be <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented: consuming UnDeeper has returned UnDeeper                                                :2_1:Which:
someIndentation> IN: ( "Data Intermediary" ( AKA ( "You" ) )  <…>
someIndentation> MATCH (COK): ( "Data Intermediary" ( AKA ( "You" ) )  <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [Every,Party,TokAll]> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pActor [Every,Party,TokAll]> MATCH (COK): EVERY ( "Data Intermediary" ( AKA ( "You <…>
pActor [Every,Party,TokAll]> VALUE: ((Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("Data Intermediary" :| [],Nothing) :| []))       :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / labelPrefix                                                                                    :2_2:GoDeeper:
labelPrefix> IN: ( "processes personal data on behalf of  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=11:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "processes personal data on behalf of  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :2_2:Other "proc:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "proc:
***************** / expression                                                                            :2_2:Other "proc:
****************** / labelPrefix                                                                         :2_2:Other "proc:
labelPrefix> IN: "processes personal data on behalf of an <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=13:
labelPrefix> unexpected )

****************** / term p                                                                              :2_2:Other "proc:
******************* / term p/notLabelTerm                                                               :2_2:Other "proc:
******************** / term p/2:someIndentation expr p                                                 :2_2:Other "proc:
********************* / someIndentation                                                               :2_2:Other "proc:
********************** / myindented: consuming GoDeeper                                              :2_2:Other "proc:
myindented: consuming GoDeeper> IN: "processes personal data on behalf of an <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=12:
myindented: consuming GoDeeper> unexpected "processes personal data on behalf of and for the purposes of a public agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "processes personal data on behalf of an <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected "processes personal data on behalf of and for the purposes of a public agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "processes personal data on behalf of an <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=12:
term p/2:someIndentation expr p> unexpected "processes personal data on behalf of and for the purposes of a public agency"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :2_2:Other "proc:
********************* / pRelPred                                                                      :2_2:Other "proc:
********************** / slRelPred                                                                   :2_2:Other "proc:
*********************** / nested simpleHorn                                                         :2_2:Other "proc:
************************ > |^|                                                                     :2_2:Other "proc:
************************ / $*|                                                                     :2_2:Other "proc:
************************* / slMultiTerm                                                           :2_2:Other "proc:
************************** / someSL                                                              :2_2:Other "proc:
someSL> IN: "processes personal data on behalf of an <…>
someSL> MATCH (COK): "processes personal data on behalf of an <…>
someSL> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ someSL has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processes personal data on behalf of an <…>
slMultiTerm> MATCH (COK): "processes personal data on behalf of an <…>
slMultiTerm> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************* \ slMultiTerm has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************ \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************ / |^| deeps                                                                :3_2:UnDeeper:
|^| deeps> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************ \ |^| deeps has returned ([()],-1)                                      :3_1:Must:
nested simpleHorn> IN: "processes personal data on behalf of an <…>
nested simpleHorn> MATCH (CERR): "processes personal data on behalf of an <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

*********************** / RPConstraint                                                              :2_2:Other "proc:
************************ / $*|                                                                     :2_2:Other "proc:
************************* / slMultiTerm                                                           :2_2:Other "proc:
************************** / someSL                                                              :2_2:Other "proc:
someSL> IN: "processes personal data on behalf of an <…>
someSL> MATCH (COK): "processes personal data on behalf of an <…>
someSL> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ someSL has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processes personal data on behalf of an <…>
slMultiTerm> MATCH (COK): "processes personal data on behalf of an <…>
slMultiTerm> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************* \ slMultiTerm has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************ \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / |>>/recurse                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :3_2:UnDeeper:
|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPConstraint> IN: "processes personal data on behalf of an <…>
RPConstraint> MATCH (CERR): "processes personal data on behalf of an <…>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** / RPBoolStructR                                                             :2_2:Other "proc:
************************ / $*|                                                                     :2_2:Other "proc:
************************* / slMultiTerm                                                           :2_2:Other "proc:
************************** / someSL                                                              :2_2:Other "proc:
someSL> IN: "processes personal data on behalf of an <…>
someSL> MATCH (COK): "processes personal data on behalf of an <…>
someSL> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ someSL has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processes personal data on behalf of an <…>
slMultiTerm> MATCH (COK): "processes personal data on behalf of an <…>
slMultiTerm> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************* \ slMultiTerm has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************ \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************ / |>| calling $>>                                                          :3_2:UnDeeper:
************************* / |>>/recurse                                                            :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :3_2:UnDeeper:
|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

|>| calling $>>> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=13:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

RPBoolStructR> IN: "processes personal data on behalf of an <…>
RPBoolStructR> MATCH (CERR): "processes personal data on behalf of an <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** / RPMT                                                                      :2_2:Other "proc:
************************ / $*|                                                                     :2_2:Other "proc:
************************* / slAKA                                                                 :2_2:Other "proc:
************************** / $*|                                                                 :2_2:Other "proc:
*************************** / slAKA base                                                        :2_2:Other "proc:
**************************** / slMultiTerm                                                     :2_2:Other "proc:
***************************** / someSL                                                        :2_2:Other "proc:
someSL> IN: "processes personal data on behalf of an <…>
someSL> MATCH (COK): "processes personal data on behalf of an <…>
someSL> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

***************************** \ someSL has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slMultiTerm> IN: "processes personal data on behalf of an <…>
slMultiTerm> MATCH (COK): "processes personal data on behalf of an <…>
slMultiTerm> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

**************************** \ slMultiTerm has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slAKA base> IN: "processes personal data on behalf of an <…>
slAKA base> MATCH (COK): "processes personal data on behalf of an <…>
slAKA base> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

*************************** \ slAKA base has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************** \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** / |>>/base                                                             :3_2:UnDeeper:
*************************** / slAKA optional akapart                                             :3_2:UnDeeper:
**************************** / |?| optional something                                           :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / PAKA/akapart                                                 :3_2:UnDeeper:
******************************* / $>|                                                        :3_2:UnDeeper:
******************************** / Aka Token                                                :3_2:UnDeeper:
Aka Token> IN: ) MUST ( "without undue delay" ) UPON (  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=13:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) MUST ( "without undue delay" ) UPON (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) MUST ( "without undue delay" ) UPON (  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=13:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :3_2:UnDeeper:
slAKA optional akapart> IN: ) MUST ( "without undue delay" ) UPON (  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional akapart has returned (Nothing,0)                    :3_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :3_2:UnDeeper:
|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** / |>>/base                                                             :3_2:UnDeeper:
*************************** / slAKA optional typically                                           :3_2:UnDeeper:
**************************** / |?| optional something                                           :3_2:UnDeeper:
***************************** / |>>/recurse                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** / |>>/base                                                       :3_2:UnDeeper:
****************************** / typically                                                    :3_2:UnDeeper:
******************************* / $>|                                                        :3_2:UnDeeper:
$>|> IN: ) MUST ( "without undue delay" ) UPON (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) MUST ( "without undue delay" ) UPON (  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :3_2:UnDeeper:
slAKA optional typically> IN: ) MUST ( "without undue delay" ) UPON (  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional typically has returned (Nothing,0)                  :3_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :3_2:UnDeeper:
|>>/base> IN: ) MUST ( "without undue delay" ) UPON (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :3_2:UnDeeper:
************************** > slAKA: proceeding after base and entityalias are retrieved ...       :3_2:UnDeeper:
************************** > pAKA: entityalias = Nothing                                          :3_2:UnDeeper:
slAKA> IN: "processes personal data on behalf of an <…>
slAKA> MATCH (COK): "processes personal data on behalf of an <…>
slAKA> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************* \ slAKA has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
$*|> IN: "processes personal data on behalf of an <…>
$*|> MATCH (COK): "processes personal data on behalf of an <…>
$*|> VALUE: ((["processes personal data on behalf of and for the purposes of a public agency"],0),[])

************************ \ $*| has returned (["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
RPMT> IN: "processes personal data on behalf of an <…>
RPMT> MATCH (COK): "processes personal data on behalf of an <…>
RPMT> VALUE: ((RPMT ["processes personal data on behalf of and for the purposes of a public agency"],0),[])

*********************** \ RPMT has returned (RPMT ["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
slRelPred> IN: "processes personal data on behalf of an <…>
slRelPred> MATCH (COK): "processes personal data on behalf of an <…>
slRelPred> VALUE: ((RPMT ["processes personal data on behalf of and for the purposes of a public agency"],0),[])

********************** \ slRelPred has returned (RPMT ["processes personal data on behalf of and for the purposes of a public agency"],0) :3_2:UnDeeper:
********************** / undeepers                                                                    :3_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :3_2:UnDeeper:
*********************** > sameLine: success!                                                         :3_2:UnDeeper:
undeepers> IN: ) MUST ( "without undue delay" ) UPON (  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                    :3_2:UnDeeper:
pRelPred> IN: "processes personal data on behalf of an <…>
pRelPred> MATCH (COK): "processes personal data on behalf of an <…>
pRelPred> VALUE: (RPMT ["processes personal data on behalf of and for the purposes of a public agency"],[])

********************* \ pRelPred has returned RPMT ["processes personal data on behalf of and for the purposes of a public agency"] :3_2:UnDeeper:
term p/3:plain p> IN: "processes personal data on behalf of an <…>
term p/3:plain p> MATCH (COK): "processes personal data on behalf of an <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/3:plain p has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p/notLabelTerm> IN: "processes personal data on behalf of an <…>
term p/notLabelTerm> MATCH (COK): "processes personal data on behalf of an <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
term p> IN: "processes personal data on behalf of an <…>
term p> MATCH (COK): "processes personal data on behalf of an <…>
term p> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ term p has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
****************** / binary(Or)                                                                           :3_2:UnDeeper:
binary(Or)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :3_2:UnDeeper:
binary(And)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :3_2:UnDeeper:
binary(SetLess)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :3_2:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "processes personal data on behalf of an <…>
expression> MATCH (COK): "processes personal data on behalf of an <…>
expression> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

***************** \ expression has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
manyIndentation/leaf?> IN: "processes personal data on behalf of an <…>
manyIndentation/leaf?> MATCH (COK): "processes personal data on behalf of an <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :3_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) MUST ( "without undue delay" ) UPON (  <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :3_1:Must:
someIndentation> IN: ( "processes personal data on behalf of  <…>
someIndentation> MATCH (COK): ( "processes personal data on behalf of  <…>
someIndentation> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p/2:someIndentation expr p> IN: ( "processes personal data on behalf of  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "processes personal data on behalf of  <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p/notLabelTerm> IN: ( "processes personal data on behalf of  <…>
term p/notLabelTerm> MATCH (COK): ( "processes personal data on behalf of  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p> IN: ( "processes personal data on behalf of  <…>
term p> MATCH (COK): ( "processes personal data on behalf of  <…>
term p> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

************ \ term p has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

expression> IN: ( "processes personal data on behalf of  <…>
expression> MATCH (COK): ( "processes personal data on behalf of  <…>
expression> VALUE: (MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

*********** \ expression has returned MyLeaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
ppp inner> IN: ( "processes personal data on behalf of  <…>
ppp inner> MATCH (COK): ( "processes personal data on behalf of  <…>
ppp inner> VALUE: (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

********** \ ppp inner has returned Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
pBSR> IN: ( "processes personal data on behalf of  <…>
pBSR> MATCH (COK): ( "processes personal data on behalf of  <…>
pBSR> VALUE: (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHICH ( "processes personal data on beha <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHICH ( "processes personal data on beha <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
manyIndentation/leaf?> IN: WHICH ( "processes personal data on beha <…>
manyIndentation/leaf?> MATCH (COK): WHICH ( "processes personal data on beha <…>
manyIndentation/leaf?> VALUE: ((Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])),[])

******* \ manyIndentation/leaf? has returned (Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
******* / WHERE                                                                                                   :3_1:Must:
WHERE> IN: MUST ( "without undue delay" ) UPON ( "b <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=14:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected MUST
$>|> expecting HAVING

preambleParamText:[Having]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=14:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected MUST
$>|> expecting GIVEN

preambleParamText:[Given]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=14:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected MUST
$>|> expecting UPON

preambleParamText:[Upon]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=14:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :3_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=14:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :3_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=14:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :3_1:Must:
pTemporal/eventually> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=14:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=14:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :3_1:Must:
pTemporal/vaguely> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=14:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* / pDA                                                                                                     :3_1:Must:
******** / pAction calling dBoolStructP                                                                           :3_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :3_2:GoDeeper:
********** / expr pParamText                                                                                    :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / labelPrefix                                                                                    :3_2:GoDeeper:
labelPrefix> IN: ( "without undue delay" ) UPON ( "becomi <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=15:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :3_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "without undue delay" ) UPON ( "becomi <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :3_2:Other "with:
**************** / manyIndentation/leaf?                                                                   :3_2:Other "with:
***************** / expression                                                                            :3_2:Other "with:
****************** / labelPrefix                                                                         :3_2:Other "with:
labelPrefix> IN: "without undue delay" ) UPON ( "becoming <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=17:
labelPrefix> unexpected )

****************** / term p                                                                              :3_2:Other "with:
******************* / term p/notLabelTerm                                                               :3_2:Other "with:
******************** / term p/2:someIndentation expr p                                                 :3_2:Other "with:
********************* / someIndentation                                                               :3_2:Other "with:
********************** / myindented: consuming GoDeeper                                              :3_2:Other "with:
myindented: consuming GoDeeper> IN: "without undue delay" ) UPON ( "becoming <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=16:
myindented: consuming GoDeeper> unexpected "without undue delay"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "without undue delay" ) UPON ( "becoming <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "without undue delay"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "without undue delay" ) UPON ( "becoming <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "without undue delay"
term p/2:someIndentation expr p> expecting (

******************** / term p/3:plain p                                                                :3_2:Other "with:
********************* / pParamText                                                                    :3_2:Other "with:
********************** / pParamText(flat) first line: pKeyValues                                     :3_2:Other "with:
*********************** / pKeyValuesAka                                                             :3_2:Other "with:
************************ / slAKA                                                                   :3_2:Other "with:
************************* / $*|                                                                   :3_2:Other "with:
************************** / slAKA base                                                          :3_2:Other "with:
*************************** / slKeyValues                                                       :3_2:Other "with:
**************************** / $*|                                                             :3_2:Other "with:
***************************** / someSL                                                        :3_2:Other "with:
someSL> IN: "without undue delay" ) UPON ( "becoming <…>
someSL> MATCH (COK): "without undue delay"
someSL> VALUE: ((["without undue delay"],0),[])

***************************** \ someSL has returned (["without undue delay"],0)                :4_2:UnDeeper:
$*|> IN: "without undue delay" ) UPON ( "becoming <…>
$*|> MATCH (COK): "without undue delay"
$*|> VALUE: ((["without undue delay"],0),[])

**************************** \ $*| has returned (["without undue delay"],0)                     :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :4_2:UnDeeper:
***************************** / |?| optional something                                         :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** / |>>/base                                                     :4_2:UnDeeper:
******************************* / slTypeSig                                                  :4_2:UnDeeper:
******************************** / $>|                                                      :4_2:UnDeeper:
$>|> IN: ) UPON ( "becoming aware a data breach i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) UPON ( "becoming aware a data breach i <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=17:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) UPON ( "becoming aware a data breach i <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :4_2:UnDeeper:
***************************** > |>>/base got Nothing                                           :4_2:UnDeeper:
|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************************** \ |>>/base has returned (Nothing,0)                                :4_2:UnDeeper:
slKeyValues> IN: "without undue delay" ) UPON ( "becoming <…>
slKeyValues> MATCH (COK): "without undue delay"
slKeyValues> VALUE: ((("without undue delay" :| [],Nothing),0),[])

*************************** \ slKeyValues has returned (("without undue delay" :| [],Nothing),0) :4_2:UnDeeper:
slAKA base> IN: "without undue delay" ) UPON ( "becoming <…>
slAKA base> MATCH (COK): "without undue delay"
slAKA base> VALUE: ((("without undue delay" :| [],Nothing),0),[])

************************** \ slAKA base has returned (("without undue delay" :| [],Nothing),0)    :4_2:UnDeeper:
$*|> IN: "without undue delay" ) UPON ( "becoming <…>
$*|> MATCH (COK): "without undue delay"
$*|> VALUE: ((("without undue delay" :| [],Nothing),0),[])

************************* \ $*| has returned (("without undue delay" :| [],Nothing),0)             :4_2:UnDeeper:
************************* / |>>/recurse                                                            :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :4_2:UnDeeper:
************************** / slAKA optional akapart                                               :4_2:UnDeeper:
*************************** / |?| optional something                                             :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :4_2:UnDeeper:
***************************** / PAKA/akapart                                                   :4_2:UnDeeper:
****************************** / $>|                                                          :4_2:UnDeeper:
******************************* / Aka Token                                                  :4_2:UnDeeper:
Aka Token> IN: ) UPON ( "becoming aware a data breach i <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) UPON ( "becoming aware a data breach i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) UPON ( "becoming aware a data breach i <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) UPON ( "becoming aware a data breach i <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :4_2:UnDeeper:
slAKA optional akapart> IN: ) UPON ( "becoming aware a data breach i <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                      :4_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :4_2:UnDeeper:
|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :4_2:UnDeeper:
************************* / |>>/recurse                                                            :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* / |>>/base                                                               :4_2:UnDeeper:
************************** / slAKA optional typically                                             :4_2:UnDeeper:
*************************** / |?| optional something                                             :4_2:UnDeeper:
**************************** / |>>/recurse                                                      :4_2:UnDeeper:
|>>/recurse> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** / |>>/base                                                         :4_2:UnDeeper:
***************************** / typically                                                      :4_2:UnDeeper:
****************************** / $>|                                                          :4_2:UnDeeper:
$>|> IN: ) UPON ( "becoming aware a data breach i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) UPON ( "becoming aware a data breach i <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) UPON ( "becoming aware a data breach i <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                    :4_2:UnDeeper:
slAKA optional typically> IN: ) UPON ( "becoming aware a data breach i <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                    :4_2:UnDeeper:
************************** > |>>/base got Nothing                                                 :4_2:UnDeeper:
|>>/base> IN: ) UPON ( "becoming aware a data breach i <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                      :4_2:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...         :4_2:UnDeeper:
************************* > pAKA: entityalias = Nothing                                            :4_2:UnDeeper:
slAKA> IN: "without undue delay" ) UPON ( "becoming <…>
slAKA> MATCH (COK): "without undue delay"
slAKA> VALUE: ((("without undue delay" :| [],Nothing),0),[])

************************ \ slAKA has returned (("without undue delay" :| [],Nothing),0)             :4_2:UnDeeper:
************************ / undeepers                                                                :4_2:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
************************* > sameLine: success!                                                     :4_2:UnDeeper:
undeepers> IN: ) UPON ( "becoming aware a data breach i <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                :4_2:UnDeeper:
pKeyValuesAka> IN: "without undue delay" ) UPON ( "becoming <…>
pKeyValuesAka> MATCH (COK): "without undue delay"
pKeyValuesAka> VALUE: (("without undue delay" :| [],Nothing),[])

*********************** \ pKeyValuesAka has returned ("without undue delay" :| [],Nothing)           :4_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "without undue delay" ) UPON ( "becoming <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "without undue delay"
pParamText(flat) first line: pKeyValues> VALUE: (("without undue delay" :| [],Nothing),[])

********************** \ pParamText(flat) first line: pKeyValues has returned ("without undue delay" :| [],Nothing) :4_2:UnDeeper:
********************** / pParamText(flat) subsequent lines: sameMany pKeyValues                       :4_2:UnDeeper:
*********************** / manyIndentation/leaf?                                                      :4_2:UnDeeper:
************************ / sameMany                                                                 :4_2:UnDeeper:
************************* / pKeyValuesAka                                                          :4_2:UnDeeper:
************************** / slAKA                                                                :4_2:UnDeeper:
*************************** / $*|                                                                :4_2:UnDeeper:
**************************** / slAKA base                                                       :4_2:UnDeeper:
***************************** / slKeyValues                                                    :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / someSL                                                     :4_2:UnDeeper:
******************************** / pNumAsText                                               :4_2:UnDeeper:
pNumAsText> IN: ) UPON ( "becoming aware a data breach i <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) UPON ( "becoming aware a data breach i <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) UPON ( "becoming aware a data breach i <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) UPON ( "becoming aware a data breach i <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=17:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) UPON ( "becoming aware a data breach i <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=17:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) UPON ( "becoming aware a data breach i <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) UPON ( "becoming aware a data breach i <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=17:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) UPON ( "becoming aware a data breach i <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=17:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) UPON ( "becoming aware a data breach i <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************ \ sameMany has returned []                                                 :4_2:UnDeeper:
manyIndentation/leaf?> IN: ) UPON ( "becoming aware a data breach i <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

*********************** \ manyIndentation/leaf? has returned []                                      :4_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) UPON ( "becoming aware a data breach i <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

********************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []       :4_2:UnDeeper:
pParamText> IN: "without undue delay" ) UPON ( "becoming <…>
pParamText> MATCH (COK): "without undue delay"
pParamText> VALUE: (("without undue delay" :| [],Nothing) :| [],[])

********************* \ pParamText has returned ("without undue delay" :| [],Nothing) :| []            :4_2:UnDeeper:
term p/3:plain p> IN: "without undue delay" ) UPON ( "becoming <…>
term p/3:plain p> MATCH (COK): "without undue delay"
term p/3:plain p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

******************** \ term p/3:plain p has returned MyLeaf (("without undue delay" :| [],Nothing) :| []) :4_2:UnDeeper:
term p/notLabelTerm> IN: "without undue delay" ) UPON ( "becoming <…>
term p/notLabelTerm> MATCH (COK): "without undue delay"
term p/notLabelTerm> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("without undue delay" :| [],Nothing) :| []) :4_2:UnDeeper:
term p> IN: "without undue delay" ) UPON ( "becoming <…>
term p> MATCH (COK): "without undue delay"
term p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])             :4_2:UnDeeper:
****************** / binary(Or)                                                                           :4_2:UnDeeper:
binary(Or)> IN: ) UPON ( "becoming aware a data breach i <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** / binary(And)                                                                          :4_2:UnDeeper:
binary(And)> IN: ) UPON ( "becoming aware a data breach i <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

****************** / binary(SetLess)                                                                      :4_2:UnDeeper:
binary(SetLess)> IN: ) UPON ( "becoming aware a data breach i <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                      :4_2:UnDeeper:
binary(SetPlus)> IN: ) UPON ( "becoming aware a data breach i <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "without undue delay" ) UPON ( "becoming <…>
expression> MATCH (COK): "without undue delay"
expression> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

***************** \ expression has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])           :4_2:UnDeeper:
manyIndentation/leaf?> IN: "without undue delay" ) UPON ( "becoming <…>
manyIndentation/leaf?> MATCH (COK): "without undue delay"
manyIndentation/leaf?> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])  :4_2:UnDeeper:
**************** / myindented: consuming UnDeeper                                                           :4_2:UnDeeper:
myindented: consuming UnDeeper> IN: ) UPON ( "becoming aware a data breach i <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_1:Upon:
someIndentation> IN: ( "without undue delay" ) UPON ( "becomi <…>
someIndentation> MATCH (COK): ( "without undue delay" )
someIndentation> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

*************** \ someIndentation has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])       :4_1:Upon:
term p/2:someIndentation expr p> IN: ( "without undue delay" ) UPON ( "becomi <…>
term p/2:someIndentation expr p> MATCH (COK): ( "without undue delay" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (("without undue delay" :| [],Nothing) :| []) :4_1:Upon:
term p/notLabelTerm> IN: ( "without undue delay" ) UPON ( "becomi <…>
term p/notLabelTerm> MATCH (COK): ( "without undue delay" )
term p/notLabelTerm> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

************* \ term p/notLabelTerm has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])       :4_1:Upon:
term p> IN: ( "without undue delay" ) UPON ( "becomi <…>
term p> MATCH (COK): ( "without undue delay" )
term p> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

************ \ term p has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])                      :4_1:Upon:
************ / binary(Or)                                                                                    :4_1:Upon:
binary(Or)> IN: UPON ( "becoming aware a data breach inv <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected UPON
binary(Or)> expecting OR

************ / binary(And)                                                                                   :4_1:Upon:
binary(And)> IN: UPON ( "becoming aware a data breach inv <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected UPON
binary(And)> expecting AND

************ / binary(SetLess)                                                                               :4_1:Upon:
binary(SetLess)> IN: UPON ( "becoming aware a data breach inv <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected UPON
binary(SetLess)> expecting LESS

************ / binary(SetPlus)                                                                               :4_1:Upon:
binary(SetPlus)> IN: UPON ( "becoming aware a data breach inv <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected UPON
binary(SetPlus)> expecting PLUS

expression> IN: ( "without undue delay" ) UPON ( "becomi <…>
expression> MATCH (COK): ( "without undue delay" )
expression> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

*********** \ expression has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])                    :4_1:Upon:
expr pParamText> IN: ( "without undue delay" ) UPON ( "becomi <…>
expr pParamText> MATCH (COK): ( "without undue delay" )
expr pParamText> VALUE: (MyLeaf (("without undue delay" :| [],Nothing) :| []),[])

********** \ expr pParamText has returned MyLeaf (("without undue delay" :| [],Nothing) :| [])                 :4_1:Upon:
dBoolStructP calling exprP> IN: ( "without undue delay" ) UPON ( "becomi <…>
dBoolStructP calling exprP> MATCH (COK): ( "without undue delay" )
dBoolStructP calling exprP> VALUE: (Leaf (("without undue delay" :| [],Nothing) :| []),[])

********* \ dBoolStructP calling exprP has returned Leaf (("without undue delay" :| [],Nothing) :| [])          :4_1:Upon:
pAction calling dBoolStructP> IN: ( "without undue delay" ) UPON ( "becomi <…>
pAction calling dBoolStructP> MATCH (COK): ( "without undue delay" )
pAction calling dBoolStructP> VALUE: (Leaf (("without undue delay" :| [],Nothing) :| []),[])

******** \ pAction calling dBoolStructP has returned Leaf (("without undue delay" :| [],Nothing) :| [])          :4_1:Upon:
pDA> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pDA> MATCH (COK): MUST ( "without undue delay" )
pDA> VALUE: ((DMust,Leaf (("without undue delay" :| [],Nothing) :| [])),[])

******* \ pDA has returned (DMust,Leaf (("without undue delay" :| [],Nothing) :| []))                             :4_1:Upon:
******* / WHERE                                                                                                   :4_1:Upon:
WHERE> IN: UPON ( "becoming aware a data breach inv <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected UPON
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected UPON
$>|> expecting HAVING

preambleParamText:[Having]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected UPON
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected UPON
$>|> expecting GIVEN

preambleParamText:[Given]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected UPON
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (COK): UPON
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "beco:
|>>/recurse> IN: "becoming aware a data breach involving  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=20:
|>>/recurse> unexpected "becoming aware a data breach involving a client public agency may have occurred"
|>>/recurse> expecting (

********** / |>>/base                                                                                            :4_2:Other "beco:
*********** / pParamText                                                                                        :4_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :4_2:Other "beco:
************* / pKeyValuesAka                                                                                 :4_2:Other "beco:
************** / slAKA                                                                                       :4_2:Other "beco:
*************** / $*|                                                                                       :4_2:Other "beco:
**************** / slAKA base                                                                              :4_2:Other "beco:
***************** / slKeyValues                                                                           :4_2:Other "beco:
****************** / $*|                                                                                 :4_2:Other "beco:
******************* / someSL                                                                            :4_2:Other "beco:
someSL> IN: "becoming aware a data breach involving  <…>
someSL> MATCH (COK): "becoming aware a data breach involving  <…>
someSL> VALUE: ((["becoming aware a data breach involving a client public agency may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach involving a client public agency may have occurred"],0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((["becoming aware a data breach involving a client public agency may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach involving a client public agency may have occurred"],0) :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / |?| optional something                                                             :5_2:UnDeeper:
******************** / |>>/recurse                                                                      :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** / |>>/base                                                                         :5_2:UnDeeper:
********************* / slTypeSig                                                                      :5_2:UnDeeper:
********************** / $>|                                                                          :5_2:UnDeeper:
$>|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=21:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :5_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :5_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :5_2:UnDeeper:
slKeyValues> IN: "becoming aware a data breach involving  <…>
slKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
slKeyValues> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
slAKA base> IN: "becoming aware a data breach involving  <…>
slAKA base> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA base> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
Aka Token> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=21:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=21:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional akapart> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional typically                                                                 :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
$>|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=21:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional typically> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :5_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :5_2:UnDeeper:
slAKA> IN: "becoming aware a data breach involving  <…>
slAKA> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
************** / undeepers                                                                                    :5_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :5_2:UnDeeper:
*************** > sameLine: success!                                                                         :5_2:UnDeeper:
undeepers> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :5_2:UnDeeper:
pKeyValuesAka> IN: "becoming aware a data breach involving  <…>
pKeyValuesAka> MATCH (COK): "becoming aware a data breach involving  <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :5_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :5_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :5_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :5_2:UnDeeper:
************** / sameMany                                                                                     :5_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :5_2:UnDeeper:
**************** / slAKA                                                                                    :5_2:UnDeeper:
***************** / $*|                                                                                    :5_2:UnDeeper:
****************** / slAKA base                                                                           :5_2:UnDeeper:
******************* / slKeyValues                                                                        :5_2:UnDeeper:
******************** / $*|                                                                              :5_2:UnDeeper:
********************* / someSL                                                                         :5_2:UnDeeper:
********************** / pNumAsText                                                                   :5_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=21:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=21:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=21:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=21:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :5_2:UnDeeper:
manyIndentation/leaf?> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :5_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :5_2:UnDeeper:
pParamText> IN: "becoming aware a data breach involving  <…>
pParamText> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText> VALUE: (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
|>>/base> IN: "becoming aware a data breach involving  <…>
|>>/base> MATCH (COK): "becoming aware a data breach involving  <…>
|>>/base> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],0) :5_2:UnDeeper:
|>>/recurse> IN: ( "becoming aware a data breach involvin <…>
|>>/recurse> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>>/recurse> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
|>| calling $>>> IN: ( "becoming aware a data breach involvin <…>
|>| calling $>>> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
******** / undeepers                                                                                                :5_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :5_2:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:Do:
undeepers> IN: ) DO ( "NOTIFY" ( "the Public Agency" )  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:Do:
preambleParamText:[Upon]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> MATCH (COK): UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []) :5_1:Do:
******* / preambleParamText:[Upon]                                                                                :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=22:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* / WHERE                                                                                                   :5_1:Do:
WHERE> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=22:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=22:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=22:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleBoolStructR [Unless]                                                                            :5_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=22:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :5_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=22:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :5_1:Do:
pTemporal/eventually> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=22:
pTemporal/eventually> unexpected DO
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=22:
pTemporal/specifically> unexpected DO
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :5_1:Do:
pTemporal/vaguely> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=22:
pTemporal/vaguely> unexpected DO
pTemporal/vaguely> expecting Other text

regulative permutation with deontic-action> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
regulative permutation with deontic-action> MATCH (COK): EVERY ( "Data Intermediary" ( AKA ( "You <…>
regulative permutation with deontic-action> VALUE: (RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

****** \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), rbwhere = []} :5_1:Do:
permutationsReg> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
permutationsReg> MATCH (COK): EVERY ( "Data Intermediary" ( AKA ( "You <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), rbwhere = []} :5_1:Do:
***** / pHenceLest-Hence                                                                                            :5_1:Do:
pHenceLest-Hence> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHenceLest-Hence> MATCH (EERR): <EMPTY>
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=22:
pHenceLest-Hence> unexpected DO
pHenceLest-Hence> expecting HENCE

***** / pHenceLest-Lest                                                                                             :5_1:Do:
pHenceLest-Lest> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHenceLest-Lest> MATCH (EERR): <EMPTY>
pHenceLest-Lest> ERROR:
pHenceLest-Lest> offset=22:
pHenceLest-Lest> unexpected DO
pHenceLest-Lest> expecting LEST

****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("without undue delay" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [(Upon,("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("Data Intermediary" :| [],Nothing) :| [])), rbwho = Just (Which,Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), rbwhere = []} :5_1:Do:
****   pRegRuleNormal: the positive preamble is Nothing                                                             :5_1:Do:
****   pRegRuleNormal: the negative preamble is Nothing                                                             :5_1:Do:
****   pRegRuleNormal: returning Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), cond = Nothing, deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :5_1:Do:
pRegRuleNormal> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pRegRuleNormal> MATCH (COK): EVERY ( "Data Intermediary" ( AKA ( "You <…>
pRegRuleNormal> VALUE: (Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), cond = Nothing, deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

**** \ pRegRuleNormal has returned Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), cond = Nothing, deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :5_1:Do:
pRegRule> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pRegRule> MATCH (COK): EVERY ( "Data Intermediary" ( AKA ( "You <…>
pRegRule> VALUE: (Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), cond = Nothing, deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*** \ pRegRule has returned Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), cond = Nothing, deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Just (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :5_1:Do:
pRule> IN: EVERY ( "Data Intermediary" ( AKA ( "You <…>
pRule> MATCH (COK): EVERY ( "Data Intermediary" ( AKA ( "You <…>
pRule> VALUE: (Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), cond = Nothing, deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

** \ pRule has returned Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), cond = Nothing, deontic = DMust, action = Leaf (("without undue delay" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []} :5_1:Do:
** / pRule                                                                                                             :5_1:Do:
*** / pRegRule                                                                                                        :5_1:Do:
**** / pRuleLabel                                                                                                    :5_1:Do:
***** / $>|                                                                                                         :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=22:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

**** / pRegRuleSugary                                                                                                :5_1:Do:
***** / someDeep                                                                                                    :5_1:Do:
****** / someDeep first part calls base directly                                                                   :5_1:Do:
someDeep first part calls base directly> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=22:
someDeep first part calls base directly> unexpected DO
someDeep first part calls base directly> expecting Other text

someDeep> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=22:
someDeep> unexpected DO
someDeep> expecting Other text

pRegRuleSugary> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=22:
pRegRuleSugary> unexpected DO
pRegRuleSugary> expecting Other text

**** / pRegRuleNormal                                                                                                :5_1:Do:
***** / permutationsReg                                                                                             :5_1:Do:
****** / regulative permutation with deontic-temporal                                                              :5_1:Do:
******* / WHERE                                                                                                   :5_1:Do:
WHERE> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=22:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=22:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=22:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=22:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :5_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=22:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :5_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=22:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pDT                                                                                                     :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting MAY, MUST, or SHANT

pDT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=22:
pDT> unexpected DO
pDT> expecting MAY, MUST, or SHANT

******* / pActor [Every,Party,TokAll]                                                                             :5_1:Do:
pActor [Every,Party,TokAll]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=22:
pActor [Every,Party,TokAll]> unexpected DO
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* / pDoAction/Do                                                                                            :5_1:Do:
pDoAction/Do> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :5_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :5_2:GoDeeper:
******** / pAction calling dBoolStructP                                                                           :5_2:GoDeeper:
********* / dBoolStructP calling exprP                                                                           :5_2:GoDeeper:
********** / expr pParamText                                                                                    :5_2:GoDeeper:
*********** / expression                                                                                       :5_2:GoDeeper:
************ / labelPrefix                                                                                    :5_2:GoDeeper:
labelPrefix> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=23:
labelPrefix> unexpected (
labelPrefix> expecting Other text

************ / term p                                                                                         :5_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :5_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :5_2:GoDeeper:
*************** / someIndentation                                                                          :5_2:GoDeeper:
**************** / myindented: consuming GoDeeper                                                         :5_2:GoDeeper:
myindented: consuming GoDeeper> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented: consuming GoDeeper has returned GoDeeper                                    :5_2:Other "NOTI:
**************** / manyIndentation/leaf?                                                                   :5_2:Other "NOTI:
***************** / expression                                                                            :5_2:Other "NOTI:
****************** / labelPrefix                                                                         :5_2:Other "NOTI:
labelPrefix> IN: "NOTIFY" ( "the Public Agency" ) "for wh <…>
labelPrefix> MATCH (COK): "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

****************** \ labelPrefix has returned "NOTIFY"                                                    :5_3:GoDeeper:
****************** / term p                                                                               :5_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :5_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :5_3:GoDeeper:
********************* / someIndentation                                                                :5_3:GoDeeper:
********************** / myindented: consuming GoDeeper                                               :5_3:GoDeeper:
myindented: consuming GoDeeper> IN: ( "the Public Agency" ) "for which" ( "y <…>
myindented: consuming GoDeeper> MATCH (COK): (
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :5_3:Other "the:
********************** / manyIndentation/leaf?                                                         :5_3:Other "the:
*********************** / expression                                                                  :5_3:Other "the:
************************ / labelPrefix                                                               :5_3:Other "the:
labelPrefix> IN: "the Public Agency" ) "for which" ( "you <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=27:
labelPrefix> unexpected )

************************ / term p                                                                    :5_3:Other "the:
************************* / term p/notLabelTerm                                                     :5_3:Other "the:
************************** / term p/2:someIndentation expr p                                       :5_3:Other "the:
*************************** / someIndentation                                                     :5_3:Other "the:
**************************** / myindented: consuming GoDeeper                                    :5_3:Other "the:
myindented: consuming GoDeeper> IN: "the Public Agency" ) "for which" ( "you <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=26:
myindented: consuming GoDeeper> unexpected "the Public Agency"
myindented: consuming GoDeeper> expecting (

someIndentation> IN: "the Public Agency" ) "for which" ( "you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected "the Public Agency"
someIndentation> expecting (

term p/2:someIndentation expr p> IN: "the Public Agency" ) "for which" ( "you <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected "the Public Agency"
term p/2:someIndentation expr p> expecting (

************************** / term p/3:plain p                                                      :5_3:Other "the:
*************************** / pParamText                                                          :5_3:Other "the:
**************************** / pParamText(flat) first line: pKeyValues                           :5_3:Other "the:
***************************** / pKeyValuesAka                                                   :5_3:Other "the:
****************************** / slAKA                                                         :5_3:Other "the:
******************************* / $*|                                                         :5_3:Other "the:
******************************** / slAKA base                                                :5_3:Other "the:
********************************* / slKeyValues                                             :5_3:Other "the:
********************************** / $*|                                                   :5_3:Other "the:
*********************************** / someSL                                              :5_3:Other "the:
someSL> IN: "the Public Agency" ) "for which" ( "you <…>
someSL> MATCH (COK): "the Public Agency"
someSL> VALUE: ((["the Public Agency"],0),[])

*********************************** \ someSL has returned (["the Public Agency"],0)        :6_3:UnDeeper:
$*|> IN: "the Public Agency" ) "for which" ( "you <…>
$*|> MATCH (COK): "the Public Agency"
$*|> VALUE: ((["the Public Agency"],0),[])

********************************** \ $*| has returned (["the Public Agency"],0)             :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :6_3:UnDeeper:
*********************************** / |?| optional something                               :6_3:UnDeeper:
************************************ / |>>/recurse                                        :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ / |>>/base                                           :6_3:UnDeeper:
************************************* / slTypeSig                                        :6_3:UnDeeper:
************************************** / $>|                                            :6_3:UnDeeper:
$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected )
$>|> expecting :: or IS

slTypeSig> IN: ) "for which" ( "you act as a Data Inter <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=27:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=27:
|>>/base> unexpected )
|>>/base> expecting :: or IS

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :6_3:UnDeeper:
*********************************** > |>>/base got Nothing                                 :6_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                      :6_3:UnDeeper:
slKeyValues> IN: "the Public Agency" ) "for which" ( "you <…>
slKeyValues> MATCH (COK): "the Public Agency"
slKeyValues> VALUE: ((("the Public Agency" :| [],Nothing),0),[])

********************************* \ slKeyValues has returned (("the Public Agency" :| [],Nothing),0) :6_3:UnDeeper:
slAKA base> IN: "the Public Agency" ) "for which" ( "you <…>
slAKA base> MATCH (COK): "the Public Agency"
slAKA base> VALUE: ((("the Public Agency" :| [],Nothing),0),[])

******************************** \ slAKA base has returned (("the Public Agency" :| [],Nothing),0) :6_3:UnDeeper:
$*|> IN: "the Public Agency" ) "for which" ( "you <…>
$*|> MATCH (COK): "the Public Agency"
$*|> VALUE: ((("the Public Agency" :| [],Nothing),0),[])

******************************* \ $*| has returned (("the Public Agency" :| [],Nothing),0)     :6_3:UnDeeper:
******************************* / |>>/recurse                                                  :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :6_3:UnDeeper:
******************************** / slAKA optional akapart                                     :6_3:UnDeeper:
********************************* / |?| optional something                                   :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :6_3:UnDeeper:
*********************************** / PAKA/akapart                                         :6_3:UnDeeper:
************************************ / $>|                                                :6_3:UnDeeper:
************************************* / Aka Token                                        :6_3:UnDeeper:
Aka Token> IN: ) "for which" ( "you act as a Data Inter <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=27:
Aka Token> unexpected )
Aka Token> expecting AKA

$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected )
$>|> expecting AKA

PAKA/akapart> IN: ) "for which" ( "you act as a Data Inter <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=27:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=27:
|>>/base> unexpected )
|>>/base> expecting AKA

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :6_3:UnDeeper:
slAKA optional akapart> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)            :6_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :6_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :6_3:UnDeeper:
******************************* / |>>/recurse                                                  :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* / |>>/base                                                     :6_3:UnDeeper:
******************************** / slAKA optional typically                                   :6_3:UnDeeper:
********************************* / |?| optional something                                   :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=27:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** / |>>/base                                               :6_3:UnDeeper:
*********************************** / typically                                            :6_3:UnDeeper:
************************************ / $>|                                                :6_3:UnDeeper:
$>|> IN: ) "for which" ( "you act as a Data Inter <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected )
$>|> expecting TYPICALLY

typically> IN: ) "for which" ( "you act as a Data Inter <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=27:
typically> unexpected )
typically> expecting TYPICALLY

|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=27:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

|?| optional something> IN: ) "for which" ( "you act as a Data Inter <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)          :6_3:UnDeeper:
slAKA optional typically> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)          :6_3:UnDeeper:
******************************** > |>>/base got Nothing                                       :6_3:UnDeeper:
|>>/base> IN: ) "for which" ( "you act as a Data Inter <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                            :6_3:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :6_3:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                  :6_3:UnDeeper:
slAKA> IN: "the Public Agency" ) "for which" ( "you <…>
slAKA> MATCH (COK): "the Public Agency"
slAKA> VALUE: ((("the Public Agency" :| [],Nothing),0),[])

****************************** \ slAKA has returned (("the Public Agency" :| [],Nothing),0)     :6_3:UnDeeper:
****************************** / undeepers                                                      :6_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_3:UnDeeper:
******************************* > sameLine: success!                                           :6_3:UnDeeper:
undeepers> IN: ) "for which" ( "you act as a Data Inter <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :6_3:UnDeeper:
pKeyValuesAka> IN: "the Public Agency" ) "for which" ( "you <…>
pKeyValuesAka> MATCH (COK): "the Public Agency"
pKeyValuesAka> VALUE: (("the Public Agency" :| [],Nothing),[])

***************************** \ pKeyValuesAka has returned ("the Public Agency" :| [],Nothing)   :6_3:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "the Public Agency" ) "for which" ( "you <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "the Public Agency"
pParamText(flat) first line: pKeyValues> VALUE: (("the Public Agency" :| [],Nothing),[])

**************************** \ pParamText(flat) first line: pKeyValues has returned ("the Public Agency" :| [],Nothing) :6_3:UnDeeper:
**************************** / pParamText(flat) subsequent lines: sameMany pKeyValues             :6_3:UnDeeper:
***************************** / manyIndentation/leaf?                                            :6_3:UnDeeper:
****************************** / sameMany                                                       :6_3:UnDeeper:
******************************* / pKeyValuesAka                                                :6_3:UnDeeper:
******************************** / slAKA                                                      :6_3:UnDeeper:
********************************* / $*|                                                      :6_3:UnDeeper:
********************************** / slAKA base                                             :6_3:UnDeeper:
*********************************** / slKeyValues                                          :6_3:UnDeeper:
************************************ / $*|                                                :6_3:UnDeeper:
************************************* / someSL                                           :6_3:UnDeeper:
************************************** / pNumAsText                                     :6_3:UnDeeper:
pNumAsText> IN: ) "for which" ( "you act as a Data Inter <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected )
pNumAsText> expecting number

someSL> IN: ) "for which" ( "you act as a Data Inter <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected )
someSL> expecting other text or number

$*|> IN: ) "for which" ( "you act as a Data Inter <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected )
$*|> expecting other text or number

slKeyValues> IN: ) "for which" ( "you act as a Data Inter <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=27:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

slAKA base> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected )
slAKA base> expecting other text or number

$*|> IN: ) "for which" ( "you act as a Data Inter <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected )
$*|> expecting other text or number

slAKA> IN: ) "for which" ( "you act as a Data Inter <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected )
slAKA> expecting other text or number

pKeyValuesAka> IN: ) "for which" ( "you act as a Data Inter <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=27:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

sameMany> IN: ) "for which" ( "you act as a Data Inter <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

****************************** \ sameMany has returned []                                       :6_3:UnDeeper:
manyIndentation/leaf?> IN: ) "for which" ( "you act as a Data Inter <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

***************************** \ manyIndentation/leaf? has returned []                            :6_3:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) "for which" ( "you act as a Data Inter <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

**************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :6_3:UnDeeper:
pParamText> IN: "the Public Agency" ) "for which" ( "you <…>
pParamText> MATCH (COK): "the Public Agency"
pParamText> VALUE: (("the Public Agency" :| [],Nothing) :| [],[])

*************************** \ pParamText has returned ("the Public Agency" :| [],Nothing) :| []    :6_3:UnDeeper:
term p/3:plain p> IN: "the Public Agency" ) "for which" ( "you <…>
term p/3:plain p> MATCH (COK): "the Public Agency"
term p/3:plain p> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

************************** \ term p/3:plain p has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_3:UnDeeper:
term p/notLabelTerm> IN: "the Public Agency" ) "for which" ( "you <…>
term p/notLabelTerm> MATCH (COK): "the Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

************************* \ term p/notLabelTerm has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_3:UnDeeper:
term p> IN: "the Public Agency" ) "for which" ( "you <…>
term p> MATCH (COK): "the Public Agency"
term p> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

************************ \ term p has returned MyLeaf (("the Public Agency" :| [],Nothing) :| [])     :6_3:UnDeeper:
************************ / binary(Or)                                                                 :6_3:UnDeeper:
binary(Or)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************ / binary(And)                                                                :6_3:UnDeeper:
binary(And)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected )
binary(And)> expecting AND

************************ / binary(SetLess)                                                            :6_3:UnDeeper:
binary(SetLess)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************ / binary(SetPlus)                                                            :6_3:UnDeeper:
binary(SetPlus)> IN: ) "for which" ( "you act as a Data Inter <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

expression> IN: "the Public Agency" ) "for which" ( "you <…>
expression> MATCH (COK): "the Public Agency"
expression> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

*********************** \ expression has returned MyLeaf (("the Public Agency" :| [],Nothing) :| [])   :6_3:UnDeeper:
manyIndentation/leaf?> IN: "the Public Agency" ) "for which" ( "you <…>
manyIndentation/leaf?> MATCH (COK): "the Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_3:UnDeeper:
********************** / myindented: consuming UnDeeper                                                 :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: ) "for which" ( "you act as a Data Inter <…>
myindented: consuming UnDeeper> MATCH (COK): )
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented: consuming UnDeeper has returned UnDeeper                        :6_2:Other "for:
someIndentation> IN: ( "the Public Agency" ) "for which" ( "y <…>
someIndentation> MATCH (COK): ( "the Public Agency" )
someIndentation> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

********************* \ someIndentation has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_2:Other "for:
term p/2:someIndentation expr p> IN: ( "the Public Agency" ) "for which" ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_2:Other "for:
term p/notLabelTerm> IN: ( "the Public Agency" ) "for which" ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "the Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

******************* \ term p/notLabelTerm has returned MyLeaf (("the Public Agency" :| [],Nothing) :| []) :6_2:Other "for:
term p> IN: ( "the Public Agency" ) "for which" ( "y <…>
term p> MATCH (COK): ( "the Public Agency" )
term p> VALUE: (MyLeaf (("the Public Agency" :| [],Nothing) :| []),[])

****************** \ term p has returned MyLeaf (("the Public Agency" :| [],Nothing) :| [])              :6_2:Other "for:
****************** / binary(Or)                                                                          :6_2:Other "for:
binary(Or)> IN: "for which" ( "you act as a Data Interme <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected "for which"
binary(Or)> expecting OR

****************** / binary(And)                                                                         :6_2:Other "for:
binary(And)> IN: "for which" ( "you act as a Data Interme <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected "for which"
binary(And)> expecting AND

****************** / binary(SetLess)                                                                     :6_2:Other "for:
binary(SetLess)> IN: "for which" ( "you act as a Data Interme <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected "for which"
binary(SetLess)> expecting LESS

****************** / binary(SetPlus)                                                                     :6_2:Other "for:
binary(SetPlus)> IN: "for which" ( "you act as a Data Interme <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected "for which"
binary(SetPlus)> expecting PLUS

expression> IN: "NOTIFY" ( "the Public Agency" ) "for wh <…>
expression> MATCH (COK): "NOTIFY" ( "the Public Agency" )
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Public Agency" :| [],Nothing) :| [])),[])

***************** \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the Public Agency" :| [],Nothing) :| [])) :6_2:Other "for:
manyIndentation/leaf?> IN: "NOTIFY" ( "the Public Agency" ) "for wh <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "the Public Agency" )
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the Public Agency" :| [],Nothing) :| [])),[])

**************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the Public Agency" :| [],Nothing) :| [])) :6_2:Other "for:
**************** / myindented: consuming UnDeeper                                                          :6_2:Other "for:
myindented: consuming UnDeeper> IN: "for which" ( "you act as a Data Interme <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=28:
myindented: consuming UnDeeper> unexpected "for which"
myindented: consuming UnDeeper> expecting )

someIndentation> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
someIndentation> MATCH (CERR): ( "NOTIFY" ( "the Public Agency" )
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected "for which"
someIndentation> expecting ), AND, LESS, OR, or PLUS

term p/2:someIndentation expr p> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
term p/2:someIndentation expr p> MATCH (CERR): ( "NOTIFY" ( "the Public Agency" )
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected "for which"
term p/2:someIndentation expr p> expecting ), AND, LESS, OR, or PLUS

************** / term p/3:plain p                                                                           :5_2:GoDeeper:
*************** / pParamText                                                                               :5_2:GoDeeper:
**************** / pParamText(flat) first line: pKeyValues                                                :5_2:GoDeeper:
***************** / pKeyValuesAka                                                                        :5_2:GoDeeper:
****************** / slAKA                                                                              :5_2:GoDeeper:
******************* / $*|                                                                              :5_2:GoDeeper:
******************** / slAKA base                                                                     :5_2:GoDeeper:
********************* / slKeyValues                                                                  :5_2:GoDeeper:
********************** / $*|                                                                        :5_2:GoDeeper:
*********************** / someSL                                                                   :5_2:GoDeeper:
************************ / pNumAsText                                                             :5_2:GoDeeper:
pNumAsText> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

someSL> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

$*|> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

slKeyValues> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=23:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

slAKA base> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected (
slAKA base> expecting other text or number

$*|> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

slAKA> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected (
slAKA> expecting other text or number

pKeyValuesAka> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=23:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=23:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=23:
pParamText> unexpected (
pParamText> expecting other text or number

term p/3:plain p> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=28:
term p/notLabelTerm> unexpected "for which"
term p/notLabelTerm> expecting ), AND, LESS, OR, or PLUS

term p> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=28:
term p> unexpected "for which"
term p> expecting ), AND, LESS, OR, or PLUS

expression> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=28:
expression> unexpected "for which"
expression> expecting expression

expr pParamText> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=28:
expr pParamText> unexpected "for which"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=28:
dBoolStructP calling exprP> unexpected "for which"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=28:
pAction calling dBoolStructP> unexpected "for which"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: ( "NOTIFY" ( "the Public Agency" ) "for  <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=28:
pDoAction/pAction> unexpected "for which"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
regulative permutation with deontic-temporal> MATCH (CERR): DO
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=28:
regulative permutation with deontic-temporal> unexpected "for which"
regulative permutation with deontic-temporal> expecting expression

****** / regulative permutation with deontic-action                                                                :5_1:Do:
******* / WHERE                                                                                                   :5_1:Do:
WHERE> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=22:
WHERE> unexpected DO
WHERE> expecting WHERE

******* / preambleParamText:[Having]                                                                              :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting HAVING

preambleParamText:[Having]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=22:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* / preambleParamText:[Given]                                                                               :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=22:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* / preambleParamText:[Upon]                                                                                :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=22:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* / preambleBoolStructR [Unless]                                                                            :5_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=22:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* / preambleBoolStructR [When,If]                                                                           :5_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=22:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* / pTemporal/eventually                                                                                    :5_1:Do:
pTemporal/eventually> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=22:
pTemporal/eventually> unexpected DO
pTemporal/eventually> expecting EVENTUALLY

******* / pTemporal/specifically                                                                                  :5_1:Do:
******** / $>|                                                                                                   :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting AFTER, BEFORE, BY, or ON

pTemporal/specifically> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=22:
pTemporal/specifically> unexpected DO
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* / pTemporal/vaguely                                                                                       :5_1:Do:
pTemporal/vaguely> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=22:
pTemporal/vaguely> unexpected DO
pTemporal/vaguely> expecting Other text

******* / pActor [Every,Party,TokAll]                                                                             :5_1:Do:
pActor [Every,Party,TokAll]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=22:
pActor [Every,Party,TokAll]> unexpected DO
pActor [Every,Party,TokAll]> expecting ALL, EVERY, or PARTY

******* / pDA                                                                                                     :5_1:Do:
pDA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=22:
pDA> unexpected DO
pDA> expecting MAY, MUST, or SHANT

regulative permutation with deontic-action> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=22:
regulative permutation with deontic-action> unexpected DO
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

permutationsReg> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=28:
permutationsReg> unexpected "for which"
permutationsReg> expecting expression

pRegRuleNormal> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=28:
pRegRuleNormal> unexpected "for which"
pRegRuleNormal> expecting expression

pRegRule> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=28:
pRegRule> unexpected "for which"
pRegRule> expecting expression or §

*** / pTypeDefinition                                                                                                 :5_1:Do:
**** / pRuleLabel                                                                                                    :5_1:Do:
***** / $>|                                                                                                         :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=22:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

**** / pHornlike/uponLimb                                                                                            :5_1:Do:
***** / preambleParamText:[Upon]                                                                                    :5_1:Do:
****** / $>|                                                                                                       :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=22:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=22:
pHornlike/uponLimb> unexpected DO
pHornlike/uponLimb> expecting UPON

**** / pHornlike/givenLimb                                                                                           :5_1:Do:
***** / preambleParamText:[Given]                                                                                   :5_1:Do:
****** / $>|                                                                                                       :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=22:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=22:
pHornlike/givenLimb> unexpected DO
pHornlike/givenLimb> expecting GIVEN

pTypeDefinition> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=22:
pTypeDefinition> unexpected DO
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** / pConstitutiveRule                                                                                               :5_1:Do:
**** / pRuleLabel                                                                                                    :5_1:Do:
***** / $>|                                                                                                         :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=22:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

**** / calling myindented pNameParens                                                                                :5_1:Do:
***** / manyIndentation/leaf?                                                                                       :5_1:Do:
****** / pMultiTermAka                                                                                             :5_1:Do:
******* / pAKA                                                                                                    :5_1:Do:
******** / slAKA                                                                                                 :5_1:Do:
********* / $*|                                                                                                 :5_1:Do:
********** / slAKA base                                                                                        :5_1:Do:
*********** / slMultiTerm                                                                                     :5_1:Do:
************ / someSL                                                                                        :5_1:Do:
************* / pNumAsText                                                                                  :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

pAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=22:
pAKA> unexpected DO
pAKA> expecting other text or number

pMultiTermAka> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=22:
pMultiTermAka> unexpected DO
pMultiTermAka> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=22:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

***** / manyIndentation/deeper; calling someIndentation                                                             :5_1:Do:
****** / someIndentation                                                                                           :5_1:Do:
******* / myindented: consuming GoDeeper                                                                          :5_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=22:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

calling myindented pNameParens> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=22:
calling myindented pNameParens> unexpected DO
calling myindented pNameParens> expecting ( or other text or number

pConstitutiveRule> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=22:
pConstitutiveRule> unexpected DO
pConstitutiveRule> expecting (, other text or number, or §

*** / pScenarioRule                                                                                                   :5_1:Do:
**** / pRuleLabel                                                                                                    :5_1:Do:
***** / $>|                                                                                                         :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=22:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

**** / pExpect                                                                                                       :5_1:Do:
pExpect> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=22:
pExpect> unexpected DO
pExpect> expecting EXPECT

pScenarioRule> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=22:
pScenarioRule> unexpected DO
pScenarioRule> expecting EXPECT, GIVEN, or §

*** / pHornlike                                                                                                       :5_1:Do:
**** / pSrcRef                                                                                                       :5_1:Do:
***** / pRuleLabel                                                                                                  :5_1:Do:
****** / $>|                                                                                                       :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=22:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

pSrcRef> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 5, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 5, version = Nothing})) :5_1:Do:
**** / pHornlike / permute                                                                                           :5_1:Do:
***** / whenCase                                                                                                    :5_1:Do:
****** / whenMeansIf                                                                                               :5_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=22:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :5_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=22:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=22:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :5_1:Do:
****** / preambleParamText:[Upon]                                                                                  :5_1:Do:
******* / $>|                                                                                                     :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=22:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=22:
pHornlike/uponLimb> unexpected DO
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :5_1:Do:
****** / whenMeansIf                                                                                               :5_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=22:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :5_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=22:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=22:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/givenLimb                                                                                         :5_1:Do:
****** / preambleParamText:[Given]                                                                                 :5_1:Do:
******* / $>|                                                                                                     :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=22:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=22:
pHornlike/givenLimb> unexpected DO
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :5_1:Do:
****** / whenMeansIf                                                                                               :5_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=22:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :5_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=22:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=22:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :5_1:Do:
****** / $>|                                                                                                       :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=22:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :5_1:Do:
****** / manyIndentation/leaf?                                                                                     :5_1:Do:
******* / relPredNextlineWhen                                                                                     :5_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:Do:
********* / optIndentedTuple                                                                                    :5_1:Do:
********** / optIndented                                                                                       :5_1:Do:
*********** / pRelPred                                                                                        :5_1:Do:
************ / slRelPred                                                                                     :5_1:Do:
************* / nested simpleHorn                                                                           :5_1:Do:
************** > |^|                                                                                       :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slAKA                                                                                   :5_1:Do:
**************** / $*|                                                                                   :5_1:Do:
***************** / slAKA base                                                                          :5_1:Do:
****************** / slMultiTerm                                                                       :5_1:Do:
******************* / someSL                                                                          :5_1:Do:
******************** / pNumAsText                                                                    :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=22:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=22:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=22:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=22:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=22:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :5_1:Do:
******** / $*|                                                                                                   :5_1:Do:
********* / slRelPred                                                                                           :5_1:Do:
********** / nested simpleHorn                                                                                 :5_1:Do:
*********** > |^|                                                                                             :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slAKA                                                                                         :5_1:Do:
************* / $*|                                                                                         :5_1:Do:
************** / slAKA base                                                                                :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=22:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=22:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:Do:
******* / someIndentation                                                                                         :5_1:Do:
******** / myindented: consuming GoDeeper                                                                        :5_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=22:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=22:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :5_1:Do:
****** / $>|                                                                                                       :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=22:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :5_1:Do:
****** / manyIndentation/leaf?                                                                                     :5_1:Do:
******* / relPredNextlineWhen                                                                                     :5_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:Do:
********* / optIndentedTuple                                                                                    :5_1:Do:
********** / optIndented                                                                                       :5_1:Do:
*********** / pRelPred                                                                                        :5_1:Do:
************ / slRelPred                                                                                     :5_1:Do:
************* / nested simpleHorn                                                                           :5_1:Do:
************** > |^|                                                                                       :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slAKA                                                                                   :5_1:Do:
**************** / $*|                                                                                   :5_1:Do:
***************** / slAKA base                                                                          :5_1:Do:
****************** / slMultiTerm                                                                       :5_1:Do:
******************* / someSL                                                                          :5_1:Do:
******************** / pNumAsText                                                                    :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=22:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=22:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=22:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=22:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=22:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :5_1:Do:
******** / $*|                                                                                                   :5_1:Do:
********* / slRelPred                                                                                           :5_1:Do:
********** / nested simpleHorn                                                                                 :5_1:Do:
*********** > |^|                                                                                             :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slAKA                                                                                         :5_1:Do:
************* / $*|                                                                                         :5_1:Do:
************** / slAKA base                                                                                :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=22:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=22:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:Do:
******* / someIndentation                                                                                         :5_1:Do:
******** / myindented: consuming GoDeeper                                                                        :5_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=22:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=22:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/givenLimb                                                                                         :5_1:Do:
****** / preambleParamText:[Given]                                                                                 :5_1:Do:
******* / $>|                                                                                                     :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting GIVEN

preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=22:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

pHornlike/givenLimb> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=22:
pHornlike/givenLimb> unexpected DO
pHornlike/givenLimb> expecting GIVEN

***** / whenCase                                                                                                    :5_1:Do:
****** / whenMeansIf                                                                                               :5_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=22:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :5_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=22:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=22:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/uponLimb                                                                                          :5_1:Do:
****** / preambleParamText:[Upon]                                                                                  :5_1:Do:
******* / $>|                                                                                                     :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting UPON

preambleParamText:[Upon]> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=22:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

pHornlike/uponLimb> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=22:
pHornlike/uponLimb> unexpected DO
pHornlike/uponLimb> expecting UPON

***** / whenCase                                                                                                    :5_1:Do:
****** / whenMeansIf                                                                                               :5_1:Do:
whenMeansIf> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=22:
whenMeansIf> unexpected DO
whenMeansIf> expecting IF, MEANS, or WHEN

****** / Otherwise                                                                                                 :5_1:Do:
Otherwise> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=22:
Otherwise> unexpected DO
Otherwise> expecting OTHERWISE

whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=22:
whenCase> unexpected DO
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** / pHornlike/ambitious                                                                                         :5_1:Do:
****** / $>|                                                                                                       :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=22:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :5_1:Do:
****** / manyIndentation/leaf?                                                                                     :5_1:Do:
******* / relPredNextlineWhen                                                                                     :5_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:Do:
********* / optIndentedTuple                                                                                    :5_1:Do:
********** / optIndented                                                                                       :5_1:Do:
*********** / pRelPred                                                                                        :5_1:Do:
************ / slRelPred                                                                                     :5_1:Do:
************* / nested simpleHorn                                                                           :5_1:Do:
************** > |^|                                                                                       :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slAKA                                                                                   :5_1:Do:
**************** / $*|                                                                                   :5_1:Do:
***************** / slAKA base                                                                          :5_1:Do:
****************** / slMultiTerm                                                                       :5_1:Do:
******************* / someSL                                                                          :5_1:Do:
******************** / pNumAsText                                                                    :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=22:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=22:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=22:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=22:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=22:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :5_1:Do:
******** / $*|                                                                                                   :5_1:Do:
********* / slRelPred                                                                                           :5_1:Do:
********** / nested simpleHorn                                                                                 :5_1:Do:
*********** > |^|                                                                                             :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slAKA                                                                                         :5_1:Do:
************* / $*|                                                                                         :5_1:Do:
************** / slAKA base                                                                                :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=22:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=22:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:Do:
******* / someIndentation                                                                                         :5_1:Do:
******** / myindented: consuming GoDeeper                                                                        :5_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=22:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=22:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :5_1:Do:
****** / $>|                                                                                                       :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=22:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :5_1:Do:
****** / manyIndentation/leaf?                                                                                     :5_1:Do:
******* / relPredNextlineWhen                                                                                     :5_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:Do:
********* / optIndentedTuple                                                                                    :5_1:Do:
********** / optIndented                                                                                       :5_1:Do:
*********** / pRelPred                                                                                        :5_1:Do:
************ / slRelPred                                                                                     :5_1:Do:
************* / nested simpleHorn                                                                           :5_1:Do:
************** > |^|                                                                                       :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slAKA                                                                                   :5_1:Do:
**************** / $*|                                                                                   :5_1:Do:
***************** / slAKA base                                                                          :5_1:Do:
****************** / slMultiTerm                                                                       :5_1:Do:
******************* / someSL                                                                          :5_1:Do:
******************** / pNumAsText                                                                    :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=22:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=22:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=22:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=22:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=22:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :5_1:Do:
******** / $*|                                                                                                   :5_1:Do:
********* / slRelPred                                                                                           :5_1:Do:
********** / nested simpleHorn                                                                                 :5_1:Do:
*********** > |^|                                                                                             :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slAKA                                                                                         :5_1:Do:
************* / $*|                                                                                         :5_1:Do:
************** / slAKA base                                                                                :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=22:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=22:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:Do:
******* / someIndentation                                                                                         :5_1:Do:
******** / myindented: consuming GoDeeper                                                                        :5_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=22:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=22:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** / pHornlike/ambitious                                                                                         :5_1:Do:
****** / $>|                                                                                                       :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting DECIDE or DEFINE

pHornlike/ambitious> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=22:
pHornlike/ambitious> unexpected DO
pHornlike/ambitious> expecting DECIDE or DEFINE

***** / pHornlike/someStructure                                                                                     :5_1:Do:
****** / manyIndentation/leaf?                                                                                     :5_1:Do:
******* / relPredNextlineWhen                                                                                     :5_1:Do:
******** / pRelPred optIndentedTuple whenCase                                                                    :5_1:Do:
********* / optIndentedTuple                                                                                    :5_1:Do:
********** / optIndented                                                                                       :5_1:Do:
*********** / pRelPred                                                                                        :5_1:Do:
************ / slRelPred                                                                                     :5_1:Do:
************* / nested simpleHorn                                                                           :5_1:Do:
************** > |^|                                                                                       :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************* / RPConstraint                                                                                :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************* / RPBoolStructR                                                                               :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************* / RPMT                                                                                        :5_1:Do:
************** / $*|                                                                                       :5_1:Do:
*************** / slAKA                                                                                   :5_1:Do:
**************** / $*|                                                                                   :5_1:Do:
***************** / slAKA base                                                                          :5_1:Do:
****************** / slMultiTerm                                                                       :5_1:Do:
******************* / someSL                                                                          :5_1:Do:
******************** / pNumAsText                                                                    :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

pRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=22:
pRelPred> unexpected DO
pRelPred> expecting other text or number

optIndented> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=22:
optIndented> unexpected DO
optIndented> expecting other text or number

optIndentedTuple> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=22:
optIndentedTuple> unexpected DO
optIndentedTuple> expecting other text or number

pRelPred optIndentedTuple whenCase> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=22:
pRelPred optIndentedTuple whenCase> unexpected DO
pRelPred optIndentedTuple whenCase> expecting other text or number

relPredNextlineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=22:
relPredNextlineWhen> unexpected DO
relPredNextlineWhen> expecting other text or number

******* / relPredSamelineWhen                                                                                     :5_1:Do:
******** / $*|                                                                                                   :5_1:Do:
********* / slRelPred                                                                                           :5_1:Do:
********** / nested simpleHorn                                                                                 :5_1:Do:
*********** > |^|                                                                                             :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

nested simpleHorn> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

********** / RPConstraint                                                                                      :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPConstraint> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

********** / RPBoolStructR                                                                                     :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slMultiTerm                                                                                   :5_1:Do:
************* / someSL                                                                                      :5_1:Do:
************** / pNumAsText                                                                                :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPBoolStructR> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

********** / RPMT                                                                                              :5_1:Do:
*********** / $*|                                                                                             :5_1:Do:
************ / slAKA                                                                                         :5_1:Do:
************* / $*|                                                                                         :5_1:Do:
************** / slAKA base                                                                                :5_1:Do:
*************** / slMultiTerm                                                                             :5_1:Do:
**************** / someSL                                                                                :5_1:Do:
***************** / pNumAsText                                                                          :5_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected DO
pNumAsText> expecting number

someSL> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected DO
someSL> expecting other text or number

slMultiTerm> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

slAKA base> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected DO
slAKA base> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

slAKA> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected DO
slAKA> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

RPMT> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected DO
RPMT> expecting other text or number

slRelPred> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected DO
slRelPred> expecting other text or number

$*|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected DO
$*|> expecting other text or number

relPredSamelineWhen> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=22:
relPredSamelineWhen> unexpected DO
relPredSamelineWhen> expecting other text or number

manyIndentation/leaf?> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=22:
manyIndentation/leaf?> unexpected DO
manyIndentation/leaf?> expecting other text or number

****** / manyIndentation/deeper; calling someIndentation                                                           :5_1:Do:
******* / someIndentation                                                                                         :5_1:Do:
******** / myindented: consuming GoDeeper                                                                        :5_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected DO
someIndentation> expecting (

manyIndentation/deeper; calling someIndentation> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=22:
manyIndentation/deeper; calling someIndentation> unexpected DO
manyIndentation/deeper; calling someIndentation> expecting (

pHornlike/someStructure> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=22:
pHornlike/someStructure> unexpected DO
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

pHornlike / permute> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=22:
pHornlike / permute> unexpected DO
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

pHornlike> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=22:
pHornlike> unexpected DO
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** / pRuleLabel                                                                                                      :5_1:Do:
**** / $>|                                                                                                           :5_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected DO
$>|> expecting §

pRuleLabel> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=22:
pRuleLabel> unexpected DO
pRuleLabel> expecting §

*** / pRule: unwrapping indentation and recursing                                                                     :5_1:Do:
**** / myindented: consuming GoDeeper                                                                                :5_1:Do:
myindented: consuming GoDeeper> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=22:
myindented: consuming GoDeeper> unexpected DO
myindented: consuming GoDeeper> expecting (

pRule: unwrapping indentation and recursing> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=22:
pRule: unwrapping indentation and recursing> unexpected DO
pRule: unwrapping indentation and recursing> expecting (

pRule> IN: DO ( "NOTIFY" ( "the Public Agency" ) "f <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=28:
pRule> unexpected "for which"
pRule> expecting EOL or regulative rule


PDPA
  pdpadbno-3 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-3
       expected: [[Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), keyword = Every, who = Just (Leaf (RPMT ["processes personal data on behalf of and for the purposes of a public agency"])), cond = Nothing, deontic = DMust, action = Leaf (("NOTIFY" :| ["the Public Agency"],Nothing) :| [("for which" :| ["you act as a Data Intermediary"],Nothing)]), temporal = Just (TemporalConstraint TVague (Just 0) "without undue delay"), hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client public agency may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}]]
       but parsing failed with error:
       5:1:
       unexpected DO
       expecting AFTER, BEFORE, BY, EVENTUALLY, GIVEN, HAVING, HENCE, IF, LEST, ON, Other text, UNLESS, UPON, WHEN, WHERE, or end of input
       EVERY                                                                           Data Intermediary                                                               AKA                                                                             You                                                                            
       WHICH                                                                           processes personal data on behalf of and for the purposes of a public agency                                                                                                                                                                   
       MUST                                                                            without undue delay                                                                                                                                                                                                                            
       UPON                                                                            becoming aware a data breach involving a client public agency may have occurred                                                                                                                                                                
       ✳ ➔                                                                             NOTIFY                                                                          the Public Agency                                                                                                                                              
                                                                                       for which                                                                       you act as a Data Intermediary                                                                                                                                 
       

  To rerun use: --match "/PDPA/pdpadbno-3/"

Randomized with seed 522247487

Finished in 0.0573 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

