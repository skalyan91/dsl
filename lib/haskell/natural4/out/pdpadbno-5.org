* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match /PDPA/pdpadbno-5/)

* Tokens
[RuleMarker 2 "\167",GoDeeper,Other "Notify PDPC",UnDeeper,Other "You",GoDeeper,Must,GoDeeper,GoDeeper,Before,GoDeeper,TNumber 3,GoDeeper,Other "days",UnDeeper,UnDeeper,UnDeeper,UnDeeper,If,GoDeeper,GoDeeper,Other "it is",GoDeeper,Other "an NDB",UnDeeper,UnDeeper,UnDeeper,Unless,GoDeeper,GoDeeper,Other "you are a Public Agency",UnDeeper,UnDeeper,Do,GoDeeper,GoDeeper,Other "NOTIFY",GoDeeper,Other "the PDPC",UnDeeper,Other "in",GoDeeper,Other "the form and manner specified at www.pdpc.gov.sg",UnDeeper,Other "with",GoDeeper,Other "a Notification Message",UnDeeper,Other "and",GoDeeper,GoDeeper,GoDeeper,Other "a list of individuals for whom notification waiver is sought",UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper,Hence,GoDeeper,GoDeeper,Other "the PDPC",GoDeeper,May,GoDeeper,GoDeeper,Other "NOTIFY",GoDeeper,Other "you",UnDeeper,Other "with",GoDeeper,Other "a list of individuals to exclude from notification",GoDeeper,Aka,GoDeeper,Other "the PDPC Exclusion List",UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper,UnDeeper]
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify PDPC"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify PDPC"                                                                               :2_2:UnDeeper:
|>>/base> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/base> MATCH (COK): Other "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

******* \ |>>/base has returned ("Notify PDPC",0)                                                                    :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

****** \ |>>/recurse has returned ("Notify PDPC",1)                                                                   :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify PDPC"
|>| calling $>>> VALUE: (("Notify PDPC",1),[])

***** \ |>| calling $>> has returned ("Notify PDPC",1)                                                                 :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Other "You":
undeepers> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Other "You":
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                              :2_1:Other "You":
**** / pRegRuleSugary                                                                                                :2_1:Other "You":
***** / someDeep                                                                                                    :2_1:Other "You":
****** / someDeep first part calls base directly                                                                   :2_1:Other "You":
someDeep first part calls base directly> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someDeep first part calls base directly> MATCH (COK): Other "You"
someDeep first part calls base directly> VALUE: ("You",[])

****** \ someDeep first part calls base directly has returned "You"                                                 :2_2:GoDeeper:
****** / someDeep second part recurses with someIndentation                                                         :2_2:GoDeeper:
******* / someIndentation                                                                                          :2_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :2_2:Must:
******** / manyIndentation/leaf?                                                                                   :2_2:Must:
********* / someDeep                                                                                              :2_2:Must:
********** / someDeep first part calls base directly                                                             :2_2:Must:
someDeep first part calls base directly> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=6:
someDeep first part calls base directly> unexpected Must
someDeep first part calls base directly> expecting Other text

someDeep> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=6:
someDeep> unexpected Must
someDeep> expecting Other text

manyIndentation/leaf?> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Other text

******** / manyIndentation/deeper; calling someIndentation                                                         :2_2:Must:
********* / someIndentation                                                                                       :2_2:Must:
********** / myindented: consuming GoDeeper                                                                      :2_2:Must:
myindented: consuming GoDeeper> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected Must
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected Must
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper or Other text

someDeep second part recurses with someIndentation> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=6:
someDeep second part recurses with someIndentation> unexpected Must
someDeep second part recurses with someIndentation> expecting GoDeeper or Other text

****** > someDeep no luck, returning []                                                                             :2_2:GoDeeper:
someDeep> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someDeep> MATCH (COK): Other "You"
someDeep> VALUE: (["You"],[])

***** \ someDeep has returned ["You"]                                                                                :2_2:GoDeeper:
***** / someIndentation                                                                                              :2_2:GoDeeper:
****** / myindented: consuming GoDeeper                                                                             :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****** \ myindented: consuming GoDeeper has returned GoDeeper                                                        :2_2:Must:
****** / manyIndentation/leaf?                                                                                       :2_2:Must:
******* / permutationsReg                                                                                           :2_2:Must:
******** / regulative permutation with deontic-temporal                                                            :2_2:Must:
********* / WHERE                                                                                                 :2_2:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected Must
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :2_2:Must:
preambleBoolStructR [Unless]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected Must
preambleBoolStructR [Unless]> expecting Unless

********* / preambleBoolStructR [When,If]                                                                         :2_2:Must:
preambleBoolStructR [When,If]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected Must
preambleBoolStructR [When,If]> expecting If or When

********* / pDT                                                                                                   :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (COK): Must
$>|> VALUE: (DMust,[])

********** \ $>| has returned DMust                                                                               :2_3:GoDeeper:
********** / |>| calling $>>                                                                                      :2_3:GoDeeper:
*********** / |>>/recurse                                                                                        :2_3:GoDeeper:
************ / |>>/recurse                                                                                        :2_4:GoDeeper:
************* / |>>/recurse                                                                                       :2_4:Before:
|>>/recurse> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Before
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Before:
************** / pTemporal/eventually                                                                            :2_4:Before:
pTemporal/eventually> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=9:
pTemporal/eventually> unexpected Before
pTemporal/eventually> expecting Eventually

************** / pTemporal/specifically                                                                          :2_4:Before:
*************** / $>|                                                                                           :2_4:Before:
$>|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$>|> MATCH (COK): Before
$>|> VALUE: (Before,[])

*************** \ $>| has returned Before                                                                        :2_5:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:TNumber 3:
|>>/recurse> IN: TNumber 3 GoDeeper Other "days" UnDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TNumber 3
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                      :2_5:TNumber 3:
***************** > |>>/base got Just 3                                                                          :2_6:GoDeeper:
|>>/base> IN: TNumber 3 GoDeeper Other "days" UnDeeper <…>
|>>/base> MATCH (COK): TNumber 3
|>>/base> VALUE: ((Just 3,0),[])

**************** \ |>>/base has returned (Just 3,0)                                                               :2_6:GoDeeper:
|>>/recurse> IN: GoDeeper TNumber 3 GoDeeper Other "days" <…>
|>>/recurse> MATCH (COK): GoDeeper TNumber 3
|>>/recurse> VALUE: ((Just 3,1),[])

*************** \ |>>/recurse has returned (Just 3,1)                                                              :2_6:GoDeeper:
*************** / |>| calling $>>                                                                                  :2_6:GoDeeper:
**************** / |>>/recurse                                                                                    :2_6:GoDeeper:
***************** / |>>/recurse                                                                                   :2_6:Other "days:
|>>/recurse> IN: Other "days" UnDeeper UnDeeper UnDeeper  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected Other "days"
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                                      :2_6:Other "days:
****************** > |>>/base got "days"                                                                    :3_3:UnDeeper:
|>>/base> IN: Other "days" UnDeeper UnDeeper UnDeeper  <…>
|>>/base> MATCH (COK): Other "days"
|>>/base> VALUE: (("days",0),[])

***************** \ |>>/base has returned ("days",0)                                                         :3_3:UnDeeper:
|>>/recurse> IN: GoDeeper Other "days" UnDeeper UnDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper Other "days"
|>>/recurse> VALUE: (("days",1),[])

**************** \ |>>/recurse has returned ("days",1)                                                        :3_3:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "days" UnDeeper UnDeeper  <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "days"
|>| calling $>>> VALUE: (("days",1),[])

*************** \ |>| calling $>> has returned ("days",1)                                                      :3_3:UnDeeper:
*************** / undeepers                                                                                    :3_3:UnDeeper:
**************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                     :3_3:UnDeeper:
**************** > sameLine: success!                                                                             :3_5:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

*************** \ undeepers has returned ()                                                                        :3_5:UnDeeper:
pTemporal/specifically> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/specifically> MATCH (COK): Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 3) "days"),[])

************** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")              :3_5:UnDeeper:
************** > |>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                              :3_5:UnDeeper:
|>>/base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/base> MATCH (COK): Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),0),[])

************* \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                   :3_5:UnDeeper:
|>>/recurse> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
|>>/recurse> MATCH (COK): GoDeeper Before GoDeeper TNumber 3 GoDee <…>
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),1),[])

************ \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                  :3_5:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

*********** \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :3_5:UnDeeper:
|>| calling $>>> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>| calling $>>> MATCH (COK): GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

********** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                  :3_5:UnDeeper:
********** / undeepers                                                                                                  :3_5:UnDeeper:
*********** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                   :3_5:UnDeeper:
*********** > sameLine: success!                                                                                :3_2:If:
undeepers> IN: UnDeeper UnDeeper If GoDeeper GoDeeper O <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

********** \ undeepers has returned ()                                                                           :3_2:If:
pDT> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDT> MATCH (COK): Must GoDeeper GoDeeper Before GoDeeper T <…>
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 3) "days")),[])

********* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                            :3_2:If:
********* / WHERE                                                                                                 :3_2:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected If
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=18:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :3_2:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=18:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

********* / preambleBoolStructR [When,If]                                                                         :3_2:If:
********** / pBSR                                                                                                 :3_3:GoDeeper:
*********** / ppp inner                                                                                          :3_3:GoDeeper:
************ / expression                                                                                       :3_3:GoDeeper:
************* / labelPrefix                                                                                    :3_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************* / term p                                                                                         :3_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :3_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :3_3:GoDeeper:
**************** / someIndentation                                                                          :3_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :3_4:GoDeeper:
***************** / manyIndentation/leaf?                                                                    :3_4:GoDeeper:
****************** / expression                                                                             :3_4:GoDeeper:
******************* / labelPrefix                                                                          :3_4:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=20:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************* / term p                                                                               :3_4:GoDeeper:
******************** / term p/notLabelTerm                                                                :3_4:GoDeeper:
********************* / term p/2:someIndentation expr p                                                  :3_4:GoDeeper:
********************** / someIndentation                                                                :3_4:GoDeeper:
*********************** / myindented: consuming GoDeeper                                               :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_4:Other "it i:
*********************** / manyIndentation/leaf?                                                         :3_4:Other "it i:
************************ / expression                                                                  :3_4:Other "it i:
************************* / labelPrefix                                                               :3_4:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

************************* \ labelPrefix has returned "it is"                                           :3_5:GoDeeper:
************************* / term p                                                                     :3_5:GoDeeper:
************************** / term p/notLabelTerm                                                      :3_5:GoDeeper:
*************************** / term p/2:someIndentation expr p                                        :3_5:GoDeeper:
**************************** / someIndentation                                                      :3_5:GoDeeper:
***************************** / myindented: consuming GoDeeper                                     :3_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_5:Other "an N:
***************************** / manyIndentation/leaf?                                               :3_5:Other "an N:
****************************** / expression                                                        :3_5:Other "an N:
******************************* / labelPrefix                                                     :3_5:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=24:
labelPrefix> unexpected UnDeeper

******************************* / term p                                                          :3_5:Other "an N:
******************************** / term p/notLabelTerm                                           :3_5:Other "an N:
********************************* / term p/2:someIndentation expr p                             :3_5:Other "an N:
********************************** / someIndentation                                           :3_5:Other "an N:
*********************************** / myindented: consuming GoDeeper                          :3_5:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

********************************* / term p/3:plain p                                            :3_5:Other "an N:
********************************** / pRelPred                                                  :3_5:Other "an N:
*********************************** / slRelPred                                               :3_5:Other "an N:
************************************ / nested simpleHorn                                     :3_5:Other "an N:
************************************* > |^|                                                 :3_5:Other "an N:
************************************* / $*|                                                 :3_5:Other "an N:
************************************** / slMultiTerm                                       :3_5:Other "an N:
*************************************** / someSL                                          :3_5:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************************************** \ someSL has returned (["an NDB"],0)           :4_3:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************** \ slMultiTerm has returned (["an NDB"],0)        :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                  :4_3:UnDeeper:
************************************* / |^| deeps                                        :4_3:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************* \ |^| deeps has returned ([(),(),()],-3)        :4_2:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

************************************ / RPConstraint                                          :3_5:Other "an N:
************************************* / $*|                                                 :3_5:Other "an N:
************************************** / slMultiTerm                                       :3_5:Other "an N:
*************************************** / someSL                                          :3_5:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************************************** \ someSL has returned (["an NDB"],0)           :4_3:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************** \ slMultiTerm has returned (["an NDB"],0)        :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                  :4_3:UnDeeper:
************************************* / |>| calling $>>                                  :4_3:UnDeeper:
************************************** / |>>/recurse                                    :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                       :4_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=24:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=24:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************ / RPBoolStructR                                         :3_5:Other "an N:
************************************* / $*|                                                 :3_5:Other "an N:
************************************** / slMultiTerm                                       :3_5:Other "an N:
*************************************** / someSL                                          :3_5:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************************************** \ someSL has returned (["an NDB"],0)           :4_3:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************** \ slMultiTerm has returned (["an NDB"],0)        :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                  :4_3:UnDeeper:
************************************* / |>| calling $>>                                  :4_3:UnDeeper:
************************************** / |>>/recurse                                    :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                       :4_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=24:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=24:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************ / RPMT                                                  :3_5:Other "an N:
************************************* / $*|                                                 :3_5:Other "an N:
************************************** / slAKA                                             :3_5:Other "an N:
*************************************** / $*|                                             :3_5:Other "an N:
**************************************** / slAKA base                                    :3_5:Other "an N:
***************************************** / slMultiTerm                                 :3_5:Other "an N:
****************************************** / someSL                                    :3_5:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************************** \ someSL has returned (["an NDB"],0)     :4_3:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

***************************************** \ slMultiTerm has returned (["an NDB"],0)  :4_3:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

**************************************** \ slAKA base has returned (["an NDB"],0)     :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*************************************** \ $*| has returned (["an NDB"],0)              :4_3:UnDeeper:
*************************************** / |>>/recurse                                  :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************************** / |>>/base                                     :4_3:UnDeeper:
**************************************** / slAKA optional akapart                     :4_3:UnDeeper:
***************************************** / |?| optional something                   :4_3:UnDeeper:
****************************************** / |>>/recurse                            :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                               :4_3:UnDeeper:
******************************************* / PAKA/akapart                         :4_3:UnDeeper:
******************************************** / $>|                                :4_3:UnDeeper:
********************************************* / Aka Token                        :4_3:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=24:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=24:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=24:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :4_3:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :4_3:UnDeeper:
**************************************** > |>>/base got Nothing                       :4_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)            :4_3:UnDeeper:
*************************************** / |>>/recurse                                  :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************************** / |>>/base                                     :4_3:UnDeeper:
**************************************** / slAKA optional typically                   :4_3:UnDeeper:
***************************************** / |?| optional something                   :4_3:UnDeeper:
****************************************** / |>>/recurse                            :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                               :4_3:UnDeeper:
******************************************* / typically                            :4_3:UnDeeper:
******************************************** / $>|                                :4_3:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=24:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=24:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :4_3:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional typically has returned (Nothing,0) :4_3:UnDeeper:
**************************************** > |>>/base got Nothing                       :4_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)            :4_3:UnDeeper:
*************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_3:UnDeeper:
*************************************** > pAKA: entityalias = Nothing                  :4_3:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA has returned (["an NDB"],0)              :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                  :4_3:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

************************************ \ RPMT has returned (RPMT ["an NDB"],0)              :4_3:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

*********************************** \ slRelPred has returned (RPMT ["an NDB"],0)           :4_3:UnDeeper:
*********************************** / undeepers                                            :4_3:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_3:UnDeeper:
************************************ > sameLine: success!                                 :4_3:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                            :4_3:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

********************************** \ pRelPred has returned RPMT ["an NDB"]                  :4_3:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])   :4_3:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])  :4_3:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p has returned MyLeaf (RPMT ["an NDB"])                 :4_3:UnDeeper:
******************************* / binary(Or)                                                   :4_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************************* / binary(And)                                                  :4_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************************* / binary(SetLess)                                              :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************************* / binary(SetPlus)                                              :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ expression has returned MyLeaf (RPMT ["an NDB"])               :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])      :4_3:UnDeeper:
***************************** / myindented: consuming UnDeeper                                   :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_4:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])  :4_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                :4_4:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p has returned MyLeaf (RPMT ["an NDB"])                               :4_4:UnDeeper:
************************* / binary(Or)                                                                 :4_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************* / binary(And)                                                                :4_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************* / binary(SetLess)                                                            :4_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************* / binary(SetPlus)                                                            :4_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************************ \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))         :4_4:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :4_4:UnDeeper:
*********************** / myindented: consuming UnDeeper                                                 :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_5:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))          :4_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :4_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))          :4_5:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :4_5:UnDeeper:
******************* / binary(Or)                                                                               :4_5:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************* / binary(And)                                                                              :4_5:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************* / binary(SetLess)                                                                          :4_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************* / binary(SetPlus)                                                                          :4_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                       :4_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))              :4_5:UnDeeper:
***************** / myindented: consuming UnDeeper                                                               :4_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_2:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :4_2:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :4_2:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :4_2:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :4_2:Unless:
************* / binary(Or)                                                                                    :4_2:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

************* / binary(And)                                                                                   :4_2:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected Unless
binary(And)> expecting And

************* / binary(SetLess)                                                                               :4_2:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

************* / binary(SetPlus)                                                                               :4_2:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                            :4_2:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

*********** \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                             :4_2:Unless:
pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                    :4_2:Unless:
preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (COK): If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

********* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                        :4_2:Unless:
********* / preambleBoolStructR [When,If]                                                                         :4_2:Unless:
preambleBoolStructR [When,If]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=27:
preambleBoolStructR [When,If]> unexpected Unless
preambleBoolStructR [When,If]> expecting If or When

********* / WHERE                                                                                                 :4_2:Unless:
WHERE> IN: Unless GoDeeper GoDeeper Other "you are  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected Unless
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected Unless
$>|> expecting Having

preambleParamText:[Having]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected Unless
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :4_2:Unless:
********** / pBSR                                                                                                 :4_3:GoDeeper:
*********** / ppp inner                                                                                          :4_3:GoDeeper:
************ / expression                                                                                       :4_3:GoDeeper:
************* / labelPrefix                                                                                    :4_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "you are a Publi <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=28:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************* / term p                                                                                         :4_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :4_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :4_3:GoDeeper:
**************** / someIndentation                                                                          :4_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :4_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "you are a Publi <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :4_4:GoDeeper:
***************** / manyIndentation/leaf?                                                                    :4_4:GoDeeper:
****************** / expression                                                                             :4_4:GoDeeper:
******************* / labelPrefix                                                                          :4_4:GoDeeper:
labelPrefix> IN: GoDeeper Other "you are a Public Agency" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************* / term p                                                                               :4_4:GoDeeper:
******************** / term p/notLabelTerm                                                                :4_4:GoDeeper:
********************* / term p/2:someIndentation expr p                                                  :4_4:GoDeeper:
********************** / someIndentation                                                                :4_4:GoDeeper:
*********************** / myindented: consuming GoDeeper                                               :4_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "you are a Public Agency" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :4_4:Other "you:
*********************** / manyIndentation/leaf?                                                         :4_4:Other "you:
************************ / expression                                                                  :4_4:Other "you:
************************* / labelPrefix                                                               :4_4:Other "you:
labelPrefix> IN: Other "you are a Public Agency" UnDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=31:
labelPrefix> unexpected UnDeeper

************************* / term p                                                                    :4_4:Other "you:
************************** / term p/notLabelTerm                                                     :4_4:Other "you:
*************************** / term p/2:someIndentation expr p                                       :4_4:Other "you:
**************************** / someIndentation                                                     :4_4:Other "you:
***************************** / myindented: consuming GoDeeper                                    :4_4:Other "you:
myindented: consuming GoDeeper> IN: Other "you are a Public Agency" UnDeeper <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=30:
myindented: consuming GoDeeper> unexpected Other "you are a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "you are a Public Agency" UnDeeper <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected Other "you are a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=30:
term p/2:someIndentation expr p> unexpected Other "you are a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

*************************** / term p/3:plain p                                                      :4_4:Other "you:
**************************** / pRelPred                                                            :4_4:Other "you:
***************************** / slRelPred                                                         :4_4:Other "you:
****************************** / nested simpleHorn                                               :4_4:Other "you:
******************************* > |^|                                                           :4_4:Other "you:
******************************* / $*|                                                           :4_4:Other "you:
******************************** / slMultiTerm                                                 :4_4:Other "you:
********************************* / someSL                                                    :4_4:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)      :6_3:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0)   :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)             :6_3:UnDeeper:
******************************* / |^| deeps                                                    :6_3:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

******************************* \ |^| deeps has returned ([(),()],-2)                       :6_2:Do:
nested simpleHorn> IN: Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> MATCH (CERR): Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=33:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting Means or UnDeeper

****************************** / RPConstraint                                                    :4_4:Other "you:
******************************* / $*|                                                           :4_4:Other "you:
******************************** / slMultiTerm                                                 :4_4:Other "you:
********************************* / someSL                                                    :4_4:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)      :6_3:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0)   :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)             :6_3:UnDeeper:
******************************* / |>| calling $>>                                              :6_3:UnDeeper:
******************************** / |>>/recurse                                                :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                   :6_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=31:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "you are a Public Agency" UnDeeper <…>
RPConstraint> MATCH (CERR): Other "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

****************************** / RPBoolStructR                                                   :4_4:Other "you:
******************************* / $*|                                                           :4_4:Other "you:
******************************** / slMultiTerm                                                 :4_4:Other "you:
********************************* / someSL                                                    :4_4:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)      :6_3:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0)   :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)             :6_3:UnDeeper:
******************************* / |>| calling $>>                                              :6_3:UnDeeper:
******************************** / |>>/recurse                                                :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                   :6_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=31:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "you are a Public Agency" UnDeeper <…>
RPBoolStructR> MATCH (CERR): Other "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

****************************** / RPMT                                                            :4_4:Other "you:
******************************* / $*|                                                           :4_4:Other "you:
******************************** / slAKA                                                       :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slAKA base                                              :4_4:Other "you:
*********************************** / slMultiTerm                                           :4_4:Other "you:
************************************ / someSL                                              :4_4:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

************************************ \ someSL has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
slAKA base> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA base> MATCH (COK): Other "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slAKA base has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
********************************* / |>>/recurse                                              :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************* / |>>/base                                                 :6_3:UnDeeper:
********************************** / slAKA optional akapart                                 :6_3:UnDeeper:
*********************************** / |?| optional something                               :6_3:UnDeeper:
************************************ / |>>/recurse                                        :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                           :6_3:UnDeeper:
************************************* / PAKA/akapart                                     :6_3:UnDeeper:
************************************** / $>|                                            :6_3:UnDeeper:
*************************************** / Aka Token                                    :6_3:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=31:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=31:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :6_3:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)        :6_3:UnDeeper:
********************************** > |>>/base got Nothing                                   :6_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                        :6_3:UnDeeper:
********************************* / |>>/recurse                                              :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************* / |>>/base                                                 :6_3:UnDeeper:
********************************** / slAKA optional typically                               :6_3:UnDeeper:
*********************************** / |?| optional something                               :6_3:UnDeeper:
************************************ / |>>/recurse                                        :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                           :6_3:UnDeeper:
************************************* / typically                                        :6_3:UnDeeper:
************************************** / $>|                                            :6_3:UnDeeper:
$>|> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=31:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :6_3:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)      :6_3:UnDeeper:
********************************** > |>>/base got Nothing                                   :6_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                        :6_3:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :6_3:UnDeeper:
********************************* > pAKA: entityalias = Nothing                              :6_3:UnDeeper:
slAKA> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA> MATCH (COK): Other "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)             :6_3:UnDeeper:
RPMT> IN: Other "you are a Public Agency" UnDeeper <…>
RPMT> MATCH (COK): Other "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

****************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)         :6_3:UnDeeper:
slRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
slRelPred> MATCH (COK): Other "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

***************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)      :6_3:UnDeeper:
***************************** / undeepers                                                        :6_3:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_3:UnDeeper:
****************************** > sameLine: success!                                             :6_3:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                        :6_3:UnDeeper:
pRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
pRelPred> MATCH (COK): Other "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

**************************** \ pRelPred has returned RPMT ["you are a Public Agency"]             :6_3:UnDeeper:
term p/3:plain p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/3:plain p> MATCH (COK): Other "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: Other "you are a Public Agency" UnDeeper <…>
term p/notLabelTerm> MATCH (COK): Other "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
term p> IN: Other "you are a Public Agency" UnDeeper <…>
term p> MATCH (COK): Other "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])            :6_3:UnDeeper:
************************* / binary(Or)                                                               :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************* / binary(And)                                                              :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************* / binary(SetLess)                                                          :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************* / binary(SetPlus)                                                          :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "you are a Public Agency" UnDeeper <…>
expression> MATCH (COK): Other "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])          :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "you are a Public Agency" UnDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
*********************** / myindented: consuming UnDeeper                                               :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented: consuming UnDeeper has returned UnDeeper                           :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "you are a Public Agency" <…>
someIndentation> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])           :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])           :6_4:UnDeeper:
term p> IN: GoDeeper Other "you are a Public Agency" <…>
term p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                          :6_4:UnDeeper:
******************* / binary(Or)                                                                             :6_4:UnDeeper:
binary(Or)> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=32:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************* / binary(And)                                                                            :6_4:UnDeeper:
binary(And)> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=32:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************* / binary(SetLess)                                                                        :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=32:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************* / binary(SetPlus)                                                                        :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=32:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "you are a Public Agency" <…>
expression> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                        :6_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])               :6_4:UnDeeper:
***************** / myindented: consuming UnDeeper                                                             :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :6_2:Do:
someIndentation> IN: GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_2:Do:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])    :6_2:Do:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_2:Do:
term p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :6_2:Do:
************* / binary(Or)                                                                                    :6_2:Do:
binary(Or)> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected Do
binary(Or)> expecting Or

************* / binary(And)                                                                                   :6_2:Do:
binary(And)> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected Do
binary(And)> expecting And

************* / binary(SetLess)                                                                               :6_2:Do:
binary(SetLess)> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected Do
binary(SetLess)> expecting SetLess

************* / binary(SetPlus)                                                                               :6_2:Do:
binary(SetPlus)> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected Do
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "you are a Publi <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                               :6_2:Do:
ppp inner> IN: GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

*********** \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                    :6_2:Do:
pBSR> IN: GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                           :6_2:Do:
preambleBoolStructR [Unless]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> MATCH (COK): Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

********* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))            :6_2:Do:
********* / preambleBoolStructR [Unless]                                                                          :6_2:Do:
preambleBoolStructR [Unless]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=33:
preambleBoolStructR [Unless]> unexpected Do
preambleBoolStructR [Unless]> expecting Unless

********* / WHERE                                                                                                 :6_2:Do:
WHERE> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=33:
WHERE> unexpected Do
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=33:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=33:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=33:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

********* / WHERE                                                                                                 :6_2:Do:
WHERE> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=33:
WHERE> unexpected Do
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=33:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=33:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=33:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

********* / pDoAction/Do                                                                                          :6_2:Do:
pDoAction/Do> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
pDoAction/Do> MATCH (COK): Do
pDoAction/Do> VALUE: (Do,[])

********* \ pDoAction/Do has returned Do                                                                           :6_3:GoDeeper:
********* / pDoAction/pAction                                                                                      :6_3:GoDeeper:
********** / pAction calling dBoolStructP                                                                         :6_3:GoDeeper:
*********** / dBoolStructP calling exprP                                                                         :6_3:GoDeeper:
************ / expr pParamText                                                                                  :6_3:GoDeeper:
************* / expression                                                                                     :6_3:GoDeeper:
************** / labelPrefix                                                                                  :6_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=34:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                       :6_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :6_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :6_3:GoDeeper:
***************** / someIndentation                                                                        :6_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                   :6_4:GoDeeper:
****************** / manyIndentation/leaf?                                                                  :6_4:GoDeeper:
******************* / expression                                                                           :6_4:GoDeeper:
******************** / labelPrefix                                                                        :6_4:GoDeeper:
labelPrefix> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=35:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************** / term p                                                                             :6_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :6_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :6_4:GoDeeper:
*********************** / someIndentation                                                              :6_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :6_4:Other "NOTI:
************************ / manyIndentation/leaf?                                                       :6_4:Other "NOTI:
************************* / expression                                                                :6_4:Other "NOTI:
************************** / labelPrefix                                                             :6_4:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

************************** \ labelPrefix has returned "NOTIFY"                                        :6_5:GoDeeper:
************************** / term p                                                                   :6_5:GoDeeper:
*************************** / term p/notLabelTerm                                                    :6_5:GoDeeper:
**************************** / term p/2:someIndentation expr p                                      :6_5:GoDeeper:
***************************** / someIndentation                                                    :6_5:GoDeeper:
****************************** / myindented: consuming GoDeeper                                   :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************************** \ myindented: consuming GoDeeper has returned GoDeeper              :6_5:Other "the:
****************************** / manyIndentation/leaf?                                             :6_5:Other "the:
******************************* / expression                                                      :6_5:Other "the:
******************************** / labelPrefix                                                   :6_5:Other "the:
labelPrefix> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected UnDeeper

******************************** / term p                                                        :6_5:Other "the:
********************************* / term p/notLabelTerm                                         :6_5:Other "the:
********************************** / term p/2:someIndentation expr p                           :6_5:Other "the:
*********************************** / someIndentation                                         :6_5:Other "the:
************************************ / myindented: consuming GoDeeper                        :6_5:Other "the:
myindented: consuming GoDeeper> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=38:
myindented: consuming GoDeeper> unexpected Other "the PDPC"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=38:
someIndentation> unexpected Other "the PDPC"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=38:
term p/2:someIndentation expr p> unexpected Other "the PDPC"
term p/2:someIndentation expr p> expecting GoDeeper

********************************** / term p/3:plain p                                          :6_5:Other "the:
*********************************** / pParamText                                              :6_5:Other "the:
************************************ / pParamText(flat) first line: pKeyValues               :6_5:Other "the:
************************************* / pKeyValuesAka                                       :6_5:Other "the:
************************************** / slAKA                                             :6_5:Other "the:
*************************************** / $*|                                             :6_5:Other "the:
**************************************** / slAKA base                                    :6_5:Other "the:
***************************************** / slKeyValues                                 :6_5:Other "the:
****************************************** / $*|                                       :6_5:Other "the:
******************************************* / someSL                                  :6_5:Other "the:
someSL> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
someSL> MATCH (COK): Other "the PDPC"
someSL> VALUE: ((["the PDPC"],0),[])

******************************************* \ someSL has returned (["the PDPC"],0)     :7_5:UnDeeper:
$*|> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
$*|> MATCH (COK): Other "the PDPC"
$*|> VALUE: ((["the PDPC"],0),[])

****************************************** \ $*| has returned (["the PDPC"],0)          :7_5:UnDeeper:
****************************************** / |>>/recurse                                :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                                   :7_5:UnDeeper:
******************************************* / |?| optional something                   :7_5:UnDeeper:
******************************************** / |>>/recurse                            :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                               :7_5:UnDeeper:
********************************************* / slTypeSig                            :7_5:UnDeeper:
********************************************** / $>|                                :7_5:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=39:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :7_5:UnDeeper:
******************************************* > |>>/base got Nothing                     :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************************************** \ |>>/base has returned (Nothing,0)          :7_5:UnDeeper:
slKeyValues> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slKeyValues> MATCH (COK): Other "the PDPC"
slKeyValues> VALUE: ((("the PDPC" :| [],Nothing),0),[])

***************************************** \ slKeyValues has returned (("the PDPC" :| [],Nothing),0) :7_5:UnDeeper:
slAKA base> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slAKA base> MATCH (COK): Other "the PDPC"
slAKA base> VALUE: ((("the PDPC" :| [],Nothing),0),[])

**************************************** \ slAKA base has returned (("the PDPC" :| [],Nothing),0) :7_5:UnDeeper:
$*|> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
$*|> MATCH (COK): Other "the PDPC"
$*|> VALUE: ((("the PDPC" :| [],Nothing),0),[])

*************************************** \ $*| has returned (("the PDPC" :| [],Nothing),0)  :7_5:UnDeeper:
*************************************** / |>>/recurse                                      :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************************** / |>>/base                                         :7_5:UnDeeper:
**************************************** / slAKA optional akapart                         :7_5:UnDeeper:
***************************************** / |?| optional something                       :7_5:UnDeeper:
****************************************** / |>>/recurse                                :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                                   :7_5:UnDeeper:
******************************************* / PAKA/akapart                             :7_5:UnDeeper:
******************************************** / $>|                                    :7_5:UnDeeper:
********************************************* / Aka Token                            :7_5:UnDeeper:
Aka Token> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=39:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=39:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :7_5:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :7_5:UnDeeper:
**************************************** > |>>/base got Nothing                           :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)                :7_5:UnDeeper:
*************************************** / |>>/recurse                                      :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************************** / |>>/base                                         :7_5:UnDeeper:
**************************************** / slAKA optional typically                       :7_5:UnDeeper:
***************************************** / |?| optional something                       :7_5:UnDeeper:
****************************************** / |>>/recurse                                :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                                   :7_5:UnDeeper:
******************************************* / typically                                :7_5:UnDeeper:
******************************************** / $>|                                    :7_5:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=39:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :7_5:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional typically has returned (Nothing,0) :7_5:UnDeeper:
**************************************** > |>>/base got Nothing                           :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)                :7_5:UnDeeper:
*************************************** > slAKA: proceeding after base and entityalias are retrieved ... :7_5:UnDeeper:
*************************************** > pAKA: entityalias = Nothing                      :7_5:UnDeeper:
slAKA> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slAKA> MATCH (COK): Other "the PDPC"
slAKA> VALUE: ((("the PDPC" :| [],Nothing),0),[])

************************************** \ slAKA has returned (("the PDPC" :| [],Nothing),0)  :7_5:UnDeeper:
************************************** / undeepers                                          :7_5:UnDeeper:
*************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_5:UnDeeper:
*************************************** > sameLine: success!                               :7_5:UnDeeper:
undeepers> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************** \ undeepers has returned ()                          :7_5:UnDeeper:
pKeyValuesAka> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pKeyValuesAka> MATCH (COK): Other "the PDPC"
pKeyValuesAka> VALUE: (("the PDPC" :| [],Nothing),[])

************************************* \ pKeyValuesAka has returned ("the PDPC" :| [],Nothing) :7_5:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "the PDPC"
pParamText(flat) first line: pKeyValues> VALUE: (("the PDPC" :| [],Nothing),[])

************************************ \ pParamText(flat) first line: pKeyValues has returned ("the PDPC" :| [],Nothing) :7_5:UnDeeper:
************************************ / pParamText(flat) subsequent lines: sameMany pKeyValues :7_5:UnDeeper:
************************************* / manyIndentation/leaf?                                :7_5:UnDeeper:
************************************** / sameMany                                           :7_5:UnDeeper:
*************************************** / pKeyValuesAka                                    :7_5:UnDeeper:
**************************************** / slAKA                                          :7_5:UnDeeper:
***************************************** / $*|                                          :7_5:UnDeeper:
****************************************** / slAKA base                                 :7_5:UnDeeper:
******************************************* / slKeyValues                              :7_5:UnDeeper:
******************************************** / $*|                                    :7_5:UnDeeper:
********************************************* / someSL                               :7_5:UnDeeper:
********************************************** / pNumAsText                         :7_5:UnDeeper:
pNumAsText> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=39:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=39:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=39:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=39:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************************** \ sameMany has returned []                           :7_5:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************************************* \ manyIndentation/leaf? has returned []                :7_5:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************************************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_5:UnDeeper:
pParamText> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pParamText> MATCH (COK): Other "the PDPC"
pParamText> VALUE: (("the PDPC" :| [],Nothing) :| [],[])

*********************************** \ pParamText has returned ("the PDPC" :| [],Nothing) :| [] :7_5:UnDeeper:
term p/3:plain p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/3:plain p> MATCH (COK): Other "the PDPC"
term p/3:plain p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

********************************** \ term p/3:plain p has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
term p/notLabelTerm> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/notLabelTerm> MATCH (COK): Other "the PDPC"
term p/notLabelTerm> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

********************************* \ term p/notLabelTerm has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
term p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p> MATCH (COK): Other "the PDPC"
term p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

******************************** \ term p has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])  :7_5:UnDeeper:
******************************** / binary(Or)                                                     :7_5:UnDeeper:
binary(Or)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=39:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************************** / binary(And)                                                    :7_5:UnDeeper:
binary(And)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=39:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************************** / binary(SetLess)                                                :7_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=39:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************************** / binary(SetPlus)                                                :7_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=39:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
expression> MATCH (COK): Other "the PDPC"
expression> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

******************************* \ expression has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
manyIndentation/leaf?> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
manyIndentation/leaf?> MATCH (COK): Other "the PDPC"
manyIndentation/leaf?> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

****************************** \ manyIndentation/leaf? has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
****************************** / myindented: consuming UnDeeper                                     :7_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************************** \ myindented: consuming UnDeeper has returned UnDeeper            :7_4:Other "in":
someIndentation> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
someIndentation> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
someIndentation> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

***************************** \ someIndentation has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_4:Other "in":
term p/2:someIndentation expr p> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

**************************** \ term p/2:someIndentation expr p has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_4:Other "in":
term p/notLabelTerm> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_4:Other "in":
term p> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

************************** \ term p has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])           :7_4:Other "in":
************************** / binary(Or)                                                              :7_4:Other "in":
binary(Or)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=40:
binary(Or)> unexpected Other "in"
binary(Or)> expecting Or

************************** / binary(And)                                                             :7_4:Other "in":
binary(And)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=40:
binary(And)> unexpected Other "in"
binary(And)> expecting And

************************** / binary(SetLess)                                                         :7_4:Other "in":
binary(SetLess)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=40:
binary(SetLess)> unexpected Other "in"
binary(SetLess)> expecting SetLess

************************** / binary(SetPlus)                                                         :7_4:Other "in":
binary(SetPlus)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=40:
binary(SetPlus)> unexpected Other "in"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "the PDPC" <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])),[])

************************* \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])) :7_4:Other "in":
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "the PDPC" <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])),[])

************************ \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])) :7_4:Other "in":
************************ / myindented: consuming UnDeeper                                              :7_4:Other "in":
myindented: consuming UnDeeper> IN: Other "in" GoDeeper Other "the form and  <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=40:
myindented: consuming UnDeeper> unexpected Other "in"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p/2:someIndentation expr p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "in"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, or UnDeeper

********************** / term p/3:plain p                                                               :6_4:GoDeeper:
*********************** / pParamText                                                                   :6_4:GoDeeper:
************************ / pParamText(flat) first line: pKeyValues                                    :6_4:GoDeeper:
************************* / pKeyValuesAka                                                            :6_4:GoDeeper:
************************** / slAKA                                                                  :6_4:GoDeeper:
*************************** / $*|                                                                  :6_4:GoDeeper:
**************************** / slAKA base                                                         :6_4:GoDeeper:
***************************** / slKeyValues                                                      :6_4:GoDeeper:
****************************** / $*|                                                            :6_4:GoDeeper:
******************************* / someSL                                                       :6_4:GoDeeper:
******************************** / pNumAsText                                                 :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=35:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=35:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=35:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=35:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=35:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=35:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=35:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=40:
term p/notLabelTerm> unexpected Other "in"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=40:
term p> unexpected Other "in"
term p> expecting And, Or, SetLess, SetPlus, or UnDeeper

expression> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=40:
expression> unexpected Other "in"
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=40:
manyIndentation/leaf?> unexpected Other "in"
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                        :6_4:GoDeeper:
******************* / someIndentation                                                                      :6_4:GoDeeper:
******************** / myindented: consuming GoDeeper                                                     :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************** \ myindented: consuming GoDeeper has returned GoDeeper                                :6_4:Other "NOTI:
******************** / manyIndentation/leaf?                                                               :6_4:Other "NOTI:
********************* / expression                                                                        :6_4:Other "NOTI:
********************** / labelPrefix                                                                     :6_4:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

********************** \ labelPrefix has returned "NOTIFY"                                                :6_5:GoDeeper:
********************** / term p                                                                           :6_5:GoDeeper:
*********************** / term p/notLabelTerm                                                            :6_5:GoDeeper:
************************ / term p/2:someIndentation expr p                                              :6_5:GoDeeper:
************************* / someIndentation                                                            :6_5:GoDeeper:
************************** / myindented: consuming GoDeeper                                           :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************** \ myindented: consuming GoDeeper has returned GoDeeper                      :6_5:Other "the:
************************** / manyIndentation/leaf?                                                     :6_5:Other "the:
*************************** / expression                                                              :6_5:Other "the:
**************************** / labelPrefix                                                           :6_5:Other "the:
labelPrefix> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected UnDeeper

**************************** / term p                                                                :6_5:Other "the:
***************************** / term p/notLabelTerm                                                 :6_5:Other "the:
****************************** / term p/2:someIndentation expr p                                   :6_5:Other "the:
******************************* / someIndentation                                                 :6_5:Other "the:
******************************** / myindented: consuming GoDeeper                                :6_5:Other "the:
myindented: consuming GoDeeper> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=38:
myindented: consuming GoDeeper> unexpected Other "the PDPC"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=38:
someIndentation> unexpected Other "the PDPC"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=38:
term p/2:someIndentation expr p> unexpected Other "the PDPC"
term p/2:someIndentation expr p> expecting GoDeeper

****************************** / term p/3:plain p                                                  :6_5:Other "the:
******************************* / pParamText                                                      :6_5:Other "the:
******************************** / pParamText(flat) first line: pKeyValues                       :6_5:Other "the:
********************************* / pKeyValuesAka                                               :6_5:Other "the:
********************************** / slAKA                                                     :6_5:Other "the:
*********************************** / $*|                                                     :6_5:Other "the:
************************************ / slAKA base                                            :6_5:Other "the:
************************************* / slKeyValues                                         :6_5:Other "the:
************************************** / $*|                                               :6_5:Other "the:
*************************************** / someSL                                          :6_5:Other "the:
someSL> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
someSL> MATCH (COK): Other "the PDPC"
someSL> VALUE: ((["the PDPC"],0),[])

*************************************** \ someSL has returned (["the PDPC"],0)             :7_5:UnDeeper:
$*|> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
$*|> MATCH (COK): Other "the PDPC"
$*|> VALUE: ((["the PDPC"],0),[])

************************************** \ $*| has returned (["the PDPC"],0)                  :7_5:UnDeeper:
************************************** / |>>/recurse                                        :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                           :7_5:UnDeeper:
*************************************** / |?| optional something                           :7_5:UnDeeper:
**************************************** / |>>/recurse                                    :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                       :7_5:UnDeeper:
***************************************** / slTypeSig                                    :7_5:UnDeeper:
****************************************** / $>|                                        :7_5:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=39:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0)  :7_5:UnDeeper:
*************************************** > |>>/base got Nothing                             :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)                  :7_5:UnDeeper:
slKeyValues> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slKeyValues> MATCH (COK): Other "the PDPC"
slKeyValues> VALUE: ((("the PDPC" :| [],Nothing),0),[])

************************************* \ slKeyValues has returned (("the PDPC" :| [],Nothing),0) :7_5:UnDeeper:
slAKA base> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slAKA base> MATCH (COK): Other "the PDPC"
slAKA base> VALUE: ((("the PDPC" :| [],Nothing),0),[])

************************************ \ slAKA base has returned (("the PDPC" :| [],Nothing),0) :7_5:UnDeeper:
$*|> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
$*|> MATCH (COK): Other "the PDPC"
$*|> VALUE: ((("the PDPC" :| [],Nothing),0),[])

*********************************** \ $*| has returned (("the PDPC" :| [],Nothing),0)          :7_5:UnDeeper:
*********************************** / |>>/recurse                                              :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                                 :7_5:UnDeeper:
************************************ / slAKA optional akapart                                 :7_5:UnDeeper:
************************************* / |?| optional something                               :7_5:UnDeeper:
************************************** / |>>/recurse                                        :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                           :7_5:UnDeeper:
*************************************** / PAKA/akapart                                     :7_5:UnDeeper:
**************************************** / $>|                                            :7_5:UnDeeper:
***************************************** / Aka Token                                    :7_5:UnDeeper:
Aka Token> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=39:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=39:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)      :7_5:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)        :7_5:UnDeeper:
************************************ > |>>/base got Nothing                                   :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                        :7_5:UnDeeper:
*********************************** / |>>/recurse                                              :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                                 :7_5:UnDeeper:
************************************ / slAKA optional typically                               :7_5:UnDeeper:
************************************* / |?| optional something                               :7_5:UnDeeper:
************************************** / |>>/recurse                                        :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                           :7_5:UnDeeper:
*************************************** / typically                                        :7_5:UnDeeper:
**************************************** / $>|                                            :7_5:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=39:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)      :7_5:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0)      :7_5:UnDeeper:
************************************ > |>>/base got Nothing                                   :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                        :7_5:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :7_5:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                              :7_5:UnDeeper:
slAKA> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slAKA> MATCH (COK): Other "the PDPC"
slAKA> VALUE: ((("the PDPC" :| [],Nothing),0),[])

********************************** \ slAKA has returned (("the PDPC" :| [],Nothing),0)          :7_5:UnDeeper:
********************************** / undeepers                                                  :7_5:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_5:UnDeeper:
*********************************** > sameLine: success!                                       :7_5:UnDeeper:
undeepers> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :7_5:UnDeeper:
pKeyValuesAka> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pKeyValuesAka> MATCH (COK): Other "the PDPC"
pKeyValuesAka> VALUE: (("the PDPC" :| [],Nothing),[])

********************************* \ pKeyValuesAka has returned ("the PDPC" :| [],Nothing)        :7_5:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "the PDPC"
pParamText(flat) first line: pKeyValues> VALUE: (("the PDPC" :| [],Nothing),[])

******************************** \ pParamText(flat) first line: pKeyValues has returned ("the PDPC" :| [],Nothing) :7_5:UnDeeper:
******************************** / pParamText(flat) subsequent lines: sameMany pKeyValues         :7_5:UnDeeper:
********************************* / manyIndentation/leaf?                                        :7_5:UnDeeper:
********************************** / sameMany                                                   :7_5:UnDeeper:
*********************************** / pKeyValuesAka                                            :7_5:UnDeeper:
************************************ / slAKA                                                  :7_5:UnDeeper:
************************************* / $*|                                                  :7_5:UnDeeper:
************************************** / slAKA base                                         :7_5:UnDeeper:
*************************************** / slKeyValues                                      :7_5:UnDeeper:
**************************************** / $*|                                            :7_5:UnDeeper:
***************************************** / someSL                                       :7_5:UnDeeper:
****************************************** / pNumAsText                                 :7_5:UnDeeper:
pNumAsText> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=39:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=39:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=39:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=39:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

********************************** \ sameMany has returned []                                   :7_5:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

********************************* \ manyIndentation/leaf? has returned []                        :7_5:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

******************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_5:UnDeeper:
pParamText> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pParamText> MATCH (COK): Other "the PDPC"
pParamText> VALUE: (("the PDPC" :| [],Nothing) :| [],[])

******************************* \ pParamText has returned ("the PDPC" :| [],Nothing) :| []         :7_5:UnDeeper:
term p/3:plain p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/3:plain p> MATCH (COK): Other "the PDPC"
term p/3:plain p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

****************************** \ term p/3:plain p has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
term p/notLabelTerm> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/notLabelTerm> MATCH (COK): Other "the PDPC"
term p/notLabelTerm> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
term p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p> MATCH (COK): Other "the PDPC"
term p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

**************************** \ term p has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])          :7_5:UnDeeper:
**************************** / binary(Or)                                                             :7_5:UnDeeper:
binary(Or)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=39:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

**************************** / binary(And)                                                            :7_5:UnDeeper:
binary(And)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=39:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

**************************** / binary(SetLess)                                                        :7_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=39:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

**************************** / binary(SetPlus)                                                        :7_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=39:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
expression> MATCH (COK): Other "the PDPC"
expression> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

*************************** \ expression has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])        :7_5:UnDeeper:
manyIndentation/leaf?> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
manyIndentation/leaf?> MATCH (COK): Other "the PDPC"
manyIndentation/leaf?> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

************************** \ manyIndentation/leaf? has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
************************** / myindented: consuming UnDeeper                                             :7_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************** \ myindented: consuming UnDeeper has returned UnDeeper                    :7_4:Other "in":
someIndentation> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
someIndentation> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
someIndentation> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

************************* \ someIndentation has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])    :7_4:Other "in":
term p/2:someIndentation expr p> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

************************ \ term p/2:someIndentation expr p has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_4:Other "in":
term p/notLabelTerm> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

*********************** \ term p/notLabelTerm has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])    :7_4:Other "in":
term p> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

********************** \ term p has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])                   :7_4:Other "in":
********************** / binary(Or)                                                                      :7_4:Other "in":
binary(Or)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=40:
binary(Or)> unexpected Other "in"
binary(Or)> expecting Or

********************** / binary(And)                                                                     :7_4:Other "in":
binary(And)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=40:
binary(And)> unexpected Other "in"
binary(And)> expecting And

********************** / binary(SetLess)                                                                 :7_4:Other "in":
binary(SetLess)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=40:
binary(SetLess)> unexpected Other "in"
binary(SetLess)> expecting SetLess

********************** / binary(SetPlus)                                                                 :7_4:Other "in":
binary(SetPlus)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=40:
binary(SetPlus)> unexpected Other "in"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "the PDPC" <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])),[])

********************* \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])) :7_4:Other "in":
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "the PDPC" <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])),[])

******************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])) :7_4:Other "in":
******************** / myindented: consuming UnDeeper                                                      :7_4:Other "in":
myindented: consuming UnDeeper> IN: Other "in" GoDeeper Other "the form and  <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=40:
myindented: consuming UnDeeper> unexpected Other "in"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=40:
manyIndentation/deeper; calling someIndentation> unexpected Other "in"
manyIndentation/deeper; calling someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

someIndentation> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "in"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

**************** / term p/3:plain p                                                                         :6_3:GoDeeper:
***************** / pParamText                                                                             :6_3:GoDeeper:
****************** / pParamText(flat) first line: pKeyValues                                              :6_3:GoDeeper:
******************* / pKeyValuesAka                                                                      :6_3:GoDeeper:
******************** / slAKA                                                                            :6_3:GoDeeper:
********************* / $*|                                                                            :6_3:GoDeeper:
********************** / slAKA base                                                                   :6_3:GoDeeper:
*********************** / slKeyValues                                                                :6_3:GoDeeper:
************************ / $*|                                                                      :6_3:GoDeeper:
************************* / someSL                                                                 :6_3:GoDeeper:
************************** / pNumAsText                                                           :6_3:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=34:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=34:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=34:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=34:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=34:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=34:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=34:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=34:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=34:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=34:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=34:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=40:
term p/notLabelTerm> unexpected Other "in"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

term p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=40:
term p> unexpected Other "in"
term p> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

expression> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=40:
expression> unexpected Other "in"
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=40:
expr pParamText> unexpected Other "in"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=40:
dBoolStructP calling exprP> unexpected Other "in"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=40:
pAction calling dBoolStructP> unexpected Other "in"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=40:
pDoAction/pAction> unexpected Other "in"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
regulative permutation with deontic-temporal> MATCH (CERR): Must GoDeeper GoDeeper Before GoDeeper T <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=40:
regulative permutation with deontic-temporal> unexpected Other "in"
regulative permutation with deontic-temporal> expecting expression

******** / regulative permutation with deontic-action                                                              :2_2:Must:
********* / WHERE                                                                                                 :2_2:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected Must
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :2_2:Must:
preambleBoolStructR [Unless]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected Must
preambleBoolStructR [Unless]> expecting Unless

********* / preambleBoolStructR [When,If]                                                                         :2_2:Must:
preambleBoolStructR [When,If]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected Must
preambleBoolStructR [When,If]> expecting If or When

********* / pTemporal/eventually                                                                                  :2_2:Must:
pTemporal/eventually> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=6:
pTemporal/eventually> unexpected Must
pTemporal/eventually> expecting Eventually

********* / pTemporal/specifically                                                                                :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=6:
pTemporal/specifically> unexpected Must
pTemporal/specifically> expecting After, Before, By, or On

********* / pTemporal/vaguely                                                                                     :2_2:Must:
pTemporal/vaguely> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=6:
pTemporal/vaguely> unexpected Must
pTemporal/vaguely> expecting Other text

********* / WHERE                                                                                                 :2_2:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected Must
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :2_2:Must:
preambleBoolStructR [Unless]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected Must
preambleBoolStructR [Unless]> expecting Unless

********* / preambleBoolStructR [When,If]                                                                         :2_2:Must:
preambleBoolStructR [When,If]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected Must
preambleBoolStructR [When,If]> expecting If or When

********* / pTemporal/eventually                                                                                  :2_2:Must:
pTemporal/eventually> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=6:
pTemporal/eventually> unexpected Must
pTemporal/eventually> expecting Eventually

********* / pTemporal/specifically                                                                                :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=6:
pTemporal/specifically> unexpected Must
pTemporal/specifically> expecting After, Before, By, or On

********* / pTemporal/vaguely                                                                                     :2_2:Must:
pTemporal/vaguely> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=6:
pTemporal/vaguely> unexpected Must
pTemporal/vaguely> expecting Other text

********* / pDA                                                                                                   :2_2:Must:
********** / pAction calling dBoolStructP                                                                         :2_3:GoDeeper:
*********** / dBoolStructP calling exprP                                                                         :2_3:GoDeeper:
************ / expr pParamText                                                                                  :2_3:GoDeeper:
************* / expression                                                                                     :2_3:GoDeeper:
************** / labelPrefix                                                                                  :2_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=7:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                       :2_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :2_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :2_3:GoDeeper:
***************** / someIndentation                                                                        :2_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                   :2_4:GoDeeper:
****************** / manyIndentation/leaf?                                                                  :2_4:GoDeeper:
******************* / expression                                                                           :2_4:GoDeeper:
******************** / labelPrefix                                                                        :2_4:GoDeeper:
labelPrefix> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=8:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************** / term p                                                                             :2_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :2_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :2_4:GoDeeper:
*********************** / someIndentation                                                              :2_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :2_4:Before:
************************ / manyIndentation/leaf?                                                       :2_4:Before:
************************* / expression                                                                :2_4:Before:
************************** / labelPrefix                                                             :2_4:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

************************** / term p                                                                  :2_4:Before:
*************************** / term p/notLabelTerm                                                   :2_4:Before:
**************************** / term p/2:someIndentation expr p                                     :2_4:Before:
***************************** / someIndentation                                                   :2_4:Before:
****************************** / myindented: consuming GoDeeper                                  :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

**************************** / term p/3:plain p                                                    :2_4:Before:
***************************** / pParamText                                                        :2_4:Before:
****************************** / pParamText(flat) first line: pKeyValues                         :2_4:Before:
******************************* / pKeyValuesAka                                                 :2_4:Before:
******************************** / slAKA                                                       :2_4:Before:
********************************* / $*|                                                       :2_4:Before:
********************************** / slAKA base                                              :2_4:Before:
*********************************** / slKeyValues                                           :2_4:Before:
************************************ / $*|                                                 :2_4:Before:
************************************* / someSL                                            :2_4:Before:
************************************** / pNumAsText                                      :2_4:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=9:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

************************ / manyIndentation/deeper; calling someIndentation                             :2_4:Before:
************************* / someIndentation                                                           :2_4:Before:
************************** / myindented: consuming GoDeeper                                          :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

********************** / term p/3:plain p                                                               :2_4:GoDeeper:
*********************** / pParamText                                                                   :2_4:GoDeeper:
************************ / pParamText(flat) first line: pKeyValues                                    :2_4:GoDeeper:
************************* / pKeyValuesAka                                                            :2_4:GoDeeper:
************************** / slAKA                                                                  :2_4:GoDeeper:
*************************** / $*|                                                                  :2_4:GoDeeper:
**************************** / slAKA base                                                         :2_4:GoDeeper:
***************************** / slKeyValues                                                      :2_4:GoDeeper:
****************************** / $*|                                                            :2_4:GoDeeper:
******************************* / someSL                                                       :2_4:GoDeeper:
******************************** / pNumAsText                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=8:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=8:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=8:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=8:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                        :2_4:GoDeeper:
******************* / someIndentation                                                                      :2_4:GoDeeper:
******************** / myindented: consuming GoDeeper                                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************** \ myindented: consuming GoDeeper has returned GoDeeper                                :2_4:Before:
******************** / manyIndentation/leaf?                                                               :2_4:Before:
********************* / expression                                                                        :2_4:Before:
********************** / labelPrefix                                                                     :2_4:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

********************** / term p                                                                          :2_4:Before:
*********************** / term p/notLabelTerm                                                           :2_4:Before:
************************ / term p/2:someIndentation expr p                                             :2_4:Before:
************************* / someIndentation                                                           :2_4:Before:
************************** / myindented: consuming GoDeeper                                          :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

************************ / term p/3:plain p                                                            :2_4:Before:
************************* / pParamText                                                                :2_4:Before:
************************** / pParamText(flat) first line: pKeyValues                                 :2_4:Before:
*************************** / pKeyValuesAka                                                         :2_4:Before:
**************************** / slAKA                                                               :2_4:Before:
***************************** / $*|                                                               :2_4:Before:
****************************** / slAKA base                                                      :2_4:Before:
******************************* / slKeyValues                                                   :2_4:Before:
******************************** / $*|                                                         :2_4:Before:
********************************* / someSL                                                    :2_4:Before:
********************************** / pNumAsText                                              :2_4:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=9:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

******************** / manyIndentation/deeper; calling someIndentation                                     :2_4:Before:
********************* / someIndentation                                                                   :2_4:Before:
********************** / myindented: consuming GoDeeper                                                  :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper or expression

someIndentation> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

**************** / term p/3:plain p                                                                         :2_3:GoDeeper:
***************** / pParamText                                                                             :2_3:GoDeeper:
****************** / pParamText(flat) first line: pKeyValues                                              :2_3:GoDeeper:
******************* / pKeyValuesAka                                                                      :2_3:GoDeeper:
******************** / slAKA                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA base                                                                   :2_3:GoDeeper:
*********************** / slKeyValues                                                                :2_3:GoDeeper:
************************ / $*|                                                                      :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=7:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=7:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=7:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=7:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=7:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=7:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=7:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=9:
expr pParamText> unexpected Before
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=9:
dBoolStructP calling exprP> unexpected Before
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=9:
pAction calling dBoolStructP> unexpected Before
pAction calling dBoolStructP> expecting expression

pDA> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDA> MATCH (CERR): Must
pDA> ERROR:
pDA> offset=9:
pDA> unexpected Before
pDA> expecting expression

********* / pDA                                                                                                   :2_2:Must:
********** / pAction calling dBoolStructP                                                                         :2_3:GoDeeper:
*********** / dBoolStructP calling exprP                                                                         :2_3:GoDeeper:
************ / expr pParamText                                                                                  :2_3:GoDeeper:
************* / expression                                                                                     :2_3:GoDeeper:
************** / labelPrefix                                                                                  :2_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=7:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                       :2_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :2_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :2_3:GoDeeper:
***************** / someIndentation                                                                        :2_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                   :2_4:GoDeeper:
****************** / manyIndentation/leaf?                                                                  :2_4:GoDeeper:
******************* / expression                                                                           :2_4:GoDeeper:
******************** / labelPrefix                                                                        :2_4:GoDeeper:
labelPrefix> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=8:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************** / term p                                                                             :2_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :2_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :2_4:GoDeeper:
*********************** / someIndentation                                                              :2_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :2_4:Before:
************************ / manyIndentation/leaf?                                                       :2_4:Before:
************************* / expression                                                                :2_4:Before:
************************** / labelPrefix                                                             :2_4:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

************************** / term p                                                                  :2_4:Before:
*************************** / term p/notLabelTerm                                                   :2_4:Before:
**************************** / term p/2:someIndentation expr p                                     :2_4:Before:
***************************** / someIndentation                                                   :2_4:Before:
****************************** / myindented: consuming GoDeeper                                  :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

**************************** / term p/3:plain p                                                    :2_4:Before:
***************************** / pParamText                                                        :2_4:Before:
****************************** / pParamText(flat) first line: pKeyValues                         :2_4:Before:
******************************* / pKeyValuesAka                                                 :2_4:Before:
******************************** / slAKA                                                       :2_4:Before:
********************************* / $*|                                                       :2_4:Before:
********************************** / slAKA base                                              :2_4:Before:
*********************************** / slKeyValues                                           :2_4:Before:
************************************ / $*|                                                 :2_4:Before:
************************************* / someSL                                            :2_4:Before:
************************************** / pNumAsText                                      :2_4:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=9:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

************************ / manyIndentation/deeper; calling someIndentation                             :2_4:Before:
************************* / someIndentation                                                           :2_4:Before:
************************** / myindented: consuming GoDeeper                                          :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

********************** / term p/3:plain p                                                               :2_4:GoDeeper:
*********************** / pParamText                                                                   :2_4:GoDeeper:
************************ / pParamText(flat) first line: pKeyValues                                    :2_4:GoDeeper:
************************* / pKeyValuesAka                                                            :2_4:GoDeeper:
************************** / slAKA                                                                  :2_4:GoDeeper:
*************************** / $*|                                                                  :2_4:GoDeeper:
**************************** / slAKA base                                                         :2_4:GoDeeper:
***************************** / slKeyValues                                                      :2_4:GoDeeper:
****************************** / $*|                                                            :2_4:GoDeeper:
******************************* / someSL                                                       :2_4:GoDeeper:
******************************** / pNumAsText                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=8:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=8:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=8:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=8:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                        :2_4:GoDeeper:
******************* / someIndentation                                                                      :2_4:GoDeeper:
******************** / myindented: consuming GoDeeper                                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************** \ myindented: consuming GoDeeper has returned GoDeeper                                :2_4:Before:
******************** / manyIndentation/leaf?                                                               :2_4:Before:
********************* / expression                                                                        :2_4:Before:
********************** / labelPrefix                                                                     :2_4:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

********************** / term p                                                                          :2_4:Before:
*********************** / term p/notLabelTerm                                                           :2_4:Before:
************************ / term p/2:someIndentation expr p                                             :2_4:Before:
************************* / someIndentation                                                           :2_4:Before:
************************** / myindented: consuming GoDeeper                                          :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

************************ / term p/3:plain p                                                            :2_4:Before:
************************* / pParamText                                                                :2_4:Before:
************************** / pParamText(flat) first line: pKeyValues                                 :2_4:Before:
*************************** / pKeyValuesAka                                                         :2_4:Before:
**************************** / slAKA                                                               :2_4:Before:
***************************** / $*|                                                               :2_4:Before:
****************************** / slAKA base                                                      :2_4:Before:
******************************* / slKeyValues                                                   :2_4:Before:
******************************** / $*|                                                         :2_4:Before:
********************************* / someSL                                                    :2_4:Before:
********************************** / pNumAsText                                              :2_4:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=9:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

******************** / manyIndentation/deeper; calling someIndentation                                     :2_4:Before:
********************* / someIndentation                                                                   :2_4:Before:
********************** / myindented: consuming GoDeeper                                                  :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper or expression

someIndentation> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

**************** / term p/3:plain p                                                                         :2_3:GoDeeper:
***************** / pParamText                                                                             :2_3:GoDeeper:
****************** / pParamText(flat) first line: pKeyValues                                              :2_3:GoDeeper:
******************* / pKeyValuesAka                                                                      :2_3:GoDeeper:
******************** / slAKA                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA base                                                                   :2_3:GoDeeper:
*********************** / slKeyValues                                                                :2_3:GoDeeper:
************************ / $*|                                                                      :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=7:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=7:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=7:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=7:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=7:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=7:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=7:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=9:
expr pParamText> unexpected Before
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=9:
dBoolStructP calling exprP> unexpected Before
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=9:
pAction calling dBoolStructP> unexpected Before
pAction calling dBoolStructP> expecting expression

pDA> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDA> MATCH (CERR): Must
pDA> ERROR:
pDA> offset=9:
pDA> unexpected Before
pDA> expecting expression

regulative permutation with deontic-action> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=9:
regulative permutation with deontic-action> unexpected Before
regulative permutation with deontic-action> expecting expression

permutationsReg> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=40:
permutationsReg> unexpected Other "in"
permutationsReg> expecting expression

manyIndentation/leaf?> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=40:
manyIndentation/leaf?> unexpected Other "in"
manyIndentation/leaf?> expecting expression

****** / manyIndentation/deeper; calling someIndentation                                                             :2_2:Must:
******* / someIndentation                                                                                           :2_2:Must:
******** / myindented: consuming GoDeeper                                                                          :2_2:Must:
myindented: consuming GoDeeper> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected Must
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected Must
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "in"
someIndentation> expecting expression

pRegRuleSugary> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRegRuleSugary> MATCH (CERR): Other "You" GoDeeper
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=40:
pRegRuleSugary> unexpected Other "in"
pRegRuleSugary> expecting expression

**** / pRegRuleNormal                                                                                                :2_1:Other "You":
***** / permutationsReg                                                                                             :2_1:Other "You":
****** / regulative permutation with deontic-temporal                                                              :2_1:Other "You":
******* / WHERE                                                                                                   :2_1:Other "You":
WHERE> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Other "You"
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Having

preambleParamText:[Having]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Other "You"
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Other "You":
preambleBoolStructR [Unless]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected Other "You"
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Other "You":
preambleBoolStructR [When,If]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected Other "You"
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting May, Must, or Shant

pDT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected Other "You"
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Other "You":
pActor [Every,Party,TokAll]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=4:
pActor [Every,Party,TokAll]> unexpected Other "You"
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDoAction/Do                                                                                            :2_1:Other "You":
pDoAction/Do> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=4:
pDoAction/Do> unexpected Other "You"
pDoAction/Do> expecting Do

regulative permutation with deontic-temporal> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=4:
regulative permutation with deontic-temporal> unexpected Other "You"
regulative permutation with deontic-temporal> expecting Do, Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

****** / regulative permutation with deontic-action                                                                :2_1:Other "You":
******* / WHERE                                                                                                   :2_1:Other "You":
WHERE> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Other "You"
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Having

preambleParamText:[Having]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Other "You"
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Other "You":
preambleBoolStructR [Unless]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected Other "You"
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Other "You":
preambleBoolStructR [When,If]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected Other "You"
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :2_1:Other "You":
pTemporal/eventually> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=4:
pTemporal/eventually> unexpected Other "You"
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=4:
pTemporal/specifically> unexpected Other "You"
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :2_1:Other "You":
pTemporal/vaguely> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pTemporal/vaguely> MATCH (COK): Other "You"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "You"),[])

******* \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "You")                           :2_2:GoDeeper:
******* / WHERE                                                                                                    :2_2:GoDeeper:
WHERE> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=5:
WHERE> unexpected GoDeeper
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                               :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected GoDeeper
$>|> expecting Having

preambleParamText:[Having]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=5:
preambleParamText:[Having]> unexpected GoDeeper
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                                :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected GoDeeper
$>|> expecting Given

preambleParamText:[Given]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=5:
preambleParamText:[Given]> unexpected GoDeeper
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                 :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected GoDeeper
$>|> expecting Upon

preambleParamText:[Upon]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=5:
preambleParamText:[Upon]> unexpected GoDeeper
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                             :2_2:GoDeeper:
preambleBoolStructR [Unless]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=5:
preambleBoolStructR [Unless]> unexpected GoDeeper
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                            :2_2:GoDeeper:
preambleBoolStructR [When,If]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=5:
preambleBoolStructR [When,If]> unexpected GoDeeper
preambleBoolStructR [When,If]> expecting If or When

******* / pActor [Every,Party,TokAll]                                                                              :2_2:GoDeeper:
pActor [Every,Party,TokAll]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=5:
pActor [Every,Party,TokAll]> unexpected GoDeeper
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDA                                                                                                      :2_2:GoDeeper:
pDA> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=5:
pDA> unexpected GoDeeper
pDA> expecting May, Must, or Shant

regulative permutation with deontic-action> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
regulative permutation with deontic-action> MATCH (CERR): Other "You"
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=5:
regulative permutation with deontic-action> unexpected GoDeeper
regulative permutation with deontic-action> expecting Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

permutationsReg> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=5:
permutationsReg> unexpected GoDeeper
permutationsReg> expecting Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

pRegRuleNormal> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=5:
pRegRuleNormal> unexpected GoDeeper
pRegRuleNormal> expecting Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

pRegRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRegRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRegRule> ERROR:
pRegRule> offset=40:
pRegRule> unexpected Other "in"
pRegRule> expecting expression

*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify PDPC"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify PDPC"                                                                               :2_2:UnDeeper:
|>>/base> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/base> MATCH (COK): Other "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

******* \ |>>/base has returned ("Notify PDPC",0)                                                                    :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

****** \ |>>/recurse has returned ("Notify PDPC",1)                                                                   :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify PDPC"
|>| calling $>>> VALUE: (("Notify PDPC",1),[])

***** \ |>| calling $>> has returned ("Notify PDPC",1)                                                                 :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Other "You":
undeepers> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Other "You":
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                              :2_1:Other "You":
**** / pHornlike/uponLimb                                                                                            :2_1:Other "You":
***** / preambleParamText:[Upon]                                                                                    :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Other "You"
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:Other "You":
***** / preambleParamText:[Given]                                                                                   :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Other "You"
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pTypeDefinition> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected Other "You"
pTypeDefinition> expecting Define, Given, or Upon

*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify PDPC"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify PDPC"                                                                               :2_2:UnDeeper:
|>>/base> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/base> MATCH (COK): Other "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

******* \ |>>/base has returned ("Notify PDPC",0)                                                                    :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

****** \ |>>/recurse has returned ("Notify PDPC",1)                                                                   :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify PDPC"
|>| calling $>>> VALUE: (("Notify PDPC",1),[])

***** \ |>| calling $>> has returned ("Notify PDPC",1)                                                                 :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Other "You":
undeepers> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Other "You":
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                              :2_1:Other "You":
**** / calling myindented pNameParens                                                                                :2_1:Other "You":
***** / manyIndentation/leaf?                                                                                       :2_1:Other "You":
****** / pMultiTermAka                                                                                             :2_1:Other "You":
******* / pAKA                                                                                                    :2_1:Other "You":
******** / slAKA                                                                                                 :2_1:Other "You":
********* / $*|                                                                                                 :2_1:Other "You":
********** / slAKA base                                                                                        :2_1:Other "You":
*********** / slMultiTerm                                                                                     :2_1:Other "You":
************ / someSL                                                                                        :2_1:Other "You":
************* / pNumAsText                                                                                    :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************ \ someSL has returned (["You"],0)                                                                :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*********** \ slMultiTerm has returned (["You"],0)                                                             :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

********** \ slAKA base has returned (["You"],0)                                                                :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

********* \ $*| has returned (["You"],0)                                                                         :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                            :2_2:Must:
*********** / slAKA optional akapart                                                                            :2_2:Must:
************ / |?| optional something                                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / PAKA/akapart                                                                                :2_2:Must:
*************** / $>|                                                                                       :2_2:Must:
**************** / Aka Token                                                                               :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************ \ |?| optional something has returned (Nothing,0)                                                 :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********** \ slAKA optional akapart has returned (Nothing,0)                                                   :2_2:Must:
*********** > |>>/base got Nothing                                                                              :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********** \ |>>/base has returned (Nothing,0)                                                                   :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

********* \ |>>/recurse has returned (Nothing,1)                                                                  :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / slAKA optional typically                                                                            :2_2:Must:
*********** / |?| optional something                                                                            :2_2:Must:
************ / |>>/recurse                                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************ / |>>/base                                                                                        :2_2:Must:
************* / typically                                                                                     :2_2:Must:
************** / $>|                                                                                         :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********** \ |?| optional something has returned (Nothing,0)                                                   :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********** \ slAKA optional typically has returned (Nothing,0)                                                   :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
********* > slAKA: proceeding after base and entityalias are retrieved ...                                        :2_2:Must:
********* > pAKA: entityalias = Nothing                                                                           :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

******** \ slAKA has returned (["You"],1)                                                                          :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pAKA> MATCH (CERR): Other "You" GoDeeper
pAKA> ERROR:
pAKA> offset=6:
pAKA> unexpected Must
pAKA> expecting Aka, GoDeeper, Typically, or UnDeeper

pMultiTermAka> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pMultiTermAka> MATCH (CERR): Other "You" GoDeeper
pMultiTermAka> ERROR:
pMultiTermAka> offset=6:
pMultiTermAka> unexpected Must
pMultiTermAka> expecting Aka, GoDeeper, Typically, or UnDeeper

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, Typically, or UnDeeper

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Other "You":
****** / someIndentation                                                                                           :2_1:Other "You":
******* / myindented: consuming GoDeeper                                                                          :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=6:
calling myindented pNameParens> unexpected Must
calling myindented pNameParens> expecting Aka, GoDeeper, Typically, or UnDeeper

pConstitutiveRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pConstitutiveRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=6:
pConstitutiveRule> unexpected Must
pConstitutiveRule> expecting Aka, GoDeeper, Typically, or UnDeeper

*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>| calling $>>                                                                                              :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify PDPC"
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** > |>>/base got "Notify PDPC"                                                                               :2_2:UnDeeper:
|>>/base> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/base> MATCH (COK): Other "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

******* \ |>>/base has returned ("Notify PDPC",0)                                                                    :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

****** \ |>>/recurse has returned ("Notify PDPC",1)                                                                   :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify PDPC"
|>| calling $>>> VALUE: (("Notify PDPC",1),[])

***** \ |>| calling $>> has returned ("Notify PDPC",1)                                                                 :2_2:UnDeeper:
***** / |>| calling $>>                                                                                                :2_2:UnDeeper:
****** / |>>/recurse                                                                                                  :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                     :2_2:UnDeeper:
******* > |>>/base got Nothing                                                                                       :2_2:UnDeeper:
|>>/base> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****** \ |>>/base has returned (Nothing,0)                                                                            :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

***** \ |>| calling $>> has returned (Nothing,0)                                                                       :2_2:UnDeeper:
***** / undeepers                                                                                                      :2_2:UnDeeper:
****** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                       :2_2:UnDeeper:
****** > sameLine: success!                                                                                        :2_1:Other "You":
undeepers> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

***** \ undeepers has returned ()                                                                                   :2_1:Other "You":
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                              :2_1:Other "You":
**** / pExpect                                                                                                       :2_1:Other "You":
pExpect> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected Other "You"
pExpect> expecting Expect

pScenarioRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pScenarioRule> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected Other "You"
pScenarioRule> expecting Expect or Given

*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>| calling $>>                                                                                            :1_2:GoDeeper:
******* / |>>/recurse                                                                                              :1_2:GoDeeper:
******** / |>>/recurse                                                                                             :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify PDPC"
|>>/recurse> expecting GoDeeper

******** / |>>/base                                                                                                :1_2:Other "Noti:
********* > |>>/base got "Notify PDPC"                                                                             :2_2:UnDeeper:
|>>/base> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/base> MATCH (COK): Other "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

******** \ |>>/base has returned ("Notify PDPC",0)                                                                  :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

******* \ |>>/recurse has returned ("Notify PDPC",1)                                                                 :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify PDPC"
|>| calling $>>> VALUE: (("Notify PDPC",1),[])

****** \ |>| calling $>> has returned ("Notify PDPC",1)                                                               :2_2:UnDeeper:
****** / |>| calling $>>                                                                                              :2_2:UnDeeper:
******* / |>>/recurse                                                                                                :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******* / |>>/base                                                                                                   :2_2:UnDeeper:
******** > |>>/base got Nothing                                                                                     :2_2:UnDeeper:
|>>/base> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******* \ |>>/base has returned (Nothing,0)                                                                          :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

****** \ |>| calling $>> has returned (Nothing,0)                                                                     :2_2:UnDeeper:
****** / undeepers                                                                                                    :2_2:UnDeeper:
******* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :2_2:UnDeeper:
******* > sameLine: success!                                                                                      :2_1:Other "You":
undeepers> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

****** \ undeepers has returned ()                                                                                 :2_1:Other "You":
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

***** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                            :2_1:Other "You":
pSrcRef> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pSrcRef> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pSrcRef> VALUE: ((Just ("\167",2,"Notify PDPC"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Notify PDPC"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Other "You":
**** / pHornlike / permute                                                                                           :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :2_1:Other "You":
****** / preambleParamText:[Upon]                                                                                  :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Other "You"
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/givenLimb                                                                                         :2_1:Other "You":
****** / preambleParamText:[Given]                                                                                 :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Other "You"
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

***** / pHornlike/givenLimb                                                                                         :2_1:Other "You":
****** / preambleParamText:[Given]                                                                                 :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Other "You"
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :2_1:Other "You":
****** / preambleParamText:[Upon]                                                                                  :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Other "You"
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

pHornlike / permute> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=6:
pHornlike / permute> unexpected Must
pHornlike / permute> expecting Aka, Decide, Define, Given, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, Upon, or When

pHornlike> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pHornlike> MATCH (CERR): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pHornlike> ERROR:
pHornlike> offset=6:
pHornlike> unexpected Must
pHornlike> expecting Aka, Decide, Define, Given, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, Upon, or When

*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
$>|> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
$>|> MATCH (COK): RuleMarker 2 "\167"
$>|> VALUE: (RuleMarker 2 "\167",[])

**** \ $>| has returned RuleMarker 2 "\167"                                                                           :1_2:GoDeeper:
**** / |>| calling $>>                                                                                                :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected Other "Notify PDPC"
|>>/recurse> expecting GoDeeper

****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* > |>>/base got "Notify PDPC"                                                                                 :2_2:UnDeeper:
|>>/base> IN: Other "Notify PDPC" UnDeeper Other "You" <…>
|>>/base> MATCH (COK): Other "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

****** \ |>>/base has returned ("Notify PDPC",0)                                                                      :2_2:UnDeeper:
|>>/recurse> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>>/recurse> MATCH (COK): GoDeeper Other "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

***** \ |>>/recurse has returned ("Notify PDPC",1)                                                                     :2_2:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "Notify PDPC" UnDeeper Ot <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "Notify PDPC"
|>| calling $>>> VALUE: (("Notify PDPC",1),[])

**** \ |>| calling $>> has returned ("Notify PDPC",1)                                                                   :2_2:UnDeeper:
**** / |>| calling $>>                                                                                                  :2_2:UnDeeper:
***** / |>>/recurse                                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

***** / |>>/base                                                                                                       :2_2:UnDeeper:
****** > |>>/base got Nothing                                                                                         :2_2:UnDeeper:
|>>/base> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***** \ |>>/base has returned (Nothing,0)                                                                              :2_2:UnDeeper:
|>| calling $>>> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

**** \ |>| calling $>> has returned (Nothing,0)                                                                         :2_2:UnDeeper:
**** / undeepers                                                                                                        :2_2:UnDeeper:
***** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                         :2_2:UnDeeper:
***** > sameLine: success!                                                                                          :2_1:Other "You":
undeepers> IN: UnDeeper Other "You" GoDeeper Must GoDee <…>
undeepers> MATCH (COK): UnDeeper
undeepers> VALUE: ((),[])

**** \ undeepers has returned ()                                                                                     :2_1:Other "You":
pRuleLabel> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

*** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                                :2_1:Other "You":
pRule> IN: RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRule> MATCH (COK): RuleMarker 2 "\167" GoDeeper Other "Noti <…>
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",2,"Notify PDPC"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})},[])

** \ pRule has returned RuleGroup {rlabel = Just ("\167",2,"Notify PDPC"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:Other "You":
** / pRule                                                                                                             :2_1:Other "You":
*** / pRegRule                                                                                                        :2_1:Other "You":
**** / pRuleLabel                                                                                                    :2_1:Other "You":
***** / $>|                                                                                                         :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Other "You"
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pRegRuleSugary                                                                                                :2_1:Other "You":
***** / someDeep                                                                                                    :2_1:Other "You":
****** / someDeep first part calls base directly                                                                   :2_1:Other "You":
someDeep first part calls base directly> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someDeep first part calls base directly> MATCH (COK): Other "You"
someDeep first part calls base directly> VALUE: ("You",[])

****** \ someDeep first part calls base directly has returned "You"                                                 :2_2:GoDeeper:
****** / someDeep second part recurses with someIndentation                                                         :2_2:GoDeeper:
******* / someIndentation                                                                                          :2_2:GoDeeper:
******** / myindented: consuming GoDeeper                                                                         :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented: consuming GoDeeper has returned GoDeeper                                                    :2_2:Must:
******** / manyIndentation/leaf?                                                                                   :2_2:Must:
********* / someDeep                                                                                              :2_2:Must:
********** / someDeep first part calls base directly                                                             :2_2:Must:
someDeep first part calls base directly> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=6:
someDeep first part calls base directly> unexpected Must
someDeep first part calls base directly> expecting Other text

someDeep> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=6:
someDeep> unexpected Must
someDeep> expecting Other text

manyIndentation/leaf?> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Other text

******** / manyIndentation/deeper; calling someIndentation                                                         :2_2:Must:
********* / someIndentation                                                                                       :2_2:Must:
********** / myindented: consuming GoDeeper                                                                      :2_2:Must:
myindented: consuming GoDeeper> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected Must
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected Must
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper or Other text

someDeep second part recurses with someIndentation> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=6:
someDeep second part recurses with someIndentation> unexpected Must
someDeep second part recurses with someIndentation> expecting GoDeeper or Other text

****** > someDeep no luck, returning []                                                                             :2_2:GoDeeper:
someDeep> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someDeep> MATCH (COK): Other "You"
someDeep> VALUE: (["You"],[])

***** \ someDeep has returned ["You"]                                                                                :2_2:GoDeeper:
***** / someIndentation                                                                                              :2_2:GoDeeper:
****** / myindented: consuming GoDeeper                                                                             :2_2:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****** \ myindented: consuming GoDeeper has returned GoDeeper                                                        :2_2:Must:
****** / manyIndentation/leaf?                                                                                       :2_2:Must:
******* / permutationsReg                                                                                           :2_2:Must:
******** / regulative permutation with deontic-temporal                                                            :2_2:Must:
********* / WHERE                                                                                                 :2_2:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected Must
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :2_2:Must:
preambleBoolStructR [Unless]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected Must
preambleBoolStructR [Unless]> expecting Unless

********* / preambleBoolStructR [When,If]                                                                         :2_2:Must:
preambleBoolStructR [When,If]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected Must
preambleBoolStructR [When,If]> expecting If or When

********* / pDT                                                                                                   :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (COK): Must
$>|> VALUE: (DMust,[])

********** \ $>| has returned DMust                                                                               :2_3:GoDeeper:
********** / |>| calling $>>                                                                                      :2_3:GoDeeper:
*********** / |>>/recurse                                                                                        :2_3:GoDeeper:
************ / |>>/recurse                                                                                        :2_4:GoDeeper:
************* / |>>/recurse                                                                                       :2_4:Before:
|>>/recurse> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected Before
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                          :2_4:Before:
************** / pTemporal/eventually                                                                            :2_4:Before:
pTemporal/eventually> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=9:
pTemporal/eventually> unexpected Before
pTemporal/eventually> expecting Eventually

************** / pTemporal/specifically                                                                          :2_4:Before:
*************** / $>|                                                                                           :2_4:Before:
$>|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$>|> MATCH (COK): Before
$>|> VALUE: (Before,[])

*************** \ $>| has returned Before                                                                        :2_5:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:TNumber 3:
|>>/recurse> IN: TNumber 3 GoDeeper Other "days" UnDeeper <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TNumber 3
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                      :2_5:TNumber 3:
***************** > |>>/base got Just 3                                                                          :2_6:GoDeeper:
|>>/base> IN: TNumber 3 GoDeeper Other "days" UnDeeper <…>
|>>/base> MATCH (COK): TNumber 3
|>>/base> VALUE: ((Just 3,0),[])

**************** \ |>>/base has returned (Just 3,0)                                                               :2_6:GoDeeper:
|>>/recurse> IN: GoDeeper TNumber 3 GoDeeper Other "days" <…>
|>>/recurse> MATCH (COK): GoDeeper TNumber 3
|>>/recurse> VALUE: ((Just 3,1),[])

*************** \ |>>/recurse has returned (Just 3,1)                                                              :2_6:GoDeeper:
*************** / |>| calling $>>                                                                                  :2_6:GoDeeper:
**************** / |>>/recurse                                                                                    :2_6:GoDeeper:
***************** / |>>/recurse                                                                                   :2_6:Other "days:
|>>/recurse> IN: Other "days" UnDeeper UnDeeper UnDeeper  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected Other "days"
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                                      :2_6:Other "days:
****************** > |>>/base got "days"                                                                    :3_3:UnDeeper:
|>>/base> IN: Other "days" UnDeeper UnDeeper UnDeeper  <…>
|>>/base> MATCH (COK): Other "days"
|>>/base> VALUE: (("days",0),[])

***************** \ |>>/base has returned ("days",0)                                                         :3_3:UnDeeper:
|>>/recurse> IN: GoDeeper Other "days" UnDeeper UnDeeper  <…>
|>>/recurse> MATCH (COK): GoDeeper Other "days"
|>>/recurse> VALUE: (("days",1),[])

**************** \ |>>/recurse has returned ("days",1)                                                        :3_3:UnDeeper:
|>| calling $>>> IN: GoDeeper Other "days" UnDeeper UnDeeper  <…>
|>| calling $>>> MATCH (COK): GoDeeper Other "days"
|>| calling $>>> VALUE: (("days",1),[])

*************** \ |>| calling $>> has returned ("days",1)                                                      :3_3:UnDeeper:
*************** / undeepers                                                                                    :3_3:UnDeeper:
**************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                     :3_3:UnDeeper:
**************** > sameLine: success!                                                                             :3_5:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper UnDeeper If G <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

*************** \ undeepers has returned ()                                                                        :3_5:UnDeeper:
pTemporal/specifically> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/specifically> MATCH (COK): Before GoDeeper TNumber 3 GoDeeper Other <…>
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 3) "days"),[])

************** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")              :3_5:UnDeeper:
************** > |>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                              :3_5:UnDeeper:
|>>/base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/base> MATCH (COK): Before GoDeeper TNumber 3 GoDeeper Other <…>
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),0),[])

************* \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                   :3_5:UnDeeper:
|>>/recurse> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
|>>/recurse> MATCH (COK): GoDeeper Before GoDeeper TNumber 3 GoDee <…>
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),1),[])

************ \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                  :3_5:UnDeeper:
|>>/recurse> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>>/recurse> MATCH (COK): GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

*********** \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :3_5:UnDeeper:
|>| calling $>>> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>| calling $>>> MATCH (COK): GoDeeper GoDeeper Before GoDeeper TNumbe <…>
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

********** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                  :3_5:UnDeeper:
********** / undeepers                                                                                                  :3_5:UnDeeper:
*********** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                   :3_5:UnDeeper:
*********** > sameLine: success!                                                                                :3_2:If:
undeepers> IN: UnDeeper UnDeeper If GoDeeper GoDeeper O <…>
undeepers> MATCH (COK): UnDeeper UnDeeper
undeepers> VALUE: ((),[])

********** \ undeepers has returned ()                                                                           :3_2:If:
pDT> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDT> MATCH (COK): Must GoDeeper GoDeeper Before GoDeeper T <…>
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 3) "days")),[])

********* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                            :3_2:If:
********* / WHERE                                                                                                 :3_2:If:
WHERE> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected If
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected If
$>|> expecting Having

preambleParamText:[Having]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected If
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected If
$>|> expecting Given

preambleParamText:[Given]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected If
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected If
$>|> expecting Upon

preambleParamText:[Upon]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=18:
preambleParamText:[Upon]> unexpected If
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :3_2:If:
preambleBoolStructR [Unless]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=18:
preambleBoolStructR [Unless]> unexpected If
preambleBoolStructR [Unless]> expecting Unless

********* / preambleBoolStructR [When,If]                                                                         :3_2:If:
********** / pBSR                                                                                                 :3_3:GoDeeper:
*********** / ppp inner                                                                                          :3_3:GoDeeper:
************ / expression                                                                                       :3_3:GoDeeper:
************* / labelPrefix                                                                                    :3_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=19:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************* / term p                                                                                         :3_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :3_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :3_3:GoDeeper:
**************** / someIndentation                                                                          :3_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :3_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :3_4:GoDeeper:
***************** / manyIndentation/leaf?                                                                    :3_4:GoDeeper:
****************** / expression                                                                             :3_4:GoDeeper:
******************* / labelPrefix                                                                          :3_4:GoDeeper:
labelPrefix> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=20:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************* / term p                                                                               :3_4:GoDeeper:
******************** / term p/notLabelTerm                                                                :3_4:GoDeeper:
********************* / term p/2:someIndentation expr p                                                  :3_4:GoDeeper:
********************** / someIndentation                                                                :3_4:GoDeeper:
*********************** / myindented: consuming GoDeeper                                               :3_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :3_4:Other "it i:
*********************** / manyIndentation/leaf?                                                         :3_4:Other "it i:
************************ / expression                                                                  :3_4:Other "it i:
************************* / labelPrefix                                                               :3_4:Other "it i:
labelPrefix> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
labelPrefix> MATCH (COK): Other "it is"
labelPrefix> VALUE: ("it is",[])

************************* \ labelPrefix has returned "it is"                                           :3_5:GoDeeper:
************************* / term p                                                                     :3_5:GoDeeper:
************************** / term p/notLabelTerm                                                      :3_5:GoDeeper:
*************************** / term p/2:someIndentation expr p                                        :3_5:GoDeeper:
**************************** / someIndentation                                                      :3_5:GoDeeper:
***************************** / myindented: consuming GoDeeper                                     :3_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************************** \ myindented: consuming GoDeeper has returned GoDeeper                :3_5:Other "an N:
***************************** / manyIndentation/leaf?                                               :3_5:Other "an N:
****************************** / expression                                                        :3_5:Other "an N:
******************************* / labelPrefix                                                     :3_5:Other "an N:
labelPrefix> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=24:
labelPrefix> unexpected UnDeeper

******************************* / term p                                                          :3_5:Other "an N:
******************************** / term p/notLabelTerm                                           :3_5:Other "an N:
********************************* / term p/2:someIndentation expr p                             :3_5:Other "an N:
********************************** / someIndentation                                           :3_5:Other "an N:
*********************************** / myindented: consuming GoDeeper                          :3_5:Other "an N:
myindented: consuming GoDeeper> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=23:
myindented: consuming GoDeeper> unexpected Other "an NDB"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected Other "an NDB"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected Other "an NDB"
term p/2:someIndentation expr p> expecting GoDeeper

********************************* / term p/3:plain p                                            :3_5:Other "an N:
********************************** / pRelPred                                                  :3_5:Other "an N:
*********************************** / slRelPred                                               :3_5:Other "an N:
************************************ / nested simpleHorn                                     :3_5:Other "an N:
************************************* > |^|                                                 :3_5:Other "an N:
************************************* / $*|                                                 :3_5:Other "an N:
************************************** / slMultiTerm                                       :3_5:Other "an N:
*************************************** / someSL                                          :3_5:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************************************** \ someSL has returned (["an NDB"],0)           :4_3:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************** \ slMultiTerm has returned (["an NDB"],0)        :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                  :4_3:UnDeeper:
************************************* / |^| deeps                                        :4_3:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper UnDeeper
|^| deeps> VALUE: (([(),(),()],-3),[])

************************************* \ |^| deeps has returned ([(),(),()],-3)        :4_2:Unless:
nested simpleHorn> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> MATCH (CERR): Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected Unless
nested simpleHorn> expecting Means or UnDeeper

************************************ / RPConstraint                                          :3_5:Other "an N:
************************************* / $*|                                                 :3_5:Other "an N:
************************************** / slMultiTerm                                       :3_5:Other "an N:
*************************************** / someSL                                          :3_5:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************************************** \ someSL has returned (["an NDB"],0)           :4_3:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************** \ slMultiTerm has returned (["an NDB"],0)        :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                  :4_3:UnDeeper:
************************************* / |>| calling $>>                                  :4_3:UnDeeper:
************************************** / |>>/recurse                                    :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                       :4_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=24:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPConstraint> MATCH (CERR): Other "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=24:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************ / RPBoolStructR                                         :3_5:Other "an N:
************************************* / $*|                                                 :3_5:Other "an N:
************************************** / slMultiTerm                                       :3_5:Other "an N:
*************************************** / someSL                                          :3_5:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

*************************************** \ someSL has returned (["an NDB"],0)           :4_3:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

************************************** \ slMultiTerm has returned (["an NDB"],0)        :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                  :4_3:UnDeeper:
************************************* / |>| calling $>>                                  :4_3:UnDeeper:
************************************** / |>>/recurse                                    :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                       :4_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=24:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPBoolStructR> MATCH (CERR): Other "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=24:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************************************ / RPMT                                                  :3_5:Other "an N:
************************************* / $*|                                                 :3_5:Other "an N:
************************************** / slAKA                                             :3_5:Other "an N:
*************************************** / $*|                                             :3_5:Other "an N:
**************************************** / slAKA base                                    :3_5:Other "an N:
***************************************** / slMultiTerm                                 :3_5:Other "an N:
****************************************** / someSL                                    :3_5:Other "an N:
someSL> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
someSL> MATCH (COK): Other "an NDB"
someSL> VALUE: ((["an NDB"],0),[])

****************************************** \ someSL has returned (["an NDB"],0)     :4_3:UnDeeper:
slMultiTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slMultiTerm> MATCH (COK): Other "an NDB"
slMultiTerm> VALUE: ((["an NDB"],0),[])

***************************************** \ slMultiTerm has returned (["an NDB"],0)  :4_3:UnDeeper:
slAKA base> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA base> MATCH (COK): Other "an NDB"
slAKA base> VALUE: ((["an NDB"],0),[])

**************************************** \ slAKA base has returned (["an NDB"],0)     :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

*************************************** \ $*| has returned (["an NDB"],0)              :4_3:UnDeeper:
*************************************** / |>>/recurse                                  :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************************** / |>>/base                                     :4_3:UnDeeper:
**************************************** / slAKA optional akapart                     :4_3:UnDeeper:
***************************************** / |?| optional something                   :4_3:UnDeeper:
****************************************** / |>>/recurse                            :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                               :4_3:UnDeeper:
******************************************* / PAKA/akapart                         :4_3:UnDeeper:
******************************************** / $>|                                :4_3:UnDeeper:
********************************************* / Aka Token                        :4_3:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=24:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=24:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=24:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :4_3:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :4_3:UnDeeper:
**************************************** > |>>/base got Nothing                       :4_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)            :4_3:UnDeeper:
*************************************** / |>>/recurse                                  :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************************** / |>>/base                                     :4_3:UnDeeper:
**************************************** / slAKA optional typically                   :4_3:UnDeeper:
***************************************** / |?| optional something                   :4_3:UnDeeper:
****************************************** / |>>/recurse                            :4_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                               :4_3:UnDeeper:
******************************************* / typically                            :4_3:UnDeeper:
******************************************** / $>|                                :4_3:UnDeeper:
$>|> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=24:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=24:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :4_3:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional typically has returned (Nothing,0) :4_3:UnDeeper:
**************************************** > |>>/base got Nothing                       :4_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)            :4_3:UnDeeper:
*************************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_3:UnDeeper:
*************************************** > pAKA: entityalias = Nothing                  :4_3:UnDeeper:
slAKA> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slAKA> MATCH (COK): Other "an NDB"
slAKA> VALUE: ((["an NDB"],0),[])

************************************** \ slAKA has returned (["an NDB"],0)              :4_3:UnDeeper:
$*|> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
$*|> MATCH (COK): Other "an NDB"
$*|> VALUE: ((["an NDB"],0),[])

************************************* \ $*| has returned (["an NDB"],0)                  :4_3:UnDeeper:
RPMT> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
RPMT> MATCH (COK): Other "an NDB"
RPMT> VALUE: ((RPMT ["an NDB"],0),[])

************************************ \ RPMT has returned (RPMT ["an NDB"],0)              :4_3:UnDeeper:
slRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
slRelPred> MATCH (COK): Other "an NDB"
slRelPred> VALUE: ((RPMT ["an NDB"],0),[])

*********************************** \ slRelPred has returned (RPMT ["an NDB"],0)           :4_3:UnDeeper:
*********************************** / undeepers                                            :4_3:UnDeeper:
************************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_3:UnDeeper:
************************************ > sameLine: success!                                 :4_3:UnDeeper:
undeepers> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************************** \ undeepers has returned ()                            :4_3:UnDeeper:
pRelPred> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
pRelPred> MATCH (COK): Other "an NDB"
pRelPred> VALUE: (RPMT ["an NDB"],[])

********************************** \ pRelPred has returned RPMT ["an NDB"]                  :4_3:UnDeeper:
term p/3:plain p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/3:plain p> MATCH (COK): Other "an NDB"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

********************************* \ term p/3:plain p has returned MyLeaf (RPMT ["an NDB"])   :4_3:UnDeeper:
term p/notLabelTerm> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): Other "an NDB"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])  :4_3:UnDeeper:
term p> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
term p> MATCH (COK): Other "an NDB"
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

******************************* \ term p has returned MyLeaf (RPMT ["an NDB"])                 :4_3:UnDeeper:
******************************* / binary(Or)                                                   :4_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************************* / binary(And)                                                  :4_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************************* / binary(SetLess)                                              :4_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************************* / binary(SetPlus)                                              :4_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
expression> MATCH (COK): Other "an NDB"
expression> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

****************************** \ expression has returned MyLeaf (RPMT ["an NDB"])               :4_3:UnDeeper:
manyIndentation/leaf?> IN: Other "an NDB" UnDeeper UnDeeper UnDeepe <…>
manyIndentation/leaf?> MATCH (COK): Other "an NDB"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

***************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["an NDB"])      :4_3:UnDeeper:
***************************** / myindented: consuming UnDeeper                                   :4_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper UnDeeper Unless GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***************************** \ myindented: consuming UnDeeper has returned UnDeeper               :4_4:UnDeeper:
someIndentation> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
someIndentation> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
someIndentation> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

**************************** \ someIndentation has returned MyLeaf (RPMT ["an NDB"])                :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

*************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["an NDB"])  :4_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["an NDB"])                :4_4:UnDeeper:
term p> IN: GoDeeper Other "an NDB" UnDeeper UnDeepe <…>
term p> MATCH (COK): GoDeeper Other "an NDB" UnDeeper
term p> VALUE: (MyLeaf (RPMT ["an NDB"]),[])

************************* \ term p has returned MyLeaf (RPMT ["an NDB"])                               :4_4:UnDeeper:
************************* / binary(Or)                                                                 :4_4:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************* / binary(And)                                                                :4_4:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************* / binary(SetLess)                                                            :4_4:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************* / binary(SetPlus)                                                            :4_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
expression> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************************ \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))         :4_4:UnDeeper:
manyIndentation/leaf?> IN: Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> MATCH (COK): Other "it is" GoDeeper Other "an NDB" Un <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*********************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :4_4:UnDeeper:
*********************** / myindented: consuming UnDeeper                                                 :4_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Unless GoDeeper GoDeep <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented: consuming UnDeeper has returned UnDeeper                             :4_5:UnDeeper:
someIndentation> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))          :4_5:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

********************* \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :4_5:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))          :4_5:UnDeeper:
term p> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
term p> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

******************* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                         :4_5:UnDeeper:
******************* / binary(Or)                                                                               :4_5:UnDeeper:
binary(Or)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************* / binary(And)                                                                              :4_5:UnDeeper:
binary(And)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************* / binary(SetLess)                                                                          :4_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************* / binary(SetPlus)                                                                          :4_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
expression> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

****************** \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                       :4_5:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "it is" GoDeeper Other "a <…>
manyIndentation/leaf?> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

***************** \ manyIndentation/leaf? has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))              :4_5:UnDeeper:
***************** / myindented: consuming UnDeeper                                                               :4_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Unless GoDeeper GoDeeper Other  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :4_2:Unless:
someIndentation> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
someIndentation> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

**************** \ someIndentation has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :4_2:Unless:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/2:someIndentation expr p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

*************** \ term p/2:someIndentation expr p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])) :4_2:Unless:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p/notLabelTerm> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************** \ term p/notLabelTerm has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))               :4_2:Unless:
term p> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
term p> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************* \ term p has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                              :4_2:Unless:
************* / binary(Or)                                                                                    :4_2:Unless:
binary(Or)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected Unless
binary(Or)> expecting Or

************* / binary(And)                                                                                   :4_2:Unless:
binary(And)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected Unless
binary(And)> expecting And

************* / binary(SetLess)                                                                               :4_2:Unless:
binary(SetLess)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected Unless
binary(SetLess)> expecting SetLess

************* / binary(SetPlus)                                                                               :4_2:Unless:
binary(SetPlus)> IN: Unless GoDeeper GoDeeper Other "you are  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected Unless
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
expression> VALUE: (MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"])),[])

************ \ expression has returned MyLabel ["it is"] (MyLeaf (RPMT ["an NDB"]))                            :4_2:Unless:
ppp inner> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
ppp inner> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

*********** \ ppp inner has returned Leaf (RPMT ["it is","an NDB"])                                             :4_2:Unless:
pBSR> IN: GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "it is" GoDeeper <…>
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                    :4_2:Unless:
preambleBoolStructR [When,If]> IN: If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> MATCH (COK): If GoDeeper GoDeeper Other "it is" GoDee <…>
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

********* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                        :4_2:Unless:
********* / preambleBoolStructR [When,If]                                                                         :4_2:Unless:
preambleBoolStructR [When,If]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=27:
preambleBoolStructR [When,If]> unexpected Unless
preambleBoolStructR [When,If]> expecting If or When

********* / WHERE                                                                                                 :4_2:Unless:
WHERE> IN: Unless GoDeeper GoDeeper Other "you are  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected Unless
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected Unless
$>|> expecting Having

preambleParamText:[Having]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected Unless
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected Unless
$>|> expecting Given

preambleParamText:[Given]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected Unless
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: Unless GoDeeper GoDeeper Other "you are  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected Unless
$>|> expecting Upon

preambleParamText:[Upon]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected Unless
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :4_2:Unless:
********** / pBSR                                                                                                 :4_3:GoDeeper:
*********** / ppp inner                                                                                          :4_3:GoDeeper:
************ / expression                                                                                       :4_3:GoDeeper:
************* / labelPrefix                                                                                    :4_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "you are a Publi <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=28:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************* / term p                                                                                         :4_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :4_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :4_3:GoDeeper:
**************** / someIndentation                                                                          :4_3:GoDeeper:
***************** / myindented: consuming GoDeeper                                                         :4_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "you are a Publi <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented: consuming GoDeeper has returned GoDeeper                                     :4_4:GoDeeper:
***************** / manyIndentation/leaf?                                                                    :4_4:GoDeeper:
****************** / expression                                                                             :4_4:GoDeeper:
******************* / labelPrefix                                                                          :4_4:GoDeeper:
labelPrefix> IN: GoDeeper Other "you are a Public Agency" <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=29:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************* / term p                                                                               :4_4:GoDeeper:
******************** / term p/notLabelTerm                                                                :4_4:GoDeeper:
********************* / term p/2:someIndentation expr p                                                  :4_4:GoDeeper:
********************** / someIndentation                                                                :4_4:GoDeeper:
*********************** / myindented: consuming GoDeeper                                               :4_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "you are a Public Agency" <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented: consuming GoDeeper has returned GoDeeper                          :4_4:Other "you:
*********************** / manyIndentation/leaf?                                                         :4_4:Other "you:
************************ / expression                                                                  :4_4:Other "you:
************************* / labelPrefix                                                               :4_4:Other "you:
labelPrefix> IN: Other "you are a Public Agency" UnDeeper <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=31:
labelPrefix> unexpected UnDeeper

************************* / term p                                                                    :4_4:Other "you:
************************** / term p/notLabelTerm                                                     :4_4:Other "you:
*************************** / term p/2:someIndentation expr p                                       :4_4:Other "you:
**************************** / someIndentation                                                     :4_4:Other "you:
***************************** / myindented: consuming GoDeeper                                    :4_4:Other "you:
myindented: consuming GoDeeper> IN: Other "you are a Public Agency" UnDeeper <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=30:
myindented: consuming GoDeeper> unexpected Other "you are a Public Agency"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "you are a Public Agency" UnDeeper <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected Other "you are a Public Agency"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=30:
term p/2:someIndentation expr p> unexpected Other "you are a Public Agency"
term p/2:someIndentation expr p> expecting GoDeeper

*************************** / term p/3:plain p                                                      :4_4:Other "you:
**************************** / pRelPred                                                            :4_4:Other "you:
***************************** / slRelPred                                                         :4_4:Other "you:
****************************** / nested simpleHorn                                               :4_4:Other "you:
******************************* > |^|                                                           :4_4:Other "you:
******************************* / $*|                                                           :4_4:Other "you:
******************************** / slMultiTerm                                                 :4_4:Other "you:
********************************* / someSL                                                    :4_4:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)      :6_3:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0)   :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)             :6_3:UnDeeper:
******************************* / |^| deeps                                                    :6_3:UnDeeper:
|^| deeps> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|^| deeps> MATCH (COK): UnDeeper UnDeeper
|^| deeps> VALUE: (([(),()],-2),[])

******************************* \ |^| deeps has returned ([(),()],-2)                       :6_2:Do:
nested simpleHorn> IN: Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> MATCH (CERR): Other "you are a Public Agency" UnDeeper <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=33:
nested simpleHorn> unexpected Do
nested simpleHorn> expecting Means or UnDeeper

****************************** / RPConstraint                                                    :4_4:Other "you:
******************************* / $*|                                                           :4_4:Other "you:
******************************** / slMultiTerm                                                 :4_4:Other "you:
********************************* / someSL                                                    :4_4:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)      :6_3:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0)   :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)             :6_3:UnDeeper:
******************************* / |>| calling $>>                                              :6_3:UnDeeper:
******************************** / |>>/recurse                                                :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                   :6_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=31:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "you are a Public Agency" UnDeeper <…>
RPConstraint> MATCH (CERR): Other "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected UnDeeper
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

****************************** / RPBoolStructR                                                   :4_4:Other "you:
******************************* / $*|                                                           :4_4:Other "you:
******************************** / slMultiTerm                                                 :4_4:Other "you:
********************************* / someSL                                                    :4_4:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)      :6_3:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0)   :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)             :6_3:UnDeeper:
******************************* / |>| calling $>>                                              :6_3:UnDeeper:
******************************** / |>>/recurse                                                :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************** / |>>/base                                                   :6_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=31:
|>| calling $>>> unexpected UnDeeper
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "you are a Public Agency" UnDeeper <…>
RPBoolStructR> MATCH (CERR): Other "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected UnDeeper
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

****************************** / RPMT                                                            :4_4:Other "you:
******************************* / $*|                                                           :4_4:Other "you:
******************************** / slAKA                                                       :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slAKA base                                              :4_4:Other "you:
*********************************** / slMultiTerm                                           :4_4:Other "you:
************************************ / someSL                                              :4_4:Other "you:
someSL> IN: Other "you are a Public Agency" UnDeeper <…>
someSL> MATCH (COK): Other "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

************************************ \ someSL has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
slMultiTerm> IN: Other "you are a Public Agency" UnDeeper <…>
slMultiTerm> MATCH (COK): Other "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
slAKA base> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA base> MATCH (COK): Other "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slAKA base has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
********************************* / |>>/recurse                                              :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************* / |>>/base                                                 :6_3:UnDeeper:
********************************** / slAKA optional akapart                                 :6_3:UnDeeper:
*********************************** / |?| optional something                               :6_3:UnDeeper:
************************************ / |>>/recurse                                        :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                           :6_3:UnDeeper:
************************************* / PAKA/akapart                                     :6_3:UnDeeper:
************************************** / $>|                                            :6_3:UnDeeper:
*************************************** / Aka Token                                    :6_3:UnDeeper:
Aka Token> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=31:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=31:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :6_3:UnDeeper:
slAKA optional akapart> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)        :6_3:UnDeeper:
********************************** > |>>/base got Nothing                                   :6_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                        :6_3:UnDeeper:
********************************* / |>>/recurse                                              :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

********************************* / |>>/base                                                 :6_3:UnDeeper:
********************************** / slAKA optional typically                               :6_3:UnDeeper:
*********************************** / |?| optional something                               :6_3:UnDeeper:
************************************ / |>>/recurse                                        :6_3:UnDeeper:
|>>/recurse> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************ / |>>/base                                           :6_3:UnDeeper:
************************************* / typically                                        :6_3:UnDeeper:
************************************** / $>|                                            :6_3:UnDeeper:
$>|> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=31:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)      :6_3:UnDeeper:
slAKA optional typically> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)      :6_3:UnDeeper:
********************************** > |>>/base got Nothing                                   :6_3:UnDeeper:
|>>/base> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                        :6_3:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :6_3:UnDeeper:
********************************* > pAKA: entityalias = Nothing                              :6_3:UnDeeper:
slAKA> IN: Other "you are a Public Agency" UnDeeper <…>
slAKA> MATCH (COK): Other "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
$*|> IN: Other "you are a Public Agency" UnDeeper <…>
$*|> MATCH (COK): Other "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)             :6_3:UnDeeper:
RPMT> IN: Other "you are a Public Agency" UnDeeper <…>
RPMT> MATCH (COK): Other "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

****************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)         :6_3:UnDeeper:
slRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
slRelPred> MATCH (COK): Other "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

***************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)      :6_3:UnDeeper:
***************************** / undeepers                                                        :6_3:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_3:UnDeeper:
****************************** > sameLine: success!                                             :6_3:UnDeeper:
undeepers> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                        :6_3:UnDeeper:
pRelPred> IN: Other "you are a Public Agency" UnDeeper <…>
pRelPred> MATCH (COK): Other "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

**************************** \ pRelPred has returned RPMT ["you are a Public Agency"]             :6_3:UnDeeper:
term p/3:plain p> IN: Other "you are a Public Agency" UnDeeper <…>
term p/3:plain p> MATCH (COK): Other "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: Other "you are a Public Agency" UnDeeper <…>
term p/notLabelTerm> MATCH (COK): Other "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
term p> IN: Other "you are a Public Agency" UnDeeper <…>
term p> MATCH (COK): Other "you are a Public Agency"
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])            :6_3:UnDeeper:
************************* / binary(Or)                                                               :6_3:UnDeeper:
binary(Or)> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

************************* / binary(And)                                                              :6_3:UnDeeper:
binary(And)> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

************************* / binary(SetLess)                                                          :6_3:UnDeeper:
binary(SetLess)> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

************************* / binary(SetPlus)                                                          :6_3:UnDeeper:
binary(SetPlus)> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "you are a Public Agency" UnDeeper <…>
expression> MATCH (COK): Other "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])          :6_3:UnDeeper:
manyIndentation/leaf?> IN: Other "you are a Public Agency" UnDeeper <…>
manyIndentation/leaf?> MATCH (COK): Other "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
*********************** / myindented: consuming UnDeeper                                               :6_3:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper UnDeeper Do GoDeeper GoDeeper O <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented: consuming UnDeeper has returned UnDeeper                           :6_4:UnDeeper:
someIndentation> IN: GoDeeper Other "you are a Public Agency" <…>
someIndentation> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])           :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_4:UnDeeper:
term p/notLabelTerm> IN: GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])           :6_4:UnDeeper:
term p> IN: GoDeeper Other "you are a Public Agency" <…>
term p> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                          :6_4:UnDeeper:
******************* / binary(Or)                                                                             :6_4:UnDeeper:
binary(Or)> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=32:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************* / binary(And)                                                                            :6_4:UnDeeper:
binary(And)> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=32:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************* / binary(SetLess)                                                                        :6_4:UnDeeper:
binary(SetLess)> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=32:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************* / binary(SetPlus)                                                                        :6_4:UnDeeper:
binary(SetPlus)> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=32:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper Other "you are a Public Agency" <…>
expression> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                        :6_4:UnDeeper:
manyIndentation/leaf?> IN: GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> MATCH (COK): GoDeeper Other "you are a Public Agency" <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])               :6_4:UnDeeper:
***************** / myindented: consuming UnDeeper                                                             :6_4:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Do GoDeeper GoDeeper Other "NOT <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented: consuming UnDeeper has returned UnDeeper                                  :6_2:Do:
someIndentation> IN: GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_2:Do:
term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])    :6_2:Do:
term p/notLabelTerm> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_2:Do:
term p> IN: GoDeeper GoDeeper Other "you are a Publi <…>
term p> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
term p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :6_2:Do:
************* / binary(Or)                                                                                    :6_2:Do:
binary(Or)> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected Do
binary(Or)> expecting Or

************* / binary(And)                                                                                   :6_2:Do:
binary(And)> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected Do
binary(And)> expecting And

************* / binary(SetLess)                                                                               :6_2:Do:
binary(SetLess)> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected Do
binary(SetLess)> expecting SetLess

************* / binary(SetPlus)                                                                               :6_2:Do:
binary(SetPlus)> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected Do
binary(SetPlus)> expecting SetPlus

expression> IN: GoDeeper GoDeeper Other "you are a Publi <…>
expression> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                               :6_2:Do:
ppp inner> IN: GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
ppp inner> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

*********** \ ppp inner has returned Leaf (RPMT ["you are a Public Agency"])                                    :6_2:Do:
pBSR> IN: GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> MATCH (COK): GoDeeper GoDeeper Other "you are a Publi <…>
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                           :6_2:Do:
preambleBoolStructR [Unless]> IN: Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> MATCH (COK): Unless GoDeeper GoDeeper Other "you are  <…>
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

********* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))            :6_2:Do:
********* / preambleBoolStructR [Unless]                                                                          :6_2:Do:
preambleBoolStructR [Unless]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=33:
preambleBoolStructR [Unless]> unexpected Do
preambleBoolStructR [Unless]> expecting Unless

********* / WHERE                                                                                                 :6_2:Do:
WHERE> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=33:
WHERE> unexpected Do
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=33:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=33:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=33:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

********* / WHERE                                                                                                 :6_2:Do:
WHERE> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=33:
WHERE> unexpected Do
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Having

preambleParamText:[Having]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=33:
preambleParamText:[Having]> unexpected Do
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Given

preambleParamText:[Given]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=33:
preambleParamText:[Given]> unexpected Do
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected Do
$>|> expecting Upon

preambleParamText:[Upon]> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=33:
preambleParamText:[Upon]> unexpected Do
preambleParamText:[Upon]> expecting Upon

********* / pDoAction/Do                                                                                          :6_2:Do:
pDoAction/Do> IN: Do GoDeeper GoDeeper Other "NOTIFY" GoDe <…>
pDoAction/Do> MATCH (COK): Do
pDoAction/Do> VALUE: (Do,[])

********* \ pDoAction/Do has returned Do                                                                           :6_3:GoDeeper:
********* / pDoAction/pAction                                                                                      :6_3:GoDeeper:
********** / pAction calling dBoolStructP                                                                         :6_3:GoDeeper:
*********** / dBoolStructP calling exprP                                                                         :6_3:GoDeeper:
************ / expr pParamText                                                                                  :6_3:GoDeeper:
************* / expression                                                                                     :6_3:GoDeeper:
************** / labelPrefix                                                                                  :6_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=34:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                       :6_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :6_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :6_3:GoDeeper:
***************** / someIndentation                                                                        :6_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :6_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                   :6_4:GoDeeper:
****************** / manyIndentation/leaf?                                                                  :6_4:GoDeeper:
******************* / expression                                                                           :6_4:GoDeeper:
******************** / labelPrefix                                                                        :6_4:GoDeeper:
labelPrefix> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=35:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************** / term p                                                                             :6_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :6_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :6_4:GoDeeper:
*********************** / someIndentation                                                              :6_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :6_4:Other "NOTI:
************************ / manyIndentation/leaf?                                                       :6_4:Other "NOTI:
************************* / expression                                                                :6_4:Other "NOTI:
************************** / labelPrefix                                                             :6_4:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

************************** \ labelPrefix has returned "NOTIFY"                                        :6_5:GoDeeper:
************************** / term p                                                                   :6_5:GoDeeper:
*************************** / term p/notLabelTerm                                                    :6_5:GoDeeper:
**************************** / term p/2:someIndentation expr p                                      :6_5:GoDeeper:
***************************** / someIndentation                                                    :6_5:GoDeeper:
****************************** / myindented: consuming GoDeeper                                   :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************************** \ myindented: consuming GoDeeper has returned GoDeeper              :6_5:Other "the:
****************************** / manyIndentation/leaf?                                             :6_5:Other "the:
******************************* / expression                                                      :6_5:Other "the:
******************************** / labelPrefix                                                   :6_5:Other "the:
labelPrefix> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected UnDeeper

******************************** / term p                                                        :6_5:Other "the:
********************************* / term p/notLabelTerm                                         :6_5:Other "the:
********************************** / term p/2:someIndentation expr p                           :6_5:Other "the:
*********************************** / someIndentation                                         :6_5:Other "the:
************************************ / myindented: consuming GoDeeper                        :6_5:Other "the:
myindented: consuming GoDeeper> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=38:
myindented: consuming GoDeeper> unexpected Other "the PDPC"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=38:
someIndentation> unexpected Other "the PDPC"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=38:
term p/2:someIndentation expr p> unexpected Other "the PDPC"
term p/2:someIndentation expr p> expecting GoDeeper

********************************** / term p/3:plain p                                          :6_5:Other "the:
*********************************** / pParamText                                              :6_5:Other "the:
************************************ / pParamText(flat) first line: pKeyValues               :6_5:Other "the:
************************************* / pKeyValuesAka                                       :6_5:Other "the:
************************************** / slAKA                                             :6_5:Other "the:
*************************************** / $*|                                             :6_5:Other "the:
**************************************** / slAKA base                                    :6_5:Other "the:
***************************************** / slKeyValues                                 :6_5:Other "the:
****************************************** / $*|                                       :6_5:Other "the:
******************************************* / someSL                                  :6_5:Other "the:
someSL> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
someSL> MATCH (COK): Other "the PDPC"
someSL> VALUE: ((["the PDPC"],0),[])

******************************************* \ someSL has returned (["the PDPC"],0)     :7_5:UnDeeper:
$*|> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
$*|> MATCH (COK): Other "the PDPC"
$*|> VALUE: ((["the PDPC"],0),[])

****************************************** \ $*| has returned (["the PDPC"],0)          :7_5:UnDeeper:
****************************************** / |>>/recurse                                :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                                   :7_5:UnDeeper:
******************************************* / |?| optional something                   :7_5:UnDeeper:
******************************************** / |>>/recurse                            :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

******************************************** / |>>/base                               :7_5:UnDeeper:
********************************************* / slTypeSig                            :7_5:UnDeeper:
********************************************** / $>|                                :7_5:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=39:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************************* \ |?| optional something has returned (Nothing,0) :7_5:UnDeeper:
******************************************* > |>>/base got Nothing                     :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************************************** \ |>>/base has returned (Nothing,0)          :7_5:UnDeeper:
slKeyValues> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slKeyValues> MATCH (COK): Other "the PDPC"
slKeyValues> VALUE: ((("the PDPC" :| [],Nothing),0),[])

***************************************** \ slKeyValues has returned (("the PDPC" :| [],Nothing),0) :7_5:UnDeeper:
slAKA base> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slAKA base> MATCH (COK): Other "the PDPC"
slAKA base> VALUE: ((("the PDPC" :| [],Nothing),0),[])

**************************************** \ slAKA base has returned (("the PDPC" :| [],Nothing),0) :7_5:UnDeeper:
$*|> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
$*|> MATCH (COK): Other "the PDPC"
$*|> VALUE: ((("the PDPC" :| [],Nothing),0),[])

*************************************** \ $*| has returned (("the PDPC" :| [],Nothing),0)  :7_5:UnDeeper:
*************************************** / |>>/recurse                                      :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************************** / |>>/base                                         :7_5:UnDeeper:
**************************************** / slAKA optional akapart                         :7_5:UnDeeper:
***************************************** / |?| optional something                       :7_5:UnDeeper:
****************************************** / |>>/recurse                                :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                                   :7_5:UnDeeper:
******************************************* / PAKA/akapart                             :7_5:UnDeeper:
******************************************** / $>|                                    :7_5:UnDeeper:
********************************************* / Aka Token                            :7_5:UnDeeper:
Aka Token> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=39:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=39:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :7_5:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional akapart has returned (Nothing,0) :7_5:UnDeeper:
**************************************** > |>>/base got Nothing                           :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)                :7_5:UnDeeper:
*************************************** / |>>/recurse                                      :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*************************************** / |>>/base                                         :7_5:UnDeeper:
**************************************** / slAKA optional typically                       :7_5:UnDeeper:
***************************************** / |?| optional something                       :7_5:UnDeeper:
****************************************** / |>>/recurse                                :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

****************************************** / |>>/base                                   :7_5:UnDeeper:
******************************************* / typically                                :7_5:UnDeeper:
******************************************** / $>|                                    :7_5:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=39:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************************** \ |?| optional something has returned (Nothing,0) :7_5:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************************** \ slAKA optional typically has returned (Nothing,0) :7_5:UnDeeper:
**************************************** > |>>/base got Nothing                           :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************************** \ |>>/base has returned (Nothing,0)                :7_5:UnDeeper:
*************************************** > slAKA: proceeding after base and entityalias are retrieved ... :7_5:UnDeeper:
*************************************** > pAKA: entityalias = Nothing                      :7_5:UnDeeper:
slAKA> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slAKA> MATCH (COK): Other "the PDPC"
slAKA> VALUE: ((("the PDPC" :| [],Nothing),0),[])

************************************** \ slAKA has returned (("the PDPC" :| [],Nothing),0)  :7_5:UnDeeper:
************************************** / undeepers                                          :7_5:UnDeeper:
*************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_5:UnDeeper:
*************************************** > sameLine: success!                               :7_5:UnDeeper:
undeepers> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************************** \ undeepers has returned ()                          :7_5:UnDeeper:
pKeyValuesAka> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pKeyValuesAka> MATCH (COK): Other "the PDPC"
pKeyValuesAka> VALUE: (("the PDPC" :| [],Nothing),[])

************************************* \ pKeyValuesAka has returned ("the PDPC" :| [],Nothing) :7_5:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "the PDPC"
pParamText(flat) first line: pKeyValues> VALUE: (("the PDPC" :| [],Nothing),[])

************************************ \ pParamText(flat) first line: pKeyValues has returned ("the PDPC" :| [],Nothing) :7_5:UnDeeper:
************************************ / pParamText(flat) subsequent lines: sameMany pKeyValues :7_5:UnDeeper:
************************************* / manyIndentation/leaf?                                :7_5:UnDeeper:
************************************** / sameMany                                           :7_5:UnDeeper:
*************************************** / pKeyValuesAka                                    :7_5:UnDeeper:
**************************************** / slAKA                                          :7_5:UnDeeper:
***************************************** / $*|                                          :7_5:UnDeeper:
****************************************** / slAKA base                                 :7_5:UnDeeper:
******************************************* / slKeyValues                              :7_5:UnDeeper:
******************************************** / $*|                                    :7_5:UnDeeper:
********************************************* / someSL                               :7_5:UnDeeper:
********************************************** / pNumAsText                         :7_5:UnDeeper:
pNumAsText> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=39:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=39:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=39:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=39:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************************** \ sameMany has returned []                           :7_5:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************************************* \ manyIndentation/leaf? has returned []                :7_5:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************************************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_5:UnDeeper:
pParamText> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pParamText> MATCH (COK): Other "the PDPC"
pParamText> VALUE: (("the PDPC" :| [],Nothing) :| [],[])

*********************************** \ pParamText has returned ("the PDPC" :| [],Nothing) :| [] :7_5:UnDeeper:
term p/3:plain p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/3:plain p> MATCH (COK): Other "the PDPC"
term p/3:plain p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

********************************** \ term p/3:plain p has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
term p/notLabelTerm> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/notLabelTerm> MATCH (COK): Other "the PDPC"
term p/notLabelTerm> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

********************************* \ term p/notLabelTerm has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
term p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p> MATCH (COK): Other "the PDPC"
term p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

******************************** \ term p has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])  :7_5:UnDeeper:
******************************** / binary(Or)                                                     :7_5:UnDeeper:
binary(Or)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=39:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

******************************** / binary(And)                                                    :7_5:UnDeeper:
binary(And)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=39:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

******************************** / binary(SetLess)                                                :7_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=39:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

******************************** / binary(SetPlus)                                                :7_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=39:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
expression> MATCH (COK): Other "the PDPC"
expression> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

******************************* \ expression has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
manyIndentation/leaf?> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
manyIndentation/leaf?> MATCH (COK): Other "the PDPC"
manyIndentation/leaf?> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

****************************** \ manyIndentation/leaf? has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
****************************** / myindented: consuming UnDeeper                                     :7_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

****************************** \ myindented: consuming UnDeeper has returned UnDeeper            :7_4:Other "in":
someIndentation> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
someIndentation> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
someIndentation> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

***************************** \ someIndentation has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_4:Other "in":
term p/2:someIndentation expr p> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

**************************** \ term p/2:someIndentation expr p has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_4:Other "in":
term p/notLabelTerm> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_4:Other "in":
term p> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

************************** \ term p has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])           :7_4:Other "in":
************************** / binary(Or)                                                              :7_4:Other "in":
binary(Or)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=40:
binary(Or)> unexpected Other "in"
binary(Or)> expecting Or

************************** / binary(And)                                                             :7_4:Other "in":
binary(And)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=40:
binary(And)> unexpected Other "in"
binary(And)> expecting And

************************** / binary(SetLess)                                                         :7_4:Other "in":
binary(SetLess)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=40:
binary(SetLess)> unexpected Other "in"
binary(SetLess)> expecting SetLess

************************** / binary(SetPlus)                                                         :7_4:Other "in":
binary(SetPlus)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=40:
binary(SetPlus)> unexpected Other "in"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "the PDPC" <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])),[])

************************* \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])) :7_4:Other "in":
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "the PDPC" <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])),[])

************************ \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])) :7_4:Other "in":
************************ / myindented: consuming UnDeeper                                              :7_4:Other "in":
myindented: consuming UnDeeper> IN: Other "in" GoDeeper Other "the form and  <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=40:
myindented: consuming UnDeeper> unexpected Other "in"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p/2:someIndentation expr p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "in"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, or UnDeeper

********************** / term p/3:plain p                                                               :6_4:GoDeeper:
*********************** / pParamText                                                                   :6_4:GoDeeper:
************************ / pParamText(flat) first line: pKeyValues                                    :6_4:GoDeeper:
************************* / pKeyValuesAka                                                            :6_4:GoDeeper:
************************** / slAKA                                                                  :6_4:GoDeeper:
*************************** / $*|                                                                  :6_4:GoDeeper:
**************************** / slAKA base                                                         :6_4:GoDeeper:
***************************** / slKeyValues                                                      :6_4:GoDeeper:
****************************** / $*|                                                            :6_4:GoDeeper:
******************************* / someSL                                                       :6_4:GoDeeper:
******************************** / pNumAsText                                                 :6_4:GoDeeper:
pNumAsText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=35:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=35:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=35:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=35:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=35:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=35:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=35:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=40:
term p/notLabelTerm> unexpected Other "in"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, or UnDeeper

term p> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=40:
term p> unexpected Other "in"
term p> expecting And, Or, SetLess, SetPlus, or UnDeeper

expression> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=40:
expression> unexpected Other "in"
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=40:
manyIndentation/leaf?> unexpected Other "in"
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                        :6_4:GoDeeper:
******************* / someIndentation                                                                      :6_4:GoDeeper:
******************** / myindented: consuming GoDeeper                                                     :6_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************** \ myindented: consuming GoDeeper has returned GoDeeper                                :6_4:Other "NOTI:
******************** / manyIndentation/leaf?                                                               :6_4:Other "NOTI:
********************* / expression                                                                        :6_4:Other "NOTI:
********************** / labelPrefix                                                                     :6_4:Other "NOTI:
labelPrefix> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
labelPrefix> MATCH (COK): Other "NOTIFY"
labelPrefix> VALUE: ("NOTIFY",[])

********************** \ labelPrefix has returned "NOTIFY"                                                :6_5:GoDeeper:
********************** / term p                                                                           :6_5:GoDeeper:
*********************** / term p/notLabelTerm                                                            :6_5:GoDeeper:
************************ / term p/2:someIndentation expr p                                              :6_5:GoDeeper:
************************* / someIndentation                                                            :6_5:GoDeeper:
************************** / myindented: consuming GoDeeper                                           :6_5:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************** \ myindented: consuming GoDeeper has returned GoDeeper                      :6_5:Other "the:
************************** / manyIndentation/leaf?                                                     :6_5:Other "the:
*************************** / expression                                                              :6_5:Other "the:
**************************** / labelPrefix                                                           :6_5:Other "the:
labelPrefix> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=39:
labelPrefix> unexpected UnDeeper

**************************** / term p                                                                :6_5:Other "the:
***************************** / term p/notLabelTerm                                                 :6_5:Other "the:
****************************** / term p/2:someIndentation expr p                                   :6_5:Other "the:
******************************* / someIndentation                                                 :6_5:Other "the:
******************************** / myindented: consuming GoDeeper                                :6_5:Other "the:
myindented: consuming GoDeeper> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=38:
myindented: consuming GoDeeper> unexpected Other "the PDPC"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=38:
someIndentation> unexpected Other "the PDPC"
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=38:
term p/2:someIndentation expr p> unexpected Other "the PDPC"
term p/2:someIndentation expr p> expecting GoDeeper

****************************** / term p/3:plain p                                                  :6_5:Other "the:
******************************* / pParamText                                                      :6_5:Other "the:
******************************** / pParamText(flat) first line: pKeyValues                       :6_5:Other "the:
********************************* / pKeyValuesAka                                               :6_5:Other "the:
********************************** / slAKA                                                     :6_5:Other "the:
*********************************** / $*|                                                     :6_5:Other "the:
************************************ / slAKA base                                            :6_5:Other "the:
************************************* / slKeyValues                                         :6_5:Other "the:
************************************** / $*|                                               :6_5:Other "the:
*************************************** / someSL                                          :6_5:Other "the:
someSL> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
someSL> MATCH (COK): Other "the PDPC"
someSL> VALUE: ((["the PDPC"],0),[])

*************************************** \ someSL has returned (["the PDPC"],0)             :7_5:UnDeeper:
$*|> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
$*|> MATCH (COK): Other "the PDPC"
$*|> VALUE: ((["the PDPC"],0),[])

************************************** \ $*| has returned (["the PDPC"],0)                  :7_5:UnDeeper:
************************************** / |>>/recurse                                        :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                           :7_5:UnDeeper:
*************************************** / |?| optional something                           :7_5:UnDeeper:
**************************************** / |>>/recurse                                    :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

**************************************** / |>>/base                                       :7_5:UnDeeper:
***************************************** / slTypeSig                                    :7_5:UnDeeper:
****************************************** / $>|                                        :7_5:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Is or TypeSeparator

slTypeSig> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=39:
slTypeSig> unexpected UnDeeper
slTypeSig> expecting Is or TypeSeparator

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Is or TypeSeparator

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************************** \ |?| optional something has returned (Nothing,0)  :7_5:UnDeeper:
*************************************** > |>>/base got Nothing                             :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************** \ |>>/base has returned (Nothing,0)                  :7_5:UnDeeper:
slKeyValues> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slKeyValues> MATCH (COK): Other "the PDPC"
slKeyValues> VALUE: ((("the PDPC" :| [],Nothing),0),[])

************************************* \ slKeyValues has returned (("the PDPC" :| [],Nothing),0) :7_5:UnDeeper:
slAKA base> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slAKA base> MATCH (COK): Other "the PDPC"
slAKA base> VALUE: ((("the PDPC" :| [],Nothing),0),[])

************************************ \ slAKA base has returned (("the PDPC" :| [],Nothing),0) :7_5:UnDeeper:
$*|> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
$*|> MATCH (COK): Other "the PDPC"
$*|> VALUE: ((("the PDPC" :| [],Nothing),0),[])

*********************************** \ $*| has returned (("the PDPC" :| [],Nothing),0)          :7_5:UnDeeper:
*********************************** / |>>/recurse                                              :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                                 :7_5:UnDeeper:
************************************ / slAKA optional akapart                                 :7_5:UnDeeper:
************************************* / |?| optional something                               :7_5:UnDeeper:
************************************** / |>>/recurse                                        :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                           :7_5:UnDeeper:
*************************************** / PAKA/akapart                                     :7_5:UnDeeper:
**************************************** / $>|                                            :7_5:UnDeeper:
***************************************** / Aka Token                                    :7_5:UnDeeper:
Aka Token> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=39:
Aka Token> unexpected UnDeeper
Aka Token> expecting Aka

$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Aka

PAKA/akapart> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=39:
PAKA/akapart> unexpected UnDeeper
PAKA/akapart> expecting Aka

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Aka

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)      :7_5:UnDeeper:
slAKA optional akapart> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)        :7_5:UnDeeper:
************************************ > |>>/base got Nothing                                   :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                        :7_5:UnDeeper:
*********************************** / |>>/recurse                                              :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

*********************************** / |>>/base                                                 :7_5:UnDeeper:
************************************ / slAKA optional typically                               :7_5:UnDeeper:
************************************* / |?| optional something                               :7_5:UnDeeper:
************************************** / |>>/recurse                                        :7_5:UnDeeper:
|>>/recurse> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected UnDeeper
|>>/recurse> expecting GoDeeper

************************************** / |>>/base                                           :7_5:UnDeeper:
*************************************** / typically                                        :7_5:UnDeeper:
**************************************** / $>|                                            :7_5:UnDeeper:
$>|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected UnDeeper
$>|> expecting Typically

typically> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=39:
typically> unexpected UnDeeper
typically> expecting Typically

|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected UnDeeper
|>>/base> expecting Typically

|?| optional something> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)      :7_5:UnDeeper:
slAKA optional typically> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0)      :7_5:UnDeeper:
************************************ > |>>/base got Nothing                                   :7_5:UnDeeper:
|>>/base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                        :7_5:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :7_5:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                              :7_5:UnDeeper:
slAKA> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
slAKA> MATCH (COK): Other "the PDPC"
slAKA> VALUE: ((("the PDPC" :| [],Nothing),0),[])

********************************** \ slAKA has returned (("the PDPC" :| [],Nothing),0)          :7_5:UnDeeper:
********************************** / undeepers                                                  :7_5:UnDeeper:
*********************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_5:UnDeeper:
*********************************** > sameLine: success!                                       :7_5:UnDeeper:
undeepers> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************************** \ undeepers has returned ()                                  :7_5:UnDeeper:
pKeyValuesAka> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pKeyValuesAka> MATCH (COK): Other "the PDPC"
pKeyValuesAka> VALUE: (("the PDPC" :| [],Nothing),[])

********************************* \ pKeyValuesAka has returned ("the PDPC" :| [],Nothing)        :7_5:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): Other "the PDPC"
pParamText(flat) first line: pKeyValues> VALUE: (("the PDPC" :| [],Nothing),[])

******************************** \ pParamText(flat) first line: pKeyValues has returned ("the PDPC" :| [],Nothing) :7_5:UnDeeper:
******************************** / pParamText(flat) subsequent lines: sameMany pKeyValues         :7_5:UnDeeper:
********************************* / manyIndentation/leaf?                                        :7_5:UnDeeper:
********************************** / sameMany                                                   :7_5:UnDeeper:
*********************************** / pKeyValuesAka                                            :7_5:UnDeeper:
************************************ / slAKA                                                  :7_5:UnDeeper:
************************************* / $*|                                                  :7_5:UnDeeper:
************************************** / slAKA base                                         :7_5:UnDeeper:
*************************************** / slKeyValues                                      :7_5:UnDeeper:
**************************************** / $*|                                            :7_5:UnDeeper:
***************************************** / someSL                                       :7_5:UnDeeper:
****************************************** / pNumAsText                                 :7_5:UnDeeper:
pNumAsText> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=39:
pNumAsText> unexpected UnDeeper
pNumAsText> expecting number

someSL> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=39:
someSL> unexpected UnDeeper
someSL> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slKeyValues> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=39:
slKeyValues> unexpected UnDeeper
slKeyValues> expecting other text or number

slAKA base> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=39:
slAKA base> unexpected UnDeeper
slAKA base> expecting other text or number

$*|> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=39:
$*|> unexpected UnDeeper
$*|> expecting other text or number

slAKA> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=39:
slAKA> unexpected UnDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=39:
pKeyValuesAka> unexpected UnDeeper
pKeyValuesAka> expecting other text or number

sameMany> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

********************************** \ sameMany has returned []                                   :7_5:UnDeeper:
manyIndentation/leaf?> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

********************************* \ manyIndentation/leaf? has returned []                        :7_5:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

******************************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [] :7_5:UnDeeper:
pParamText> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
pParamText> MATCH (COK): Other "the PDPC"
pParamText> VALUE: (("the PDPC" :| [],Nothing) :| [],[])

******************************* \ pParamText has returned ("the PDPC" :| [],Nothing) :| []         :7_5:UnDeeper:
term p/3:plain p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/3:plain p> MATCH (COK): Other "the PDPC"
term p/3:plain p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

****************************** \ term p/3:plain p has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
term p/notLabelTerm> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p/notLabelTerm> MATCH (COK): Other "the PDPC"
term p/notLabelTerm> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
term p> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
term p> MATCH (COK): Other "the PDPC"
term p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

**************************** \ term p has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])          :7_5:UnDeeper:
**************************** / binary(Or)                                                             :7_5:UnDeeper:
binary(Or)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=39:
binary(Or)> unexpected UnDeeper
binary(Or)> expecting Or

**************************** / binary(And)                                                            :7_5:UnDeeper:
binary(And)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=39:
binary(And)> unexpected UnDeeper
binary(And)> expecting And

**************************** / binary(SetLess)                                                        :7_5:UnDeeper:
binary(SetLess)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=39:
binary(SetLess)> unexpected UnDeeper
binary(SetLess)> expecting SetLess

**************************** / binary(SetPlus)                                                        :7_5:UnDeeper:
binary(SetPlus)> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=39:
binary(SetPlus)> unexpected UnDeeper
binary(SetPlus)> expecting SetPlus

expression> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
expression> MATCH (COK): Other "the PDPC"
expression> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

*************************** \ expression has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])        :7_5:UnDeeper:
manyIndentation/leaf?> IN: Other "the PDPC" UnDeeper Other "in" GoD <…>
manyIndentation/leaf?> MATCH (COK): Other "the PDPC"
manyIndentation/leaf?> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

************************** \ manyIndentation/leaf? has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_5:UnDeeper:
************************** / myindented: consuming UnDeeper                                             :7_5:UnDeeper:
myindented: consuming UnDeeper> IN: UnDeeper Other "in" GoDeeper Other "the  <…>
myindented: consuming UnDeeper> MATCH (COK): UnDeeper
myindented: consuming UnDeeper> VALUE: (UnDeeper,[])

************************** \ myindented: consuming UnDeeper has returned UnDeeper                    :7_4:Other "in":
someIndentation> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
someIndentation> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
someIndentation> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

************************* \ someIndentation has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])    :7_4:Other "in":
term p/2:someIndentation expr p> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p/2:someIndentation expr p> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p/2:someIndentation expr p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

************************ \ term p/2:someIndentation expr p has returned MyLeaf (("the PDPC" :| [],Nothing) :| []) :7_4:Other "in":
term p/notLabelTerm> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p/notLabelTerm> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p/notLabelTerm> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

*********************** \ term p/notLabelTerm has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])    :7_4:Other "in":
term p> IN: GoDeeper Other "the PDPC" UnDeeper Other <…>
term p> MATCH (COK): GoDeeper Other "the PDPC" UnDeeper
term p> VALUE: (MyLeaf (("the PDPC" :| [],Nothing) :| []),[])

********************** \ term p has returned MyLeaf (("the PDPC" :| [],Nothing) :| [])                   :7_4:Other "in":
********************** / binary(Or)                                                                      :7_4:Other "in":
binary(Or)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=40:
binary(Or)> unexpected Other "in"
binary(Or)> expecting Or

********************** / binary(And)                                                                     :7_4:Other "in":
binary(And)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=40:
binary(And)> unexpected Other "in"
binary(And)> expecting And

********************** / binary(SetLess)                                                                 :7_4:Other "in":
binary(SetLess)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=40:
binary(SetLess)> unexpected Other "in"
binary(SetLess)> expecting SetLess

********************** / binary(SetPlus)                                                                 :7_4:Other "in":
binary(SetPlus)> IN: Other "in" GoDeeper Other "the form and  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=40:
binary(SetPlus)> unexpected Other "in"
binary(SetPlus)> expecting SetPlus

expression> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
expression> MATCH (COK): Other "NOTIFY" GoDeeper Other "the PDPC" <…>
expression> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])),[])

********************* \ expression has returned MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])) :7_4:Other "in":
manyIndentation/leaf?> IN: Other "NOTIFY" GoDeeper Other "the PDPC" <…>
manyIndentation/leaf?> MATCH (COK): Other "NOTIFY" GoDeeper Other "the PDPC" <…>
manyIndentation/leaf?> VALUE: (MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])),[])

******************** \ manyIndentation/leaf? has returned MyLabel ["NOTIFY"] (MyLeaf (("the PDPC" :| [],Nothing) :| [])) :7_4:Other "in":
******************** / myindented: consuming UnDeeper                                                      :7_4:Other "in":
myindented: consuming UnDeeper> IN: Other "in" GoDeeper Other "the form and  <…>
myindented: consuming UnDeeper> MATCH (EERR): <EMPTY>
myindented: consuming UnDeeper> ERROR:
myindented: consuming UnDeeper> offset=40:
myindented: consuming UnDeeper> unexpected Other "in"
myindented: consuming UnDeeper> expecting UnDeeper

someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> MATCH (CERR): GoDeeper Other "NOTIFY" GoDeeper Other " <…>
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Other "NOTIFY" GoDeeper Other " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=40:
manyIndentation/deeper; calling someIndentation> unexpected Other "in"
manyIndentation/deeper; calling someIndentation> expecting And, Or, SetLess, SetPlus, or UnDeeper

someIndentation> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "in"
someIndentation> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=40:
term p/2:someIndentation expr p> unexpected Other "in"
term p/2:someIndentation expr p> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

**************** / term p/3:plain p                                                                         :6_3:GoDeeper:
***************** / pParamText                                                                             :6_3:GoDeeper:
****************** / pParamText(flat) first line: pKeyValues                                              :6_3:GoDeeper:
******************* / pKeyValuesAka                                                                      :6_3:GoDeeper:
******************** / slAKA                                                                            :6_3:GoDeeper:
********************* / $*|                                                                            :6_3:GoDeeper:
********************** / slAKA base                                                                   :6_3:GoDeeper:
*********************** / slKeyValues                                                                :6_3:GoDeeper:
************************ / $*|                                                                      :6_3:GoDeeper:
************************* / someSL                                                                 :6_3:GoDeeper:
************************** / pNumAsText                                                           :6_3:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=34:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=34:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=34:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=34:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=34:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=34:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=34:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=34:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=34:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=34:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=34:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=40:
term p/notLabelTerm> unexpected Other "in"
term p/notLabelTerm> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

term p> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=40:
term p> unexpected Other "in"
term p> expecting And, Or, SetLess, SetPlus, UnDeeper, or expression

expression> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=40:
expression> unexpected Other "in"
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=40:
expr pParamText> unexpected Other "in"
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=40:
dBoolStructP calling exprP> unexpected Other "in"
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=40:
pAction calling dBoolStructP> unexpected Other "in"
pAction calling dBoolStructP> expecting expression

pDoAction/pAction> IN: GoDeeper GoDeeper Other "NOTIFY" GoDeepe <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=40:
pDoAction/pAction> unexpected Other "in"
pDoAction/pAction> expecting expression

regulative permutation with deontic-temporal> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
regulative permutation with deontic-temporal> MATCH (CERR): Must GoDeeper GoDeeper Before GoDeeper T <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=40:
regulative permutation with deontic-temporal> unexpected Other "in"
regulative permutation with deontic-temporal> expecting expression

******** / regulative permutation with deontic-action                                                              :2_2:Must:
********* / WHERE                                                                                                 :2_2:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected Must
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :2_2:Must:
preambleBoolStructR [Unless]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected Must
preambleBoolStructR [Unless]> expecting Unless

********* / preambleBoolStructR [When,If]                                                                         :2_2:Must:
preambleBoolStructR [When,If]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected Must
preambleBoolStructR [When,If]> expecting If or When

********* / pTemporal/eventually                                                                                  :2_2:Must:
pTemporal/eventually> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=6:
pTemporal/eventually> unexpected Must
pTemporal/eventually> expecting Eventually

********* / pTemporal/specifically                                                                                :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=6:
pTemporal/specifically> unexpected Must
pTemporal/specifically> expecting After, Before, By, or On

********* / pTemporal/vaguely                                                                                     :2_2:Must:
pTemporal/vaguely> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=6:
pTemporal/vaguely> unexpected Must
pTemporal/vaguely> expecting Other text

********* / WHERE                                                                                                 :2_2:Must:
WHERE> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected Must
WHERE> expecting Where

********* / preambleParamText:[Having]                                                                            :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Having

preambleParamText:[Having]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected Must
preambleParamText:[Having]> expecting Having

********* / preambleParamText:[Given]                                                                             :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Given

preambleParamText:[Given]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected Must
preambleParamText:[Given]> expecting Given

********* / preambleParamText:[Upon]                                                                              :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Upon

preambleParamText:[Upon]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected Must
preambleParamText:[Upon]> expecting Upon

********* / preambleBoolStructR [Unless]                                                                          :2_2:Must:
preambleBoolStructR [Unless]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected Must
preambleBoolStructR [Unless]> expecting Unless

********* / preambleBoolStructR [When,If]                                                                         :2_2:Must:
preambleBoolStructR [When,If]> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected Must
preambleBoolStructR [When,If]> expecting If or When

********* / pTemporal/eventually                                                                                  :2_2:Must:
pTemporal/eventually> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=6:
pTemporal/eventually> unexpected Must
pTemporal/eventually> expecting Eventually

********* / pTemporal/specifically                                                                                :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=6:
pTemporal/specifically> unexpected Must
pTemporal/specifically> expecting After, Before, By, or On

********* / pTemporal/vaguely                                                                                     :2_2:Must:
pTemporal/vaguely> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=6:
pTemporal/vaguely> unexpected Must
pTemporal/vaguely> expecting Other text

********* / pDA                                                                                                   :2_2:Must:
********** / pAction calling dBoolStructP                                                                         :2_3:GoDeeper:
*********** / dBoolStructP calling exprP                                                                         :2_3:GoDeeper:
************ / expr pParamText                                                                                  :2_3:GoDeeper:
************* / expression                                                                                     :2_3:GoDeeper:
************** / labelPrefix                                                                                  :2_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=7:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                       :2_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :2_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :2_3:GoDeeper:
***************** / someIndentation                                                                        :2_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                   :2_4:GoDeeper:
****************** / manyIndentation/leaf?                                                                  :2_4:GoDeeper:
******************* / expression                                                                           :2_4:GoDeeper:
******************** / labelPrefix                                                                        :2_4:GoDeeper:
labelPrefix> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=8:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************** / term p                                                                             :2_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :2_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :2_4:GoDeeper:
*********************** / someIndentation                                                              :2_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :2_4:Before:
************************ / manyIndentation/leaf?                                                       :2_4:Before:
************************* / expression                                                                :2_4:Before:
************************** / labelPrefix                                                             :2_4:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

************************** / term p                                                                  :2_4:Before:
*************************** / term p/notLabelTerm                                                   :2_4:Before:
**************************** / term p/2:someIndentation expr p                                     :2_4:Before:
***************************** / someIndentation                                                   :2_4:Before:
****************************** / myindented: consuming GoDeeper                                  :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

**************************** / term p/3:plain p                                                    :2_4:Before:
***************************** / pParamText                                                        :2_4:Before:
****************************** / pParamText(flat) first line: pKeyValues                         :2_4:Before:
******************************* / pKeyValuesAka                                                 :2_4:Before:
******************************** / slAKA                                                       :2_4:Before:
********************************* / $*|                                                       :2_4:Before:
********************************** / slAKA base                                              :2_4:Before:
*********************************** / slKeyValues                                           :2_4:Before:
************************************ / $*|                                                 :2_4:Before:
************************************* / someSL                                            :2_4:Before:
************************************** / pNumAsText                                      :2_4:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=9:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

************************ / manyIndentation/deeper; calling someIndentation                             :2_4:Before:
************************* / someIndentation                                                           :2_4:Before:
************************** / myindented: consuming GoDeeper                                          :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

********************** / term p/3:plain p                                                               :2_4:GoDeeper:
*********************** / pParamText                                                                   :2_4:GoDeeper:
************************ / pParamText(flat) first line: pKeyValues                                    :2_4:GoDeeper:
************************* / pKeyValuesAka                                                            :2_4:GoDeeper:
************************** / slAKA                                                                  :2_4:GoDeeper:
*************************** / $*|                                                                  :2_4:GoDeeper:
**************************** / slAKA base                                                         :2_4:GoDeeper:
***************************** / slKeyValues                                                      :2_4:GoDeeper:
****************************** / $*|                                                            :2_4:GoDeeper:
******************************* / someSL                                                       :2_4:GoDeeper:
******************************** / pNumAsText                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=8:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=8:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=8:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=8:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                        :2_4:GoDeeper:
******************* / someIndentation                                                                      :2_4:GoDeeper:
******************** / myindented: consuming GoDeeper                                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************** \ myindented: consuming GoDeeper has returned GoDeeper                                :2_4:Before:
******************** / manyIndentation/leaf?                                                               :2_4:Before:
********************* / expression                                                                        :2_4:Before:
********************** / labelPrefix                                                                     :2_4:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

********************** / term p                                                                          :2_4:Before:
*********************** / term p/notLabelTerm                                                           :2_4:Before:
************************ / term p/2:someIndentation expr p                                             :2_4:Before:
************************* / someIndentation                                                           :2_4:Before:
************************** / myindented: consuming GoDeeper                                          :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

************************ / term p/3:plain p                                                            :2_4:Before:
************************* / pParamText                                                                :2_4:Before:
************************** / pParamText(flat) first line: pKeyValues                                 :2_4:Before:
*************************** / pKeyValuesAka                                                         :2_4:Before:
**************************** / slAKA                                                               :2_4:Before:
***************************** / $*|                                                               :2_4:Before:
****************************** / slAKA base                                                      :2_4:Before:
******************************* / slKeyValues                                                   :2_4:Before:
******************************** / $*|                                                         :2_4:Before:
********************************* / someSL                                                    :2_4:Before:
********************************** / pNumAsText                                              :2_4:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=9:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

******************** / manyIndentation/deeper; calling someIndentation                                     :2_4:Before:
********************* / someIndentation                                                                   :2_4:Before:
********************** / myindented: consuming GoDeeper                                                  :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper or expression

someIndentation> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

**************** / term p/3:plain p                                                                         :2_3:GoDeeper:
***************** / pParamText                                                                             :2_3:GoDeeper:
****************** / pParamText(flat) first line: pKeyValues                                              :2_3:GoDeeper:
******************* / pKeyValuesAka                                                                      :2_3:GoDeeper:
******************** / slAKA                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA base                                                                   :2_3:GoDeeper:
*********************** / slKeyValues                                                                :2_3:GoDeeper:
************************ / $*|                                                                      :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=7:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=7:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=7:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=7:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=7:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=7:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=7:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=9:
expr pParamText> unexpected Before
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=9:
dBoolStructP calling exprP> unexpected Before
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=9:
pAction calling dBoolStructP> unexpected Before
pAction calling dBoolStructP> expecting expression

pDA> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDA> MATCH (CERR): Must
pDA> ERROR:
pDA> offset=9:
pDA> unexpected Before
pDA> expecting expression

********* / pDA                                                                                                   :2_2:Must:
********** / pAction calling dBoolStructP                                                                         :2_3:GoDeeper:
*********** / dBoolStructP calling exprP                                                                         :2_3:GoDeeper:
************ / expr pParamText                                                                                  :2_3:GoDeeper:
************* / expression                                                                                     :2_3:GoDeeper:
************** / labelPrefix                                                                                  :2_3:GoDeeper:
labelPrefix> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=7:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

************** / term p                                                                                       :2_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :2_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :2_3:GoDeeper:
***************** / someIndentation                                                                        :2_3:GoDeeper:
****************** / myindented: consuming GoDeeper                                                       :2_3:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented: consuming GoDeeper has returned GoDeeper                                   :2_4:GoDeeper:
****************** / manyIndentation/leaf?                                                                  :2_4:GoDeeper:
******************* / expression                                                                           :2_4:GoDeeper:
******************** / labelPrefix                                                                        :2_4:GoDeeper:
labelPrefix> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=8:
labelPrefix> unexpected GoDeeper
labelPrefix> expecting Other text

******************** / term p                                                                             :2_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :2_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :2_4:GoDeeper:
*********************** / someIndentation                                                              :2_4:GoDeeper:
************************ / myindented: consuming GoDeeper                                             :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented: consuming GoDeeper has returned GoDeeper                        :2_4:Before:
************************ / manyIndentation/leaf?                                                       :2_4:Before:
************************* / expression                                                                :2_4:Before:
************************** / labelPrefix                                                             :2_4:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

************************** / term p                                                                  :2_4:Before:
*************************** / term p/notLabelTerm                                                   :2_4:Before:
**************************** / term p/2:someIndentation expr p                                     :2_4:Before:
***************************** / someIndentation                                                   :2_4:Before:
****************************** / myindented: consuming GoDeeper                                  :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

**************************** / term p/3:plain p                                                    :2_4:Before:
***************************** / pParamText                                                        :2_4:Before:
****************************** / pParamText(flat) first line: pKeyValues                         :2_4:Before:
******************************* / pKeyValuesAka                                                 :2_4:Before:
******************************** / slAKA                                                       :2_4:Before:
********************************* / $*|                                                       :2_4:Before:
********************************** / slAKA base                                              :2_4:Before:
*********************************** / slKeyValues                                           :2_4:Before:
************************************ / $*|                                                 :2_4:Before:
************************************* / someSL                                            :2_4:Before:
************************************** / pNumAsText                                      :2_4:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=9:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

************************ / manyIndentation/deeper; calling someIndentation                             :2_4:Before:
************************* / someIndentation                                                           :2_4:Before:
************************** / myindented: consuming GoDeeper                                          :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

********************** / term p/3:plain p                                                               :2_4:GoDeeper:
*********************** / pParamText                                                                   :2_4:GoDeeper:
************************ / pParamText(flat) first line: pKeyValues                                    :2_4:GoDeeper:
************************* / pKeyValuesAka                                                            :2_4:GoDeeper:
************************** / slAKA                                                                  :2_4:GoDeeper:
*************************** / $*|                                                                  :2_4:GoDeeper:
**************************** / slAKA base                                                         :2_4:GoDeeper:
***************************** / slKeyValues                                                      :2_4:GoDeeper:
****************************** / $*|                                                            :2_4:GoDeeper:
******************************* / someSL                                                       :2_4:GoDeeper:
******************************** / pNumAsText                                                 :2_4:GoDeeper:
pNumAsText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=8:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=8:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=8:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=8:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

****************** / manyIndentation/deeper; calling someIndentation                                        :2_4:GoDeeper:
******************* / someIndentation                                                                      :2_4:GoDeeper:
******************** / myindented: consuming GoDeeper                                                     :2_4:GoDeeper:
myindented: consuming GoDeeper> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
myindented: consuming GoDeeper> MATCH (COK): GoDeeper
myindented: consuming GoDeeper> VALUE: (GoDeeper,[])

******************** \ myindented: consuming GoDeeper has returned GoDeeper                                :2_4:Before:
******************** / manyIndentation/leaf?                                                               :2_4:Before:
********************* / expression                                                                        :2_4:Before:
********************** / labelPrefix                                                                     :2_4:Before:
labelPrefix> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
labelPrefix> MATCH (EERR): <EMPTY>
labelPrefix> ERROR:
labelPrefix> offset=9:
labelPrefix> unexpected Before
labelPrefix> expecting Other text

********************** / term p                                                                          :2_4:Before:
*********************** / term p/notLabelTerm                                                           :2_4:Before:
************************ / term p/2:someIndentation expr p                                             :2_4:Before:
************************* / someIndentation                                                           :2_4:Before:
************************** / myindented: consuming GoDeeper                                          :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

term p/2:someIndentation expr p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper

************************ / term p/3:plain p                                                            :2_4:Before:
************************* / pParamText                                                                :2_4:Before:
************************** / pParamText(flat) first line: pKeyValues                                 :2_4:Before:
*************************** / pKeyValuesAka                                                         :2_4:Before:
**************************** / slAKA                                                               :2_4:Before:
***************************** / $*|                                                               :2_4:Before:
****************************** / slAKA base                                                      :2_4:Before:
******************************* / slKeyValues                                                   :2_4:Before:
******************************** / $*|                                                         :2_4:Before:
********************************* / someSL                                                    :2_4:Before:
********************************** / pNumAsText                                              :2_4:Before:
pNumAsText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected Before
pNumAsText> expecting number

someSL> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected Before
someSL> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=9:
slKeyValues> unexpected Before
slKeyValues> expecting other text or number

slAKA base> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected Before
slAKA base> expecting other text or number

$*|> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected Before
$*|> expecting other text or number

slAKA> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected Before
slAKA> expecting other text or number

pKeyValuesAka> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=9:
pKeyValuesAka> unexpected Before
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=9:
pParamText(flat) first line: pKeyValues> unexpected Before
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=9:
pParamText> unexpected Before
pParamText> expecting other text or number

term p/3:plain p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected Before
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or term

term p> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or term

expression> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

manyIndentation/leaf?> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=9:
manyIndentation/leaf?> unexpected Before
manyIndentation/leaf?> expecting expression

******************** / manyIndentation/deeper; calling someIndentation                                     :2_4:Before:
********************* / someIndentation                                                                   :2_4:Before:
********************** / myindented: consuming GoDeeper                                                  :2_4:Before:
myindented: consuming GoDeeper> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=9:
myindented: consuming GoDeeper> unexpected Before
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Before GoDeeper TNumber 3 GoDeeper Other <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

manyIndentation/deeper; calling someIndentation> IN: GoDeeper Before GoDeeper TNumber 3 GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=9:
manyIndentation/deeper; calling someIndentation> unexpected Before
manyIndentation/deeper; calling someIndentation> expecting GoDeeper or expression

someIndentation> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected Before
someIndentation> expecting GoDeeper or expression

term p/2:someIndentation expr p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/2:someIndentation expr p> MATCH (CERR): GoDeeper
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected Before
term p/2:someIndentation expr p> expecting GoDeeper or expression

**************** / term p/3:plain p                                                                         :2_3:GoDeeper:
***************** / pParamText                                                                             :2_3:GoDeeper:
****************** / pParamText(flat) first line: pKeyValues                                              :2_3:GoDeeper:
******************* / pKeyValuesAka                                                                      :2_3:GoDeeper:
******************** / slAKA                                                                            :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / slAKA base                                                                   :2_3:GoDeeper:
*********************** / slKeyValues                                                                :2_3:GoDeeper:
************************ / $*|                                                                      :2_3:GoDeeper:
************************* / someSL                                                                 :2_3:GoDeeper:
************************** / pNumAsText                                                           :2_3:GoDeeper:
pNumAsText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected GoDeeper
pNumAsText> expecting number

someSL> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected GoDeeper
someSL> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=7:
slKeyValues> unexpected GoDeeper
slKeyValues> expecting other text or number

slAKA base> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=7:
slAKA base> unexpected GoDeeper
slAKA base> expecting other text or number

$*|> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected GoDeeper
$*|> expecting other text or number

slAKA> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=7:
slAKA> unexpected GoDeeper
slAKA> expecting other text or number

pKeyValuesAka> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=7:
pKeyValuesAka> unexpected GoDeeper
pKeyValuesAka> expecting other text or number

pParamText(flat) first line: pKeyValues> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=7:
pParamText(flat) first line: pKeyValues> unexpected GoDeeper
pParamText(flat) first line: pKeyValues> expecting other text or number

pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=7:
pParamText> unexpected GoDeeper
pParamText> expecting other text or number

term p/3:plain p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=7:
term p/3:plain p> unexpected GoDeeper
term p/3:plain p> expecting other text or number

term p/notLabelTerm> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected Before
term p/notLabelTerm> expecting GoDeeper or expression

term p> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
term p> MATCH (EERR): <EMPTY>
term p> ERROR:
term p> offset=9:
term p> unexpected Before
term p> expecting GoDeeper or expression

expression> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected Before
expression> expecting expression

expr pParamText> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
expr pParamText> MATCH (EERR): <EMPTY>
expr pParamText> ERROR:
expr pParamText> offset=9:
expr pParamText> unexpected Before
expr pParamText> expecting expression

dBoolStructP calling exprP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
dBoolStructP calling exprP> MATCH (EERR): <EMPTY>
dBoolStructP calling exprP> ERROR:
dBoolStructP calling exprP> offset=9:
dBoolStructP calling exprP> unexpected Before
dBoolStructP calling exprP> expecting expression

pAction calling dBoolStructP> IN: GoDeeper GoDeeper Before GoDeeper TNumbe <…>
pAction calling dBoolStructP> MATCH (EERR): <EMPTY>
pAction calling dBoolStructP> ERROR:
pAction calling dBoolStructP> offset=9:
pAction calling dBoolStructP> unexpected Before
pAction calling dBoolStructP> expecting expression

pDA> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pDA> MATCH (CERR): Must
pDA> ERROR:
pDA> offset=9:
pDA> unexpected Before
pDA> expecting expression

regulative permutation with deontic-action> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=9:
regulative permutation with deontic-action> unexpected Before
regulative permutation with deontic-action> expecting expression

permutationsReg> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=40:
permutationsReg> unexpected Other "in"
permutationsReg> expecting expression

manyIndentation/leaf?> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=40:
manyIndentation/leaf?> unexpected Other "in"
manyIndentation/leaf?> expecting expression

****** / manyIndentation/deeper; calling someIndentation                                                             :2_2:Must:
******* / someIndentation                                                                                           :2_2:Must:
******** / myindented: consuming GoDeeper                                                                          :2_2:Must:
myindented: consuming GoDeeper> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=6:
myindented: consuming GoDeeper> unexpected Must
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected Must
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected Must
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

someIndentation> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
someIndentation> MATCH (CERR): GoDeeper
someIndentation> ERROR:
someIndentation> offset=40:
someIndentation> unexpected Other "in"
someIndentation> expecting expression

pRegRuleSugary> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRegRuleSugary> MATCH (CERR): Other "You" GoDeeper
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=40:
pRegRuleSugary> unexpected Other "in"
pRegRuleSugary> expecting expression

**** / pRegRuleNormal                                                                                                :2_1:Other "You":
***** / permutationsReg                                                                                             :2_1:Other "You":
****** / regulative permutation with deontic-temporal                                                              :2_1:Other "You":
******* / WHERE                                                                                                   :2_1:Other "You":
WHERE> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Other "You"
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Having

preambleParamText:[Having]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Other "You"
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Other "You":
preambleBoolStructR [Unless]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected Other "You"
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Other "You":
preambleBoolStructR [When,If]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected Other "You"
preambleBoolStructR [When,If]> expecting If or When

******* / pDT                                                                                                     :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting May, Must, or Shant

pDT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected Other "You"
pDT> expecting May, Must, or Shant

******* / pActor [Every,Party,TokAll]                                                                             :2_1:Other "You":
pActor [Every,Party,TokAll]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=4:
pActor [Every,Party,TokAll]> unexpected Other "You"
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDoAction/Do                                                                                            :2_1:Other "You":
pDoAction/Do> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=4:
pDoAction/Do> unexpected Other "You"
pDoAction/Do> expecting Do

regulative permutation with deontic-temporal> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=4:
regulative permutation with deontic-temporal> unexpected Other "You"
regulative permutation with deontic-temporal> expecting Do, Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

****** / regulative permutation with deontic-action                                                                :2_1:Other "You":
******* / WHERE                                                                                                   :2_1:Other "You":
WHERE> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected Other "You"
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                              :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Having

preambleParamText:[Having]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected Other "You"
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                               :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                            :2_1:Other "You":
preambleBoolStructR [Unless]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected Other "You"
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                           :2_1:Other "You":
preambleBoolStructR [When,If]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected Other "You"
preambleBoolStructR [When,If]> expecting If or When

******* / pTemporal/eventually                                                                                    :2_1:Other "You":
pTemporal/eventually> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=4:
pTemporal/eventually> unexpected Other "You"
pTemporal/eventually> expecting Eventually

******* / pTemporal/specifically                                                                                  :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting After, Before, By, or On

pTemporal/specifically> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=4:
pTemporal/specifically> unexpected Other "You"
pTemporal/specifically> expecting After, Before, By, or On

******* / pTemporal/vaguely                                                                                       :2_1:Other "You":
pTemporal/vaguely> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pTemporal/vaguely> MATCH (COK): Other "You"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "You"),[])

******* \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "You")                           :2_2:GoDeeper:
******* / WHERE                                                                                                    :2_2:GoDeeper:
WHERE> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=5:
WHERE> unexpected GoDeeper
WHERE> expecting Where

******* / preambleParamText:[Having]                                                                               :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected GoDeeper
$>|> expecting Having

preambleParamText:[Having]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=5:
preambleParamText:[Having]> unexpected GoDeeper
preambleParamText:[Having]> expecting Having

******* / preambleParamText:[Given]                                                                                :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected GoDeeper
$>|> expecting Given

preambleParamText:[Given]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=5:
preambleParamText:[Given]> unexpected GoDeeper
preambleParamText:[Given]> expecting Given

******* / preambleParamText:[Upon]                                                                                 :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected GoDeeper
$>|> expecting Upon

preambleParamText:[Upon]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=5:
preambleParamText:[Upon]> unexpected GoDeeper
preambleParamText:[Upon]> expecting Upon

******* / preambleBoolStructR [Unless]                                                                             :2_2:GoDeeper:
preambleBoolStructR [Unless]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=5:
preambleBoolStructR [Unless]> unexpected GoDeeper
preambleBoolStructR [Unless]> expecting Unless

******* / preambleBoolStructR [When,If]                                                                            :2_2:GoDeeper:
preambleBoolStructR [When,If]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=5:
preambleBoolStructR [When,If]> unexpected GoDeeper
preambleBoolStructR [When,If]> expecting If or When

******* / pActor [Every,Party,TokAll]                                                                              :2_2:GoDeeper:
pActor [Every,Party,TokAll]> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
pActor [Every,Party,TokAll]> MATCH (EERR): <EMPTY>
pActor [Every,Party,TokAll]> ERROR:
pActor [Every,Party,TokAll]> offset=5:
pActor [Every,Party,TokAll]> unexpected GoDeeper
pActor [Every,Party,TokAll]> expecting Every, Party, or TokAll

******* / pDA                                                                                                      :2_2:GoDeeper:
pDA> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=5:
pDA> unexpected GoDeeper
pDA> expecting May, Must, or Shant

regulative permutation with deontic-action> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
regulative permutation with deontic-action> MATCH (CERR): Other "You"
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=5:
regulative permutation with deontic-action> unexpected GoDeeper
regulative permutation with deontic-action> expecting Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

permutationsReg> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=5:
permutationsReg> unexpected GoDeeper
permutationsReg> expecting Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

pRegRuleNormal> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=5:
pRegRuleNormal> unexpected GoDeeper
pRegRuleNormal> expecting Every, Given, Having, If, May, Must, Party, Shant, TokAll, Unless, Upon, When, or Where

pRegRule> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=40:
pRegRule> unexpected Other "in"
pRegRule> expecting RuleMarker 1 "\167" or expression

*** / pTypeDefinition                                                                                                 :2_1:Other "You":
**** / pRuleLabel                                                                                                    :2_1:Other "You":
***** / $>|                                                                                                         :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Other "You"
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pHornlike/uponLimb                                                                                            :2_1:Other "You":
***** / preambleParamText:[Upon]                                                                                    :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Other "You"
pHornlike/uponLimb> expecting Upon

**** / pHornlike/givenLimb                                                                                           :2_1:Other "You":
***** / preambleParamText:[Given]                                                                                   :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Other "You"
pHornlike/givenLimb> expecting Given

pTypeDefinition> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected Other "You"
pTypeDefinition> expecting Define, Given, RuleMarker 1 "\167", or Upon

*** / pConstitutiveRule                                                                                               :2_1:Other "You":
**** / pRuleLabel                                                                                                    :2_1:Other "You":
***** / $>|                                                                                                         :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Other "You"
pRuleLabel> expecting RuleMarker 1 "\167"

**** / calling myindented pNameParens                                                                                :2_1:Other "You":
***** / manyIndentation/leaf?                                                                                       :2_1:Other "You":
****** / pMultiTermAka                                                                                             :2_1:Other "You":
******* / pAKA                                                                                                    :2_1:Other "You":
******** / slAKA                                                                                                 :2_1:Other "You":
********* / $*|                                                                                                 :2_1:Other "You":
********** / slAKA base                                                                                        :2_1:Other "You":
*********** / slMultiTerm                                                                                     :2_1:Other "You":
************ / someSL                                                                                        :2_1:Other "You":
************* / pNumAsText                                                                                    :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************ \ someSL has returned (["You"],0)                                                                :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*********** \ slMultiTerm has returned (["You"],0)                                                             :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

********** \ slAKA base has returned (["You"],0)                                                                :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

********* \ $*| has returned (["You"],0)                                                                         :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********** / |>>/base                                                                                            :2_2:Must:
*********** / slAKA optional akapart                                                                            :2_2:Must:
************ / |?| optional something                                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / PAKA/akapart                                                                                :2_2:Must:
*************** / $>|                                                                                       :2_2:Must:
**************** / Aka Token                                                                               :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************ \ |?| optional something has returned (Nothing,0)                                                 :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********** \ slAKA optional akapart has returned (Nothing,0)                                                   :2_2:Must:
*********** > |>>/base got Nothing                                                                              :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********** \ |>>/base has returned (Nothing,0)                                                                   :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

********* \ |>>/recurse has returned (Nothing,1)                                                                  :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / slAKA optional typically                                                                            :2_2:Must:
*********** / |?| optional something                                                                            :2_2:Must:
************ / |>>/recurse                                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************ / |>>/base                                                                                        :2_2:Must:
************* / typically                                                                                     :2_2:Must:
************** / $>|                                                                                         :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********** \ |?| optional something has returned (Nothing,0)                                                   :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********** \ slAKA optional typically has returned (Nothing,0)                                                   :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
********* > slAKA: proceeding after base and entityalias are retrieved ...                                        :2_2:Must:
********* > pAKA: entityalias = Nothing                                                                           :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

******** \ slAKA has returned (["You"],1)                                                                          :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pAKA> MATCH (CERR): Other "You" GoDeeper
pAKA> ERROR:
pAKA> offset=6:
pAKA> unexpected Must
pAKA> expecting Aka, GoDeeper, Typically, or UnDeeper

pMultiTermAka> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pMultiTermAka> MATCH (CERR): Other "You" GoDeeper
pMultiTermAka> ERROR:
pMultiTermAka> offset=6:
pMultiTermAka> unexpected Must
pMultiTermAka> expecting Aka, GoDeeper, Typically, or UnDeeper

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, Typically, or UnDeeper

***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Other "You":
****** / someIndentation                                                                                           :2_1:Other "You":
******* / myindented: consuming GoDeeper                                                                          :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

calling myindented pNameParens> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=6:
calling myindented pNameParens> unexpected Must
calling myindented pNameParens> expecting Aka, GoDeeper, Typically, or UnDeeper

pConstitutiveRule> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=6:
pConstitutiveRule> unexpected Must
pConstitutiveRule> expecting Aka, GoDeeper, RuleMarker 1 "\167", Typically, or UnDeeper

*** / pScenarioRule                                                                                                   :2_1:Other "You":
**** / pRuleLabel                                                                                                    :2_1:Other "You":
***** / $>|                                                                                                         :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Other "You"
pRuleLabel> expecting RuleMarker 1 "\167"

**** / pExpect                                                                                                       :2_1:Other "You":
pExpect> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pExpect> MATCH (EERR): <EMPTY>
pExpect> ERROR:
pExpect> offset=4:
pExpect> unexpected Other "You"
pExpect> expecting Expect

pScenarioRule> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected Other "You"
pScenarioRule> expecting Expect, Given, or RuleMarker 1 "\167"

*** / pHornlike                                                                                                       :2_1:Other "You":
**** / pSrcRef                                                                                                       :2_1:Other "You":
***** / pRuleLabel                                                                                                  :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Other "You"
pRuleLabel> expecting RuleMarker 1 "\167"

pSrcRef> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Other "You":
**** / pHornlike / permute                                                                                           :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :2_1:Other "You":
****** / preambleParamText:[Upon]                                                                                  :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Other "You"
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/givenLimb                                                                                         :2_1:Other "You":
****** / preambleParamText:[Given]                                                                                 :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Other "You"
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

***** / pHornlike/givenLimb                                                                                         :2_1:Other "You":
****** / preambleParamText:[Given]                                                                                 :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Given

preambleParamText:[Given]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected Other "You"
preambleParamText:[Given]> expecting Given

pHornlike/givenLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected Other "You"
pHornlike/givenLimb> expecting Given

***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/uponLimb                                                                                          :2_1:Other "You":
****** / preambleParamText:[Upon]                                                                                  :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Upon

preambleParamText:[Upon]> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected Other "You"
preambleParamText:[Upon]> expecting Upon

pHornlike/uponLimb> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected Other "You"
pHornlike/uponLimb> expecting Upon

***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected Other "You"
whenMeansIf> expecting If, Means, or When

****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected Other "You"
Otherwise> expecting Otherwise

whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected Other "You"
whenCase> expecting If, Means, Otherwise, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting Decide or Define

pHornlike/ambitious> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected Other "You"
pHornlike/ambitious> expecting Decide or Define

***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

pRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred> MATCH (CERR): Other "You" GoDeeper
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected Must
pRelPred> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndented> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndented> MATCH (CERR): Other "You" GoDeeper
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected Must
optIndented> expecting Aka, GoDeeper, Typically, or UnDeeper

optIndentedTuple> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
optIndentedTuple> MATCH (CERR): Other "You" GoDeeper
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected Must
optIndentedTuple> expecting Aka, GoDeeper, Typically, or UnDeeper

pRelPred optIndentedTuple whenCase> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): Other "You" GoDeeper
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected Must
pRelPred optIndentedTuple whenCase> expecting Aka, GoDeeper, Typically, or UnDeeper

relPredNextlineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredNextlineWhen> MATCH (CERR): Other "You" GoDeeper
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected Must
relPredNextlineWhen> expecting Aka, GoDeeper, Typically, or UnDeeper

******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|^| deeps> MATCH (COK): GoDeeper
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
nested simpleHorn> MATCH (CERR): Other "You" GoDeeper
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected Must
nested simpleHorn> expecting GoDeeper or Means

********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPConstraint> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPConstraint> MATCH (CERR): Other "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected Must
RPConstraint> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (CERR): GoDeeper
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected GoDeeper
|>>/base> expecting Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

|>| calling $>>> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected Must
|>| calling $>>> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

RPBoolStructR> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPBoolStructR> MATCH (CERR): Other "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected Must
RPBoolStructR> expecting GoDeeper, Is, TokEQ, TokGT, TokGTE, TokIn, TokLT, TokLTE, or TokNotIn

********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected Must
pNumAsText> expecting number

someSL> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someSL> MATCH (COK): Other "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slMultiTerm> MATCH (COK): Other "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA base> MATCH (COK): Other "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected Must
Aka Token> expecting Aka

$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Aka

PAKA/akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected Must
PAKA/akapart> expecting Aka

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Aka

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: GoDeeper Must GoDeeper GoDeeper Before G <…>
|>>/recurse> MATCH (COK): GoDeeper
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected Must
$>|> expecting Typically

typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected Must
typically> expecting Typically

|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected Must
|>>/base> expecting Typically

|?| optional something> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slAKA> MATCH (COK): Other "You" GoDeeper
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
RPMT> MATCH (COK): Other "You" GoDeeper
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
slRelPred> MATCH (COK): Other "You" GoDeeper
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$*|> MATCH (COK): Other "You" GoDeeper
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected Must
|>>/recurse> expecting GoDeeper

********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected Must
whenMeansIf> expecting If, Means, or When

************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected Must
Otherwise> expecting Otherwise

whenCase> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected Must
whenCase> expecting If, Means, Otherwise, or When

optional whenCase -- but we should still consume GoDeepers before giving up> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: Must GoDeeper GoDeeper Before GoDeeper T <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected Must
undeepers> expecting UnDeeper

relPredSamelineWhen> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
relPredSamelineWhen> MATCH (CERR): Other "You" GoDeeper
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected Must
relPredSamelineWhen> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

manyIndentation/leaf?> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected Must
manyIndentation/leaf?> expecting Aka, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented: consuming GoDeeper                                                                        :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected Other "You"
someIndentation> expecting GoDeeper

manyIndentation/deeper; calling someIndentation> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected Other "You"
manyIndentation/deeper; calling someIndentation> expecting GoDeeper

pHornlike/someStructure> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected Must
pHornlike/someStructure> expecting Aka, Decide, Define, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, or When

pHornlike / permute> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=6:
pHornlike / permute> unexpected Must
pHornlike / permute> expecting Aka, Decide, Define, Given, GoDeeper, If, Means, Otherwise, Typically, UnDeeper, Upon, or When

pHornlike> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=6:
pHornlike> unexpected Must
pHornlike> expecting Aka, Decide, Define, Given, GoDeeper, If, Means, Otherwise, RuleMarker 1 "\167", Typically, UnDeeper, Upon, or When

*** / pRuleLabel                                                                                                      :2_1:Other "You":
**** / $>|                                                                                                           :2_1:Other "You":
$>|> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected Other "You"
$>|> expecting RuleMarker 1 "\167"

pRuleLabel> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected Other "You"
pRuleLabel> expecting RuleMarker 1 "\167"

*** / pRule: unwrapping indentation and recursing                                                                     :2_1:Other "You":
**** / myindented: consuming GoDeeper                                                                                :2_1:Other "You":
myindented: consuming GoDeeper> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
myindented: consuming GoDeeper> MATCH (EERR): <EMPTY>
myindented: consuming GoDeeper> ERROR:
myindented: consuming GoDeeper> offset=4:
myindented: consuming GoDeeper> unexpected Other "You"
myindented: consuming GoDeeper> expecting GoDeeper

pRule: unwrapping indentation and recursing> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=4:
pRule: unwrapping indentation and recursing> unexpected Other "You"
pRule: unwrapping indentation and recursing> expecting GoDeeper

pRule> IN: Other "You" GoDeeper Must GoDeeper GoDee <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=40:
pRule> unexpected Other "in"
pRule> expecting EOL or regulative rule


PDPA
  pdpadbno-5 FAILED [1]

Failures:

  test/Spec.hs:124:3: 
  1) PDPA pdpadbno-5
       expected: [[Regulative {subj = Leaf (("You" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Just (All Nothing [Leaf (RPMT ["it is","an NDB"]),Not (Leaf (RPMT ["you are a Public Agency"]))]), deontic = DMust, action = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 3) "days"), hence = Just (Regulative {subj = Leaf (("the PDPC" :| [],Nothing) :| []), keyword = Party, who = Nothing, cond = Nothing, deontic = DMay, action = Leaf (("NOTIFY" :| ["you"],Nothing) :| [("with" :| ["a list of individuals to exclude from notification"],Nothing)]), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []}), lest = Nothing, rlabel = Just ("\167",2,"Notify PDPC"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["the PDPC Exclusion List"], detail = ["with","a list of individuals to exclude from notification"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})}]]
       but parsing failed with error:
       2:1:
       unexpected Other "You"
       expecting end of input
       §§                                                           Notify
       ✳ You                                                        MUST                                                                                                                      WITHIN                                                       3                                                            days                                                                                                                                                                                                                                                                                                            
       TRUE                                                         IF                                                           TRUE                                                         it is                                                        an NDB                                                                                                                                                                                                                                                                                                                                                                       
                                                                    UNLESS                                                       FALSE                                                        you are a Public Agency                                                                                                                                                                                                                                                                                                                                                                                                                   

                                                                    ➔                                                                                                                         NOTIFY                                                       the PDPC                                                                                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                              in                                                           the form and manner specified at www.pdpc.gov.sg                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                              with                                                         a Notification Message                                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                              and                                                                                                                                                                                    a list of individuals for whom notification waiver is sought                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                                                                    HENCE                                                                                                                     the PDPC                                                     MAY                                                                                                                       NOTIFY                                                       you                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                                                     with                                                         a list of individuals to exclude from notification           AKA                                                          the PDPC Exclusion List                                     
       

  To rerun use: --match "/PDPA/pdpadbno-5/"

Randomized with seed 756100674

Finished in 0.1336 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

